


C1/0000:	48         	PHA
C1/0001:	7B         	TDC
C1/0002:	68         	PLA
C1/0003:	0A         	ASL A
C1/0004:	AA         	TAX
C1/0005:	7C 08 00   	JMP ($0008,X)  ; Jump table

C1/0008:	EC01 ; $00
C1/000A:	FB01 ; $01
C1/000C:	5702 ; $02
C1/000E:	4C02 ; $03
C1/0010:	1295 ; $04
C1/0012:	CC01 ; $05 ($01CC)
C1/0014:	9701 ; $06
C1/0016:	7001 ; $07
C1/0018:	1701 ; $08
C1/001A:	AF00 ; $09
C1/001C:	AB00 ; $0A ($00AB)
C1/001E:	7101 ; $0B
C1/0020:	2D00 ; $0C
C1/0022:	2400 : $0D

C1/0024:	A5 10       LDA $10
C1/0026:	29 03       AND #$03
C1/0028:	AA          TAX
C1/0029:	BD 01 40    LDA $4001,X
C1/002C:	6B          RTL

C1/002D:	AD B8 EC    LDA $ECB8
C1/0030:	C9 35       CMP #$35
C1/0032:	D0 17       BNE $004B
C1/0034:	EE ED E9    INC $E9ED
C1/0037:	A9 81       LDA #$81
C1/0039:	8D 00 13    STA $1300
C1/003C:	A9 80       LDA #$80
C1/003E:	8D 01 13    STA $1301
C1/0041:	9C 02 13    STZ $1302
C1/0044:	22 04 00 C5 JSL $C50004
C1/0048:	9C ED E9    STZ $E9ED
C1/004B:	A9 80       LDA #$80
C1/004D:	8D 85 62    STA $6285
C1/0050:	EE EF E9    INC $E9EF
C1/0053:	EE 0F EC    INC $EC0F
C1/0056:	EE 9A 62    INC $629A
C1/0059:	20 05 01    JSR $0105
C1/005C:	22 0D B6 C2 JSL $C2B60D
C1/0060:	20 6B 92    JSR $926B
C1/0063:	7B          TDC
C1/0064:	20 5E 92    JSR $925E
C1/0067:	20 DC 91    JSR $91DC
C1/006A:	7B          TDC
C1/006B:	AA          TAX
C1/006C:	9E 78 61    STZ $6178,X
C1/006F:	E8          INX
C1/0070:	E0 BE 00    CPX #$00BE
C1/0073:	D0 F7       BNE $006C
C1/0075:	6B          RTL

C1/0076:	20 E0 0F    JSR $0FE0
C1/0079:	20 B6 0F    JSR $0FB6
C1/007C:	9C EF E9    STZ $E9EF
C1/007F:	20 F3 0D    JSR $0DF3
C1/0082:	EE EF E9    INC $E9EF
C1/0085:	20 67 0E    JSR $0E67
C1/0088:	20 1F 0F    JSR $0F1F
C1/008B:	20 01 4A    JSR $4A01
C1/008E:	20 23 3D    JSR $3D23
C1/0091:	20 4D 3E    JSR $3E4D
C1/0094:	20 8F 46    JSR $468F
C1/0097:	20 01 4A    JSR $4A01
C1/009A:	20 59 47    JSR $4759
C1/009D:	EE BB 7B    INC $7BBB
C1/00A0:	20 8F 0F    JSR $0F8F
C1/00A3:	20 7C 95    JSR $957C          ; update sprite priority (buffer)
C1/00A6:	22 52 B6 C2 JSL $C2B652
C1/00AA:	60          RTS

; Copy $602D obtained items buffer to Item menu

C1/00AB:	20 45 44   	JSR $4445
C1/00AE:	6B         	RTL

C1/00AF:	AD 4B 2F   	LDA $2F4B
C1/00B2:	30 07      	BMI $00BB
C1/00B4:	AD E4 11   	LDA $11E4
C1/00B7:	29 08      	AND #$08
C1/00B9:	F0 05      	BEQ $00C0
C1/00BB:	AD 84 62   	LDA $6284
C1/00BE:	F0 17      	BEQ $00D7
C1/00C0:	EE ED E9   	INC $E9ED
C1/00C3:	A9 81      	LDA #$81
C1/00C5:	8D 00 13   	STA $1300
C1/00C8:	A9 10      	LDA #$10
C1/00CA:	8D 01 13   	STA $1301
C1/00CD:	9C 02 13   	STZ $1302
C1/00D0:	22 04 00 C5	JSL $C50004
C1/00D4:	9C ED E9   	STZ $E9ED
C1/00D7:	AD F9 E9   	LDA $E9F9
C1/00DA:	F0 0A      	BEQ $00E6
C1/00DC:	A9 01      	LDA #$01
C1/00DE:	20 B6 9B   	JSR $9BB6
C1/00E1:	CE F9 E9   	DEC $E9F9
C1/00E4:	D0 F6      	BNE $00DC

C1/00E6:	22 0D B6 C2	JSL $C2B60D
C1/00EA:	7B         	TDC
C1/00EB:	48         	PHA
C1/00EC:	AB         	PLB
C1/00ED:	9C 00 42   	STZ $4200
C1/00F0:	9C 0B 42   	STZ $420B
C1/00F3:	9C 0C 42   	STZ $420C
C1/00F6:	A9 80      	LDA #$80
C1/00F8:	8D 00 21   	STA $2100
C1/00FB:	A9 6B      	LDA #$6B
C1/00FD:	8D 00 15   	STA $1500
C1/0100:	8D 04 15   	STA $1504
C1/0103:	78         	SEI
C1/0104:	6B         	RTL

C1/0105:	A2 FF FF   	LDX #$FFFF
C1/0108:	8E 01 40   	STX $4001
C1/010B:	8E 03 40   	STX $4003
C1/010E:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/0111:	AD CA 7B   	LDA $7BCA
C1/0114:	D0 EF      	BNE $0105
C1/0116:	60         	RTS

C1/0117:	EE 0F EC   	INC $EC0F
C1/011A:	EE 9A 62   	INC $629A
C1/011D:	20 05 01   	JSR $0105
C1/0120:	22 97 01 C1	JSL $C10197        ; update displayed monster names
C1/0124:	AD 49 2F   	LDA $2F49
C1/0127:	29 02      	AND #$02
C1/0129:	D0 3F      	BNE $016A
C1/012B:	7B         	TDC
C1/012C:	AA         	TAX
C1/012D:	BF 6B 01 C1	LDA $C1016B,X    ; Data
C1/0131:	9D 6E 2D   	STA $2D6E,X
C1/0134:	E8         	INX
C1/0135:	E0 05 00   	CPX #$0005
C1/0138:	D0 F3      	BNE $012D
C1/013A:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/013D:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/0140:	AD E4 11   	LDA $11E4
C1/0143:	29 08      	AND #$08
C1/0145:	D0 1C      	BNE $0163
C1/0147:	EE ED E9   	INC $E9ED
C1/014A:	EE 84 62   	INC $6284
C1/014D:	A9 10      	LDA #$10
C1/014F:	8D 00 13   	STA $1300
C1/0152:	A9 2F      	LDA #$2F
C1/0154:	8D 01 13   	STA $1301
C1/0157:	A9 FF      	LDA #$FF
C1/0159:	8D 02 13   	STA $1302
C1/015C:	22 04 00 C5	JSL $C50004
C1/0160:	9C ED E9   	STZ $E9ED
C1/0163:	EE 8D 62   	INC $628D
C1/0166:	22 12 95 C1	JSL $C19512
C1/016A:	6B         	RTL

C1/016B:	0F
C1/016C:	01
C1/016D:	00
C1/016E:	00
C1/016F:	FF

C1/0170:	6B         	RTL

C1/0171:	AD CA 7B   	LDA $7BCA
C1/0174:	F0 10      	BEQ $0186
C1/0176:	A5 10      	LDA $10
C1/0178:	CD CA 62   	CMP $62CA
C1/017B:	D0 09      	BNE $0186
C1/017D:	20 59 47   	JSR $4759
C1/0180:	20 AC 47   	JSR $47AC
C1/0183:	EE BB 7B   	INC $7BBB
C1/0186:	6B         	RTL

C1/0187:	20 61 4A   	JSR $4A61
C1/018A:	20 59 47   	JSR $4759
C1/018D:	EE BB 7B   	INC $7BBB
C1/0190:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/0193:	20 BD 01   	JSR $01BD
C1/0196:	6B         	RTL

; Update displayed monster names

C1/0197:	7B         	TDC                ; A = 0000
C1/0198:	AA         	TAX                ; X = 0000
C1/0199:	BD 0D 20   	LDA $200D,X        ; monster name
C1/019C:	DD FF EB   	CMP $EBFF,X        ; buffered name
C1/019F:	D0 07      	BNE $01A8          ; branch if different
C1/01A1:	E8         	INX                ; next monster id
C1/01A2:	E0 10 00   	CPX #$0010         ; 16 entries [?]
C1/01A5:	D0 F2      	BNE $0199          ; loop till done
C1/01A7:	6B         	RTL

C1/01A8:	AD CA 7B   	LDA $7BCA          ; menu open/opening
C1/01AB:	D0 0F      	BNE $01BC          ; exit if ^
C1/01AD:	20 61 4A   	JSR $4A61
C1/01B0:	20 59 47   	JSR $4759          ; transfer battle menu tiles [?]
C1/01B3:	EE BB 7B   	INC $7BBB          ; battle menu updating state
C1/01B6:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/01B9:	20 BD 01   	JSR $01BD
C1/01BC:	6B         	RTL

C1/01BD:	7B         	TDC
C1/01BE:	AA         	TAX
C1/01BF:	BD 0D 20   	LDA $200D,X
C1/01C2:	9D FF EB   	STA $EBFF,X
C1/01C5:	E8         	INX
C1/01C6:	E0 10 00   	CPX #$0010
C1/01C9:	D0 F4      	BNE $01BF
C1/01CB:	60         	RTS

; Copy obtained item to buffer

C1/01CC:	AD DA 64   	LDA $64DA
C1/01CF:	29 0F      	AND #$0F
C1/01D1:	85 10      	STA $10
C1/01D3:	0A         	ASL A
C1/01D4:	0A         	ASL A
C1/01D5:	18         	CLC
C1/01D6:	65 10      	ADC $10
C1/01D8:	AA         	TAX
C1/01D9:	7B         	TDC
C1/01DA:	A8         	TAY
C1/01DB:	B9 72 2E   	LDA $2E72,Y
C1/01DE:	9D 2D 60   	STA $602D,X
C1/01E1:	E8         	INX
C1/01E2:	C8         	INY
C1/01E3:	C0 05 00   	CPY #$0005
C1/01E6:	D0 F3      	BNE $01DB
C1/01E8:	EE DA 64   	INC $64DA
C1/01EB:	6B         	RTL

C1/01EC:	22 D5 D3 C2	JSL $C2D3D5
C1/01F0:	20 2A 10   	JSR $102A
C1/01F3:	22 FB 01 C1	JSL $C101FB
C1/01F7:	20 7C 95   	JSR $957C          ; update sprite priority (buffer)
C1/01FA:	6B         	RTL

C1/01FB:	DA         	PHX             ; store X
C1/01FC:	5A         	PHY             ; store Y
C1/01FD:	20 24 1A   	JSR $1A24       ; wait for NMI routine
C1/0200:	20 F3 0D   	JSR $0DF3
C1/0203:	20 04 45   	JSR $4504       ; handle any menu changes [?]
C1/0206:	20 79 2F   	JSR $2F79
C1/0209:	20 CA 02   	JSR $02CA       ; battle menus update
C1/020C:	20 BE 44   	JSR $44BE       ; ATB/morph gauge update
C1/020F:	22 53 BF C2	JSL $C2BF53     ; condemned numeral update
C1/0213:	20 E3 93   	JSR $93E3
C1/0216:	22 1A B4 C2	JSL $C2B41A     ; update bitmask of facing-right entities
C1/021A:	AD EF E9   	LDA $E9EF       ; is battle stopped/paused
C1/021D:	D0 04      	BNE $0223       ; branch if ^
C1/021F:	22 03 00 C2	JSL $C20003     ; update battle timers
C1/0223:	7A         	PLY             ; restore Y
C1/0224:	FA         	PLX             ; restore X
C1/0225:	6B         	RTL

C1/0226:	20 2A 02   	JSR $022A       ; wait a frame (and run updates)
C1/0229:	6B         	RTL

; Wait a frame, then run menu and battle ATB and timer updates
C1/022A:	DA         	PHX             ; store X
C1/022B:	5A         	PHY             ; store Y
C1/022C:	20 24 1A   	JSR $1A24       ; wait for NMI routine ($47)
C1/022F:	20 04 45   	JSR $4504       ; handle any menu changes [?]
C1/0232:	20 CA 02   	JSR $02CA       ; battle menus update
C1/0235:	20 BE 44   	JSR $44BE       ; ATB/morph gauge update
C1/0238:	22 53 BF C2	JSL $C2BF53     ; condemned numeral update
C1/023C:	22 1A B4 C2	JSL $C2B41A     ; update bitmask of facing-right entities
C1/0240:	AD EF E9   	LDA $E9EF       ; is battle stopped/paused [?]
C1/0243:	D0 04      	BNE $0249       ; branch if ^
C1/0245:	22 03 00 C2	JSL $C20003     ; else, update battle timers
C1/0249:	7A         	PLY             ; restore Y
C1/024A:	FA         	PLX             ; restore X
C1/024B:	60         	RTS

C1/024C:	A5 10      	LDA $10
C1/024E:	29 03      	AND #$03
C1/0250:	AA         	TAX
C1/0251:	A9 FF      	LDA #$FF
C1/0253:	9D 01 40   	STA $4001,X
C1/0256:	6B         	RTL

C1/0257:	AD 8B 62   	LDA $628B
C1/025A:	D0 29      	BNE $0285
C1/025C:	A5 10      	LDA $10
C1/025E:	0A         	ASL A
C1/025F:	2A         	ROL A
C1/0260:	29 01      	AND #$01
C1/0262:	85 12      	STA $12
C1/0264:	A5 10      	LDA $10
C1/0266:	29 03      	AND #$03
C1/0268:	AA         	TAX
C1/0269:	A5 12      	LDA $12
C1/026B:	9D CC 62   	STA $62CC,X
C1/026E:	BD 01 40   	LDA $4001,X
C1/0271:	C9 FF      	CMP #$FF
C1/0273:	D0 10      	BNE $0285
C1/0275:	8A         	TXA
C1/0276:	8D 00 40   	STA $4000
C1/0279:	20 86 02   	JSR $0286      ; shift battle menu order up
C1/027C:	AD 00 40   	LDA $4000
C1/027F:	AA         	TAX
C1/0280:	A9 03      	LDA #$03
C1/0282:	9D 01 40   	STA $4001,X
C1/0285:	6B         	RTL

; Shift battle menu order up
; (0: active, 1-4: queued in order, FF: no character)
C1/0286:	7B         	TDC            ; A = 0000
C1/0287:	AA         	TAX            ; X = 0000
C1/0288:	64 10      	STZ $10        ; find menu in position 0 (active)
C1/028A:	64 12      	STZ $12        ; change to position 0
C1/028C:	20 B2 02   	JSR $02B2      ; update one battle menu position
C1/028F:	90 02      	BCC $0293      ; branch if no match was found
C1/0291:	E6 12      	INC $12        ; position $12 is filled, get next

C1/0293:	E6 10      	INC $10        ; match next position
C1/0295:	A5 10      	LDA $10        ; > if no match, next loop shifts
C1/0297:	C9 05      	CMP #$05       ; > down to fill $12
C1/0299:	D0 F1      	BNE $028C      ; loop through positions 0-4
C1/029B:	A5 12      	LDA $12
C1/029D:	85 10      	STA $10        ; set $10 to last unfilled position
C1/029F:	A5 10      	LDA $10
C1/02A1:	C9 05      	CMP #$05
C1/02A3:	F0 0C      	BEQ $02B1      ; exit if states 0-4 are all filled
C1/02A5:	A9 FF      	LDA #$FF
C1/02A7:	85 12      	STA $12        ; fill remaining states with #FF
C1/02A9:	20 B2 02   	JSR $02B2      ; why is this necessary [?]
C1/02AC:	E6 10      	INC $10
C1/02AE:	4C 9F 02   	JMP $029F      ; loop (should be BRA)
C1/02B1:	60         	RTS

; Check battle menu positions
; ($10 = state to look for, $12 = state to change to)
; (return with Carry set if position $10 was found)
C1/02B2:	7B         	TDC            ; A = 0000
C1/02B3:	AA         	TAX            ; A = 0000
C1/02B4:	BD 01 40   	LDA $4001,X    ; character X's battle menu position
C1/02B7:	C5 10      	CMP $10
C1/02B9:	F0 08      	BEQ $02C3      ; branch if position matches $10
C1/02BB:	E8         	INX
C1/02BC:	E0 04 00   	CPX #$0004
C1/02BF:	D0 F3      	BNE $02B4      ; loop through all 4 character menus
C1/02C1:	18         	CLC            ; if no match, return with carry clear
C1/02C2:	60         	RTS

C1/02C3:	A5 12      	LDA $12        ; new position to assign
C1/02C5:	9D 01 40   	STA $4001,X    ; set matched battle menu position
C1/02C8:	38         	SEC            ; match found, return with carry set
C1/02C9:	60         	RTS

; Update Battle Menus (runs every frame)
C1/02CA:	20 86 02   	JSR $0286      ; shift battle menu order up
C1/02CD:	7B         	TDC            ; A = 0000
C1/02CE:	AA         	TAX            ; X = 0000
C1/02CF:	BD 01 40   	LDA $4001,X    ; battle menu position of character 0
C1/02D2:	F0 08      	BEQ $02DC      ; branch if currently active
C1/02D4:	E8         	INX
C1/02D5:	E0 04 00   	CPX #$0004
C1/02D8:	D0 F5      	BNE $02CF      ; loop through all 4 battle menus
C1/02DA:	80 1D      	BRA $02F9      ; exit if none open

C1/02DC:	AD F1 E9   	LDA $E9F1
C1/02DF:	0D F0 7B   	ORA $7BF0      ; current menu state [?]
C1/02E2:	0D 8B 62   	ORA $628B      ; disable battle menu [?]
C1/02E5:	0D CA 7B   	ORA $7BCA      ; menu open or opening [?]
C1/02E8:	0D BB 7B   	ORA $7BBB      ; battle menu update pending [?]
C1/02EB:	0D CC 7B   	ORA $7BCC      ; swapping battle menus [?]
C1/02EE:	D0 09      	BNE $02F9      ; exit if any of the above
C1/02F0:	9C CB 7B   	STZ $7BCB      ; reset battle menu open flag [?]
C1/02F3:	8E CA 62   	STX $62CA      ; set active character pointer
C1/02F6:	20 A2 44   	JSR $44A2      ; draw active battle menu
C1/02F9:	60         	RTS

; Update HDMA channel 3 or 5 based on $7B95-$7B96
C1/02FA:	AD 95 7B   	LDA $7B95      ; Update HDMA #3?
C1/02FD:	F0 29      	BEQ $0328      ; If not, check channel 5
C1/02FF:	C9 01      	CMP #$01       ; Slot mode?
C1/0301:	F0 05      	BEQ $0308      ; Branch if normal mode
C1/0303:	A2 0F 00   	LDX #$000F     ; HDMA parameters: slot mode
C1/0306:	80 03      	BRA $030B
C1/0308:	A2 23 00   	LDX #$0023     ; HDMA parameters: normal mode

; Fork: HDMA channel 3
C1/030B:	9C 95 7B   	STZ $7B95      ; Disable HDMA #3 update
C1/030E:	8B         	PHB            ; Preserve bank register
C1/030F:	A9 00      	LDA #$00       ; A = 0
C1/0311:	48         	PHA            ; Put on stack
C1/0312:	AB         	PLB            ; Bank = $00
C1/0313:	A8         	TAY            ; Y = 0
C1/0314:	BF 68 D3 C2	LDA $C2D368,X  ; Get HDMA parameters
C1/0318:	99 30 43   	STA $4330,Y    ; Set HDMA #3 registers 0-4
C1/031B:	C8         	INY            ; X + 1
C1/031C:	E8         	INX            ; Y + 1
C1/031D:	C0 05 00   	CPY #$0005     ; Have we copied 5 bytes?
C1/0320:	D0 F2      	BNE $0314      ; Loop if not
C1/0322:	A9 7E      	LDA #$7E       ; Bank $7E (WRAM)
C1/0324:	8D 37 43   	STA $4337      ; Set indirect source bank
C1/0327:	AB         	PLB            ; Restore bank register

; Fork: HDMA channel 5
C1/0328:	AD 96 7B   	LDA $7B96      ; Update HDMA #5 (window positions)?
C1/032B:	F0 19      	BEQ $0346      ; Exit if not
C1/032D:	9C 96 7B   	STZ $7B96      ; Disable HDMA #5 update
C1/0330:	7B         	TDC            ; A = 0
C1/0331:	AA         	TAX            ; X = 0
C1/0332:	BF 9A D3 C2	LDA $C2D39A,X  ; Get HDMA parameters
C1/0336:	9F 50 43 00	STA $004350,X  ; Set HDMA #5 registers 0-4
C1/033A:	E8         	INX
C1/033B:	E0 05 00   	CPX #$0005     ; Have we copied 5 bytes?
C1/033E:	D0 F2      	BNE $0332      ; Loop if not
C1/0340:	A9 7E      	LDA #$7E       ; Bank $7E (WRAM)
C1/0342:	8F 57 43 00	STA $004357    ; Set indirect source bank
C1/0346:	60         	RTS

; Update HDMA channel 7
C1/0347:	C2 20      	REP #$20       ; 16-bit A
C1/0349:	AF 95 D3 C2	LDA $C2D395    ; ... Get setup byte and PPU destination
C1/034D:	8F 70 43 00	STA $004370    ; Set setup register and  PPU destination
C1/0351:	AF 97 D3 C2	LDA $C2D397    ; ... Get source address
C1/0355:	8F 72 43 00	STA $004372    ; Set source address
C1/0359:	7B         	TDC            ; Clear A
C1/035A:	E2 20      	SEP #$20       ; 8-bit A
C1/035C:	AF 99 D3 C2	LDA $C2D399    ; ... Get source bank
C1/0360:	8F 74 43 00	STA $004374    ; Set source bank
C1/0364:	A9 7E      	LDA #$7E       ; Bank $7E (WRAM)
C1/0366:	8F 77 43 00	STA $004377    ; Set indirect source bank ($7E)
C1/036A:	AD EF 7B   	LDA $7BEF      ; HDMA enable ($210C)
C1/036D:	09 80      	ORA #$80       ; bit 7 = channel 7
C1/036F:	8D EF 7B   	STA $7BEF      ; Enable HDMA on channel 7
C1/0372:	60         	RTS

; Update HDMA channel 6 (Slot mode or normal mode)
C1/0373:	AD 97 7B   	LDA $7B97      ; Update HDMA #6?
C1/0376:	F0 29      	BEQ $03A1      ; Exit if not
C1/0378:	C9 01      	CMP #$01       ; Slot mode?
C1/037A:	F0 05      	BEQ $0381      ; Branch if normal mode
C1/037C:	A2 1E 00   	LDX #$001E     ; HDMA parameters: slot mode
C1/037F:	80 03      	BRA $0384
C1/0381:	A2 28 00   	LDX #$0028     ; HDMA parameters: normal mode
C1/0384:	9C 97 7B   	STZ $7B97      ; Disable HDMA #3 update
C1/0387:	8B         	PHB            ; Preserve bank register
C1/0388:	A9 00      	LDA #$00       ; A = 0
C1/038A:	48         	PHA            ; Put on stack
C1/038B:	AB         	PLB            ; Bank = $00
C1/038C:	A8         	TAY            ; Y = 0
C1/038D:	BF 68 D3 C2	LDA $C2D368,X  ; Get HDMA parameters
C1/0391:	99 60 43   	STA $4360,Y    ; Set HDMA #6 registers 0-4
C1/0394:	C8         	INY            ; X + 1
C1/0395:	E8         	INX            ; Y + 1
C1/0396:	C0 05 00   	CPY #$0005     ; Have we copied 5 bytes?
C1/0399:	D0 F2      	BNE $038D      ; Loop if not
C1/039B:	A9 7E      	LDA #$7E       ; Bank $7E (WRAM)
C1/039D:	8D 67 43   	STA $4367      ; Set indirect source bank
C1/03A0:	AB         	PLB            ; Restore bank register
C1/03A1:	60         	RTS

; Update HDMA #0-6, enable HDMA
C1/03A2:	8B         	PHB            ; Preserve DB register
C1/03A3:	A9 00      	LDA #$00       ; A = 0
C1/03A5:	48         	PHA            ; Put on stack
C1/03A6:	AB         	PLB            ; DB register = $00
C1/03A7:	7B         	TDC            ; Clear A
C1/03A8:	AA         	TAX            ; X = 0
C1/03A9:	A8         	TAY            ; Y = 0
C1/03AA:	A9 05      	LDA #$05       ; A = 5
C1/03AC:	85 10      	STA $10        ; Set loop var
C1/03AE:	BF 68 D3 C2	LDA $C2D368,X  ; HDMA parameters
C1/03B2:	99 00 43   	STA $4300,Y    ; Set HDMA registers 0-4
C1/03B5:	E8         	INX            ; X + 1
C1/03B6:	C8         	INY            ; Y + 1
C1/03B7:	C6 10      	DEC $10        ; Decrement loop variable
C1/03B9:	D0 F3      	BNE $03AE      ; Have we copied 5 bytes?
C1/03BB:	A9 7E      	LDA #$7E       ; $7E = WRAM
C1/03BD:	99 02 43   	STA $4302,Y    ; Set HDMA bank register ($43x7)
C1/03C0:	98         	TYA            ; A = 5 (first loop)
C1/03C1:	18         	CLC            ; Clear carry for addition
C1/03C2:	69 0B      	ADC #$0B       ; A = #$10 (first loop)
C1/03C4:	A8         	TAY            ; Increment HDMA channel
C1/03C5:	E0 23 00   	CPX #$0023     ; Have we copied (5 * 7 = 35) bytes?
C1/03C8:	D0 E0      	BNE $03AA      ; Loop through HDMA channels #0-6
C1/03CA:	AB         	PLB            ; Restore DB register
C1/03CB:	A9 03      	LDA #$03       ; A = 3
C1/03CD:	8D 0C 80   	STA $800C      ; Set BG1 Scroll HDMA type 3
C1/03D0:	A9 04      	LDA #$04       ; A = 4
C1/03D2:	8D 0D 80   	STA $800D      ; Set BG2 Scroll HDMA type 4
C1/03D5:	A9 05      	LDA #$05       ; A = 5
C1/03D7:	8D 0E 80   	STA $800E      ; Set BG3 Scroll HDMA type 5
C1/03DA:	20 FB 03   	JSR $03FB      ; Enable HDMA, update HDMA #0, #1, #2 based on $800C-$800E
C1/03DD:	A9 7F      	LDA #$7F       ; Select HDMA channels 0-6
C1/03DF:	8D EF 7B   	STA $7BEF      ; Enable HDMA on channels 0-6
C1/03E2:	AD B8 EC   	LDA $ECB8      ; Battle BG index
C1/03E5:	C9 0F      	CMP #$0F       ; Is it BG $0F (Phantom Train, outside)?
C1/03E7:	F0 0C      	BEQ $03F5      ; Set BG2 HDMA scroll type (to horizontal?)
C1/03E9:	C9 2C      	CMP #$2C       ; Is it BG $2C (Minecart Ride)?
C1/03EB:	F0 08      	BEQ $03F5      ; Set BG2 HDMA scroll type (to horizontal?)
C1/03ED:	C9 2E      	CMP #$2E       ; Is it BG $2E (Cyan's Dreamscape?)
C1/03EF:	D0 09      	BNE $03FA      ; Exit if not
C1/03F1:	A9 0B      	LDA #$0B       ; Set BG2 HDMA scroll type to $0B
C1/03F3:	80 02      	BRA $03F7      ; Set BG2 HDMA scroll type
C1/03F5:	A9 0A      	LDA #$0A       ; Scroll type = $0A (horizontal?)
C1/03F7:	8D 0D 80   	STA $800D      ; Set BG2 Scroll HDMA type
C1/03FA:	60         	RTS

; Enable HDMA, update HDMA #0, #1, #2 based on $800C-$800E
; (this is the only routine which actually sets the HDMA channel enable
; register, other  routines set their channels in $7BEF and rely on this)
C1/03FB:	AD 0C 80   	LDA $800C      ; BG1 Scroll HDMA type
C1/03FE:	30 19      	BMI $0419      ; Disable update if MSB set
C1/0400:	09 80      	ORA #$80       ; Set MSB
C1/0402:	8D 0C 80   	STA $800C      ; Enable update
C1/0405:	29 7F      	AND #$7F       ; Isolate update type ($03 or $06)
C1/0407:	0A         	ASL A          ; Double it
C1/0408:	AA         	TAX            ; Index into pointer table
C1/0409:	BF 50 D1 C2	LDA $C2D150,X  ; Get HDMA pointer LB
C1/040D:	8F 02 43 00	STA $004302    ; Set pointer LB for HDMA #0
C1/0411:	BF 51 D1 C2	LDA $C2D151,X  ; Get HDMA pointer MB
C1/0415:	8F 03 43 00	STA $004303    ; Set pointer MB for HDMA #0
C1/0419:	AD 0D 80   	LDA $800D      ; BG2 Scroll HDMA type
C1/041C:	30 19      	BMI $0437      ; Disable update if MSB set
C1/041E:	09 80      	ORA #$80       ; Set MSB
C1/0420:	8D 0D 80   	STA $800D      ; Enable update
C1/0423:	29 7F      	AND #$7F       ; Isolate update type ($04 or $0A or $0B)
C1/0425:	0A         	ASL A          ; Double it
C1/0426:	AA         	TAX            ; Index into pointer table
C1/0427:	BF 50 D1 C2	LDA $C2D150,X  ; Get HDMA pointer LB
C1/042B:	8F 12 43 00	STA $004312    ; Set pointer LB for HDMA #1
C1/042F:	BF 51 D1 C2	LDA $C2D151,X  ; Get HDMA pointer MB
C1/0433:	8F 13 43 00	STA $004313    ; Set pointer MB for HDMA #1
C1/0437:	AD 0E 80   	LDA $800E      ; BG3 Scroll HDMA type ($05 or ?)
C1/043A:	30 1D      	BMI $0459      ; Disable update if MSB set
C1/043C:	09 80      	ORA #$80       ; Set MSB
C1/043E:	8D 0E 80   	STA $800E      ; Enable update
C1/0441:	18         	CLC            ; Prepare addition
C1/0442:	6D 8A 7B   	ADC $7B8A      ; ? (0 or $0C)
C1/0445:	29 7F      	AND #$7F       ; Isolate update type ($05 or $11 or ?)
C1/0447:	0A         	ASL A          ; Double it
C1/0448:	AA         	TAX            ; Index into pointer table
C1/0449:	BF 50 D1 C2	LDA $C2D150,X  ; Get HDMA pointer LB
C1/044D:	8F 22 43 00	STA $004322    ; Set pointer LB for HDMA #2
C1/0451:	BF 51 D1 C2	LDA $C2D151,X  ; Get HDMA pointer MB
C1/0455:	8F 23 43 00	STA $004323    ; Set pointer MB for HDMA #2
C1/0459:	AD EF 7B   	LDA $7BEF      ; HDMA channels to enable/disable
C1/045C:	8F 0C 42 00	STA $00420C    ; Update HDMA
C1/0460:	60         	RTS

C1/0461:	1392
C1/0463:	1390
C1/0465:	1392
C1/0467:	1394

C1/0469:	AD B8 64   	LDA $64B8
C1/046C:	F0 5B      	BEQ $04C9
C1/046E:	AD B9 64   	LDA $64B9
C1/0471:	D0 05      	BNE $0478
C1/0473:	A9 08      	LDA #$08
C1/0475:	8D B9 64   	STA $64B9
C1/0478:	A5 98      	LDA $98
C1/047A:	29 07      	AND #$07
C1/047C:	0A         	ASL A
C1/047D:	AA         	TAX
C1/047E:	C2 20      	REP #$20
C1/0480:	BF A4 D2 C2	LDA $C2D2A4,X
C1/0484:	8F 16 21 00	STA $002116
C1/0488:	DA         	PHX
C1/0489:	AD B8 64   	LDA $64B8
C1/048C:	29 FF 00   	AND #$00FF
C1/048F:	0A         	ASL A
C1/0490:	AA         	TAX
C1/0491:	BF 61 04 C1	LDA $C10461,X    ; Data
C1/0495:	FA         	PLX
C1/0496:	18         	CLC
C1/0497:	7F B4 D2 C2	ADC $C2D2B4,X
C1/049B:	8F 72 43 00	STA $004372
C1/049F:	A9 40 00   	LDA #$0040
C1/04A2:	8F 75 43 00	STA $004375
C1/04A6:	7B         	TDC
C1/04A7:	E2 20      	SEP #$20           ; 8-bit A
C1/04A9:	A9 7E      	LDA #$7E
C1/04AB:	8F 74 43 00	STA $004374
C1/04AF:	A9 01      	LDA #$01
C1/04B1:	8F 70 43 00	STA $004370
C1/04B5:	A9 18      	LDA #$18
C1/04B7:	8F 71 43 00	STA $004371
C1/04BB:	A9 80      	LDA #$80
C1/04BD:	8F 0B 42 00	STA $00420B
C1/04C1:	CE B9 64   	DEC $64B9
C1/04C4:	D0 03      	BNE $04C9
C1/04C6:	9C B8 64   	STZ $64B8
C1/04C9:	60         	RTS

; Execute battle menu animation

C1/04CA:	AD BB 7B   	LDA $7BBB      ; battle menu update pending
C1/04CD:	F0 3C      	BEQ $050B      ; exit if no ^
C1/04CF:	EE 9B 62   	INC $629B      ; flag "update gauge based on frame" [?]
C1/04D2:	AD AA 62   	LDA $62AA      ; remaining frames in menu animation
C1/04D5:	D0 05      	BNE $04DC      ; branch if in middle of animation
C1/04D7:	A9 08      	LDA #$08       ; else, get animation length (8 frames)
C1/04D9:	8D AA 62   	STA $62AA      ; save it ^

C1/04DC:	A5 98      	LDA $98        ; frame counter
C1/04DE:	29 07      	AND #$07       ; 0-8
C1/04E0:	0A         	ASL A          ; 0-16
C1/04E1:	AA         	TAX            ; index it
C1/04E2:	C2 20      	REP #$20       ; 16-bit A
C1/04E4:	AD BE 7B   	LDA $7BBE      ; pointer to menu tile data in VRAM
C1/04E7:	18         	CLC            ; clear carry
C1/04E8:	7F 94 D2 C2	ADC $C2D294,X  ; add data based on which frame
C1/04EC:	A8         	TAY            ; index it
C1/04ED:	AD C0 7B   	LDA $7BC0      ; pointer to menu tile data in buffer
C1/04F0:	18         	CLC            ; clear carry
C1/04F1:	7F B4 D2 C2	ADC $C2D2B4,X  ; add twice what was added above
C1/04F5:	AA         	TAX            ; index it
C1/04F6:	A9 40 00   	LDA #$0040     ; size of transfer
C1/04F9:	85 36      	STA $36        ; save ^
C1/04FB:	7B         	TDC            ; zero A/B
C1/04FC:	E2 20      	SEP #$20       ; 8-bit A
C1/04FE:	A9 7E      	LDA #$7E       ; source bank
C1/0500:	20 2B 1A   	JSR $1A2B      ; execute VRAM DMA transfer
C1/0503:	CE AA 62   	DEC $62AA      ; frames left in menu animation
C1/0506:	D0 03      	BNE $050B      ; exit if still frames left
C1/0508:	9C BB 7B   	STZ $7BBB      ; else, clear "menu update pending" flag
C1/050B:	60         	RTS

C1/050C:	7B         	TDC
C1/050D:	AA         	TAX
C1/050E:	AD CA 62   	LDA $62CA
C1/0511:	DD D6 64   	CMP $64D6,X
C1/0514:	F0 08      	BEQ $051E
C1/0516:	E8         	INX
C1/0517:	E0 04 00   	CPX #$0004
C1/051A:	D0 F5      	BNE $0511
C1/051C:	7B         	TDC
C1/051D:	AA         	TAX
C1/051E:	BF 64 D3 C2	LDA $C2D364,X
C1/0522:	AA         	TAX
C1/0523:	7B         	TDC
C1/0524:	A8         	TAY
C1/0525:	BD A5 5C   	LDA $5CA5,X
C1/0528:	C9 15      	CMP #$15
C1/052A:	F0 03      	BEQ $052F
C1/052C:	18         	CLC
C1/052D:	69 54      	ADC #$54
C1/052F:	99 15 5D   	STA $5D15,Y       ; update MP needed or MP cost data
C1/0532:	C8         	INY
C1/0533:	C8         	INY
C1/0534:	E8         	INX
C1/0535:	E8         	INX
C1/0536:	C0 0E 00   	CPY #$000E
C1/0539:	D0 EA      	BNE $0525
C1/053B:	64 40      	STZ $40
C1/053D:	64 41      	STZ $41
C1/053F:	AD 78 61   	LDA $6178
C1/0542:	38         	SEC
C1/0543:	E9 64      	SBC #$64
C1/0545:	90 04      	BCC $054B
C1/0547:	E6 40      	INC $40
C1/0549:	80 F7      	BRA $0542
C1/054B:	18         	CLC
C1/054C:	69 64      	ADC #$64
C1/054E:	38         	SEC
C1/054F:	E9 0A      	SBC #$0A
C1/0551:	90 04      	BCC $0557
C1/0553:	E6 41      	INC $41
C1/0555:	80 F7      	BRA $054E
C1/0557:	18         	CLC
C1/0558:	69 12      	ADC #$12
C1/055A:	8D 27 5D   	STA $5D27
C1/055D:	A9 02      	LDA #$02
C1/055F:	8D 28 5D   	STA $5D28
C1/0562:	8D 26 5D   	STA $5D26
C1/0565:	8D 24 5D   	STA $5D24
C1/0568:	A5 41      	LDA $41
C1/056A:	18         	CLC
C1/056B:	69 08      	ADC #$08
C1/056D:	8D 25 5D   	STA $5D25
C1/0570:	A5 40      	LDA $40
C1/0572:	18         	CLC
C1/0573:	69 08      	ADC #$08
C1/0575:	8D 23 5D   	STA $5D23
C1/0578:	C9 08      	CMP #$08
C1/057A:	D0 08      	BNE $0584
C1/057C:	A9 FF      	LDA #$FF
C1/057E:	8D 23 5D   	STA $5D23
C1/0581:	9C 24 5D   	STZ $5D24
C1/0584:	A5 41      	LDA $41
C1/0586:	D0 08      	BNE $0590
C1/0588:	A9 FF      	LDA #$FF
C1/058A:	8D 25 5D   	STA $5D25
C1/058D:	9C 26 5D   	STZ $5D26
C1/0590:	60         	RTS

C1/0591:	000C
C1/0593:	100C
C1/0595:	000E
C1/0597:	100E
C1/0599:	0028
C1/059B:	0020
C1/059D:	0054
C1/059F:	1054

C1/05A1:	AD 15 7B   	LDA $7B15
C1/05A4:	F0 3D      	BEQ $05E3
C1/05A6:	9C 15 7B   	STZ $7B15
C1/05A9:	AD A7 60   	LDA $60A7
C1/05AC:	D0 1C      	BNE $05CA
C1/05AE:	AD C8 62   	LDA $62C8
C1/05B1:	0A         	ASL A
C1/05B2:	AA         	TAX
C1/05B3:	C2 20      	REP #$20
C1/05B5:	BF 91 05 C1	LDA $C10591,X    ; Data
C1/05B9:	85 36      	STA $36
C1/05BB:	7B         	TDC
C1/05BC:	E2 20      	SEP #$20           ; 8-bit A
C1/05BE:	9C C8 62   	STZ $62C8
C1/05C1:	AD 1C 7B   	LDA $7B1C
C1/05C4:	AE 1A 7B   	LDX $7B1A
C1/05C7:	20 51 1A   	JSR $1A51
C1/05CA:	C2 20      	REP #$20
C1/05CC:	AD 16 7B   	LDA $7B16
C1/05CF:	38         	SEC
C1/05D0:	ED 1D 7B   	SBC $7B1D
C1/05D3:	8D B4 64   	STA $64B4
C1/05D6:	AD 18 7B   	LDA $7B18
C1/05D9:	38         	SEC
C1/05DA:	ED 1F 7B   	SBC $7B1F
C1/05DD:	8D B6 64   	STA $64B6
C1/05E0:	7B         	TDC
C1/05E1:	E2 20      	SEP #$20           ; 8-bit A
C1/05E3:	AD 21 7B   	LDA $7B21
C1/05E6:	F0 57      	BEQ $063F
C1/05E8:	9C 21 7B   	STZ $7B21
C1/05EB:	AD A8 60   	LDA $60A8
C1/05EE:	D0 2D      	BNE $061D
C1/05F0:	AD C9 62   	LDA $62C9
C1/05F3:	F0 17      	BEQ $060C
C1/05F5:	C9 01      	CMP #$01
C1/05F7:	F0 0E      	BEQ $0607
C1/05F9:	C9 02      	CMP #$02
C1/05FB:	F0 05      	BEQ $0602
C1/05FD:	A0 10 56   	LDY #$5610
C1/0600:	80 0D      	BRA $060F
C1/0602:	A0 00 56   	LDY #$5600
C1/0605:	80 08      	BRA $060F
C1/0607:	A0 10 54   	LDY #$5410
C1/060A:	80 03      	BRA $060F
C1/060C:	A0 00 54   	LDY #$5400
C1/060F:	9C C9 62   	STZ $62C9
C1/0612:	AD 28 7B   	LDA $7B28
C1/0615:	AE 26 7B   	LDX $7B26
C1/0618:	84 36      	STY $36
C1/061A:	20 51 1A   	JSR $1A51
C1/061D:	AD 0E 80   	LDA $800E
C1/0620:	29 7F      	AND #$7F
C1/0622:	C9 05      	CMP #$05
C1/0624:	D0 19      	BNE $063F
C1/0626:	C2 20      	REP #$20
C1/0628:	AD 22 7B   	LDA $7B22
C1/062B:	38         	SEC
C1/062C:	ED 29 7B   	SBC $7B29
C1/062F:	8D F5 4A   	STA $4AF5
C1/0632:	AD 24 7B   	LDA $7B24
C1/0635:	38         	SEC
C1/0636:	ED 2B 7B   	SBC $7B2B
C1/0639:	8D F7 4A   	STA $4AF7
C1/063C:	7B         	TDC
C1/063D:	E2 20      	SEP #$20           ; 8-bit A
C1/063F:	60         	RTS

C1/0640:	AD 16 63   	LDA $6316          ; dmg numeral graphics update pending
C1/0643:	F0 13      	BEQ $0658          ; branch and exit if not
C1/0645:	9C 16 63   	STZ $6316          ; reset update pending flag
C1/0648:	A2 80 00   	LDX #$0080
C1/064B:	86 36      	STX $36
C1/064D:	A2 B3 60   	LDX #$60B3
C1/0650:	A9 7E      	LDA #$7E
C1/0652:	AC 17 63   	LDY $6317
C1/0655:	4C 2B 1A   	JMP $1A2B          ; execute VRAM DMA transfer

C1/0658:	60         	RTS

C1/0659:	E2 10      	SEP #$10
C1/065B:	9C 6B 7B   	STZ $7B6B
C1/065E:	7B         	TDC
C1/065F:	AA         	TAX
C1/0660:	C2 20      	REP #$20
C1/0662:	BD 2F 81   	LDA $812F,X
C1/0665:	29 FF 00   	AND #$00FF
C1/0668:	0A         	ASL A
C1/0669:	0A         	ASL A
C1/066A:	0A         	ASL A
C1/066B:	4A         	LSR A
C1/066C:	18         	CLC
C1/066D:	7D C3 80   	ADC $80C3,X
C1/0670:	9D 0F 80   	STA $800F,X
C1/0673:	BD 30 81   	LDA $8130,X
C1/0676:	29 FF 00   	AND #$00FF
C1/0679:	0A         	ASL A
C1/067A:	0A         	ASL A
C1/067B:	0A         	ASL A
C1/067C:	85 36      	STA $36
C1/067E:	4A         	LSR A
C1/067F:	18         	CLC
C1/0680:	7D CF 80   	ADC $80CF,X
C1/0683:	9D 1B 80   	STA $801B,X
C1/0686:	A5 36      	LDA $36
C1/0688:	18         	CLC
C1/0689:	7D CF 80   	ADC $80CF,X
C1/068C:	38         	SEC
C1/068D:	E9 08 00   	SBC #$0008
C1/0690:	9D 27 80   	STA $8027,X
C1/0693:	18         	CLC
C1/0694:	7D 57 80   	ADC $8057,X
C1/0697:	9D 4B 80   	STA $804B,X
C1/069A:	BD C3 80   	LDA $80C3,X
C1/069D:	38         	SEC
C1/069E:	E9 08 00   	SBC #$0008
C1/06A1:	18         	CLC
C1/06A2:	7D 7B 80   	ADC $807B,X
C1/06A5:	9D 63 80   	STA $8063,X
C1/06A8:	BD 30 81   	LDA $8130,X
C1/06AB:	29 FF 00   	AND #$00FF
C1/06AE:	0A         	ASL A
C1/06AF:	0A         	ASL A
C1/06B0:	0A         	ASL A
C1/06B1:	4A         	LSR A
C1/06B2:	18         	CLC
C1/06B3:	7D CF 80   	ADC $80CF,X
C1/06B6:	9D 6F 80   	STA $806F,X
C1/06B9:	E8         	INX
C1/06BA:	E8         	INX
C1/06BB:	E0 0C      	CPX #$0C
C1/06BD:	D0 A3      	BNE $0662
C1/06BF:	7B         	TDC
C1/06C0:	AA         	TAX
C1/06C1:	A8         	TAY
C1/06C2:	BD B7 61   	LDA $61B7,X
C1/06C5:	18         	CLC
C1/06C6:	7D C5 61   	ADC $61C5,X
C1/06C9:	18         	CLC
C1/06CA:	7D D4 61   	ADC $61D4,X
C1/06CD:	85 36      	STA $36
C1/06CF:	38         	SEC
C1/06D0:	E9 10 00   	SBC #$0010
C1/06D3:	18         	CLC
C1/06D4:	79 9F 80   	ADC $809F,Y
C1/06D7:	99 87 80   	STA $8087,Y
C1/06DA:	A5 36      	LDA $36
C1/06DC:	18         	CLC
C1/06DD:	69 08 00   	ADC #$0008
C1/06E0:	99 33 80   	STA $8033,Y
C1/06E3:	BD B9 61   	LDA $61B9,X
C1/06E6:	18         	CLC
C1/06E7:	7D C7 61   	ADC $61C7,X
C1/06EA:	18         	CLC
C1/06EB:	69 08 00   	ADC #$0008
C1/06EE:	99 93 80   	STA $8093,Y
C1/06F1:	99 3B 80   	STA $803B,Y
C1/06F4:	69 08 00   	ADC #$0008
C1/06F7:	99 43 80   	STA $8043,Y
C1/06FA:	8A         	TXA
C1/06FB:	18         	CLC
C1/06FC:	69 20 00   	ADC #$0020
C1/06FF:	AA         	TAX
C1/0700:	C8         	INY
C1/0701:	C8         	INY
C1/0702:	C0 08      	CPY #$08
C1/0704:	D0 BC      	BNE $06C2
C1/0706:	7B         	TDC
C1/0707:	E2 20      	SEP #$20           ; 8-bit A
C1/0709:	C2 10      	REP #$10
C1/070B:	AD 47 2F   	LDA $2F47
C1/070E:	49 FF      	EOR #$FF
C1/0710:	8D 93 61   	STA $6193
C1/0713:	AD 1D 20   	LDA $201D
C1/0716:	2D AC 61   	AND $61AC
C1/0719:	2D 47 2F   	AND $2F47
C1/071C:	F0 70      	BEQ $078E
C1/071E:	20 0F 1A   	JSR $1A0F
C1/0721:	0A         	ASL A
C1/0722:	AA         	TAX
C1/0723:	AD 1F 20   	LDA $201F
C1/0726:	C2 20      	REP #$20
C1/0728:	C9 01 00   	CMP #$0001
C1/072B:	D0 09      	BNE $0736
C1/072D:	BD 87 80   	LDA $8087,X
C1/0730:	38         	SEC
C1/0731:	E9 20 00   	SBC #$0020
C1/0734:	80 07      	BRA $073D
C1/0736:	BD 87 80   	LDA $8087,X
C1/0739:	18         	CLC
C1/073A:	69 20 00   	ADC #$0020
C1/073D:	8D 6D 80   	STA $806D
C1/0740:	BD 93 80   	LDA $8093,X
C1/0743:	8D 79 80   	STA $8079
C1/0746:	BD 33 80   	LDA $8033,X
C1/0749:	8D 19 80   	STA $8019
C1/074C:	BD 3B 80   	LDA $803B,X
C1/074F:	8D 25 80   	STA $8025
C1/0752:	BD 43 80   	LDA $8043,X
C1/0755:	8D 31 80   	STA $8031
C1/0758:	BD 33 80   	LDA $8033,X
C1/075B:	38         	SEC
C1/075C:	E9 0C 00   	SBC #$000C
C1/075F:	8D CD 80   	STA $80CD
C1/0762:	BD 3B 80   	LDA $803B,X
C1/0765:	38         	SEC
C1/0766:	E9 08 00   	SBC #$0008
C1/0769:	8D D9 80   	STA $80D9
C1/076C:	A9 32 00   	LDA #$0032
C1/076F:	8D 39 81   	STA $8139
C1/0772:	AD 1F 20   	LDA $201F
C1/0775:	29 01 00   	AND #$0001
C1/0778:	49 01 00   	EOR #$0001
C1/077B:	8D 85 80   	STA $8085
C1/077E:	7B         	TDC
C1/077F:	E2 20      	SEP #$20           ; 8-bit A
C1/0781:	A9 20      	LDA #$20
C1/0783:	8D 95 61   	STA $6195
C1/0786:	0D 79 7B   	ORA $7B79
C1/0789:	8D 79 7B   	STA $7B79
C1/078C:	80 03      	BRA $0791
C1/078E:	9C 95 61   	STZ $6195
C1/0791:	A9 FF      	LDA #$FF
C1/0793:	2D 1E 20   	AND $201E
C1/0796:	2D AB 61   	AND $61AB
C1/0799:	2D 46 2F   	AND $2F46
C1/079C:	0D 95 61   	ORA $6195
C1/079F:	8D 92 00   	STA $0092
C1/07A2:	60         	RTS

C1/07A3:	E2 10      	SEP #$10
C1/07A5:	7B         	TDC
C1/07A6:	AA         	TAX
C1/07A7:	9D 01 05   	STA $0501,X
C1/07AA:	E8         	INX
C1/07AB:	E0 1B      	CPX #$1B
C1/07AD:	D0 F8      	BNE $07A7
C1/07AF:	A9 80      	LDA #$80
C1/07B1:	8D 1C 05   	STA $051C
C1/07B4:	C2 20      	REP #$20
C1/07B6:	7B         	TDC
C1/07B7:	AA         	TAX
C1/07B8:	A9 E0 E0   	LDA #$E0E0
C1/07BB:	9D 20 03   	STA $0320,X
C1/07BE:	9D 54 03   	STA $0354,X
C1/07C1:	9D 88 03   	STA $0388,X
C1/07C4:	9D BC 03   	STA $03BC,X
C1/07C7:	9D F0 03   	STA $03F0,X
C1/07CA:	9D 24 04   	STA $0424,X
C1/07CD:	9D 58 04   	STA $0458,X
C1/07D0:	9D 8C 04   	STA $048C,X
C1/07D3:	E8         	INX
C1/07D4:	E8         	INX
C1/07D5:	E8         	INX
C1/07D6:	E8         	INX
C1/07D7:	E0 34      	CPX #$34
C1/07D9:	D0 E0      	BNE $07BB
C1/07DB:	8D C0 04   	STA $04C0
C1/07DE:	8D C4 04   	STA $04C4
C1/07E1:	8D C8 04   	STA $04C8
C1/07E4:	7B         	TDC
C1/07E5:	E2 20      	SEP #$20           ; 8-bit A
C1/07E7:	C2 10      	REP #$10
C1/07E9:	60         	RTS

C1/07EA:	AD 83 62   	LDA $6283
C1/07ED:	AA         	TAX
C1/07EE:	86 44      	STX $44
C1/07F0:	E2 10      	SEP #$10
C1/07F2:	C2 20      	REP #$20
C1/07F4:	AD 97 61   	LDA $6197
C1/07F7:	F0 25      	BEQ $081E
C1/07F9:	9C 97 61   	STZ $6197
C1/07FC:	7B         	TDC
C1/07FD:	AA         	TAX
C1/07FE:	BD 21 9A   	LDA $9A21,X
C1/0801:	9D 21 9F   	STA $9F21,X
C1/0804:	BD B9 9A   	LDA $9AB9,X
C1/0807:	9D B9 9F   	STA $9FB9,X
C1/080A:	BD 51 9B   	LDA $9B51,X
C1/080D:	9D 51 A0   	STA $A051,X
C1/0810:	BD E9 9B   	LDA $9BE9,X
C1/0813:	9D E9 A0   	STA $A0E9,X
C1/0816:	E8         	INX
C1/0817:	E8         	INX
C1/0818:	E8         	INX
C1/0819:	E8         	INX
C1/081A:	E0 98      	CPX #$98
C1/081C:	D0 E0      	BNE $07FE
C1/081E:	64 34      	STZ $34
C1/0820:	7B         	TDC
C1/0821:	E2 20      	SEP #$20           ; 8-bit A
C1/0823:	AA         	TAX
C1/0824:	AD 0C 80   	LDA $800C
C1/0827:	29 7F      	AND #$7F
C1/0829:	C9 06      	CMP #$06
C1/082B:	D0 04      	BNE $0831
C1/082D:	E6 34      	INC $34
C1/082F:	80 08      	BRA $0839

C1/0831:	C9 08      	CMP #$08
C1/0833:	D0 04      	BNE $0839
C1/0835:	A9 80      	LDA #$80
C1/0837:	85 35      	STA $35
C1/0839:	C2 20      	REP #$20
C1/083B:	AD B0 64   	LDA $64B0
C1/083E:	85 36      	STA $36
C1/0840:	AD B2 64   	LDA $64B2
C1/0843:	85 38      	STA $38
C1/0845:	AD 0C 80   	LDA $800C
C1/0848:	29 7F 00   	AND #$007F
C1/084B:	F0 2B      	BEQ $0878
C1/084D:	AD A9 62   	LDA $62A9
C1/0850:	29 FF 00   	AND #$00FF
C1/0853:	F0 12      	BEQ $0867
C1/0855:	AD B0 64   	LDA $64B0
C1/0858:	85 3A      	STA $3A
C1/085A:	8D F5 43   	STA $43F5
C1/085D:	AD B2 64   	LDA $64B2
C1/0860:	85 3C      	STA $3C
C1/0862:	8D F7 43   	STA $43F7
C1/0865:	80 11      	BRA $0878
C1/0867:	AD B4 64   	LDA $64B4
C1/086A:	85 3A      	STA $3A
C1/086C:	8D F5 43   	STA $43F5
C1/086F:	AD B6 64   	LDA $64B6
C1/0872:	3A         	DEC A
C1/0873:	85 3C      	STA $3C
C1/0875:	8D F7 43   	STA $43F7
C1/0878:	AD C1 62   	LDA $62C1
C1/087B:	29 FF 00   	AND #$00FF
C1/087E:	F0 04      	BEQ $0884
C1/0880:	64 36      	STZ $36
C1/0882:	64 38      	STZ $38
C1/0884:	A5 34      	LDA $34
C1/0886:	10 4A      	BPL $08D2
C1/0888:	BD B0 63   	LDA $63B0,X
C1/088B:	18         	CLC
C1/088C:	65 3A      	ADC $3A
C1/088E:	9D F5 43   	STA $43F5,X
C1/0891:	BD B2 63   	LDA $63B2,X
C1/0894:	18         	CLC
C1/0895:	65 3C      	ADC $3C
C1/0897:	9D F7 43   	STA $43F7,X
C1/089A:	BD F0 63   	LDA $63F0,X
C1/089D:	18         	CLC
C1/089E:	65 3A      	ADC $3A
C1/08A0:	9D 35 44   	STA $4435,X
C1/08A3:	BD F2 63   	LDA $63F2,X
C1/08A6:	18         	CLC
C1/08A7:	65 3C      	ADC $3C
C1/08A9:	9D 37 44   	STA $4437,X
C1/08AC:	BD 30 64   	LDA $6430,X
C1/08AF:	18         	CLC
C1/08B0:	65 3A      	ADC $3A
C1/08B2:	9D 75 44   	STA $4475,X
C1/08B5:	BD 32 64   	LDA $6432,X
C1/08B8:	18         	CLC
C1/08B9:	65 3C      	ADC $3C
C1/08BB:	9D 77 44   	STA $4477,X
C1/08BE:	BD 70 64   	LDA $6470,X
C1/08C1:	18         	CLC
C1/08C2:	65 3A      	ADC $3A
C1/08C4:	9D B5 44   	STA $44B5,X
C1/08C7:	BD 72 64   	LDA $6472,X
C1/08CA:	18         	CLC
C1/08CB:	65 3C      	ADC $3C
C1/08CD:	9D B7 44   	STA $44B7,X
C1/08D0:	80 26      	BRA $08F8

C1/08D2:	F0 24      	BEQ $08F8
C1/08D4:	BD B0 63   	LDA $63B0,X
C1/08D7:	18         	CLC
C1/08D8:	65 3A      	ADC $3A
C1/08DA:	9D F5 43   	STA $43F5,X
C1/08DD:	BD B2 63   	LDA $63B2,X
C1/08E0:	18         	CLC
C1/08E1:	65 3C      	ADC $3C
C1/08E3:	9D F7 43   	STA $43F7,X
C1/08E6:	BD F0 63   	LDA $63F0,X
C1/08E9:	18         	CLC
C1/08EA:	65 3A      	ADC $3A
C1/08EC:	9D 35 44   	STA $4435,X
C1/08EF:	BD F2 63   	LDA $63F2,X
C1/08F2:	18         	CLC
C1/08F3:	65 3C      	ADC $3C
C1/08F5:	9D 37 44   	STA $4437,X
C1/08F8:	A5 44      	LDA $44
C1/08FA:	D0 24      	BNE $0920
C1/08FC:	BD 30 63   	LDA $6330,X
C1/08FF:	18         	CLC
C1/0900:	65 36      	ADC $36
C1/0902:	9D 75 47   	STA $4775,X
C1/0905:	BD 32 63   	LDA $6332,X
C1/0908:	18         	CLC
C1/0909:	65 38      	ADC $38
C1/090B:	9D 77 47   	STA $4777,X
C1/090E:	BD 70 63   	LDA $6370,X
C1/0911:	18         	CLC
C1/0912:	65 36      	ADC $36
C1/0914:	9D B5 47   	STA $47B5,X
C1/0917:	BD 72 63   	LDA $6372,X
C1/091A:	18         	CLC
C1/091B:	65 38      	ADC $38
C1/091D:	9D B7 47   	STA $47B7,X
C1/0920:	E8         	INX
C1/0921:	E8         	INX
C1/0922:	E8         	INX
C1/0923:	E8         	INX
C1/0924:	E0 40      	CPX #$40
C1/0926:	F0 03      	BEQ $092B
C1/0928:	4C 84 08   	JMP $0884

C1/092B:	7B         	TDC
C1/092C:	E2 20      	SEP #$20           ; 8-bit A
C1/092E:	A8         	TAY
C1/092F:	A5 0E      	LDA $0E
C1/0931:	4A         	LSR A
C1/0932:	29 3E      	AND #$3E
C1/0934:	AA         	TAX
C1/0935:	A5 44      	LDA $44
C1/0937:	F0 5A      	BEQ $0993
C1/0939:	AD B8 EC   	LDA $ECB8
C1/093C:	C9 2E      	CMP #$2E
C1/093E:	F0 1D      	BEQ $095D
C1/0940:	C9 37      	CMP #$37
C1/0942:	D0 32      	BNE $0976
C1/0944:	C2 20      	REP #$20
C1/0946:	BD FF E7   	LDA $E7FF,X
C1/0949:	99 77 47   	STA $4777,Y
C1/094C:	E8         	INX
C1/094D:	E8         	INX
C1/094E:	8A         	TXA
C1/094F:	29 3F 00   	AND #$003F
C1/0952:	AA         	TAX
C1/0953:	C8         	INY
C1/0954:	C8         	INY
C1/0955:	C8         	INY
C1/0956:	C8         	INY
C1/0957:	C0 80      	CPY #$80
C1/0959:	D0 EB      	BNE $0946
C1/095B:	80 33      	BRA $0990
C1/095D:	C2 20      	REP #$20
C1/095F:	BD 3F E8   	LDA $E83F,X
C1/0962:	99 77 47   	STA $4777,Y
C1/0965:	E8         	INX
C1/0966:	E8         	INX
C1/0967:	8A         	TXA
C1/0968:	29 3F 00   	AND #$003F
C1/096B:	AA         	TAX
C1/096C:	C8         	INY
C1/096D:	C8         	INY
C1/096E:	C8         	INY
C1/096F:	C8         	INY
C1/0970:	C0 80      	CPY #$80
C1/0972:	D0 EB      	BNE $095F
C1/0974:	80 1A      	BRA $0990
C1/0976:	C2 20      	REP #$20
C1/0978:	BD FF E7   	LDA $E7FF,X
C1/097B:	99 75 47   	STA $4775,Y
C1/097E:	99 77 47   	STA $4777,Y
C1/0981:	E8         	INX
C1/0982:	E8         	INX
C1/0983:	8A         	TXA
C1/0984:	29 3F 00   	AND #$003F
C1/0987:	AA         	TAX
C1/0988:	C8         	INY
C1/0989:	C8         	INY
C1/098A:	C8         	INY
C1/098B:	C8         	INY
C1/098C:	C0 80      	CPY #$80
C1/098E:	D0 E8      	BNE $0978
C1/0990:	7B         	TDC
C1/0991:	E2 20      	SEP #$20           ; 8-bit A
C1/0993:	C2 10      	REP #$10
C1/0995:	60         	RTS

; Check for pressing "start" to pause
C1/0996:	AD AB 62   	LDA $62AB          ; battle is paused
C1/0999:	F0 1B      	BEQ $09B6          ; branch if not ^

; Check for "unpause"
C1/099B:	AD ED E9   	LDA $E9ED          ; disable sound effects
C1/099E:	D0 3A      	BNE $09DA          ; if ^ exit with carry set
C1/09A0:	A5 09      	LDA $09            ; non-auto-fire buttons
C1/09A2:	C9 10      	CMP #$10           ; pushing only "start"
C1/09A4:	D0 34      	BNE $09DA          ; exit if not ^
C1/09A6:	9C AB 62   	STZ $62AB          ; clear "paused" flag
C1/09A9:	7B         	TDC                ; zero A/B
C1/09AA:	8F 41 21 00	STA $002141        ; some audio setting
C1/09AE:	A9 F5      	LDA #$F5           ; some audio setting
C1/09B0:	8F 40 21 00	STA $002140        ; some audio setting
C1/09B4:	80 24      	BRA $09DA          ; exit with carry set (paused still)

; Check for "pause"
C1/09B6:	AD 8A 62   	LDA $628A          ; disable flashback/pause
C1/09B9:	D0 21      	BNE $09DC          ; if ^, exit with carry clear
C1/09BB:	AD ED E9   	LDA $E9ED          ; disable sound effects
C1/09BE:	D0 1C      	BNE $09DC          ; if ^, exit with carry clear
C1/09C0:	AD 0F EC   	LDA $EC0F          ; disable pausing
C1/09C3:	D0 17      	BNE $09DC          ; if ^, exit with carry clear
C1/09C5:	A5 09      	LDA $09            ; non-auto-fire buttons
C1/09C7:	C9 10      	CMP #$10           ; pushing only "start"
C1/09C9:	D0 11      	BNE $09DC          ; if not ^, exit with carry clear
C1/09CB:	A9 01      	LDA #$01           ; some audio setting
C1/09CD:	8D AB 62   	STA $62AB          ; some audio setting
C1/09D0:	8F 41 21 00	STA $002141        ; some audio setting
C1/09D4:	A9 F5      	LDA #$F5           ; some audio setting
C1/09D6:	8F 40 21 00	STA $002140        ; some audio setting
C1/09DA:	38         	SEC                ; set carry (we're paused)
C1/09DB:	60         	RTS

C1/09DC:	18         	CLC                ; clear carry (we're unpaused)
C1/09DD:	60         	RTS

C1/09DE:	0A         	ASL A
C1/09DF:	AA         	TAX
C1/09E0:	C2 20      	REP #$20
C1/09E2:	BF C4 D2 C2	LDA $C2D2C4,X
C1/09E6:	8D 72 43   	STA $4372
C1/09E9:	BF D4 D2 C2	LDA $C2D2D4,X
C1/09ED:	8D 16 21   	STA $2116
C1/09F0:	A0 80 00   	LDY #$0080
C1/09F3:	8C 75 43   	STY $4375
C1/09F6:	A9 80 00   	LDA #$0080
C1/09F9:	8D 0B 42   	STA $420B
C1/09FC:	BF CC D2 C2	LDA $C2D2CC,X
C1/0A00:	8D 72 43   	STA $4372
C1/0A03:	BF DC D2 C2	LDA $C2D2DC,X
C1/0A07:	8D 16 21   	STA $2116
C1/0A0A:	8C 75 43   	STY $4375
C1/0A0D:	A9 80 00   	LDA #$0080
C1/0A10:	E2 20      	SEP #$20           ; 8-bit A
C1/0A12:	8D 0B 42   	STA $420B
C1/0A15:	60         	RTS

; DMA transfer
C1/0A16:	7B         	TDC            ; Clear A
C1/0A17:	48         	PHA            ; Put on stack
C1/0A18:	AB         	PLB            ; Set DB register to $00
C1/0A19:	8D 0C 42   	STA $420C      ; Disable HDMA
C1/0A1C:	8D 74 43   	STA $4374      ; DMA #7 source bank = $00
C1/0A1F:	8D 77 43   	STA $4377      ; Clear transfer size HB
C1/0A22:	A8         	TAY            ; Clear Y
C1/0A23:	AD 3F 21   	LDA $213F      ; Set LB selector for H/V scanline loc regs?
C1/0A26:	A9 80      	LDA #$80       ; Force blank, brightness = 0
C1/0A28:	8D 00 21   	STA $2100      ; Set screen display register
C1/0A2B:	8C 02 21   	STY $2102      ; Set OAM object priority
C1/0A2E:	A2 00 04   	LDX #$0400     ; LB = transfer mode, HB = destination
C1/0A31:	8E 70 43   	STX $4370      ; Mode = $00 (CPU -> PPU/Absolute/Auto inc/1 byte)
                                       ; Destination = $2104
C1/0A34:	A2 00 03   	LDX #$0300     ; X = $0300?
C1/0A37:	8E 72 43   	STX $4372      ; DMA #7 source address = 00/0300?
C1/0A3A:	A2 20 02   	LDX #$0220     ; X = 544
C1/0A3D:	8E 75 43   	STX $4375      ; Transfer 544 bytes
C1/0A40:	A9 80      	LDA #$80       ; DMA channel 7
C1/0A42:	8D 0B 42   	STA $420B      ; Enable DMA on channel 7
C1/0A45:	7B         	TDC
C1/0A46:	8D 21 21   	STA $2121
C1/0A49:	A2 02 22   	LDX #$2202
C1/0A4C:	8E 70 43   	STX $4370
C1/0A4F:	A2 00 7E   	LDX #$7E00
C1/0A52:	8E 72 43   	STX $4372
C1/0A55:	A9 7E      	LDA #$7E
C1/0A57:	8D 74 43   	STA $4374
C1/0A5A:	A2 A0 00   	LDX #$00A0
C1/0A5D:	8E 75 43   	STX $4375
C1/0A60:	A9 80      	LDA #$80
C1/0A62:	8D 0B 42   	STA $420B
C1/0A65:	A2 11 EC   	LDX #$EC11
C1/0A68:	8E 72 43   	STX $4372
C1/0A6B:	A9 7E      	LDA #$7E
C1/0A6D:	8D 74 43   	STA $4374
C1/0A70:	A2 60 00   	LDX #$0060
C1/0A73:	8E 75 43   	STX $4375
C1/0A76:	A9 80      	LDA #$80
C1/0A78:	8D 0B 42   	STA $420B
C1/0A7B:	A2 00 7F   	LDX #$7F00
C1/0A7E:	8E 72 43   	STX $4372
C1/0A81:	A9 7E      	LDA #$7E
C1/0A83:	8D 74 43   	STA $4374
C1/0A86:	A2 00 01   	LDX #$0100
C1/0A89:	8E 75 43   	STX $4375
C1/0A8C:	A9 80      	LDA #$80
C1/0A8E:	8D 0B 42   	STA $420B
C1/0A91:	A9 01      	LDA #$01
C1/0A93:	8D 70 43   	STA $4370
C1/0A96:	A9 18      	LDA #$18
C1/0A98:	8D 71 43   	STA $4371
C1/0A9B:	AF BD 62 7E	LDA $7E62BD    ; Hide Characters? (during esper attack)
C1/0A9F:	D0 4B      	BNE $0AEC      ; Branch if not
C1/0AA1:	A5 98      	LDA $98
C1/0AA3:	29 1F      	AND #$1F
C1/0AA5:	0A         	ASL A
C1/0AA6:	AA         	TAX
C1/0AA7:	C2 20      	REP #$20
C1/0AA9:	A9 80 00   	LDA #$0080
C1/0AAC:	8D 75 43   	STA $4375
C1/0AAF:	BF 24 D3 C2	LDA $C2D324,X
C1/0AB3:	8D 16 21   	STA $2116
C1/0AB6:	BF E4 D2 C2	LDA $C2D2E4,X
C1/0ABA:	8D 72 43   	STA $4372
C1/0ABD:	7B         	TDC
C1/0ABE:	E2 20      	SEP #$20           ; 8-bit A
C1/0AC0:	A9 7F      	LDA #$7F
C1/0AC2:	8D 74 43   	STA $4374
C1/0AC5:	A9 80      	LDA #$80
C1/0AC7:	8D 0B 42   	STA $420B
C1/0ACA:	A5 98      	LDA $98
C1/0ACC:	29 03      	AND #$03
C1/0ACE:	85 36      	STA $36
C1/0AD0:	20 DE 09   	JSR $09DE
C1/0AD3:	AF BB 64 7E	LDA $7E64BB
C1/0AD7:	D0 13      	BNE $0AEC
C1/0AD9:	AF AD 7B 7E	LDA $7E7BAD
C1/0ADD:	30 0D      	BMI $0AEC
C1/0ADF:	C5 36      	CMP $36
C1/0AE1:	F0 03      	BEQ $0AE6
C1/0AE3:	20 DE 09   	JSR $09DE
C1/0AE6:	A9 FF      	LDA #$FF
C1/0AE8:	8F AD 7B 7E	STA $7E7BAD
C1/0AEC:	A2 40 00   	LDX #$0040
C1/0AEF:	8E 75 43   	STX $4375
C1/0AF2:	A2 ED 5F   	LDX #$5FED
C1/0AF5:	8E 72 43   	STX $4372
C1/0AF8:	A2 20 40   	LDX #$4020
C1/0AFB:	8E 16 21   	STX $2116
C1/0AFE:	A9 7E      	LDA #$7E
C1/0B00:	8D 74 43   	STA $4374
C1/0B03:	A9 80      	LDA #$80
C1/0B05:	8D 0B 42   	STA $420B
C1/0B08:	AF BB 64 7E	LDA $7E64BB
C1/0B0C:	F0 64      	BEQ $0B72
C1/0B0E:	A9 D8      	LDA #$D8
C1/0B10:	8D 74 43   	STA $4374
C1/0B13:	C2 20      	REP #$20
C1/0B15:	A0 80 00   	LDY #$0080
C1/0B18:	A2 80 00   	LDX #$0080
C1/0B1B:	AF BC 64 7E	LDA $7E64BC
C1/0B1F:	8D 72 43   	STA $4372
C1/0B22:	AF C4 64 7E	LDA $7E64C4
C1/0B26:	8D 16 21   	STA $2116
C1/0B29:	8C 75 43   	STY $4375
C1/0B2C:	8E 0B 42   	STX $420B
C1/0B2F:	AF BE 64 7E	LDA $7E64BE
C1/0B33:	8D 72 43   	STA $4372
C1/0B36:	AF C6 64 7E	LDA $7E64C6
C1/0B3A:	8D 16 21   	STA $2116
C1/0B3D:	8C 75 43   	STY $4375
C1/0B40:	8E 0B 42   	STX $420B
C1/0B43:	AF C0 64 7E	LDA $7E64C0
C1/0B47:	8D 72 43   	STA $4372
C1/0B4A:	AF C8 64 7E	LDA $7E64C8
C1/0B4E:	8D 16 21   	STA $2116
C1/0B51:	8C 75 43   	STY $4375
C1/0B54:	8E 0B 42   	STX $420B
C1/0B57:	AF C2 64 7E	LDA $7E64C2
C1/0B5B:	8D 72 43   	STA $4372
C1/0B5E:	AF CA 64 7E	LDA $7E64CA
C1/0B62:	8D 16 21   	STA $2116
C1/0B65:	8C 75 43   	STY $4375
C1/0B68:	8E 0B 42   	STX $420B
C1/0B6B:	7B         	TDC
C1/0B6C:	E2 20      	SEP #$20           ; 8-bit A
C1/0B6E:	8F BB 64 7E	STA $7E64BB
C1/0B72:	60         	RTS

C1/0B73:	9C 45 2F   	STZ $2F45
C1/0B76:	22 A4 B8 C2	JSL $C2B8A4
C1/0B7A:	AD 4B 2F   	LDA $2F4B
C1/0B7D:	29 01      	AND #$01
C1/0B7F:	0D 9A 62   	ORA $629A
C1/0B82:	0D EF E9   	ORA $E9EF
C1/0B85:	D0 0B      	BNE $0B92
C1/0B87:	A5 0A      	LDA $0A
C1/0B89:	29 30      	AND #$30
C1/0B8B:	C9 30      	CMP #$30
C1/0B8D:	D0 03      	BNE $0B92
C1/0B8F:	EE 45 2F   	INC $2F45
C1/0B92:	A6 0E      	LDX $0E
C1/0B94:	E8         	INX
C1/0B95:	86 0E      	STX $0E
C1/0B97:	22 25 B9 C2	JSL $C2B925
C1/0B9B:	64 47      	STZ $47
C1/0B9D:	AD AB 62   	LDA $62AB
C1/0BA0:	D0 04      	BNE $0BA6
C1/0BA2:	22 15 00 C0	JSL $C00015
C1/0BA6:	60         	RTS

; NMI interrupt
C1/0BA7:	08         	PHP
C1/0BA8:	C2 30      	REP #$30
C1/0BAA:	48         	PHA
C1/0BAB:	DA         	PHX
C1/0BAC:	5A         	PHY
C1/0BAD:	8B         	PHB
C1/0BAE:	0B         	PHD
C1/0BAF:	A2 00 00   	LDX #$0000
C1/0BB2:	DA         	PHX
C1/0BB3:	2B         	PLD
C1/0BB4:	7B         	TDC
C1/0BB5:	E2 20      	SEP #$20           ; 8-bit A
C1/0BB7:	AF 10 42 00	LDA $004210
C1/0BBB:	A5 46      	LDA $46
C1/0BBD:	F0 03      	BEQ $0BC2
C1/0BBF:	4C 42 0D   	JMP $0D42      ; Exit out of NMI

C1/0BC2:	E6 46      	INC $46
C1/0BC4:	20 16 0A   	JSR $0A16
C1/0BC7:	A9 7E      	LDA #$7E
C1/0BC9:	48         	PHA
C1/0BCA:	AB         	PLB
C1/0BCB:	20 69 04   	JSR $0469
C1/0BCE:	20 CA 04   	JSR $04CA      ; execute battle menu animation
C1/0BD1:	20 99 5D   	JSR $5D99
C1/0BD4:	20 A1 05   	JSR $05A1
C1/0BD7:	20 40 06   	JSR $0640
C1/0BDA:	20 6F 19   	JSR $196F      ; process pending VRAM DMA transfer
C1/0BDD:	22 8F A8 C2	JSL $C2A88F
C1/0BE1:	AD EF EC   	LDA $ECEF
C1/0BE4:	29 40      	AND #$40
C1/0BE6:	F0 2F      	BEQ $0C17
C1/0BE8:	C2 20      	REP #$20
C1/0BEA:	A9 E4 78   	LDA #$78E4
C1/0BED:	8F 16 21 00	STA $002116
C1/0BF1:	AD 90 62   	LDA $6290
C1/0BF4:	8F 18 21 00	STA $002118
C1/0BF8:	AD 92 62   	LDA $6292
C1/0BFB:	8F 18 21 00	STA $002118
C1/0BFF:	AD 94 62   	LDA $6294
C1/0C02:	8F 18 21 00	STA $002118
C1/0C06:	AD 96 62   	LDA $6296
C1/0C09:	8F 18 21 00	STA $002118
C1/0C0D:	AD 98 62   	LDA $6298
C1/0C10:	8F 18 21 00	STA $002118
C1/0C14:	7B         	TDC
C1/0C15:	E2 20      	SEP #$20           ; 8-bit A
C1/0C17:	20 FA 02   	JSR $02FA     ; Update HDMA #3 and/or #5 based on $7B95-$7B96
C1/0C1A:	20 73 03   	JSR $0373     ; Update HDMA #6
C1/0C1D:	20 47 03   	JSR $0347     ; Update HDMA #7
C1/0C20:	20 FB 03   	JSR $03FB     ; Enable HDMA, update HDMA #0, #1, #2 based on $800C-$800E
C1/0C23:	AD C4 E9   	LDA $E9C4
C1/0C26:	8F 1B 21 00	STA $00211B
C1/0C2A:	AD C5 E9   	LDA $E9C5
C1/0C2D:	8F 1B 21 00	STA $00211B
C1/0C31:	AD C6 E9   	LDA $E9C6
C1/0C34:	8F 1C 21 00	STA $00211C
C1/0C38:	AD C7 E9   	LDA $E9C7
C1/0C3B:	8F 1C 21 00	STA $00211C
C1/0C3F:	AD C8 E9   	LDA $E9C8
C1/0C42:	8F 1D 21 00	STA $00211D
C1/0C46:	AD C9 E9   	LDA $E9C9
C1/0C49:	8F 1D 21 00	STA $00211D
C1/0C4D:	AD CA E9   	LDA $E9CA
C1/0C50:	8F 1E 21 00	STA $00211E
C1/0C54:	AD CB E9   	LDA $E9CB
C1/0C57:	8F 1E 21 00	STA $00211E
C1/0C5B:	AD CC E9   	LDA $E9CC
C1/0C5E:	8F 1F 21 00	STA $00211F
C1/0C62:	AD CD E9   	LDA $E9CD
C1/0C65:	8F 1F 21 00	STA $00211F
C1/0C69:	AD CE E9   	LDA $E9CE
C1/0C6C:	8F 20 21 00	STA $002120
C1/0C70:	AD CF E9   	LDA $E9CF
C1/0C73:	8F 20 21 00	STA $002120
C1/0C77:	C2 20      	REP #$20
C1/0C79:	A9 08 F7   	LDA #$F708
C1/0C7C:	8F 26 21 00	STA $002126
C1/0C80:	A9 FF 00   	LDA #$00FF
C1/0C83:	8F 28 21 00	STA $002128
C1/0C87:	7B         	TDC
C1/0C88:	E2 20      	SEP #$20           ; 8-bit A
C1/0C8A:	AD AB 62   	LDA $62AB
C1/0C8D:	F0 06      	BEQ $0C95
C1/0C8F:	AD F9 E9   	LDA $E9F9
C1/0C92:	4A         	LSR A
C1/0C93:	80 03      	BRA $0C98
C1/0C95:	AD F9 E9   	LDA $E9F9
C1/0C98:	D0 02      	BNE $0C9C
C1/0C9A:	09 80      	ORA #$80
C1/0C9C:	8F 00 21 00	STA $002100
C1/0CA0:	20 EA 07   	JSR $07EA
C1/0CA3:	20 96 09   	JSR $0996      ; check for pressing "Start" to pause [?]
C1/0CA6:	B0 5B      	BCS $0D03
C1/0CA8:	AD CA 7B   	LDA $7BCA
C1/0CAB:	F0 0F      	BEQ $0CBC
C1/0CAD:	AE CA 62   	LDX $62CA
C1/0CB0:	BD 01 40   	LDA $4001,X
C1/0CB3:	C9 FF      	CMP #$FF
C1/0CB5:	D0 05      	BNE $0CBC
C1/0CB7:	A9 01      	LDA #$01
C1/0CB9:	8D CB 7B   	STA $7BCB
C1/0CBC:	20 A3 07   	JSR $07A3
C1/0CBF:	A9 08      	LDA #$08
C1/0CC1:	85 71      	STA $71
C1/0CC3:	20 CE B3   	JSR $B3CE
C1/0CC6:	20 6C 27   	JSR $276C
C1/0CC9:	20 59 06   	JSR $0659
C1/0CCC:	20 40 B5   	JSR $B540
C1/0CCF:	20 A2 36   	JSR $36A2
C1/0CD2:	20 0C 05   	JSR $050C
C1/0CD5:	AD BF 62   	LDA $62BF
C1/0CD8:	D0 03      	BNE $0CDD
C1/0CDA:	20 D3 2D   	JSR $2DD3
C1/0CDD:	20 14 5B   	JSR $5B14
C1/0CE0:	20 5C 5A   	JSR $5A5C
C1/0CE3:	AD 85 7B   	LDA $7B85      ; flag to open menu instantly [?]
C1/0CE6:	F0 0C      	BEQ $0CF4      ; branch if not opening instantly [?]
C1/0CE8:	20 14 5B   	JSR $5B14
C1/0CEB:	20 5C 5A   	JSR $5A5C
C1/0CEE:	20 14 5B   	JSR $5B14
C1/0CF1:	20 5C 5A   	JSR $5A5C

C1/0CF4:	20 24 55   	JSR $5524      ; do next action
C1/0CF7:	20 00 18   	JSR $1800
C1/0CFA:	20 73 0B   	JSR $0B73
C1/0CFD:	8B         	PHB
C1/0CFE:	22 0C 00 C3	JSL $C3000C    ; Advance play time
C1/0D02:	AB         	PLB
C1/0D03:	7B         	TDC
C1/0D04:	C2 20      	REP #$20
C1/0D06:	AD 0E 00   	LDA $000E
C1/0D09:	29 0F 00   	AND #$000F
C1/0D0C:	AA         	TAX
C1/0D0D:	AD 85 62   	LDA $6285
C1/0D10:	29 FF 00   	AND #$00FF
C1/0D13:	F0 1F      	BEQ $0D34
C1/0D15:	C9 80 00   	CMP #$0080
C1/0D18:	F0 0D      	BEQ $0D27
C1/0D1A:	BF 4C 0D C1	LDA $C10D4C,X  ; Data
C1/0D1E:	29 FF 00   	AND #$00FF
C1/0D21:	09 00 FF   	ORA #$FF00
C1/0D24:	8D B2 64   	STA $64B2
C1/0D27:	BF 4B 0D C1	LDA $C10D4B,X  ; Data
C1/0D2B:	29 FF 00   	AND #$00FF
C1/0D2E:	09 00 FF   	ORA #$FF00
C1/0D31:	8D B0 64   	STA $64B0

C1/0D34:	22 58 B2 C2	JSL $C2B258
C1/0D38:	7B         	TDC
C1/0D39:	E2 20      	SEP #$20           ; 8-bit A
C1/0D3B:	20 85 1B   	JSR $1B85
C1/0D3E:	E6 98      	INC $98
C1/0D40:	64 46      	STZ $46
C1/0D42:	C2 30      	REP #$30
C1/0D44:	2B         	PLD
C1/0D45:	AB         	PLB
C1/0D46:	7A         	PLY
C1/0D47:	FA         	PLX
C1/0D48:	68         	PLA
C1/0D49:	28         	PLP
C1/0D4A:	40         	RTI

C1/0D4B:	FF
C1/0D4C:	FDFE
C1/0D4E:	FDFC
C1/0D50:	FEFF
C1/0D52:	FDFC
C1/0D54:	FEFD
C1/0D56:	FFFD
C1/0D58:	FEFF
C1/0D5A:	FEFF

C1/0D5C:	A2 BF E7   	LDX #$E7BF
C1/0D5F:	64 24      	STZ $24
C1/0D61:	7B         	TDC
C1/0D62:	20 7D 0D   	JSR $0D7D
C1/0D65:	A5 24      	LDA $24
C1/0D67:	18         	CLC
C1/0D68:	69 02      	ADC #$02
C1/0D6A:	85 24      	STA $24
C1/0D6C:	C2 20      	REP #$20
C1/0D6E:	8A         	TXA
C1/0D6F:	18         	CLC
C1/0D70:	69 40 00   	ADC #$0040
C1/0D73:	AA         	TAX
C1/0D74:	7B         	TDC
C1/0D75:	E2 20      	SEP #$20           ; 8-bit A
C1/0D77:	E0 BF E9   	CPX #$E9BF
C1/0D7A:	D0 E5      	BNE $0D61
C1/0D7C:	60         	RTS

C1/0D7D:	A9 10      	LDA #$10
C1/0D7F:	85 1A      	STA $1A
C1/0D81:	A9 40      	LDA #$40
C1/0D83:	85 1C      	STA $1C
C1/0D85:	64 1D      	STZ $1D
C1/0D87:	64 22      	STZ $22
C1/0D89:	80 06      	BRA $0D91

; Generate curve values at $7E44F5

C1/0D8B:	48         	PHA              ; store A (always 0) [?]
C1/0D8C:	A9 01      	LDA #$01
C1/0D8E:	85 22      	STA $22          ; flag something on? [?]
C1/0D90:	68         	PLA              ; restore A (always 0) [?]

C1/0D91:	DA         	PHX              ; store destination RAM offset [?]
C1/0D92:	85 16      	STA $16          ; $00 or $40
C1/0D94:	86 10      	STX $10          ; store destination RAM offset [?]
C1/0D96:	A9 7E      	LDA #$7E         ; RAM bank
C1/0D98:	85 12      	STA $12          ; store destination RAM bank [?]
C1/0D9A:	64 1B      	STZ $1B
C1/0D9C:	8B         	PHB              ; store bank
C1/0D9D:	A9 00      	LDA #$00
C1/0D9F:	48         	PHA              ; prepare new bank $00
C1/0DA0:	AB         	PLB              ; set bank to $00
C1/0DA1:	7B         	TDC              ; A = 0000
C1/0DA2:	A8         	TAY              ; Y = 0000
C1/0DA3:	A5 16      	LDA $16          ; sine/cosine table offset ($00 or $40)
C1/0DA5:	C2 20      	REP #$20         ; 16-bit A
C1/0DA7:	0A         	ASL A            ; x2 ($00 or $80)
C1/0DA8:	85 16      	STA $16          ; update value
C1/0DAA:	A5 22      	LDA $22          ; $01 if $16 is $00. Else $00
C1/0DAC:	29 01 00   	AND #$0001       ; some flag [?]
C1/0DAF:	F0 22      	BEQ $0DD3        ; branch if not set ^

C1/0DB1:	E2 10      	SEP #$10         ; 8-bit XY
C1/0DB3:	20 02 6C   	JSR $6C02        ; get sin/cos value * slope [?]
C1/0DB6:	C2 10      	REP #$10         ; 16-bit XY
C1/0DB8:	3A         	DEC A
C1/0DB9:	3A         	DEC A            ; reduce value by 2 [?]
C1/0DBA:	97 10      	STA [$10],Y      ; save at RAM offset
C1/0DBC:	A5 16      	LDA $16          ; starts at $00 [?]
C1/0DBE:	18         	CLC              ; clear carry
C1/0DBF:	65 1A      	ADC $1A          ; add curve increment ($08 always [?])
C1/0DC1:	85 16      	STA $16          ; update value
C1/0DC3:	C8         	INY
C1/0DC4:	C8         	INY
C1/0DC5:	C8         	INY
C1/0DC6:	C8         	INY              ; advance 4 bytes
C1/0DC7:	C4 1C      	CPY $1C          ; compare to total data length
C1/0DC9:	D0 E6      	BNE $0DB1        ; loop

C1/0DCB:	7B         	TDC              ; A = 0000
C1/0DCC:	C2 10      	REP #$10         ; 16-bit XY
C1/0DCE:	E2 20      	SEP #$20         ; 8-bit A
C1/0DD0:	AB         	PLB              ; restore bank
C1/0DD1:	FA         	PLX              ; restore X
C1/0DD2:	60         	RTS

C1/0DD3:	E2 10      	SEP #$10         ; 8-bit XY
C1/0DD5:	20 02 6C   	JSR $6C02        ; get sin/cos value * slope [?]
C1/0DD8:	C2 10      	REP #$10         ; 16-bit XY
C1/0DDA:	3A         	DEC A
C1/0DDB:	3A         	DEC A            ; subtract 2 [?]
C1/0DDC:	97 10      	STA [$10],Y      ; store at RAM destination
C1/0DDE:	A5 16      	LDA $16
C1/0DE0:	18         	CLC
C1/0DE1:	65 1A      	ADC $1A
C1/0DE3:	85 16      	STA $16
C1/0DE5:	C8         	INY
C1/0DE6:	C8         	INY
C1/0DE7:	C4 1C      	CPY $1C
C1/0DE9:	D0 E8      	BNE $0DD3

C1/0DEB:	7B         	TDC                ; A = 0000
C1/0DEC:	C2 10      	REP #$10           ; 16-bit XY
C1/0DEE:	E2 20      	SEP #$20           ; 8-bit A
C1/0DF0:	AB         	PLB                ; restore bank
C1/0DF1:	FA         	PLX                ; restore X
C1/0DF2:	60         	RTS

C1/0DF3:	7B         	TDC
C1/0DF4:	AA         	TAX
C1/0DF5:	CA         	DEX
C1/0DF6:	86 10      	STX $10
C1/0DF8:	86 12      	STX $12
C1/0DFA:	AD 8D 62   	LDA $628D
C1/0DFD:	D0 0D      	BNE $0E0C
C1/0DFF:	AD EF E9   	LDA $E9EF
C1/0E02:	F0 08      	BEQ $0E0C
C1/0E04:	E8         	INX
C1/0E05:	86 12      	STX $12
C1/0E07:	A2 38 00   	LDX #$0038
C1/0E0A:	86 10      	STX $10
C1/0E0C:	C2 20      	REP #$20
C1/0E0E:	7B         	TDC
C1/0E0F:	AA         	TAX
C1/0E10:	A8         	TAY
C1/0E11:	BD 78 2E   	LDA $2E78,X
C1/0E14:	99 B5 2E   	STA $2EB5,Y
C1/0E17:	BD 80 2E   	LDA $2E80,X
C1/0E1A:	99 B7 2E   	STA $2EB7,Y
C1/0E1D:	BD 88 2E   	LDA $2E88,X
C1/0E20:	99 B9 2E   	STA $2EB9,Y
C1/0E23:	BD 90 2E   	LDA $2E90,X
C1/0E26:	99 BB 2E   	STA $2EBB,Y
C1/0E29:	BD 98 2E   	LDA $2E98,X
C1/0E2C:	25 10      	AND $10
C1/0E2E:	99 BD 2E   	STA $2EBD,Y
C1/0E31:	BD A0 2E   	LDA $2EA0,X
C1/0E34:	25 12      	AND $12
C1/0E36:	99 BF 2E   	STA $2EBF,Y
C1/0E39:	E8         	INX
C1/0E3A:	E8         	INX
C1/0E3B:	98         	TYA
C1/0E3C:	18         	CLC
C1/0E3D:	69 20 00   	ADC #$0020
C1/0E40:	A8         	TAY
C1/0E41:	E0 08 00   	CPX #$0008
C1/0E44:	D0 CB      	BNE $0E11
C1/0E46:	7B         	TDC
C1/0E47:	E2 20      	SEP #$20           ; 8-bit A
C1/0E49:	64 10      	STZ $10
C1/0E4B:	7B         	TDC
C1/0E4C:	AA         	TAX
C1/0E4D:	BD A1 2E   	LDA $2EA1,X
C1/0E50:	29 20      	AND #$20
C1/0E52:	49 20      	EOR #$20
C1/0E54:	4A         	LSR A
C1/0E55:	05 10      	ORA $10
C1/0E57:	4A         	LSR A
C1/0E58:	85 10      	STA $10
C1/0E5A:	E8         	INX
C1/0E5B:	E8         	INX
C1/0E5C:	E0 08 00   	CPX #$0008
C1/0E5F:	D0 EC      	BNE $0E4D
C1/0E61:	A5 10      	LDA $10
C1/0E63:	8D AD 61   	STA $61AD
C1/0E66:	60         	RTS

C1/0E67:	C2 20      	REP #$20
C1/0E69:	7B         	TDC
C1/0E6A:	AA         	TAX
C1/0E6B:	BD BD 2E   	LDA $2EBD,X
C1/0E6E:	9D C1 2E   	STA $2EC1,X
C1/0E71:	BD BF 2E   	LDA $2EBF,X
C1/0E74:	9D C3 2E   	STA $2EC3,X
C1/0E77:	8A         	TXA
C1/0E78:	18         	CLC
C1/0E79:	69 20 00   	ADC #$0020
C1/0E7C:	AA         	TAX
C1/0E7D:	E0 80 00   	CPX #$0080
C1/0E80:	D0 E9      	BNE $0E6B
C1/0E82:	7B         	TDC
C1/0E83:	E2 20      	SEP #$20           ; 8-bit A
C1/0E85:	60         	RTS

; Load enmey formation data [?]

C1/0E86:	A2 0F 00   	LDX #$000F
C1/0E89:	86 22      	STX $22
C1/0E8B:	AE E0 11   	LDX $11E0
C1/0E8E:	86 24      	STX $24
C1/0E90:	C2 20      	REP #$20
C1/0E92:	20 F4 18   	JSR $18F4
C1/0E95:	E2 20      	SEP #$20           ; 8-bit A
C1/0E97:	A6 26      	LDX $26
C1/0E99:	BF 0E 62 CF	LDA $CF620E,X
C1/0E9D:	85 28      	STA $28
C1/0E9F:	C2 20      	REP #$20
C1/0EA1:	BF 00 62 CF	LDA $CF6200,X
C1/0EA5:	EB         	XBA
C1/0EA6:	4A         	LSR A
C1/0EA7:	4A         	LSR A
C1/0EA8:	4A         	LSR A
C1/0EA9:	4A         	LSR A
C1/0EAA:	4A         	LSR A
C1/0EAB:	4A         	LSR A
C1/0EAC:	29 3F 00   	AND #$003F
C1/0EAF:	85 10      	STA $10
C1/0EB1:	7B         	TDC
C1/0EB2:	E2 20      	SEP #$20           ; 8-bit A
C1/0EB4:	BF 00 62 CF	LDA $CF6200,X
C1/0EB8:	4A         	LSR A
C1/0EB9:	4A         	LSR A
C1/0EBA:	4A         	LSR A
C1/0EBB:	4A         	LSR A
C1/0EBC:	8D 00 20   	STA $2000
C1/0EBF:	BF 01 62 CF	LDA $CF6201,X      ; which enemies start visible
C1/0EC3:	29 3F      	AND #$3F           ; isolate only enemies
C1/0EC5:	8D AA 61   	STA $61AA          ; save
C1/0EC8:	7B         	TDC
C1/0EC9:	A8         	TAY
C1/0ECA:	46 28      	LSR $28
C1/0ECC:	2A         	ROL A
C1/0ECD:	29 01      	AND #$01
C1/0ECF:	85 2A      	STA $2A
C1/0ED1:	BF 08 62 CF	LDA $CF6208,X
C1/0ED5:	29 F0      	AND #$F0
C1/0ED7:	4A         	LSR A
C1/0ED8:	99 C3 80   	STA $80C3,Y
C1/0EDB:	7B         	TDC
C1/0EDC:	99 C4 80   	STA $80C4,Y
C1/0EDF:	BF 08 62 CF	LDA $CF6208,X
C1/0EE3:	29 0F      	AND #$0F
C1/0EE5:	0A         	ASL A
C1/0EE6:	0A         	ASL A
C1/0EE7:	0A         	ASL A
C1/0EE8:	99 CF 80   	STA $80CF,Y
C1/0EEB:	7B         	TDC
C1/0EEC:	99 D0 80   	STA $80D0,Y
C1/0EEF:	46 10      	LSR $10
C1/0EF1:	2A         	ROL A
C1/0EF2:	29 01      	AND #$01
C1/0EF4:	99 F4 80   	STA $80F4,Y
C1/0EF7:	C8         	INY
C1/0EF8:	C8         	INY
C1/0EF9:	E8         	INX
C1/0EFA:	C0 0C 00   	CPY #$000C
C1/0EFD:	D0 CB      	BNE $0ECA
C1/0EFF:	60         	RTS

C1/0F00:	C2 20      	REP #$20
C1/0F02:	7B         	TDC
C1/0F03:	AA         	TAX
C1/0F04:	A9 FF FF   	LDA #$FFFF
C1/0F07:	9D F7 43   	STA $43F7,X
C1/0F0A:	E8         	INX
C1/0F0B:	E8         	INX
C1/0F0C:	E8         	INX
C1/0F0D:	E8         	INX
C1/0F0E:	E0 5C 02   	CPX #$025C
C1/0F11:	D0 F4      	BNE $0F07
C1/0F13:	7B         	TDC
C1/0F14:	E2 20      	SEP #$20           ; 8-bit A
C1/0F16:	60         	RTS

C1/0F17:	22 F7 B6 C2	JSL $C2B6F7
C1/0F1B:	20 A5 46   	JSR $46A5
C1/0F1E:	60         	RTS

C1/0F1F:	A2 FF FF   	LDX #$FFFF
C1/0F22:	8E D6 64   	STX $64D6
C1/0F25:	8E D8 64   	STX $64D8
C1/0F28:	E8         	INX
C1/0F29:	A8         	TAY
C1/0F2A:	64 10      	STZ $10
C1/0F2C:	64 12      	STZ $12
C1/0F2E:	AD 47 2F   	LDA $2F47
C1/0F31:	49 FF      	EOR #$FF
C1/0F33:	85 14      	STA $14
C1/0F35:	AD 92 61   	LDA $6192
C1/0F38:	25 14      	AND $14
C1/0F3A:	85 14      	STA $14
C1/0F3C:	BD AE 2E   	LDA $2EAE,X
C1/0F3F:	C9 FF      	CMP #$FF
C1/0F41:	F0 12      	BEQ $0F55
C1/0F43:	A5 12      	LDA $12
C1/0F45:	09 10      	ORA #$10
C1/0F47:	85 12      	STA $12
C1/0F49:	A5 14      	LDA $14
C1/0F4B:	29 01      	AND #$01
C1/0F4D:	F0 06      	BEQ $0F55
C1/0F4F:	A5 10      	LDA $10
C1/0F51:	99 D6 64   	STA $64D6,Y
C1/0F54:	C8         	INY
C1/0F55:	46 14      	LSR $14
C1/0F57:	46 12      	LSR $12
C1/0F59:	E6 10      	INC $10
C1/0F5B:	8A         	TXA
C1/0F5C:	18         	CLC
C1/0F5D:	69 20      	ADC #$20
C1/0F5F:	AA         	TAX
C1/0F60:	C9 80      	CMP #$80
C1/0F62:	D0 D8      	BNE $0F3C
C1/0F64:	A5 12      	LDA $12
C1/0F66:	8D 1D 20   	STA $201D
C1/0F69:	9C AC 61   	STZ $61AC
C1/0F6C:	9C AD 61   	STZ $61AD
C1/0F6F:	AD 4A 2F   	LDA $2F4A
C1/0F72:	85 22      	STA $22
C1/0F74:	A9 18      	LDA #$18
C1/0F76:	85 24      	STA $24
C1/0F78:	20 D9 18   	JSR $18D9       ; Multiplication ($26 = $22 * $24)
C1/0F7B:	A6 26      	LDX $26
C1/0F7D:	BF 00 FD D0	LDA $D0FD00,X
C1/0F81:	29 01      	AND #$01
C1/0F83:	F0 09      	BEQ $0F8E
C1/0F85:	A2 FF FF   	LDX #$FFFF
C1/0F88:	8E D6 64   	STX $64D6
C1/0F8B:	8E D8 64   	STX $64D8
C1/0F8E:	60         	RTS

C1/0F8F:	7B         	TDC             ; A = 0000
C1/0F90:	A8         	TAY             ; Y = 0000 (character index)
C1/0F91:	98         	TYA
C1/0F92:	0A         	ASL A
C1/0F93:	0A         	ASL A
C1/0F94:	0A         	ASL A
C1/0F95:	0A         	ASL A
C1/0F96:	0A         	ASL A
C1/0F97:	AA         	TAX             ; X = Y * 32
C1/0F98:	BD C6 2E   	LDA $2EC6,X     ; character id
C1/0F9B:	85 22      	STA $22
C1/0F9D:	A9 16      	LDA #$16        ; 22 byte data block
C1/0F9F:	85 24      	STA $24
C1/0FA1:	20 D9 18   	JSR $18D9       ; Multiplication ($26 = $22 * $24)
C1/0FA4:	A6 26      	LDX $26         ; index to character data
C1/0FA6:	BF B5 7C ED	LDA $ED7CB5,X   ; some character flags
C1/0FAA:	29 10      	AND #$10        ; block weapon swap
C1/0FAC:	99 86 62   	STA $6286,Y     ; store 
C1/0FAF:	C8         	INY             ; increment character index
C1/0FB0:	C0 04 00   	CPY #$0004      ; 4 characters in battle
C1/0FB3:	D0 DC      	BNE $0F91       ; loop through all 4
C1/0FB5:	60         	RTS

C1/0FB6:	A2 07 00   	LDX #$0007
C1/0FB9:	9E AE 2E   	STZ $2EAE,X
C1/0FBC:	9E CE 2E   	STZ $2ECE,X
C1/0FBF:	9E EE 2E   	STZ $2EEE,X
C1/0FC2:	9E 0E 2F   	STZ $2F0E,X
C1/0FC5:	E8         	INX
C1/0FC6:	E0 16 00   	CPX #$0016
C1/0FC9:	D0 EE      	BNE $0FB9
C1/0FCB:	AD 98 2E   	LDA $2E98
C1/0FCE:	0D 9A 2E   	ORA $2E9A
C1/0FD1:	0D 9C 2E   	ORA $2E9C
C1/0FD4:	0D 9E 2E   	ORA $2E9E
C1/0FD7:	29 08      	AND #$08
C1/0FD9:	4A         	LSR A
C1/0FDA:	4A         	LSR A
C1/0FDB:	4A         	LSR A
C1/0FDC:	8D BA 64   	STA $64BA
C1/0FDF:	60         	RTS

C1/0FE0:	7B         	TDC
C1/0FE1:	AA         	TAX
C1/0FE2:	9E B6 61   	STZ $61B6,X
C1/0FE5:	E8         	INX
C1/0FE6:	E0 80 00   	CPX #$0080
C1/0FE9:	D0 F7      	BNE $0FE2
C1/0FEB:	9C EC E9   	STZ $E9EC
C1/0FEE:	9C ED E9   	STZ $E9ED
C1/0FF1:	AD D1 1D   	LDA $1DD1
C1/0FF4:	8D EF EC   	STA $ECEF
C1/0FF7:	AD 4E 1D   	LDA $1D4E          ; configuration settings
C1/0FFA:	29 07      	AND #$07           ; isolate wallpaper setting
C1/0FFC:	8D 34 2F   	STA $2F34
C1/0FFF:	9C F1 E9   	STZ $E9F1
C1/1002:	A9 FF      	LDA #$FF
C1/1004:	8D 46 2F   	STA $2F46
C1/1007:	8D 91 61   	STA $6191
C1/100A:	8D 0F EC   	STA $EC0F
C1/100D:	22 43 BD C2	JSL $C2BD43
C1/1011:	20 86 0E   	JSR $0E86
C1/1014:	AD AA 61   	LDA $61AA
C1/1017:	8D 1E 20   	STA $201E
C1/101A:	8D 2F 2F   	STA $2F2F          ; set enemies on battlefield
C1/101D:	8D AB 61   	STA $61AB
C1/1020:	7B         	TDC
C1/1021:	AA         	TAX
C1/1022:	CA         	DEX
C1/1023:	8E B2 61   	STX $61B2
C1/1026:	8E B4 61   	STX $61B4
C1/1029:	60         	RTS

C1/102A:	22 15 00 C0	JSL $C00015
C1/102E:	7B         	TDC
C1/102F:	AA         	TAX
C1/1030:	A9 E0      	LDA #$E0
C1/1032:	9D 00 03   	STA $0300,X
C1/1035:	E8         	INX
C1/1036:	E0 00 02   	CPX #$0200
C1/1039:	D0 F7      	BNE $1032
C1/103B:	7B         	TDC
C1/103C:	AA         	TAX
C1/103D:	9E 00 05   	STZ $0500,X
C1/1040:	E8         	INX
C1/1041:	E0 20 00   	CPX #$0020
C1/1044:	D0 F7      	BNE $103D
C1/1046:	A0 00 40   	LDY #$4000
C1/1049:	A2 00 20   	LDX #$2000
C1/104C:	20 46 19   	JSR $1946
C1/104F:	A0 00 2C   	LDY #$2C00
C1/1052:	A2 00 04   	LDX #$0400
C1/1055:	20 46 19   	JSR $1946
C1/1058:	C2 20      	REP #$20
C1/105A:	7B         	TDC
C1/105B:	AA         	TAX
C1/105C:	9F 00 A0 7F	STA $7FA000,X
C1/1060:	9F 00 A1 7F	STA $7FA100,X
C1/1064:	9F 00 A2 7F	STA $7FA200,X
C1/1068:	9F 00 A3 7F	STA $7FA300,X
C1/106C:	E8         	INX
C1/106D:	E8         	INX
C1/106E:	E0 00 01   	CPX #$0100
C1/1071:	D0 E9      	BNE $105C
C1/1073:	E2 20      	SEP #$20           ; 8-bit A
C1/1075:	AE E2 11   	LDX $11E2
C1/1078:	8E B8 EC   	STX $ECB8
C1/107B:	A9 FF      	LDA #$FF
C1/107D:	85 46      	STA $46
C1/107F:	9C EF E9   	STZ $E9EF
C1/1082:	20 E0 0F   	JSR $0FE0
C1/1085:	AD 44 2F   	LDA $2F44
C1/1088:	49 FF      	EOR #$FF
C1/108A:	8D E6 E9   	STA $E9E6
C1/108D:	20 B6 0F   	JSR $0FB6
C1/1090:	20 F3 0D   	JSR $0DF3
C1/1093:	20 67 0E   	JSR $0E67
C1/1096:	20 1F 0F   	JSR $0F1F
C1/1099:	A9 FF      	LDA #$FF
C1/109B:	8D AB 60   	STA $60AB
C1/109E:	85 55      	STA $55
C1/10A0:	A9 51      	LDA #$51
C1/10A2:	85 57      	STA $57
C1/10A4:	1A         	INC A
C1/10A5:	85 59      	STA $59
C1/10A7:	7B         	TDC
C1/10A8:	AA         	TAX
C1/10A9:	A9 C8      	LDA #$C8
C1/10AB:	9D CC 04   	STA $04CC,X
C1/10AE:	A9 97      	LDA #$97
C1/10B0:	9D CD 04   	STA $04CD,X
C1/10B3:	7B         	TDC
C1/10B4:	9D CE 04   	STA $04CE,X
C1/10B7:	9D CF 04   	STA $04CF,X
C1/10BA:	E8         	INX
C1/10BB:	E8         	INX
C1/10BC:	E8         	INX
C1/10BD:	E8         	INX
C1/10BE:	E0 24 00   	CPX #$0024
C1/10C1:	D0 E6      	BNE $10A9
C1/10C3:	A9 80      	LDA #$80
C1/10C5:	8D 1C 05   	STA $051C
C1/10C8:	A9 AA      	LDA #$AA
C1/10CA:	8D 1D 05   	STA $051D
C1/10CD:	8D 1E 05   	STA $051E
C1/10D0:	9C 1F 05   	STZ $051F
C1/10D3:	A2 00 68   	LDX #$6800
C1/10D6:	A0 00 08   	LDY #$0800
C1/10D9:	20 16 19   	JSR $1916
C1/10DC:	A2 00 70   	LDX #$7000
C1/10DF:	A0 00 08   	LDY #$0800
C1/10E2:	20 16 19   	JSR $1916
C1/10E5:	A2 00 0C   	LDX #$0C00
C1/10E8:	A0 00 04   	LDY #$0400
C1/10EB:	20 1F 19   	JSR $191F
C1/10EE:	A2 00 54   	LDX #$5400
C1/10F1:	A0 00 04   	LDY #$0400
C1/10F4:	20 A5 17   	JSR $17A5
C1/10F7:	A2 00 78   	LDX #$7800
C1/10FA:	A0 00 08   	LDY #$0800
C1/10FD:	20 A5 17   	JSR $17A5
C1/1100:	20 0C 6D   	JSR $6D0C
C1/1103:	7B         	TDC
C1/1104:	AA         	TAX
C1/1105:	BF 43 BF C2	LDA $C2BF43,X
C1/1109:	9D D2 E9   	STA $E9D2,X
C1/110C:	E8         	INX
C1/110D:	E0 08 00   	CPX #$0008
C1/1110:	D0 F3      	BNE $1105
C1/1112:	20 AF 1D   	JSR $1DAF
C1/1115:	20 7C 25   	JSR $257C
C1/1118:	20 DD 22   	JSR $22DD
C1/111B:	20 72 3E   	JSR $3E72
C1/111E:	20 88 15   	JSR $1588
C1/1121:	20 D1 25   	JSR $25D1
C1/1124:	20 3F 40   	JSR $403F
C1/1127:	20 9C 52   	JSR $529C
C1/112A:	20 17 0F   	JSR $0F17
C1/112D:	20 A2 03   	JSR $03A2
C1/1130:	20 47 6B   	JSR $6B47
C1/1133:	20 6B 49   	JSR $496B
C1/1136:	20 8F 46   	JSR $468F
C1/1139:	20 01 4A   	JSR $4A01
C1/113C:	20 59 47   	JSR $4759
C1/113F:	EE BB 7B   	INC $7BBB
C1/1142:	20 27 3D   	JSR $3D27
C1/1145:	20 4D 3E   	JSR $3E4D
C1/1148:	20 17 B5   	JSR $B517
C1/114B:	A2 00 E0   	LDX #$E000
C1/114E:	86 F3      	STX $F3
C1/1150:	A9 D2      	LDA #$D2
C1/1152:	85 F5      	STA $F5
C1/1154:	A2 00 A4   	LDX #$A400
C1/1157:	86 F6      	STX $F6
C1/1159:	A9 7F      	LDA #$7F
C1/115B:	85 F8      	STA $F8
C1/115D:	22 6D FF C2	JSL $C2FF6D       ; decompress "Battle Status Graphics"
C1/1161:	A2 00 04   	LDX #$0400
C1/1164:	86 36      	STX $36
C1/1166:	A2 00 B8   	LDX #$B800
C1/1169:	A9 7F      	LDA #$7F
C1/116B:	A0 00 2E   	LDY #$2E00
C1/116E:	20 2B 1A   	JSR $1A2B         ; execute VRAM DMA transfer
C1/1171:	A2 80 00   	LDX #$0080
C1/1174:	86 36      	STX $36
C1/1176:	A2 AD 5F   	LDX #$5FAD
C1/1179:	A9 7E      	LDA #$7E
C1/117B:	A0 00 40   	LDY #$4000
C1/117E:	20 2B 1A   	JSR $1A2B         ; execute VRAM DMA transfer
C1/1181:	7B         	TDC
C1/1182:	AA         	TAX
C1/1183:	BD 1F 7A   	LDA $7A1F,X
C1/1186:	9D 47 7A   	STA $7A47,X
C1/1189:	E8         	INX
C1/118A:	E0 28 00   	CPX #$0028
C1/118D:	D0 F4      	BNE $1183
C1/118F:	A9 09      	LDA #$09
C1/1191:	8D 6F 89   	STA $896F
C1/1194:	A9 09      	LDA #$09
C1/1196:	8D 73 89   	STA $8973
C1/1199:	A9 02      	LDA #$02
C1/119B:	8D 77 89   	STA $8977
C1/119E:	9C 70 89   	STZ $8970
C1/11A1:	9C 74 89   	STZ $8974
C1/11A4:	9C 78 89   	STZ $8978
C1/11A7:	A9 0C      	LDA #$0C
C1/11A9:	8D 71 89   	STA $8971
C1/11AC:	A9 61      	LDA #$61
C1/11AE:	8D 72 89   	STA $8972
C1/11B1:	A9 54      	LDA #$54
C1/11B3:	8D 7B 89   	STA $897B
C1/11B6:	8D 7C 89   	STA $897C
C1/11B9:	A9 69      	LDA #$69
C1/11BB:	8D 75 89   	STA $8975
C1/11BE:	A9 6C      	LDA #$6C
C1/11C0:	8D 79 89   	STA $8979
C1/11C3:	A9 71      	LDA #$71
C1/11C5:	8D 76 89   	STA $8976
C1/11C8:	8D 7A 89   	STA $897A
C1/11CB:	A9 79      	LDA #$79
C1/11CD:	8D 7F 89   	STA $897F
C1/11D0:	8D 80 89   	STA $8980
C1/11D3:	8D 84 89   	STA $8984
C1/11D6:	A9 40      	LDA #$40
C1/11D8:	8D 83 89   	STA $8983
C1/11DB:	A9 10      	LDA #$10
C1/11DD:	8D 7D 89   	STA $897D
C1/11E0:	8D 7D 60   	STA $607D
C1/11E3:	A9 55      	LDA #$55
C1/11E5:	8D 7E 89   	STA $897E
C1/11E8:	A9 17      	LDA #$17
C1/11EA:	8D 8D 89   	STA $898D
C1/11ED:	8D 91 89   	STA $8991
C1/11F0:	9C 89 89   	STZ $8989
C1/11F3:	9C 8A 89   	STZ $898A
C1/11F6:	9C 8E 89   	STZ $898E
C1/11F9:	9C 92 89   	STZ $8992
C1/11FC:	A9 22      	LDA #$22
C1/11FE:	8D 81 89   	STA $8981
C1/1201:	8D 85 89   	STA $8985
C1/1204:	A9 55      	LDA #$55
C1/1206:	8D 82 89   	STA $8982
C1/1209:	8D 86 89   	STA $8986
C1/120C:	7B         	TDC
C1/120D:	AA         	TAX
C1/120E:	C2 20      	REP #$20
C1/1210:	A9 97 FF   	LDA #$FF97
C1/1213:	9D 32 EA   	STA $EA32,X
C1/1216:	E8         	INX
C1/1217:	E8         	INX
C1/1218:	E0 C0 01   	CPX #$01C0
C1/121B:	D0 F6      	BNE $1213
C1/121D:	7B         	TDC
C1/121E:	E2 20      	SEP #$20           ; 8-bit A
C1/1220:	A9 80      	LDA #$80
C1/1222:	8D F9 E9   	STA $E9F9
C1/1225:	7B         	TDC
C1/1226:	AA         	TAX
C1/1227:	A9 08      	LDA #$08
C1/1229:	9D 1F 9A   	STA $9A1F,X
C1/122C:	9E 21 9A   	STZ $9A21,X
C1/122F:	A9 F7      	LDA #$F7
C1/1231:	9D 20 9A   	STA $9A20,X
C1/1234:	9D 22 9A   	STA $9A22,X
C1/1237:	E8         	INX
C1/1238:	E8         	INX
C1/1239:	E8         	INX
C1/123A:	E8         	INX
C1/123B:	E0 5C 02   	CPX #$025C
C1/123E:	D0 E7      	BNE $1227
C1/1240:	9E 1F 9A   	STZ $9A1F,X
C1/1243:	9E 21 9A   	STZ $9A21,X
C1/1246:	A9 F7      	LDA #$F7
C1/1248:	9D 20 9A   	STA $9A20,X
C1/124B:	9D 22 9A   	STA $9A22,X
C1/124E:	E8         	INX
C1/124F:	E8         	INX
C1/1250:	E8         	INX
C1/1251:	E8         	INX
C1/1252:	E0 00 04   	CPX #$0400
C1/1255:	D0 E9      	BNE $1240
C1/1257:	C2 20      	REP #$20
C1/1259:	8B         	PHB
C1/125A:	A9 5F 02   	LDA #$025F
C1/125D:	A2 1F 9A   	LDX #$9A1F
C1/1260:	A0 1F 9F   	LDY #$9F1F
C1/1263:	54 7E 7E   	MVN 7E 7E
C1/1266:	AB         	PLB
C1/1267:	7B         	TDC
C1/1268:	E2 20      	SEP #$20           ; 8-bit A
C1/126A:	7B         	TDC
C1/126B:	AA         	TAX
C1/126C:	A9 E0      	LDA #$E0
C1/126E:	9D 96 89   	STA $8996,X
C1/1271:	E8         	INX
C1/1272:	E8         	INX
C1/1273:	E8         	INX
C1/1274:	E8         	INX
C1/1275:	E0 5C 02   	CPX #$025C
C1/1278:	D0 F4      	BNE $126E
C1/127A:	7B         	TDC
C1/127B:	AA         	TAX
C1/127C:	A9 E0      	LDA #$E0
C1/127E:	85 10      	STA $10
C1/1280:	64 1A      	STZ $1A
C1/1282:	A9 02      	LDA #$02
C1/1284:	9D F0 8B   	STA $8BF0,X
C1/1287:	A9 82      	LDA #$82
C1/1289:	9D F1 8B   	STA $8BF1,X
C1/128C:	A5 10      	LDA $10
C1/128E:	9D F2 8B   	STA $8BF2,X
C1/1291:	E6 1A      	INC $1A
C1/1293:	A5 1A      	LDA $1A
C1/1295:	C9 03      	CMP #$03
C1/1297:	D0 0A      	BNE $12A3
C1/1299:	64 1A      	STZ $1A
C1/129B:	A5 10      	LDA $10
C1/129D:	C9 FF      	CMP #$FF
C1/129F:	F0 02      	BEQ $12A3
C1/12A1:	E6 10      	INC $10
C1/12A3:	E8         	INX
C1/12A4:	E8         	INX
C1/12A5:	E8         	INX
C1/12A6:	E8         	INX
C1/12A7:	E0 20 01   	CPX #$0120
C1/12AA:	D0 D6      	BNE $1282
C1/12AC:	7B         	TDC
C1/12AD:	AA         	TAX
C1/12AE:	A8         	TAY
C1/12AF:	BD F6 8B   	LDA $8BF6,X
C1/12B2:	99 63 EB   	STA $EB63,Y
C1/12B5:	A9 82      	LDA #$82
C1/12B7:	99 62 EB   	STA $EB62,Y
C1/12BA:	E8         	INX
C1/12BB:	E8         	INX
C1/12BC:	E8         	INX
C1/12BD:	E8         	INX
C1/12BE:	C8         	INY
C1/12BF:	C8         	INY
C1/12C0:	C0 90 00   	CPY #$0090
C1/12C3:	D0 EA      	BNE $12AF
C1/12C5:	A2 FF FF   	LDX #$FFFF
C1/12C8:	8E 01 40   	STX $4001
C1/12CB:	8E 03 40   	STX $4003
C1/12CE:	7B         	TDC
C1/12CF:	AA         	TAX
C1/12D0:	3A         	DEC A
C1/12D1:	9D 2D 60   	STA $602D,X       ; clears half of "inventory" buffer [?]
C1/12D4:	E8         	INX
C1/12D5:	E0 40 00   	CPX #$0040        ; TODO: This should be 0x50
C1/12D8:	D0 F7      	BNE $12D1
C1/12DA:	7B         	TDC
C1/12DB:	AA         	TAX
C1/12DC:	3A         	DEC A
C1/12DD:	8D AD 7B   	STA $7BAD
C1/12E0:	9D AE 2B   	STA $2BAE,X
C1/12E3:	E8         	INX
C1/12E4:	E0 20 00   	CPX #$0020
C1/12E7:	D0 F7      	BNE $12E0
C1/12E9:	7B         	TDC
C1/12EA:	AA         	TAX
C1/12EB:	8E 30 2F   	STX $2F30
C1/12EE:	8E 32 2F   	STX $2F32
C1/12F1:	20 5C 0D   	JSR $0D5C
C1/12F4:	20 F6 1F   	JSR $1FF6         ; fill BG tile data buffer w/ $02EE
C1/12F7:	A2 C0 04   	LDX #$04C0
C1/12FA:	86 36      	STX $36
C1/12FC:	A2 7F A9   	LDX #$A97F
C1/12FF:	A9 7E      	LDA #$7E
C1/1301:	A0 00 0C   	LDY #$0C00
C1/1304:	20 2B 1A   	JSR $1A2B         ; execute VRAM DMA transfer
C1/1307:	A9 4C      	LDA #$4C
C1/1309:	8D F7 E9   	STA $E9F7
C1/130C:	9C F8 E9   	STZ $E9F8
C1/130F:	A9 01      	LDA #$01
C1/1311:	8D F6 E9   	STA $E9F6
C1/1314:	A2 FF 21   	LDX #$21FF
C1/1317:	8E 90 62   	STX $6290
C1/131A:	8E 92 62   	STX $6292
C1/131D:	8E 94 62   	STX $6294
C1/1320:	8E 96 62   	STX $6296
C1/1323:	8E 98 62   	STX $6298
C1/1326:	20 8F 0F   	JSR $0F8F
C1/1329:	20 7C 95   	JSR $957C          ; update sprite priority (buffer)
C1/132C:	20 59 06   	JSR $0659
C1/132F:	22 52 B6 C2	JSL $C2B652
C1/1333:	AE E0 11   	LDX $11E0
C1/1336:	E0 D7 01   	CPX #$01D7
C1/1339:	D0 0B      	BNE $1346
C1/133B:	EE 82 62   	INC $6282
C1/133E:	9C E6 E9   	STZ $E9E6
C1/1341:	9C 1E 20   	STZ $201E
C1/1344:	80 24      	BRA $136A
C1/1346:	E0 E5 01   	CPX #$01E5
C1/1349:	D0 1F      	BNE $136A
C1/134B:	A2 00 00   	LDX #$0000
C1/134E:	86 18      	STX $18
C1/1350:	A2 00 02   	LDX #$0200
C1/1353:	86 1A      	STX $1A
C1/1355:	22 42 B4 C2	JSR $C2B442
C1/1359:	EE 8A 62   	INC $628A
C1/135C:	7B         	TDC
C1/135D:	AA         	TAX
C1/135E:	BD 80 7F   	LDA $7F80,X
C1/1361:	9D AD 81   	STA $81AD,X
C1/1364:	E8         	INX
C1/1365:	E0 80 00   	CPX #$0080
C1/1368:	D0 F4      	BNE $135E
C1/136A:	A9 01      	LDA #$01
C1/136C:	8D 0D 7B   	STA $7B0D
C1/136F:	8D 0E 7B   	STA $7B0E
C1/1372:	8D 0F 7B   	STA $7B0F
C1/1375:	9C 67 7B   	STZ $7B67
C1/1378:	9C 6B 7B   	STZ $7B6B
C1/137B:	A9 17      	LDA #$17
C1/137D:	8F 2C 21 00	STA $00212C
C1/1381:	8F 2E 21 00	STA $00212E
C1/1385:	64 46      	STZ $46
C1/1387:	EE 97 61   	INC $6197
C1/138A:	22 24 91 C1	JSL $C19124
C1/138E:	C2 20      	REP #$20
C1/1390:	22 58 B2 C2	JSL $C2B258
C1/1394:	7B         	TDC
C1/1395:	E2 20      	SEP #$20           ; 8-bit A
C1/1397:	AD 1E 20   	LDA $201E
C1/139A:	48         	PHA
C1/139B:	9C 1E 20   	STZ $201E
C1/139E:	AF 10 42 00	LDA $004210
C1/13A2:	10 FA      	BPL $139E
C1/13A4:	AF 10 42 00	LDA $004210
C1/13A8:	10 FA      	BPL $13A4
C1/13AA:	A9 81      	LDA #$81
C1/13AC:	8F 00 42 00	STA $004200
C1/13B0:	58         	CLI
C1/13B1:	EE 8C 62   	INC $628C
C1/13B4:	EE EF E9   	INC $E9EF
C1/13B7:	7B         	TDC
C1/13B8:	AA         	TAX
C1/13B9:	BF 31 14 C1	LDA $C11431,X    ; Data
C1/13BD:	9D 6E 2D   	STA $2D6E,X
C1/13C0:	E8         	INX
C1/13C1:	E0 09 00   	CPX #$0009
C1/13C4:	D0 F3      	BNE $13B9
C1/13C6:	68         	PLA
C1/13C7:	8D 71 2D   	STA $2D71
C1/13CA:	AD AB 61   	LDA $61AB
C1/13CD:	48         	PHA
C1/13CE:	9C AB 61   	STZ $61AB
C1/13D1:	AD 48 2F   	LDA $2F48
C1/13D4:	29 0F      	AND #$0F
C1/13D6:	8D 6F 2D   	STA $2D6F
C1/13D9:	AA         	TAX
C1/13DA:	BF 20 14 C1	LDA $C11420,X    ; Data
C1/13DE:	F0 1C      	BEQ $13FC
C1/13E0:	AE 6E 2D   	LDX $2D6E
C1/13E3:	DA         	PHX
C1/13E4:	AE 70 2D   	LDX $2D70
C1/13E7:	DA         	PHX
C1/13E8:	AE 72 2D   	LDX $2D72
C1/13EB:	8E 6E 2D   	STX $2D6E
C1/13EE:	AE 74 2D   	LDX $2D74
C1/13F1:	8E 70 2D   	STX $2D70
C1/13F4:	FA         	PLX
C1/13F5:	8E 74 2D   	STX $2D74
C1/13F8:	FA         	PLX
C1/13F9:	8E 72 2D   	STX $2D72

C1/13FC:	22 12 95 C1	JSL $C19512
C1/1400:	68         	PLA
C1/1401:	8D AB 61   	STA $61AB
C1/1404:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/1407:	AD F6 E9   	LDA $E9F6
C1/140A:	D0 F8      	BNE $1404
C1/140C:	7B         	TDC                ; A = 0000
C1/140D:	AA         	TAX                ; X = 0000
C1/140E:	86 10      	STX $10            ; set window mask fill byte
C1/1410:	20 3C C2   	JSR $C23C          ; clear subscreen window mask
C1/1413:	EE 96 7B   	INC $7B96
C1/1416:	9C EF E9   	STZ $E9EF
C1/1419:	9C 8C 62   	STZ $628C
C1/141C:	9C 0F EC   	STZ $EC0F
C1/141F:	60         	RTS

C1/1420:	00
C1/1421:	01
C1/1422:	00
C1/1423:	01
C1/1424:	01
C1/1425:	01
C1/1426:	01
C1/1427:	00
C1/1428:	00
C1/1429:	00
C1/142A:	00
C1/142B:	00
C1/142C:	00
C1/142D:	00
C1/142E:	00
C1/142F:	00
C1/1430:	00
C1/1431:	13
C1/1432:	00
C1/1433:	00
C1/1434:	00
C1/1435:	0F
C1/1436:	00
C1/1437:	00
C1/1438:	00
C1/1439:	FF

C1/143A:	8114
C1/143C:	9A14
C1/143E:	D714
C1/1440:	3315

C1/1442:	7B         	TDC
C1/1443:	AA         	TAX
C1/1444:	3A         	DEC A
C1/1445:	9D 86 7A   	STA $7A86,X
C1/1448:	E8         	INX
C1/1449:	E0 18 00   	CPX #$0018
C1/144C:	D0 F7      	BNE $1445
C1/144E:	7B         	TDC
C1/144F:	AA         	TAX
C1/1450:	9E 7B 80   	STZ $807B,X
C1/1453:	E8         	INX
C1/1454:	E0 0C 00   	CPX #$000C
C1/1457:	D0 F7      	BNE $1450
C1/1459:	60         	RTS

C1/145A:	7B         	TDC
C1/145B:	AA         	TAX
C1/145C:	8A         	TXA
C1/145D:	9D 86 7A   	STA $7A86,X
C1/1460:	E8         	INX
C1/1461:	E0 06 00   	CPX #$0006
C1/1464:	D0 F6      	BNE $145C
C1/1466:	60         	RTS

C1/1467:	7B         	TDC
C1/1468:	AA         	TAX
C1/1469:	8A         	TXA
C1/146A:	9D 92 7A   	STA $7A92,X
C1/146D:	E8         	INX
C1/146E:	E0 06 00   	CPX #$0006
C1/1471:	D0 F6      	BNE $1469
C1/1473:	60         	RTS

C1/1474:	7B         	TDC
C1/1475:	AA         	TAX
C1/1476:	8A         	TXA
C1/1477:	9D 8C 7A   	STA $7A8C,X
C1/147A:	E8         	INX
C1/147B:	E0 04 00   	CPX #$0004
C1/147E:	D0 F6      	BNE $1476
C1/1480:	60         	RTS

C1/1481:	20 5A 14   	JSR $145A
C1/1484:	20 74 14   	JSR $1474
C1/1487:	7B         	TDC
C1/1488:	AA         	TAX
C1/1489:	BD 2F 81   	LDA $812F,X
C1/148C:	0A         	ASL A
C1/148D:	0A         	ASL A
C1/148E:	0A         	ASL A
C1/148F:	9D 7B 80   	STA $807B,X
C1/1492:	E8         	INX
C1/1493:	E8         	INX
C1/1494:	E0 0C 00   	CPX #$000C
C1/1497:	D0 F0      	BNE $1489
C1/1499:	60         	RTS

C1/149A:	20 67 14   	JSR $1467
C1/149D:	20 74 14   	JSR $1474
C1/14A0:	7B         	TDC
C1/14A1:	AA         	TAX
C1/14A2:	A9 20      	LDA #$20
C1/14A4:	9D 9F 80   	STA $809F,X
C1/14A7:	E8         	INX
C1/14A8:	E8         	INX
C1/14A9:	E0 08 00   	CPX #$0008
C1/14AC:	D0 F6      	BNE $14A4
C1/14AE:	7B         	TDC
C1/14AF:	AA         	TAX
C1/14B0:	BD 2F 81   	LDA $812F,X
C1/14B3:	0A         	ASL A
C1/14B4:	0A         	ASL A
C1/14B5:	0A         	ASL A
C1/14B6:	85 10      	STA $10
C1/14B8:	BD C3 80   	LDA $80C3,X
C1/14BB:	49 FF      	EOR #$FF
C1/14BD:	1A         	INC A
C1/14BE:	38         	SEC
C1/14BF:	E5 10      	SBC $10
C1/14C1:	9D C3 80   	STA $80C3,X
C1/14C4:	BD F3 80   	LDA $80F3,X
C1/14C7:	5D 7E 61   	EOR $617E,X
C1/14CA:	49 01      	EOR #$01
C1/14CC:	9D F3 80   	STA $80F3,X
C1/14CF:	E8         	INX
C1/14D0:	E8         	INX
C1/14D1:	E0 0C 00   	CPX #$000C
C1/14D4:	D0 DA      	BNE $14B0
C1/14D6:	60         	RTS

C1/14D7:	20 74 14   	JSR $1474
C1/14DA:	7B         	TDC
C1/14DB:	AA         	TAX
C1/14DC:	64 10      	STZ $10
C1/14DE:	64 12      	STZ $12
C1/14E0:	64 16      	STZ $16
C1/14E2:	BD 2F 81   	LDA $812F,X
C1/14E5:	0A         	ASL A
C1/14E6:	0A         	ASL A
C1/14E7:	0A         	ASL A
C1/14E8:	85 14      	STA $14
C1/14EA:	BD C3 80   	LDA $80C3,X
C1/14ED:	18         	CLC
C1/14EE:	65 14      	ADC $14
C1/14F0:	C9 68      	CMP #$68
C1/14F2:	90 26      	BCC $151A
C1/14F4:	BD C3 80   	LDA $80C3,X
C1/14F7:	38         	SEC
C1/14F8:	E9 40      	SBC #$40
C1/14FA:	18         	CLC
C1/14FB:	65 14      	ADC $14
C1/14FD:	49 FF      	EOR #$FF
C1/14FF:	1A         	INC A
C1/1500:	9D C3 80   	STA $80C3,X
C1/1503:	BD F3 80   	LDA $80F3,X
C1/1506:	5D 7E 61   	EOR $617E,X
C1/1509:	49 01      	EOR #$01
C1/150B:	9D F3 80   	STA $80F3,X
C1/150E:	A5 12      	LDA $12
C1/1510:	A8         	TAY
C1/1511:	A5 16      	LDA $16
C1/1513:	99 92 7A   	STA $7A92,Y
C1/1516:	E6 12      	INC $12
C1/1518:	80 0F      	BRA $1529
C1/151A:	A5 14      	LDA $14
C1/151C:	9D 7B 80   	STA $807B,X
C1/151F:	A5 10      	LDA $10
C1/1521:	A8         	TAY
C1/1522:	A5 16      	LDA $16
C1/1524:	99 86 7A   	STA $7A86,Y
C1/1527:	E6 10      	INC $10
C1/1529:	E6 16      	INC $16
C1/152B:	E8         	INX
C1/152C:	E8         	INX
C1/152D:	E0 0C 00   	CPX #$000C
C1/1530:	D0 B0      	BNE $14E2
C1/1532:	60         	RTS

C1/1533:	20 67 14   	JSR $1467
C1/1536:	7B         	TDC
C1/1537:	8D 98 7A   	STA $7A98
C1/153A:	1A         	INC A
C1/153B:	8D 99 7A   	STA $7A99
C1/153E:	1A         	INC A
C1/153F:	8D 8C 7A   	STA $7A8C
C1/1542:	1A         	INC A
C1/1543:	8D 8D 7A   	STA $7A8D
C1/1546:	A9 20      	LDA #$20
C1/1548:	8D A3 80   	STA $80A3
C1/154B:	8D A5 80   	STA $80A5
C1/154E:	7B         	TDC
C1/154F:	AA         	TAX
C1/1550:	BD 2F 81   	LDA $812F,X
C1/1553:	0A         	ASL A
C1/1554:	0A         	ASL A
C1/1555:	0A         	ASL A
C1/1556:	85 12      	STA $12
C1/1558:	4A         	LSR A
C1/1559:	85 10      	STA $10
C1/155B:	BD C3 80   	LDA $80C3,X
C1/155E:	18         	CLC
C1/155F:	69 30      	ADC #$30
C1/1561:	9D C3 80   	STA $80C3,X
C1/1564:	18         	CLC
C1/1565:	65 10      	ADC $10
C1/1567:	30 0D      	BMI $1576
C1/1569:	BD F3 80   	LDA $80F3,X
C1/156C:	5D 7E 61   	EOR $617E,X
C1/156F:	49 01      	EOR #$01
C1/1571:	9D F3 80   	STA $80F3,X
C1/1574:	80 05      	BRA $157B
C1/1576:	A5 12      	LDA $12
C1/1578:	9D 7B 80   	STA $807B,X
C1/157B:	E8         	INX
C1/157C:	E8         	INX
C1/157D:	E0 0C 00   	CPX #$000C
C1/1580:	D0 CE      	BNE $1550
C1/1582:	60         	RTS

C1/1583:	60         	RTS

C1/1584:	00
C1/1585:	F8
C1/1586:	08
C1/1587:	D8

C1/1588:	20 42 14   	JSR $1442
C1/158B:	9C 79 7B   	STZ $7B79
C1/158E:	9C 7A 7B   	STZ $7B7A
C1/1591:	9C 7B 7B   	STZ $7B7B
C1/1594:	9C 7C 7B   	STZ $7B7C
C1/1597:	7B         	TDC
C1/1598:	AA         	TAX
C1/1599:	9E F3 80   	STZ $80F3,X
C1/159C:	E8         	INX
C1/159D:	E0 0C 00   	CPX #$000C
C1/15A0:	D0 F7      	BNE $1599
C1/15A2:	AD 1F 20   	LDA $201F
C1/15A5:	0A         	ASL A
C1/15A6:	AA         	TAX
C1/15A7:	20 04 16   	JSR $1604
C1/15AA:	20 07 16   	JSR $1607
C1/15AD:	AD 79 7B   	LDA $7B79
C1/15B0:	8D AC 2E   	STA $2EAC
C1/15B3:	AD 7B 7B   	LDA $7B7B
C1/15B6:	8D AD 2E   	STA $2EAD
C1/15B9:	AE E0 11   	LDX $11E0
C1/15BC:	E0 3F 02   	CPX #$023F
C1/15BF:	D0 42      	BNE $1603
C1/15C1:	AD 2F 81   	LDA $812F
C1/15C4:	0A         	ASL A
C1/15C5:	0A         	ASL A
C1/15C6:	0A         	ASL A
C1/15C7:	85 10      	STA $10
C1/15C9:	AD 30 81   	LDA $8130
C1/15CC:	0A         	ASL A
C1/15CD:	0A         	ASL A
C1/15CE:	0A         	ASL A
C1/15CF:	85 12      	STA $12
C1/15D1:	A9 80      	LDA #$80
C1/15D3:	38         	SEC
C1/15D4:	E5 12      	SBC $12
C1/15D6:	AA         	TAX
C1/15D7:	8E CF 80   	STX $80CF
C1/15DA:	AD 01 20   	LDA $2001
C1/15DD:	AA         	TAX
C1/15DE:	BF 00 E8 EC	LDA $ECE800,X
C1/15E2:	D0 05      	BNE $15E9
C1/15E4:	9C CF 80   	STZ $80CF
C1/15E7:	80 0D      	BRA $15F6
C1/15E9:	3A         	DEC A
C1/15EA:	AA         	TAX
C1/15EB:	AD CF 80   	LDA $80CF
C1/15EE:	18         	CLC
C1/15EF:	7F 84 15 C1	ADC $C11584,X
C1/15F3:	8D CF 80   	STA $80CF
C1/15F6:	A9 80      	LDA #$80
C1/15F8:	38         	SEC
C1/15F9:	E5 10      	SBC $10
C1/15FB:	4A         	LSR A
C1/15FC:	18         	CLC
C1/15FD:	69 18      	ADC #$18
C1/15FF:	AA         	TAX
C1/1600:	8E C3 80   	STX $80C3
C1/1603:	60         	RTS

C1/1604:	7C 3A 14   	JMP ($143A,X)  ; Jump table

C1/1607:	7B         	TDC
C1/1608:	AA         	TAX
C1/1609:	3A         	DEC A
C1/160A:	9D 9E 7A   	STA $7A9E,X
C1/160D:	E8         	INX
C1/160E:	E0 30 00   	CPX #$0030
C1/1611:	D0 F7      	BNE $160A
C1/1613:	7B         	TDC
C1/1614:	AA         	TAX
C1/1615:	85 10      	STA $10
C1/1617:	A9 03      	LDA #$03
C1/1619:	85 12      	STA $12
C1/161B:	A5 10      	LDA $10
C1/161D:	9D B6 7A   	STA $7AB6,X
C1/1620:	9D C2 7A   	STA $7AC2,X
C1/1623:	A5 12      	LDA $12
C1/1625:	9D BC 7A   	STA $7ABC,X
C1/1628:	9D C8 7A   	STA $7AC8,X
C1/162B:	E6 10      	INC $10
C1/162D:	C6 12      	DEC $12
C1/162F:	E8         	INX
C1/1630:	E0 04 00   	CPX #$0004
C1/1633:	D0 E6      	BNE $161B
C1/1635:	7B         	TDC
C1/1636:	AA         	TAX
C1/1637:	A8         	TAY
C1/1638:	C2 20      	REP #$20
C1/163A:	BD C3 80   	LDA $80C3,X
C1/163D:	99 D0 7A   	STA $7AD0,Y
C1/1640:	E8         	INX
C1/1641:	E8         	INX
C1/1642:	C8         	INY
C1/1643:	C8         	INY
C1/1644:	C8         	INY
C1/1645:	C8         	INY
C1/1646:	E0 0C 00   	CPX #$000C
C1/1649:	D0 EF      	BNE $163A
C1/164B:	7B         	TDC
C1/164C:	E2 20      	SEP #$20           ; 8-bit A
C1/164E:	20 52 17   	JSR $1752
C1/1651:	7B         	TDC
C1/1652:	AA         	TAX
C1/1653:	A8         	TAY
C1/1654:	BD D2 7A   	LDA $7AD2,X
C1/1657:	99 9E 7A   	STA $7A9E,Y
C1/165A:	C8         	INY
C1/165B:	E8         	INX
C1/165C:	E8         	INX
C1/165D:	E8         	INX
C1/165E:	E8         	INX
C1/165F:	C0 06 00   	CPY #$0006
C1/1662:	D0 F0      	BNE $1654
C1/1664:	7B         	TDC
C1/1665:	AA         	TAX
C1/1666:	A8         	TAY
C1/1667:	C2 20      	REP #$20
C1/1669:	BD 2F 81   	LDA $812F,X
C1/166C:	29 FF 00   	AND #$00FF
C1/166F:	0A         	ASL A
C1/1670:	0A         	ASL A
C1/1671:	0A         	ASL A
C1/1672:	18         	CLC
C1/1673:	7D C3 80   	ADC $80C3,X
C1/1676:	99 D0 7A   	STA $7AD0,Y
C1/1679:	E8         	INX
C1/167A:	E8         	INX
C1/167B:	C8         	INY
C1/167C:	C8         	INY
C1/167D:	C8         	INY
C1/167E:	C8         	INY
C1/167F:	E0 0C 00   	CPX #$000C
C1/1682:	D0 E5      	BNE $1669
C1/1684:	7B         	TDC
C1/1685:	E2 20      	SEP #$20           ; 8-bit A
C1/1687:	20 52 17   	JSR $1752
C1/168A:	7B         	TDC
C1/168B:	AA         	TAX
C1/168C:	A0 05 00   	LDY #$0005
C1/168F:	BD D2 7A   	LDA $7AD2,X
C1/1692:	99 A4 7A   	STA $7AA4,Y
C1/1695:	88         	DEY
C1/1696:	E8         	INX
C1/1697:	E8         	INX
C1/1698:	E8         	INX
C1/1699:	E8         	INX
C1/169A:	E0 18 00   	CPX #$0018
C1/169D:	D0 F0      	BNE $168F
C1/169F:	7B         	TDC
C1/16A0:	AA         	TAX
C1/16A1:	A8         	TAY
C1/16A2:	C2 20      	REP #$20
C1/16A4:	BD CF 80   	LDA $80CF,X
C1/16A7:	99 D0 7A   	STA $7AD0,Y
C1/16AA:	E8         	INX
C1/16AB:	E8         	INX
C1/16AC:	C8         	INY
C1/16AD:	C8         	INY
C1/16AE:	C8         	INY
C1/16AF:	C8         	INY
C1/16B0:	E0 0C 00   	CPX #$000C
C1/16B3:	D0 EF      	BNE $16A4
C1/16B5:	7B         	TDC
C1/16B6:	E2 20      	SEP #$20           ; 8-bit A
C1/16B8:	20 52 17   	JSR $1752
C1/16BB:	7B         	TDC
C1/16BC:	AA         	TAX
C1/16BD:	A8         	TAY
C1/16BE:	BD D2 7A   	LDA $7AD2,X
C1/16C1:	99 AA 7A   	STA $7AAA,Y
C1/16C4:	C8         	INY
C1/16C5:	E8         	INX
C1/16C6:	E8         	INX
C1/16C7:	E8         	INX
C1/16C8:	E8         	INX
C1/16C9:	C0 06 00   	CPY #$0006
C1/16CC:	D0 F0      	BNE $16BE
C1/16CE:	7B         	TDC
C1/16CF:	AA         	TAX
C1/16D0:	A8         	TAY
C1/16D1:	C2 20      	REP #$20
C1/16D3:	BD 30 81   	LDA $8130,X
C1/16D6:	29 FF 00   	AND #$00FF
C1/16D9:	0A         	ASL A
C1/16DA:	0A         	ASL A
C1/16DB:	0A         	ASL A
C1/16DC:	18         	CLC
C1/16DD:	7D CF 80   	ADC $80CF,X
C1/16E0:	99 D0 7A   	STA $7AD0,Y
C1/16E3:	E8         	INX
C1/16E4:	E8         	INX
C1/16E5:	C8         	INY
C1/16E6:	C8         	INY
C1/16E7:	C8         	INY
C1/16E8:	C8         	INY
C1/16E9:	E0 0C 00   	CPX #$000C
C1/16EC:	D0 E5      	BNE $16D3
C1/16EE:	7B         	TDC
C1/16EF:	E2 20      	SEP #$20           ; 8-bit A
C1/16F1:	20 52 17   	JSR $1752
C1/16F4:	7B         	TDC
C1/16F5:	AA         	TAX
C1/16F6:	A0 05 00   	LDY #$0005
C1/16F9:	BD D2 7A   	LDA $7AD2,X
C1/16FC:	99 B0 7A   	STA $7AB0,Y
C1/16FF:	88         	DEY
C1/1700:	E8         	INX
C1/1701:	E8         	INX
C1/1702:	E8         	INX
C1/1703:	E8         	INX
C1/1704:	E0 18 00   	CPX #$0018
C1/1707:	D0 F0      	BNE $16F9
C1/1709:	7B         	TDC
C1/170A:	A8         	TAY
C1/170B:	B9 86 7A   	LDA $7A86,Y
C1/170E:	30 0B      	BMI $171B
C1/1710:	AA         	TAX
C1/1711:	BF 61 77 C1	LDA $C17761,X    ; Data
C1/1715:	0D 79 7B   	ORA $7B79
C1/1718:	8D 79 7B   	STA $7B79
C1/171B:	B9 8C 7A   	LDA $7A8C,Y
C1/171E:	30 0B      	BMI $172B
C1/1720:	AA         	TAX
C1/1721:	BF 61 77 C1	LDA $C17761,X    ; Data
C1/1725:	0D 7A 7B   	ORA $7B7A
C1/1728:	8D 7A 7B   	STA $7B7A
C1/172B:	B9 92 7A   	LDA $7A92,Y
C1/172E:	30 0B      	BMI $173B
C1/1730:	AA         	TAX
C1/1731:	BF 61 77 C1	LDA $C17761,X    ; Data
C1/1735:	0D 7B 7B   	ORA $7B7B
C1/1738:	8D 7B 7B   	STA $7B7B
C1/173B:	B9 98 7A   	LDA $7A98,Y
C1/173E:	30 0B      	BMI $174B
C1/1740:	AA         	TAX
C1/1741:	BF 61 77 C1	LDA $C17761,X    ; Data
C1/1745:	0D 7C 7B   	ORA $7B7C
C1/1748:	8D 7C 7B   	STA $7B7C
C1/174B:	C8         	INY
C1/174C:	C0 06 00   	CPY #$0006
C1/174F:	D0 BA      	BNE $170B
C1/1751:	60         	RTS

C1/1752:	C2 20      	REP #$20
C1/1754:	7B         	TDC
C1/1755:	AA         	TAX
C1/1756:	64 10      	STZ $10
C1/1758:	A5 10      	LDA $10
C1/175A:	9D D2 7A   	STA $7AD2,X
C1/175D:	E6 10      	INC $10
C1/175F:	E8         	INX
C1/1760:	E8         	INX
C1/1761:	E8         	INX
C1/1762:	E8         	INX
C1/1763:	E0 18 00   	CPX #$0018
C1/1766:	D0 F0      	BNE $1758
C1/1768:	7B         	TDC
C1/1769:	AA         	TAX
C1/176A:	64 14      	STZ $14
C1/176C:	BD D0 7A   	LDA $7AD0,X
C1/176F:	DD D4 7A   	CMP $7AD4,X
C1/1772:	F0 20      	BEQ $1794
C1/1774:	90 1E      	BCC $1794
C1/1776:	E6 14      	INC $14
C1/1778:	BD D4 7A   	LDA $7AD4,X
C1/177B:	48         	PHA
C1/177C:	BD D0 7A   	LDA $7AD0,X
C1/177F:	9D D4 7A   	STA $7AD4,X
C1/1782:	68         	PLA
C1/1783:	9D D0 7A   	STA $7AD0,X
C1/1786:	BD D6 7A   	LDA $7AD6,X
C1/1789:	48         	PHA
C1/178A:	BD D2 7A   	LDA $7AD2,X
C1/178D:	9D D6 7A   	STA $7AD6,X
C1/1790:	68         	PLA
C1/1791:	9D D2 7A   	STA $7AD2,X
C1/1794:	E8         	INX
C1/1795:	E8         	INX
C1/1796:	E8         	INX
C1/1797:	E8         	INX
C1/1798:	E0 14 00   	CPX #$0014
C1/179B:	D0 CF      	BNE $176C
C1/179D:	A5 14      	LDA $14
C1/179F:	D0 C7      	BNE $1768
C1/17A1:	7B         	TDC
C1/17A2:	E2 20      	SEP #$20           ; 8-bit A
C1/17A4:	60         	RTS

C1/17A5:	8B         	PHB
C1/17A6:	A9 00      	LDA #$00
C1/17A8:	48         	PHA
C1/17A9:	AB         	PLB
C1/17AA:	8E 16 21   	STX $2116
C1/17AD:	C2 20      	REP #$20
C1/17AF:	A9 EE 01   	LDA #$01EE
C1/17B2:	8D 18 21   	STA $2118
C1/17B5:	88         	DEY
C1/17B6:	D0 FA      	BNE $17B2
C1/17B8:	7B         	TDC
C1/17B9:	E2 20      	SEP #$20           ; 8-bit A
C1/17BB:	AB         	PLB
C1/17BC:	60         	RTS

; Play "buzzer" sound effect
C1/17BD:	A9 22      	LDA #$22
C1/17BF:	8F 40 21 00	STA $002140
C1/17C3:	64 95      	STZ $95        ; reset flag
C1/17C5:	60         	RTS

; Play "cursor" sound effect
C1/17C6:	A9 21      	LDA #$21
C1/17C8:	8F 40 21 00	STA $002140
C1/17CC:	64 94      	STZ $94        ; reset flag
C1/17CE:	60         	RTS

; Play "select" sound effect
C1/17CF:	A9 20      	LDA #$20
C1/17D1:	8F 40 21 00	STA $002140
C1/17D5:	64 96      	STZ $96        ; reset flag
C1/17D7:	60         	RTS

; Play "character ready" sound effect
C1/17D8:	AD CA 62   	LDA $62CA
C1/17DB:	29 03      	AND #$03
C1/17DD:	AA         	TAX
C1/17DE:	BD 98 61   	LDA $6198,X
C1/17E1:	18         	CLC
C1/17E2:	69 28      	ADC #$28
C1/17E4:	8F 40 21 00	STA $002140
C1/17E8:	64 93      	STZ $93        ; reset flag
C1/17EA:	60         	RTS

; Play sound effect (from Enemy AI Script #$FA)
C1/17EB:	20 EF 17   	JSR $17EF
C1/17EE:	6B         	RTL

; Play sound effect
C1/17EF:	8D E9 E9   	STA $E9E9      ; sound effect ID
C1/17F2:	A5 10      	LDA $10        ; sound pan value
C1/17F4:	8D EA E9   	STA $E9EA      ; save it
C1/17F7:	A9 18      	LDA #$18       ; sound command [?]
C1/17F9:	8D E8 E9   	STA $E9E8      ; save sound command [?]
C1/17FC:	EE EC E9   	INC $E9EC      ; indicate pending sound effect
C1/17FF:	60         	RTS

C1/1800:	AD ED E9   	LDA $E9ED      ; sound effects disabled
C1/1803:	D0 55      	BNE $185A      ; exit if ^
C1/1805:	AD EC E9   	LDA $E9EC      ; animation sound effects on
C1/1808:	F0 19      	BEQ $1823      ; if not ^, continue to regular sounds

; Process animation sound effects
C1/180A:	AD EA E9   	LDA $E9EA      ; animation sound pan value
C1/180D:	8F 42 21 00	STA $002142    ; set it
C1/1811:	AD E9 E9   	LDA $E9E9      ; sound index [?]
C1/1814:	8F 41 21 00	STA $002141    ; set it
C1/1818:	AD E8 E9   	LDA $E9E8      ; sound command [?]
C1/181B:	8F 40 21 00	STA $002140    ; play sound [?]
C1/181F:	9C EC E9   	STZ $E9EC      ; reset animation sound effects flag
C1/1822:	60         	RTS

; Process regular sound effects
C1/1823:	AD 81 62   	LDA $6281      ; sound: ching [?]
C1/1826:	F0 0A      	BEQ $1832      ; check next if not set
C1/1828:	A9 2C      	LDA #$2C
C1/182A:	8F 40 21 00	STA $002140    ; play sound
C1/182E:	9C 81 62   	STZ $6281      ; reset flag
C1/1831:	60         	RTS

C1/1832:	A5 93      	LDA $93        ; sound: character ready
C1/1834:	F0 03      	BEQ $1839      ; check next if not set
C1/1836:	4C D8 17   	JMP $17D8      ; play sound and reset flag

C1/1839:	A5 94      	LDA $94        ; sound: cursor
C1/183B:	F0 03      	BEQ $1840      ; check next if not set
C1/183D:	4C C6 17   	JMP $17C6      ; play sound and reset flag

C1/1840:	A5 95      	LDA $95        ; sound: buzzer
C1/1842:	F0 03      	BEQ $1847      ; check next if not set
C1/1844:	4C BD 17   	JMP $17BD      ; play sound and reset flag

C1/1847:	A5 96      	LDA $96        ; sound: select
C1/1849:	F0 03      	BEQ $184E      ; check next if not set
C1/184B:	4C CF 17   	JMP $17CF      ; play sound and reset flag

C1/184E:	A5 97      	LDA $97        ; SFX: song change [?]
C1/1850:	F0 08      	BEQ $185A      ; exit if not set
C1/1852:	A9 89      	LDA #$89
C1/1854:	8F 40 21 00	STA $002140    ; play song change [?]
C1/1858:	64 97      	STZ $97        ; reset song change flag
C1/185A:	60         	RTS

; Get random number

C1/185B:	DA         	PHX            ; store X
C1/185C:	A5 72      	LDA $72        ; random # counter for graphics
C1/185E:	AA         	TAX            ; index it
C1/185F:	E6 72      	INC $72        ; increment counter
C1/1861:	BF 00 FD C0	LDA $C0FD00,X  ; random number
C1/1865:	FA         	PLX            ; restore X
C1/1866:	60         	RTS

C1/1867:	64 30      	STZ $30
C1/1869:	64 32      	STZ $32
C1/186B:	64 34      	STZ $34
C1/186D:	A2 08 00   	LDX #$0008
C1/1870:	46 2C      	LSR $2C
C1/1872:	90 0D      	BCC $1881
C1/1874:	A5 30      	LDA $30
C1/1876:	18         	CLC
C1/1877:	65 2E      	ADC $2E
C1/1879:	85 30      	STA $30
C1/187B:	A5 32      	LDA $32
C1/187D:	65 34      	ADC $34
C1/187F:	85 32      	STA $32

C1/1881:	06 2E      	ASL $2E
C1/1883:	26 34      	ROL $34
C1/1885:	CA         	DEX
C1/1886:	D0 E8      	BNE $1870
C1/1888:	60         	RTS

C1/1889:	C2 20      	REP #$20
C1/188B:	64 30      	STZ $30
C1/188D:	64 32      	STZ $32
C1/188F:	64 34      	STZ $34
C1/1891:	A2 10 00   	LDX #$0010
C1/1894:	46 2C      	LSR $2C
C1/1896:	90 0D      	BCC $18A5
C1/1898:	A5 30      	LDA $30
C1/189A:	18         	CLC
C1/189B:	65 2E      	ADC $2E
C1/189D:	85 30      	STA $30
C1/189F:	A5 32      	LDA $32
C1/18A1:	65 34      	ADC $34
C1/18A3:	85 32      	STA $32
C1/18A5:	06 2E      	ASL $2E
C1/18A7:	26 34      	ROL $34
C1/18A9:	CA         	DEX
C1/18AA:	D0 E8      	BNE $1894
C1/18AC:	7B         	TDC
C1/18AD:	E2 20      	SEP #$20           ; 8-bit A
C1/18AF:	60         	RTS

C1/18B0:	A6 00      	LDX $00           ; zero X
C1/18B2:	86 30      	STX $30           ; zero in scratch
C1/18B4:	A2 08 00   	LDX #$0008        ; 8

C1/18B7:	66 2E      	ROR $2E           ; shift out bit
C1/18B9:	90 07      	BCC $18C2         ; branch if bit unset
C1/18BB:	A5 2C      	LDA $2C           ; else, load some value
C1/18BD:	18         	CLC
C1/18BE:	65 31      	ADC $31           ; and add to scratch
C1/18C0:	85 31      	STA $31

C1/18C2:	66 31      	ROR $31           ; scratch / 2
C1/18C4:	66 30      	ROR $30           ; scratch / 2
C1/18C6:	CA         	DEX               ; x--
C1/18C7:	D0 EE      	BNE $18B7         ; loop 8 times
C1/18C9:	60         	RTS

; Multiply A * B, leave in 004216
C1/18CA:	8F 02 42 00	STA $004202
C1/18CE:	EB         	XBA
C1/18CF:	8F 03 42 00	STA $004203
C1/18D3:	7B         	TDC
C1/18D4:	60         	RTS

C1/18D5:	20 D9 18   	JSR $18D9     ; Multiplication ($26 = $22 * $24)
C1/18D8:	6B         	RTL

; Multiply $22 * $24, Result in $26
C1/18D9:	A5 22      	LDA $22
C1/18DB:	8F 02 42 00	STA $004202
C1/18DF:	A5 24      	LDA $24
C1/18E1:	8F 03 42 00	STA $004203
C1/18E5:	C2 20      	REP #$20
C1/18E7:	C2 20      	REP #$20
C1/18E9:	EA         	NOP
C1/18EA:	AF 16 42 00	LDA $004216
C1/18EE:	85 26      	STA $26
C1/18F0:	7B         	TDC
C1/18F1:	E2 20      	SEP #$20           ; 8-bit A
C1/18F3:	60         	RTS

C1/18F4:	64 26      	STZ $26
C1/18F6:	64 28      	STZ $28
C1/18F8:	64 2A      	STZ $2A
C1/18FA:	A2 08 00   	LDX #$0008
C1/18FD:	46 22      	LSR $22
C1/18FF:	90 0D      	BCC $190E
C1/1901:	A5 26      	LDA $26
C1/1903:	18         	CLC
C1/1904:	65 24      	ADC $24
C1/1906:	85 26      	STA $26
C1/1908:	A5 28      	LDA $28
C1/190A:	65 2A      	ADC $2A
C1/190C:	85 28      	STA $28

C1/190E:	06 24      	ASL $24
C1/1910:	26 2A      	ROL $2A
C1/1912:	CA         	DEX
C1/1913:	D0 E8      	BNE $18FD
C1/1915:	60         	RTS

C1/1916:	DA         	PHX
C1/1917:	A2 EE 00   	LDX #$00EE
C1/191A:	86 10      	STX $10
C1/191C:	FA         	PLX
C1/191D:	80 10      	BRA $192F
C1/191F:	DA         	PHX
C1/1920:	A2 EE 02   	LDX #$02EE
C1/1923:	86 10      	STX $10
C1/1925:	FA         	PLX
C1/1926:	80 07      	BRA $192F
C1/1928:	DA         	PHX
C1/1929:	A2 EE 01   	LDX #$01EE
C1/192C:	86 10      	STX $10
C1/192E:	FA         	PLX
C1/192F:	8B         	PHB
C1/1930:	A9 00      	LDA #$00
C1/1932:	48         	PHA
C1/1933:	AB         	PLB
C1/1934:	8E 16 21   	STX $2116
C1/1937:	C2 20      	REP #$20
C1/1939:	A5 10      	LDA $10
C1/193B:	8D 18 21   	STA $2118
C1/193E:	88         	DEY
C1/193F:	D0 FA      	BNE $193B
C1/1941:	7B         	TDC
C1/1942:	E2 20      	SEP #$20           ; 8-bit A
C1/1944:	AB         	PLB
C1/1945:	60         	RTS

C1/1946:	8B         	PHB
C1/1947:	A9 00      	LDA #$00
C1/1949:	48         	PHA
C1/194A:	AB         	PLB
C1/194B:	8C 16 21   	STY $2116
C1/194E:	8E 75 43   	STX $4375
C1/1951:	A2 6D 19   	LDX #$196D
C1/1954:	8E 72 43   	STX $4372
C1/1957:	A9 09      	LDA #$09
C1/1959:	8D 70 43   	STA $4370
C1/195C:	A9 18      	LDA #$18
C1/195E:	8D 71 43   	STA $4371
C1/1961:	A9 C1      	LDA #$C1
C1/1963:	8D 74 43   	STA $4374
C1/1966:	A9 80      	LDA #$80
C1/1968:	8D 0B 42   	STA $420B
C1/196B:	AB         	PLB
C1/196C:	60         	RTS

C1/196D:	0000

; Check for and execute VRAM DMA
C1/196F:	AD 00 80   	LDA $8000    ; VRAM DMA pending flag
C1/1972:	F0 14      	BEQ $1988    ; exit if unset
C1/1974:	AE 06 80   	LDX $8006
C1/1977:	86 36      	STX $36      ; store chunk size
C1/1979:	AE 01 80   	LDX $8001    ; source address
C1/197C:	AC 04 80   	LDY $8004    ; destination address
C1/197F:	AD 03 80   	LDA $8003    ; source bank
C1/1982:	20 2B 1A   	JSR $1A2B    ; begin DMA transfer
C1/1985:	9C 00 80   	STZ $8000    ; clear VRAM pending flag
C1/1988:	60         	RTS

; Long access to VRAM DMA transfer
C1/1989:	20 8D 19   	JSR $198D     ; initialize VRAM DMA transfer
C1/198C:	6B         	RTL

; Initialize VRAM DMA data transfer
C1/198D:	DA         	PHX           ; store X
C1/198E:	5A         	PHY           ; store Y
C1/198F:	48         	PHA           ; store A
C1/1990:	A6 10      	LDX $10
C1/1992:	DA         	PHX           ; store $10
C1/1993:	AD 00 80   	LDA $8000     ; VRAM DMA pending flag
C1/1996:	F0 05      	BEQ $199D     ; branch if none pending
C1/1998:	20 2A 02   	JSR $022A     ; else wait for next frame
C1/199B:	80 F6      	BRA $1993     ; wait until ready

C1/199D:	FA         	PLX
C1/199E:	8E 08 80   	STX $8008     ; set total size of data
C1/19A1:	68         	PLA
C1/19A2:	8D 03 80   	STA $8003     ; set source bank
C1/19A5:	7A         	PLY
C1/19A6:	8C 04 80   	STY $8004     ; set destination address
C1/19A9:	FA         	PLX
C1/19AA:	8E 01 80   	STX $8001     ; set source address
C1/19AD:	9C 0A 80   	STZ $800A     ; reset "last chunk" flag
C1/19B0:	C2 20      	REP #$20      ; 16-bit A
C1/19B2:	AD 08 80   	LDA $8008     ; total size
C1/19B5:	C9 00 04   	CMP #$0400
C1/19B8:	F0 0A      	BEQ $19C4
C1/19BA:	90 08      	BCC $19C4     ; branch if size <= 1024 bytes
C1/19BC:	A9 00 04   	LDA #$0400
C1/19BF:	8D 06 80   	STA $8006     ; set chunk size to 1024 bytes
C1/19C2:	80 06      	BRA $19CA
C1/19C4:	8D 06 80   	STA $8006     ; if smaller, use full size as chunk
C1/19C7:	EE 0A 80   	INC $800A     ; set "last chunk" flag

C1/19CA:	7B         	TDC           ; A = 0000
C1/19CB:	E2 20      	SEP #$20      ; 8-bit A
C1/19CD:	EE 00 80   	INC $8000     ; set VRAM DMA pending
C1/19D0:	20 2A 02   	JSR $022A     ; wait one frame
C1/19D3:	AD 00 80   	LDA $8000
C1/19D6:	D0 F8      	BNE $19D0     ; wait until move finishes

C1/19D8:	C2 20      	REP #$20      ; 16-bit A
C1/19DA:	AD 01 80   	LDA $8001     ; source address
C1/19DD:	18         	CLC
C1/19DE:	69 00 04   	ADC #$0400    ; add max chunk size
C1/19E1:	8D 01 80   	STA $8001     ; store next chunk source address
C1/19E4:	AD 04 80   	LDA $8004     ; destination address
C1/19E7:	18         	CLC
C1/19E8:	69 00 02   	ADC #$0200    ; add half of max chunk size [?]
C1/19EB:	8D 04 80   	STA $8004     ; update destination address
C1/19EE:	AD 08 80   	LDA $8008     ; total size of data
C1/19F1:	38         	SEC
C1/19F2:	E9 00 04   	SBC #$0400    ; subtract one chunk (max size)
C1/19F5:	8D 08 80   	STA $8008     ; set reduced size
C1/19F8:	7B         	TDC           ; A = 0000
C1/19F9:	E2 20      	SEP #$20      ; 8-bit A
C1/19FB:	AD 0A 80   	LDA $800A
C1/19FE:	F0 B0      	BEQ $19B0     ; loop until "last chunk" flag is set
C1/1A00:	60         	RTS

; Bit mask by index
C1/1A01:	01
C1/1A02:	02
C1/1A03:	04
C1/1A04:	08
C1/1A05:	10
C1/1A06:	20
C1/1A07:	40
C1/1A08:	80

C1/1A09:	AA         	TAX
C1/1A0A:	BF 01 1A C1	LDA $C11A01,X    ; Data
C1/1A0E:	60         	RTS

; Get number (1-8) of lowest bit set in A

C1/1A0F:	A6 00      	LDX $00
C1/1A11:	4A         	LSR A
C1/1A12:	B0 08      	BCS $1A1C
C1/1A14:	E8         	INX
C1/1A15:	E0 08 00   	CPX #$0008
C1/1A18:	D0 F7      	BNE $1A11
C1/1A1A:	7B         	TDC
C1/1A1B:	60         	RTS

C1/1A1C:	8A         	TXA
C1/1A1D:	29 07      	AND #$07
C1/1A1F:	60         	RTS

C1/1A20:	20 24 1A   	JSR $1A24
C1/1A23:	60         	RTS

; Wait for NMI routine
C1/1A24:	E6 47      	INC $47
C1/1A26:	A5 47      	LDA $47
C1/1A28:	D0 FC      	BNE $1A26
C1/1A2A:	60         	RTS

; Execute VRAM DMA data transfer
C1/1A2B:	8B         	PHB           ; store bank
C1/1A2C:	48         	PHA           ; store A
C1/1A2D:	A9 00      	LDA #$00
C1/1A2F:	48         	PHA
C1/1A30:	AB         	PLB           ; set bank to $00
C1/1A31:	68         	PLA           ; restore A
C1/1A32:	8C 16 21   	STY $2116     ; set VRAM (destination) address low byte
C1/1A35:	8E 72 43   	STX $4372     ; set source address
C1/1A38:	8D 74 43   	STA $4374     ; set source bank
C1/1A3B:	A9 01      	LDA #$01
C1/1A3D:	8D 70 43   	STA $4370     ; set DMA transfer mode (2 registers write once?)
C1/1A40:	A9 18      	LDA #$18
C1/1A42:	8D 71 43   	STA $4371     ; set DMA destination register
C1/1A45:	A6 36      	LDX $36
C1/1A47:	8E 75 43   	STX $4375     ; set chunk size
C1/1A4A:	A9 80      	LDA #$80
C1/1A4C:	8D 0B 42   	STA $420B     ; start DMA channel 7
C1/1A4F:	AB         	PLB           ; restore bank
C1/1A50:	60         	RTS

C1/1A51:	8B         	PHB
C1/1A52:	48         	PHA
C1/1A53:	A9 00      	LDA #$00
C1/1A55:	48         	PHA
C1/1A56:	AB         	PLB
C1/1A57:	68         	PLA
C1/1A58:	8E 72 43   	STX $4372
C1/1A5B:	8D 74 43   	STA $4374
C1/1A5E:	A9 01      	LDA #$01
C1/1A60:	8D 70 43   	STA $4370
C1/1A63:	A9 18      	LDA #$18
C1/1A65:	8D 71 43   	STA $4371
C1/1A68:	C2 20      	REP #$20
C1/1A6A:	E2 10      	SEP #$10
C1/1A6C:	A0 20      	LDY #$20
C1/1A6E:	A2 80      	LDX #$80
C1/1A70:	A9 10 00   	LDA #$0010
C1/1A73:	85 38      	STA $38
C1/1A75:	A5 36      	LDA $36
C1/1A77:	8D 16 21   	STA $2116
C1/1A7A:	8C 75 43   	STY $4375
C1/1A7D:	8E 0B 42   	STX $420B
C1/1A80:	18         	CLC
C1/1A81:	69 20 00   	ADC #$0020
C1/1A84:	C6 38      	DEC $38
C1/1A86:	D0 EF      	BNE $1A77
C1/1A88:	7B         	TDC
C1/1A89:	E2 20      	SEP #$20           ; 8-bit A
C1/1A8B:	C2 10      	REP #$10
C1/1A8D:	AB         	PLB
C1/1A8E:	60         	RTS

C1/1A8F:	A6 00      	LDX $00
C1/1A91:	B5 69      	LDA $69,X
C1/1A93:	38         	SEC
C1/1A94:	E5 68      	SBC $68
C1/1A96:	D0 0A      	BNE $1AA2
C1/1A98:	A9 FF      	LDA #$FF
C1/1A9A:	95 69      	STA $69,X
C1/1A9C:	E8         	INX
C1/1A9D:	E0 03 00   	CPX #$0003
C1/1AA0:	D0 EF      	BNE $1A91
C1/1AA2:	60         	RTS

C1/1AA3:	80
C1/1AA4:	96
C1/1AA5:	98
C1/1AA6:	00
C1/1AA7:	40
C1/1AA8:	42
C1/1AA9:	0F
C1/1AAA:	00
C1/1AAB:	A0
C1/1AAC:	86
C1/1AAD:	01
C1/1AAE:	00
C1/1AAF:	10
C1/1AB0:	27
C1/1AB1:	00
C1/1AB2:	00
C1/1AB3:	E8
C1/1AB4:	03
C1/1AB5:	00
C1/1AB6:	00
C1/1AB7:	64
C1/1AB8:	00
C1/1AB9:	00
C1/1ABA:	00
C1/1ABB:	0A
C1/1ABC:	00
C1/1ABD:	00
C1/1ABE:	00

C1/1ABF:	7B         	TDC
C1/1AC0:	AA         	TAX
C1/1AC1:	95 69      	STA $69,X
C1/1AC3:	E8         	INX
C1/1AC4:	E0 08 00   	CPX #$0008
C1/1AC7:	D0 F8      	BNE $1AC1
C1/1AC9:	A2 00 00   	LDX #$0000
C1/1ACC:	DA         	PHX
C1/1ACD:	8A         	TXA
C1/1ACE:	0A         	ASL A
C1/1ACF:	0A         	ASL A
C1/1AD0:	AA         	TAX
C1/1AD1:	BF A3 1A C1	LDA $C11AA3,X    ; Data
C1/1AD5:	85 14      	STA $14
C1/1AD7:	BF A4 1A C1	LDA $C11AA4,X    ; Data
C1/1ADB:	85 15      	STA $15
C1/1ADD:	BF A5 1A C1	LDA $C11AA5,X    ; Data
C1/1AE1:	85 16      	STA $16
C1/1AE3:	20 FC 1A   	JSR $1AFC
C1/1AE6:	FA         	PLX
C1/1AE7:	A5 18      	LDA $18
C1/1AE9:	18         	CLC
C1/1AEA:	65 68      	ADC $68
C1/1AEC:	95 69      	STA $69,X
C1/1AEE:	E8         	INX
C1/1AEF:	E0 07 00   	CPX #$0007
C1/1AF2:	D0 D8      	BNE $1ACC
C1/1AF4:	A5 10      	LDA $10
C1/1AF6:	18         	CLC
C1/1AF7:	65 68      	ADC $68
C1/1AF9:	85 70      	STA $70
C1/1AFB:	60         	RTS

C1/1AFC:	64 18      	STZ $18
C1/1AFE:	A5 10      	LDA $10
C1/1B00:	38         	SEC
C1/1B01:	E5 14      	SBC $14
C1/1B03:	85 10      	STA $10
C1/1B05:	A5 11      	LDA $11
C1/1B07:	E5 15      	SBC $15
C1/1B09:	85 11      	STA $11
C1/1B0B:	A5 12      	LDA $12
C1/1B0D:	E5 16      	SBC $16
C1/1B0F:	85 12      	STA $12
C1/1B11:	E6 18      	INC $18
C1/1B13:	B0 E9      	BCS $1AFE
C1/1B15:	C6 18      	DEC $18
C1/1B17:	A5 10      	LDA $10
C1/1B19:	18         	CLC
C1/1B1A:	65 14      	ADC $14
C1/1B1C:	85 10      	STA $10
C1/1B1E:	A5 11      	LDA $11
C1/1B20:	65 15      	ADC $15
C1/1B22:	85 11      	STA $11
C1/1B24:	A5 12      	LDA $12
C1/1B26:	65 16      	ADC $16
C1/1B28:	85 12      	STA $12
C1/1B2A:	60         	RTS

; Numeral Display Function
; ($68=offset to 'zero' tile)
C1/1B2B:	C2 20      	REP #$20      ; 16-bit A
C1/1B2D:	64 22      	STZ $22       ; thousands digit
C1/1B2F:	64 24      	STZ $24       ; hundreds digit
C1/1B31:	64 26      	STZ $26       ; tens digit
C1/1B33:	64 28      	STZ $28       ; ones digit
C1/1B35:	8A         	TXA           ; A = number
C1/1B36:	38         	SEC
C1/1B37:	E9 E8 03   	SBC #$03E8    ; subtract 1000
C1/1B3A:	90 05      	BCC $1B41     ; branch if no more thousands
C1/1B3C:	E6 22      	INC $22       ; increment thousands digit
C1/1B3E:	4C 36 1B   	JMP $1B36     ; loop

C1/1B41:	18         	CLC
C1/1B42:	69 E8 03   	ADC #$03E8    ; add back last 1000
C1/1B45:	38         	SEC
C1/1B46:	E9 64 00   	SBC #$0064    ; subtract 100
C1/1B49:	90 05      	BCC $1B50     ; branch if no more hundreds
C1/1B4B:	E6 24      	INC $24       ; increment hundreds digit
C1/1B4D:	4C 45 1B   	JMP $1B45     ; loop

C1/1B50:	18         	CLC
C1/1B51:	69 64 00   	ADC #$0064    ; add back last 100
C1/1B54:	38         	SEC
C1/1B55:	E9 0A 00   	SBC #$000A    ; subtract 10
C1/1B58:	90 05      	BCC $1B5F     ; branch if no more tens
C1/1B5A:	E6 26      	INC $26       ; increment tens digit
C1/1B5C:	4C 54 1B   	JMP $1B54     ; loop

C1/1B5F:	18         	CLC
C1/1B60:	69 0A 00   	ADC #$000A    ; add back last 10
C1/1B63:	85 28      	STA $28       ; store ones digit

C1/1B65:	7B         	TDC           ; A = 0000
C1/1B66:	E2 20      	SEP #$20      ; 8-bit A
C1/1B68:	A5 22      	LDA $22       ; A = thousands
C1/1B6A:	18         	CLC
C1/1B6B:	65 68      	ADC $68       ; add to offset
C1/1B6D:	85 69      	STA $69       ; save
C1/1B6F:	A5 24      	LDA $24       ; A = hundreds
C1/1B71:	18         	CLC
C1/1B72:	65 68      	ADC $68       ; add to offset
C1/1B74:	85 6A      	STA $6A       ; save
C1/1B76:	A5 26      	LDA $26       ; A = tens
C1/1B78:	18         	CLC
C1/1B79:	65 68      	ADC $68       ; add to offset
C1/1B7B:	85 6B      	STA $6B       ; save
C1/1B7D:	A5 28      	LDA $28       ; A = ones
C1/1B7F:	18         	CLC
C1/1B80:	65 68      	ADC $68       ; add to offset
C1/1B82:	85 6C      	STA $6C       ; save
C1/1B84:	60         	RTS

C1/1B85:	8B         	PHB
C1/1B86:	7B         	TDC
C1/1B87:	48         	PHA
C1/1B88:	AB         	PLB
C1/1B89:	AF CA 62 7E	LDA $7E62CA
C1/1B8D:	29 03      	AND #$03
C1/1B8F:	8F 01 02 00	STA $000201
C1/1B93:	22 03 00 C3	JSL $C30003
C1/1B97:	AB         	PLB
C1/1B98:	A6 04      	LDX $04
C1/1B9A:	DA         	PHX
C1/1B9B:	A6 0A      	LDX $0A
C1/1B9D:	86 04      	STX $04
C1/1B9F:	FA         	PLX
C1/1BA0:	86 0A      	STX $0A
C1/1BA2:	8E 68 62   	STX $6268
C1/1BA5:	C2 20      	REP #$20
C1/1BA7:	AD 66 62   	LDA $6266
C1/1BAA:	49 FF FF   	EOR #$FFFF
C1/1BAD:	2D 68 62   	AND $6268
C1/1BB0:	29 F0 F0   	AND #$F0F0
C1/1BB3:	8D 68 62   	STA $6268
C1/1BB6:	8A         	TXA
C1/1BB7:	29 0F 0F   	AND #$0F0F
C1/1BBA:	0D 68 62   	ORA $6268
C1/1BBD:	8D 68 62   	STA $6268
C1/1BC0:	8E 66 62   	STX $6266
C1/1BC3:	7B         	TDC
C1/1BC4:	E2 20      	SEP #$20           ; 8-bit A
C1/1BC6:	60         	RTS

C1/1BC7:	22 DD D8 C2	JSL $C2D8DD
C1/1BCB:	60         	RTS

C1/1BCC:	22 6D DA C2	JSL $C2DA6D
C1/1BD0:	60         	RTS

C1/1BD1:	9C DF E9   	STZ $E9DF
C1/1BD4:	9C DE E9   	STZ $E9DE
C1/1BD7:	EE DE E9   	INC $E9DE
C1/1BDA:	80 06      	BRA $1BE2
C1/1BDC:	9C DF E9   	STZ $E9DF
C1/1BDF:	9C DE E9   	STZ $E9DE
C1/1BE2:	9C DC E9   	STZ $E9DC
C1/1BE5:	EE DC E9   	INC $E9DC
C1/1BE8:	9C DD E9   	STZ $E9DD
C1/1BEB:	C9 FF      	CMP #$FF
C1/1BED:	D0 03      	BNE $1BF2
C1/1BEF:	4C 77 1C   	JMP $1C77

C1/1BF2:	85 22      	STA $22
C1/1BF4:	A9 06      	LDA #$06
C1/1BF6:	85 24      	STA $24
C1/1BF8:	20 D9 18   	JSR $18D9     ; Multiplication ($26 = $22 * $24)
C1/1BFB:	A6 26      	LDX $26
C1/1BFD:	A0 00 10   	LDY #$1000
C1/1C00:	20 F5 1C   	JSR $1CF5
C1/1C03:	E8         	INX
C1/1C04:	A0 00 18   	LDY #$1800
C1/1C07:	20 F5 1C   	JSR $1CF5
C1/1C0A:	E8         	INX
C1/1C0B:	EE DD E9   	INC $E9DD
C1/1C0E:	A0 00 48   	LDY #$4800
C1/1C11:	20 F5 1C   	JSR $1CF5
C1/1C14:	E8         	INX
C1/1C15:	A0 00 60   	LDY #$6000
C1/1C18:	20 7B 1C   	JSR $1C7B
C1/1C1B:	E8         	INX
C1/1C1C:	AD DF E9   	LDA $E9DF
C1/1C1F:	D0 0B      	BNE $1C2C
C1/1C21:	AD DE E9   	LDA $E9DE
C1/1C24:	D0 06      	BNE $1C2C
C1/1C26:	A0 00 64   	LDY #$6400
C1/1C29:	20 7B 1C   	JSR $1C7B
C1/1C2C:	E8         	INX
C1/1C2D:	BF 00 00 E7	LDA $E70000,X
C1/1C31:	29 80      	AND #$80
C1/1C33:	8D 83 62   	STA $6283
C1/1C36:	BF 00 00 E7	LDA $E70000,X
C1/1C3A:	29 7F      	AND #$7F
C1/1C3C:	C2 20      	REP #$20
C1/1C3E:	0A         	ASL A
C1/1C3F:	0A         	ASL A
C1/1C40:	0A         	ASL A
C1/1C41:	0A         	ASL A
C1/1C42:	0A         	ASL A
C1/1C43:	85 22      	STA $22
C1/1C45:	0A         	ASL A
C1/1C46:	18         	CLC
C1/1C47:	65 22      	ADC $22
C1/1C49:	AA         	TAX
C1/1C4A:	7B         	TDC
C1/1C4B:	E2 20      	SEP #$20           ; 8-bit A
C1/1C4D:	A8         	TAY
C1/1C4E:	AD DE E9   	LDA $E9DE
C1/1C51:	F0 13      	BEQ $1C66
C1/1C53:	BF 50 01 E7	LDA $E70150,X
C1/1C57:	99 60 7E   	STA $7E60,Y
C1/1C5A:	99 60 7C   	STA $7C60,Y
C1/1C5D:	E8         	INX
C1/1C5E:	C8         	INY
C1/1C5F:	C0 40 00   	CPY #$0040
C1/1C62:	D0 EF      	BNE $1C53
C1/1C64:	80 11      	BRA $1C77
C1/1C66:	BF 50 01 E7	LDA $E70150,X
C1/1C6A:	99 A0 7E   	STA $7EA0,Y
C1/1C6D:	99 A0 7C   	STA $7CA0,Y
C1/1C70:	E8         	INX
C1/1C71:	C8         	INY
C1/1C72:	C0 60 00   	CPY #$0060
C1/1C75:	D0 EF      	BNE $1C66
C1/1C77:	20 E2 03   	JSR $03E2
C1/1C7A:	60         	RTS

C1/1C7B:	DA         	PHX
C1/1C7C:	5A         	PHY
C1/1C7D:	BF 00 00 E7	LDA $E70000,X
C1/1C81:	C9 FF      	CMP #$FF
C1/1C83:	F0 6D      	BEQ $1CF2
C1/1C85:	0A         	ASL A
C1/1C86:	AA         	TAX
C1/1C87:	BF 48 18 E7	LDA $E71848,X
C1/1C8B:	85 F3      	STA $F3
C1/1C8D:	BF 49 18 E7	LDA $E71849,X
C1/1C91:	85 F4      	STA $F4
C1/1C93:	A9 E7      	LDA #$E7
C1/1C95:	85 F5      	STA $F5
C1/1C97:	20 2F 1E   	JSR $1E2F
C1/1C9A:	5A         	PHY
C1/1C9B:	22 6D FF C2	JSL $C2FF6D
C1/1C9F:	7A         	PLY
C1/1CA0:	AD DE E9   	LDA $E9DE
C1/1CA3:	F0 2C      	BEQ $1CD1
C1/1CA5:	8B         	PHB
C1/1CA6:	A9 7F      	LDA #$7F
C1/1CA8:	48         	PHA
C1/1CA9:	AB         	PLB
C1/1CAA:	7B         	TDC
C1/1CAB:	AA         	TAX
C1/1CAC:	BD 01 C4   	LDA $C401,X
C1/1CAF:	1A         	INC A
C1/1CB0:	1A         	INC A
C1/1CB1:	38         	SEC
C1/1CB2:	E9 08      	SBC #$08
C1/1CB4:	9D 01 C4   	STA $C401,X
C1/1CB7:	E8         	INX
C1/1CB8:	E8         	INX
C1/1CB9:	E0 00 08   	CPX #$0800
C1/1CBC:	D0 EE      	BNE $1CAC
C1/1CBE:	AB         	PLB
C1/1CBF:	A2 C0 04   	LDX #$04C0
C1/1CC2:	86 10      	STX $10
C1/1CC4:	A9 7F      	LDA #$7F
C1/1CC6:	A2 00 C4   	LDX #$C400
C1/1CC9:	A0 A0 65   	LDY #$65A0
C1/1CCC:	20 8D 19   	JSR $198D         ; initialize VRAM DMA transfer
C1/1CCF:	80 21      	BRA $1CF2
C1/1CD1:	AD DC E9   	LDA $E9DC
C1/1CD4:	D0 0F      	BNE $1CE5
C1/1CD6:	A2 00 08   	LDX #$0800
C1/1CD9:	86 36      	STX $36
C1/1CDB:	A9 7F      	LDA #$7F
C1/1CDD:	A2 00 C4   	LDX #$C400
C1/1CE0:	20 2B 1A   	JSR $1A2B         ; execute VRAM DMA transfer
C1/1CE3:	80 0D      	BRA $1CF2
C1/1CE5:	A2 00 08   	LDX #$0800
C1/1CE8:	86 10      	STX $10
C1/1CEA:	A9 7F      	LDA #$7F
C1/1CEC:	A2 00 C4   	LDX #$C400
C1/1CEF:	20 8D 19   	JSR $198D         ; initialize VRAM DMA transfer
C1/1CF2:	7A         	PLY
C1/1CF3:	FA         	PLX
C1/1CF4:	60         	RTS

C1/1CF5:	DA         	PHX
C1/1CF6:	5A         	PHY
C1/1CF7:	BF 00 00 E7	LDA $E70000,X
C1/1CFB:	C9 FF      	CMP #$FF
C1/1CFD:	D0 03      	BNE $1D02
C1/1CFF:	4C AC 1D   	JMP $1DAC

C1/1D02:	DA         	PHX
C1/1D03:	29 7F      	AND #$7F
C1/1D05:	85 F3      	STA $F3
C1/1D07:	0A         	ASL A
C1/1D08:	18         	CLC
C1/1D09:	65 F3      	ADC $F3
C1/1D0B:	AA         	TAX
C1/1D0C:	BF 50 16 E7	LDA $E71650,X
C1/1D10:	85 F3      	STA $F3
C1/1D12:	BF 51 16 E7	LDA $E71651,X
C1/1D16:	85 F4      	STA $F4
C1/1D18:	BF 52 16 E7	LDA $E71652,X
C1/1D1C:	85 F5      	STA $F5
C1/1D1E:	C9 E7      	CMP #$E7
C1/1D20:	90 02      	BCC $1D24
C1/1D22:	80 28      	BRA $1D4C
C1/1D24:	5A         	PHY
C1/1D25:	8B         	PHB
C1/1D26:	A9 7F      	LDA #$7F
C1/1D28:	48         	PHA
C1/1D29:	AB         	PLB
C1/1D2A:	C2 20      	REP #$20
C1/1D2C:	7B         	TDC
C1/1D2D:	A8         	TAY
C1/1D2E:	B7 F3      	LDA [$F3],Y
C1/1D30:	99 00 C4   	STA $C400,Y
C1/1D33:	C8         	INY
C1/1D34:	C8         	INY
C1/1D35:	C0 00 20   	CPY #$2000
C1/1D38:	D0 F4      	BNE $1D2E
C1/1D3A:	7B         	TDC
C1/1D3B:	E2 20      	SEP #$20           ; 8-bit A
C1/1D3D:	AB         	PLB
C1/1D3E:	A9 7F      	LDA #$7F
C1/1D40:	8D F4 E9   	STA $E9F4
C1/1D43:	A2 00 C4   	LDX #$C400
C1/1D46:	8E F2 E9   	STX $E9F2
C1/1D49:	7A         	PLY
C1/1D4A:	80 14      	BRA $1D60
C1/1D4C:	A9 7F      	LDA #$7F
C1/1D4E:	8D F4 E9   	STA $E9F4
C1/1D51:	A2 00 C4   	LDX #$C400
C1/1D54:	8E F2 E9   	STX $E9F2
C1/1D57:	20 2F 1E   	JSR $1E2F
C1/1D5A:	5A         	PHY
C1/1D5B:	22 6D FF C2	JSL $C2FF6D
C1/1D5F:	7A         	PLY
C1/1D60:	FA         	PLX
C1/1D61:	BF 00 00 E7	LDA $E70000,X
C1/1D65:	30 05      	BMI $1D6C
C1/1D67:	A2 00 10   	LDX #$1000
C1/1D6A:	80 03      	BRA $1D6F
C1/1D6C:	A2 00 20   	LDX #$2000
C1/1D6F:	AD DD E9   	LDA $E9DD
C1/1D72:	F0 0B      	BEQ $1D7F
C1/1D74:	C2 20      	REP #$20
C1/1D76:	8A         	TXA
C1/1D77:	38         	SEC
C1/1D78:	E9 20 00   	SBC #$0020
C1/1D7B:	AA         	TAX
C1/1D7C:	7B         	TDC
C1/1D7D:	E2 20      	SEP #$20           ; 8-bit A
C1/1D7F:	AD DC E9   	LDA $E9DC
C1/1D82:	D0 0D      	BNE $1D91
C1/1D84:	86 36      	STX $36
C1/1D86:	AE F2 E9   	LDX $E9F2
C1/1D89:	AD F4 E9   	LDA $E9F4
C1/1D8C:	20 2B 1A   	JSR $1A2B         ; execute VRAM DMA transfer
C1/1D8F:	80 1B      	BRA $1DAC
C1/1D91:	86 10      	STX $10
C1/1D93:	AD DE E9   	LDA $E9DE
C1/1D96:	F0 0B      	BEQ $1DA3
C1/1D98:	C2 20      	REP #$20
C1/1D9A:	98         	TYA
C1/1D9B:	18         	CLC
C1/1D9C:	69 00 20   	ADC #$2000
C1/1D9F:	A8         	TAY
C1/1DA0:	7B         	TDC
C1/1DA1:	E2 20      	SEP #$20           ; 8-bit A
C1/1DA3:	AE F2 E9   	LDX $E9F2
C1/1DA6:	AD F4 E9   	LDA $E9F4
C1/1DA9:	20 8D 19   	JSR $198D         ; initialize VRAM DMA transfer
C1/1DAC:	7A         	PLY
C1/1DAD:	FA         	PLX
C1/1DAE:	60         	RTS

C1/1DAF:	9C DC E9   	STZ $E9DC
C1/1DB2:	9C DD E9   	STZ $E9DD
C1/1DB5:	9C DE E9   	STZ $E9DE
C1/1DB8:	AD B8 EC   	LDA $ECB8
C1/1DBB:	85 22      	STA $22
C1/1DBD:	A9 06      	LDA #$06
C1/1DBF:	85 24      	STA $24
C1/1DC1:	20 D9 18   	JSR $18D9     ; Multiplication ($26 = $22 * $24)
C1/1DC4:	A6 26      	LDX $26
C1/1DC6:	A0 00 10   	LDY #$1000
C1/1DC9:	20 F5 1C   	JSR $1CF5
C1/1DCC:	E8         	INX
C1/1DCD:	A0 00 18   	LDY #$1800
C1/1DD0:	20 F5 1C   	JSR $1CF5
C1/1DD3:	E8         	INX
C1/1DD4:	A0 00 48   	LDY #$4800
C1/1DD7:	20 F5 1C   	JSR $1CF5
C1/1DDA:	E8         	INX
C1/1DDB:	A0 00 60   	LDY #$6000
C1/1DDE:	20 7B 1C   	JSR $1C7B
C1/1DE1:	E8         	INX
C1/1DE2:	A0 00 64   	LDY #$6400
C1/1DE5:	20 7B 1C   	JSR $1C7B
C1/1DE8:	E8         	INX
C1/1DE9:	BF 00 00 E7	LDA $E70000,X
C1/1DED:	29 80      	AND #$80
C1/1DEF:	8D 83 62   	STA $6283
C1/1DF2:	BF 00 00 E7	LDA $E70000,X
C1/1DF6:	29 7F      	AND #$7F
C1/1DF8:	C2 20      	REP #$20
C1/1DFA:	0A         	ASL A
C1/1DFB:	0A         	ASL A
C1/1DFC:	0A         	ASL A
C1/1DFD:	0A         	ASL A
C1/1DFE:	0A         	ASL A
C1/1DFF:	85 22      	STA $22
C1/1E01:	0A         	ASL A
C1/1E02:	18         	CLC
C1/1E03:	65 22      	ADC $22
C1/1E05:	AA         	TAX
C1/1E06:	7B         	TDC
C1/1E07:	E2 20      	SEP #$20           ; 8-bit A
C1/1E09:	A8         	TAY
C1/1E0A:	BF 50 01 E7	LDA $E70150,X
C1/1E0E:	99 A0 7E   	STA $7EA0,Y
C1/1E11:	E8         	INX
C1/1E12:	C8         	INY
C1/1E13:	C0 60 00   	CPY #$0060
C1/1E16:	D0 F2      	BNE $1E0A
C1/1E18:	C2 20      	REP #$20
C1/1E1A:	A9 F0 57   	LDA #$57F0
C1/1E1D:	8F 16 21 00	STA $002116
C1/1E21:	A2 10 00   	LDX #$0010
C1/1E24:	7B         	TDC
C1/1E25:	8F 18 21 00	STA $002118
C1/1E29:	CA         	DEX
C1/1E2A:	D0 F9      	BNE $1E25
C1/1E2C:	E2 20      	SEP #$20           ; 8-bit A
C1/1E2E:	60         	RTS

C1/1E2F:	A9 00      	LDA #$00
C1/1E31:	85 F6      	STA $F6
C1/1E33:	A9 C4      	LDA #$C4
C1/1E35:	85 F7      	STA $F7
C1/1E37:	A9 7F      	LDA #$7F
C1/1E39:	85 F8      	STA $F8
C1/1E3B:	60         	RTS

C1/1E3C:	7B         	TDC
C1/1E3D:	AA         	TAX
C1/1E3E:	64 24      	STZ $24
C1/1E40:	BD F4 80   	LDA $80F4,X
C1/1E43:	4A         	LSR A
C1/1E44:	05 24      	ORA $24
C1/1E46:	6A         	ROR A
C1/1E47:	85 24      	STA $24
C1/1E49:	E8         	INX
C1/1E4A:	E8         	INX
C1/1E4B:	E0 0C 00   	CPX #$000C
C1/1E4E:	D0 F0      	BNE $1E40
C1/1E50:	4A         	LSR A
C1/1E51:	4A         	LSR A
C1/1E52:	85 24      	STA $24
C1/1E54:	60         	RTS

C1/1E55:	20 59 1E   	JSR $1E59          ; fill VRAM Battle BG1 tiles w/ $02EE
C1/1E58:	6B         	RTL

; Fill VRAM BG1 Tiles w/ $02EE
C1/1E59:	20 F6 1F   	JSR $1FF6          ; fill BG tile data buffer w/ $02EE
C1/1E5C:	4C 26 1F   	JMP $1F26          ; set battlefield BG1 tiles in VRAM

C1/1E5F:	20 63 1E   	JSR $1E63
C1/1E62:	6B         	RTL

C1/1E63:	48         	PHA
C1/1E64:	20 00 0F   	JSR $0F00
C1/1E67:	20 F6 1F   	JSR $1FF6          ; fill BG tile data buffer w/ $02EE
C1/1E6A:	68         	PLA
C1/1E6B:	2D 1E 20   	AND $201E
C1/1E6E:	2D AB 61   	AND $61AB
C1/1E71:	2D E6 E9   	AND $E9E6
C1/1E74:	85 24      	STA $24
C1/1E76:	4C 95 1E   	JMP $1E95

C1/1E79:	20 00 0F   	JSR $0F00
C1/1E7C:	20 F6 1F   	JSR $1FF6          ; fill BG tile data buffer w/ $02EE
C1/1E7F:	20 3C 1E   	JSR $1E3C
C1/1E82:	A5 24      	LDA $24
C1/1E84:	2D 1E 20   	AND $201E
C1/1E87:	2D AB 61   	AND $61AB
C1/1E8A:	2D E6 E9   	AND $E9E6
C1/1E8D:	2D 91 61   	AND $6191
C1/1E90:	85 24      	STA $24
C1/1E92:	4C 95 1E   	JMP $1E95

C1/1E95:	A5 24      	LDA $24
C1/1E97:	85 22      	STA $22
C1/1E99:	7B         	TDC
C1/1E9A:	AA         	TAX
C1/1E9B:	64 10      	STZ $10
C1/1E9D:	46 22      	LSR $22
C1/1E9F:	90 29      	BCC $1ECA
C1/1EA1:	DA         	PHX
C1/1EA2:	A5 10      	LDA $10
C1/1EA4:	9D FF 80   	STA $80FF,X
C1/1EA7:	0A         	ASL A
C1/1EA8:	0A         	ASL A
C1/1EA9:	0A         	ASL A
C1/1EAA:	0A         	ASL A
C1/1EAB:	0A         	ASL A
C1/1EAC:	A8         	TAY
C1/1EAD:	BD DB 80   	LDA $80DB,X
C1/1EB0:	4A         	LSR A
C1/1EB1:	0A         	ASL A
C1/1EB2:	0A         	ASL A
C1/1EB3:	0A         	ASL A
C1/1EB4:	0A         	ASL A
C1/1EB5:	0A         	ASL A
C1/1EB6:	AA         	TAX
C1/1EB7:	A9 20      	LDA #$20
C1/1EB9:	85 12      	STA $12
C1/1EBB:	BD 00 7F   	LDA $7F00,X
C1/1EBE:	99 60 7E   	STA $7E60,Y
C1/1EC1:	E8         	INX
C1/1EC2:	C8         	INY
C1/1EC3:	C6 12      	DEC $12
C1/1EC5:	D0 F4      	BNE $1EBB
C1/1EC7:	E6 10      	INC $10
C1/1EC9:	FA         	PLX
C1/1ECA:	E8         	INX
C1/1ECB:	E8         	INX
C1/1ECC:	E0 0C 00   	CPX #$000C
C1/1ECF:	D0 CC      	BNE $1E9D
C1/1ED1:	7B         	TDC
C1/1ED2:	AA         	TAX
C1/1ED3:	46 24      	LSR $24
C1/1ED5:	90 43      	BCC $1F1A
C1/1ED7:	BD C3 80   	LDA $80C3,X
C1/1EDA:	4A         	LSR A
C1/1EDB:	4A         	LSR A
C1/1EDC:	4A         	LSR A
C1/1EDD:	85 14      	STA $14
C1/1EDF:	BD CF 80   	LDA $80CF,X
C1/1EE2:	4A         	LSR A
C1/1EE3:	4A         	LSR A
C1/1EE4:	4A         	LSR A
C1/1EE5:	85 16      	STA $16
C1/1EE7:	BD 2F 81   	LDA $812F,X
C1/1EEA:	85 10      	STA $10
C1/1EEC:	BD 30 81   	LDA $8130,X
C1/1EEF:	85 12      	STA $12
C1/1EF1:	BD FF 80   	LDA $80FF,X
C1/1EF4:	18         	CLC
C1/1EF5:	69 03      	ADC #$03
C1/1EF7:	0A         	ASL A
C1/1EF8:	0A         	ASL A
C1/1EF9:	85 22      	STA $22
C1/1EFB:	BD 00 81   	LDA $8100,X
C1/1EFE:	05 22      	ORA $22
C1/1F00:	09 03      	ORA #$03
C1/1F02:	85 19      	STA $19
C1/1F04:	BF 74 C4 C2	LDA $C2C474,X
C1/1F08:	85 26      	STA $26
C1/1F0A:	BF 75 C4 C2	LDA $C2C475,X
C1/1F0E:	85 27      	STA $27
C1/1F10:	A0 02 00   	LDY #$0002
C1/1F13:	B1 26      	LDA ($26),Y
C1/1F15:	85 18      	STA $18
C1/1F17:	20 83 1F   	JSR $1F83
C1/1F1A:	E8         	INX
C1/1F1B:	E8         	INX
C1/1F1C:	E0 0C 00   	CPX #$000C
C1/1F1F:	D0 B2      	BNE $1ED3
C1/1F21:	60         	RTS

; Long access to transfer BG tile data to VRAM

C1/1F22:	20 26 1F   	JSR $1F26         ; set battlefield BG1 tiles in VRAM
C1/1F25:	6B         	RTL

; Transfer Background Tile Data buffer to VRAM

C1/1F26:	A2 C0 04   	LDX #$04C0        ; BG tile data buffer
C1/1F29:	86 10      	STX $10           ; VRAM data length
C1/1F2B:	A2 7F A9   	LDX #$A97F        ; VRAM source offset (BG tile buffer)
C1/1F2E:	A9 7E      	LDA #$7E          ; VRAM source bank
C1/1F30:	A0 00 0C   	LDY #$0C00        ; VRAM destination offset (Battlefield BG1 tiles)
C1/1F33:	4C 8D 19   	JMP $198D         ; initialize VRAM DMA transfer

C1/1F36:	DA         	PHX
C1/1F37:	A5 10      	LDA $10
C1/1F39:	85 1E      	STA $1E
C1/1F3B:	A5 14      	LDA $14
C1/1F3D:	18         	CLC
C1/1F3E:	65 10      	ADC $10
C1/1F40:	C9 20      	CMP #$20
C1/1F42:	90 07      	BCC $1F4B
C1/1F44:	A9 20      	LDA #$20
C1/1F46:	38         	SEC
C1/1F47:	E5 14      	SBC $14
C1/1F49:	85 1E      	STA $1E
C1/1F4B:	A5 16      	LDA $16
C1/1F4D:	18         	CLC
C1/1F4E:	65 12      	ADC $12
C1/1F50:	C9 13      	CMP #$13
C1/1F52:	90 07      	BCC $1F5B
C1/1F54:	A9 13      	LDA #$13
C1/1F56:	38         	SEC
C1/1F57:	E5 16      	SBC $16
C1/1F59:	85 12      	STA $12
C1/1F5B:	64 11      	STZ $11
C1/1F5D:	64 13      	STZ $13
C1/1F5F:	64 15      	STZ $15
C1/1F61:	64 17      	STZ $17
C1/1F63:	64 1F      	STZ $1F
C1/1F65:	64 21      	STZ $21
C1/1F67:	C2 20      	REP #$20
C1/1F69:	A5 16      	LDA $16
C1/1F6B:	0A         	ASL A
C1/1F6C:	0A         	ASL A
C1/1F6D:	0A         	ASL A
C1/1F6E:	0A         	ASL A
C1/1F6F:	0A         	ASL A
C1/1F70:	0A         	ASL A
C1/1F71:	06 14      	ASL $14
C1/1F73:	18         	CLC
C1/1F74:	65 14      	ADC $14
C1/1F76:	69 7F A9   	ADC #$A97F
C1/1F79:	85 1A      	STA $1A
C1/1F7B:	06 10      	ASL $10
C1/1F7D:	06 1E      	ASL $1E
C1/1F7F:	E2 20      	SEP #$20           ; 8-bit A
C1/1F81:	FA         	PLX
C1/1F82:	60         	RTS

C1/1F83:	DA         	PHX
C1/1F84:	20 36 1F   	JSR $1F36
C1/1F87:	BD F3 80   	LDA $80F3,X
C1/1F8A:	5D 7E 61   	EOR $617E,X
C1/1F8D:	29 01      	AND #$01
C1/1F8F:	D0 28      	BNE $1FB9
C1/1F91:	C2 20      	REP #$20
C1/1F93:	7B         	TDC
C1/1F94:	A8         	TAY
C1/1F95:	A5 18      	LDA $18
C1/1F97:	91 1A      	STA ($1A),Y
C1/1F99:	1A         	INC A
C1/1F9A:	C8         	INY
C1/1F9B:	C8         	INY
C1/1F9C:	C4 1E      	CPY $1E
C1/1F9E:	D0 F7      	BNE $1F97
C1/1FA0:	A5 18      	LDA $18
C1/1FA2:	18         	CLC
C1/1FA3:	69 10 00   	ADC #$0010
C1/1FA6:	85 18      	STA $18
C1/1FA8:	A5 1A      	LDA $1A
C1/1FAA:	18         	CLC
C1/1FAB:	69 40 00   	ADC #$0040
C1/1FAE:	85 1A      	STA $1A
C1/1FB0:	C6 12      	DEC $12
C1/1FB2:	D0 DF      	BNE $1F93
C1/1FB4:	7B         	TDC
C1/1FB5:	E2 20      	SEP #$20           ; 8-bit A
C1/1FB7:	FA         	PLX
C1/1FB8:	60         	RTS

C1/1FB9:	C2 20      	REP #$20
C1/1FBB:	A5 10      	LDA $10
C1/1FBD:	4A         	LSR A
C1/1FBE:	3A         	DEC A
C1/1FBF:	18         	CLC
C1/1FC0:	65 18      	ADC $18
C1/1FC2:	09 00 40   	ORA #$4000
C1/1FC5:	85 18      	STA $18
C1/1FC7:	7B         	TDC
C1/1FC8:	A8         	TAY
C1/1FC9:	A5 18      	LDA $18
C1/1FCB:	91 1A      	STA ($1A),Y
C1/1FCD:	3A         	DEC A
C1/1FCE:	C8         	INY
C1/1FCF:	C8         	INY
C1/1FD0:	C4 1E      	CPY $1E
C1/1FD2:	D0 F7      	BNE $1FCB
C1/1FD4:	A5 18      	LDA $18
C1/1FD6:	18         	CLC
C1/1FD7:	69 10 00   	ADC #$0010
C1/1FDA:	85 18      	STA $18
C1/1FDC:	A5 1A      	LDA $1A
C1/1FDE:	18         	CLC
C1/1FDF:	69 40 00   	ADC #$0040
C1/1FE2:	85 1A      	STA $1A
C1/1FE4:	C6 12      	DEC $12
C1/1FE6:	D0 DF      	BNE $1FC7
C1/1FE8:	7B         	TDC
C1/1FE9:	E2 20      	SEP #$20           ; 8-bit A
C1/1FEB:	FA         	PLX
C1/1FEC:	60         	RTS

; Fill BG tile buffer with $01EE [?]

C1/1FED:	C2 20      	REP #$20           ; 16-bit A
C1/1FEF:	7B         	TDC                ; A = 0000
C1/1FF0:	AA         	TAX                ; X = 0000
C1/1FF1:	A9 EE 01   	LDA #$01EE         ; [?]
C1/1FF4:	80 07      	BRA $1FFD          ; fill BG tile buffer

; Fill BG tile buffer with $02EE [?]

C1/1FF6:	C2 20      	REP #$20           ; 16-bit A
C1/1FF8:	7B         	TDC                ; A = 0000
C1/1FF9:	AA         	TAX                ; X = 0000
C1/1FFA:	A9 EE 02   	LDA #$02EE         ; [?]

C1/1FFD:	9D 7F A9   	STA $A97F,X
C1/2000:	9D 17 AA   	STA $AA17,X
C1/2003:	9D AF AA   	STA $AAAF,X
C1/2006:	9D 47 AB   	STA $AB47,X
C1/2009:	9D DF AB   	STA $ABDF,X
C1/200C:	9D 77 AC   	STA $AC77,X
C1/200F:	9D 0F AD   	STA $AD0F,X
C1/2012:	9D A7 AD   	STA $ADA7,X        ; BG tile data [?]
C1/2015:	E8         	INX
C1/2016:	E8         	INX                ; next two bytes
C1/2017:	E0 98 00   	CPX #$0098         ; set entire tile data buffer
C1/201A:	D0 E1      	BNE $1FFD          ; continue loop
C1/201C:	7B         	TDC                ; A = 0000
C1/201D:	E2 20      	SEP #$20           ; 8-bit A
C1/201F:	60         	RTS

C1/2020:	7B         	TDC
C1/2021:	AA         	TAX
C1/2022:	9D 3F AE   	STA $AE3F,X
C1/2025:	9D 3F BE   	STA $BE3F,X
C1/2028:	E8         	INX
C1/2029:	E0 00 10   	CPX #$1000
C1/202C:	D0 F4      	BNE $2022
C1/202E:	60         	RTS

C1/202F:	AD A7 81   	LDA $81A7
C1/2032:	0A         	ASL A
C1/2033:	A8         	TAY
C1/2034:	C2 20      	REP #$20
C1/2036:	B9 2F 81   	LDA $812F,Y
C1/2039:	85 22      	STA $22
C1/203B:	29 FF 00   	AND #$00FF
C1/203E:	0A         	ASL A
C1/203F:	AA         	TAX
C1/2040:	BF 70 BB C2	LDA $C2BB70,X
C1/2044:	85 26      	STA $26
C1/2046:	A5 23      	LDA $23
C1/2048:	29 FF 00   	AND #$00FF
C1/204B:	0A         	ASL A
C1/204C:	AA         	TAX
C1/204D:	BF 92 BB C2	LDA $C2BB92,X
C1/2051:	18         	CLC
C1/2052:	65 26      	ADC $26
C1/2054:	85 26      	STA $26
C1/2056:	7B         	TDC
C1/2057:	E2 20      	SEP #$20           ; 8-bit A
C1/2059:	60         	RTS

C1/205A:	8D A7 81   	STA $81A7
C1/205D:	0A         	ASL A
C1/205E:	AA         	TAX
C1/205F:	DA         	PHX
C1/2060:	C2 20      	REP #$20
C1/2062:	64 26      	STZ $26
C1/2064:	BD 01 20   	LDA $2001,X
C1/2067:	0A         	ASL A
C1/2068:	0A         	ASL A
C1/2069:	18         	CLC
C1/206A:	7D 01 20   	ADC $2001,X
C1/206D:	AA         	TAX
C1/206E:	BF 02 70 D2	LDA $D27002,X
C1/2072:	EB         	XBA
C1/2073:	29 FF 03   	AND #$03FF
C1/2076:	85 16      	STA $16
C1/2078:	7B         	TDC
C1/2079:	E2 20      	SEP #$20           ; 8-bit A
C1/207B:	AD A7 81   	LDA $81A7
C1/207E:	A8         	TAY
C1/207F:	B9 C2 62   	LDA $62C2,Y
C1/2082:	F0 06      	BEQ $208A
C1/2084:	20 2F 20   	JSR $202F
C1/2087:	A2 16 08   	LDX #$0816
C1/208A:	C2 20      	REP #$20
C1/208C:	BF 00 70 D2	LDA $D27000,X
C1/2090:	29 FF 7F   	AND #$7FFF
C1/2093:	8D A8 81   	STA $81A8
C1/2096:	7B         	TDC
C1/2097:	E2 20      	SEP #$20           ; 8-bit A
C1/2099:	BF 01 70 D2	LDA $D27001,X
C1/209D:	29 80      	AND #$80
C1/209F:	8D AC 81   	STA $81AC
C1/20A2:	BF 02 70 D2	LDA $D27002,X
C1/20A6:	4A         	LSR A
C1/20A7:	0D AC 81   	ORA $81AC
C1/20AA:	8D AC 81   	STA $81AC
C1/20AD:	4A         	LSR A
C1/20AE:	4A         	LSR A
C1/20AF:	4A         	LSR A
C1/20B0:	4A         	LSR A
C1/20B1:	4A         	LSR A
C1/20B2:	29 01      	AND #$01
C1/20B4:	8D AB 81   	STA $81AB
C1/20B7:	BF 04 70 D2	LDA $D27004,X
C1/20BB:	8D AA 81   	STA $81AA
C1/20BE:	AD A7 81   	LDA $81A7
C1/20C1:	0A         	ASL A
C1/20C2:	0A         	ASL A
C1/20C3:	AA         	TAX
C1/20C4:	86 10      	STX $10
C1/20C6:	A9 C2      	LDA #$C2
C1/20C8:	85 14      	STA $14
C1/20CA:	AD 00 20   	LDA $2000
C1/20CD:	0A         	ASL A
C1/20CE:	AA         	TAX
C1/20CF:	C2 20      	REP #$20
C1/20D1:	BF 1A D0 C2	LDA $C2D01A,X
C1/20D5:	18         	CLC
C1/20D6:	65 10      	ADC $10
C1/20D8:	85 12      	STA $12
C1/20DA:	A7 12      	LDA [$12]
C1/20DC:	18         	CLC
C1/20DD:	69 3F AE   	ADC #$AE3F
C1/20E0:	65 26      	ADC $26
C1/20E2:	85 61      	STA $61
C1/20E4:	E6 12      	INC $12
C1/20E6:	E6 12      	INC $12
C1/20E8:	A7 12      	LDA [$12]
C1/20EA:	8D 56 82   	STA $8256
C1/20ED:	AD A8 81   	LDA $81A8
C1/20F0:	0A         	ASL A
C1/20F1:	0A         	ASL A
C1/20F2:	0A         	ASL A
C1/20F3:	85 64      	STA $64
C1/20F5:	9C 54 82   	STZ $8254
C1/20F8:	FA         	PLX
C1/20F9:	A5 16      	LDA $16
C1/20FB:	9D 17 81   	STA $8117,X
C1/20FE:	7B         	TDC
C1/20FF:	E2 20      	SEP #$20           ; 8-bit A
C1/2101:	AD A9 81   	LDA $81A9
C1/2104:	4A         	LSR A
C1/2105:	4A         	LSR A
C1/2106:	4A         	LSR A
C1/2107:	4A         	LSR A
C1/2108:	4A         	LSR A
C1/2109:	85 66      	STA $66
C1/210B:	A5 64      	LDA $64
C1/210D:	18         	CLC
C1/210E:	69 00      	ADC #$00
C1/2110:	85 64      	STA $64
C1/2112:	A5 65      	LDA $65
C1/2114:	69 70      	ADC #$70
C1/2116:	85 65      	STA $65
C1/2118:	A5 66      	LDA $66
C1/211A:	69 E9      	ADC #$E9
C1/211C:	85 66      	STA $66
C1/211E:	60         	RTS

C1/211F:	20 5F 21   	JSR $215F
C1/2122:	AD 58 82   	LDA $8258
C1/2125:	AA         	TAX
C1/2126:	BD C2 62   	LDA $62C2,X
C1/2129:	D0 33      	BNE $215E
C1/212B:	AD 58 82   	LDA $8258
C1/212E:	0A         	ASL A
C1/212F:	AA         	TAX
C1/2130:	AD 51 82   	LDA $8251
C1/2133:	9D 2F 81   	STA $812F,X
C1/2136:	AD 53 82   	LDA $8253
C1/2139:	9D 30 81   	STA $8130,X
C1/213C:	DA         	PHX
C1/213D:	C2 20      	REP #$20
C1/213F:	BD 01 20   	LDA $2001,X
C1/2142:	C9 06 01   	CMP #$0106
C1/2145:	D0 08      	BNE $214F
C1/2147:	48         	PHA
C1/2148:	A9 10 0E   	LDA #$0E10
C1/214B:	9D 2F 81   	STA $812F,X
C1/214E:	68         	PLA
C1/214F:	AA         	TAX
C1/2150:	BF 00 36 CF	LDA $CF3600,X
C1/2154:	FA         	PLX
C1/2155:	29 FF 00   	AND #$00FF
C1/2158:	9D 57 80   	STA $8057,X
C1/215B:	7B         	TDC
C1/215C:	E2 20      	SEP #$20           ; 8-bit A
C1/215E:	60         	RTS

C1/215F:	7B         	TDC
C1/2160:	AA         	TAX
C1/2161:	9D 2D 82   	STA $822D,X
C1/2164:	E8         	INX
C1/2165:	E0 20 00   	CPX #$0020
C1/2168:	D0 F7      	BNE $2161
C1/216A:	AD AC 81   	LDA $81AC
C1/216D:	29 40      	AND #$40
C1/216F:	D0 24      	BNE $2195
C1/2171:	C2 20      	REP #$20
C1/2173:	AD AA 81   	LDA $81AA
C1/2176:	0A         	ASL A
C1/2177:	0A         	ASL A
C1/2178:	0A         	ASL A
C1/2179:	18         	CLC
C1/217A:	6F 20 A8 D2	ADC $D2A820
C1/217E:	AA         	TAX
C1/217F:	7B         	TDC
C1/2180:	E2 20      	SEP #$20           ; 8-bit A
C1/2182:	A4 00      	LDY $00
C1/2184:	BF 00 00 D2	LDA $D20000,X
C1/2188:	99 2D 82   	STA $822D,Y
C1/218B:	C8         	INY
C1/218C:	C8         	INY
C1/218D:	E8         	INX
C1/218E:	C0 10 00   	CPY #$0010
C1/2191:	D0 F1      	BNE $2184
C1/2193:	80 23      	BRA $21B8
C1/2195:	C2 20      	REP #$20
C1/2197:	AD AA 81   	LDA $81AA
C1/219A:	0A         	ASL A
C1/219B:	0A         	ASL A
C1/219C:	0A         	ASL A
C1/219D:	0A         	ASL A
C1/219E:	0A         	ASL A
C1/219F:	18         	CLC
C1/21A0:	6F 22 A8 D2	ADC $D2A822
C1/21A4:	AA         	TAX
C1/21A5:	7B         	TDC
C1/21A6:	E2 20      	SEP #$20           ; 8-bit A
C1/21A8:	A4 00      	LDY $00
C1/21AA:	BF 00 00 D2	LDA $D20000,X
C1/21AE:	99 2D 82   	STA $822D,Y
C1/21B1:	C8         	INY
C1/21B2:	E8         	INX
C1/21B3:	C0 20 00   	CPY #$0020
C1/21B6:	D0 F2      	BNE $21AA
C1/21B8:	A6 00      	LDX $00
C1/21BA:	C2 20      	REP #$20
C1/21BC:	64 10      	STZ $10
C1/21BE:	BD 2D 82   	LDA $822D,X
C1/21C1:	F0 0B      	BEQ $21CE
C1/21C3:	05 10      	ORA $10
C1/21C5:	85 10      	STA $10
C1/21C7:	E8         	INX
C1/21C8:	E8         	INX
C1/21C9:	E0 20 00   	CPX #$0020
C1/21CC:	D0 F0      	BNE $21BE
C1/21CE:	A4 00      	LDY $00
C1/21D0:	A5 10      	LDA $10
C1/21D2:	EB         	XBA
C1/21D3:	85 10      	STA $10
C1/21D5:	06 10      	ASL $10
C1/21D7:	90 02      	BCC $21DB
C1/21D9:	84 12      	STY $12
C1/21DB:	C8         	INY
C1/21DC:	C0 10 00   	CPY #$0010
C1/21DF:	D0 F4      	BNE $21D5
C1/21E1:	7B         	TDC
C1/21E2:	E2 20      	SEP #$20           ; 8-bit A
C1/21E4:	8A         	TXA
C1/21E5:	4A         	LSR A
C1/21E6:	CD 57 82   	CMP $8257
C1/21E9:	90 03      	BCC $21EE
C1/21EB:	AD 57 82   	LDA $8257
C1/21EE:	8D 53 82   	STA $8253
C1/21F1:	A5 12      	LDA $12
C1/21F3:	1A         	INC A
C1/21F4:	CD 56 82   	CMP $8256
C1/21F7:	90 03      	BCC $21FC
C1/21F9:	AD 56 82   	LDA $8256
C1/21FC:	8D 51 82   	STA $8251
C1/21FF:	8D 52 82   	STA $8252
C1/2202:	9C 4D 82   	STZ $824D
C1/2205:	9C 4E 82   	STZ $824E
C1/2208:	60         	RTS

C1/2209:	AD 4D 82   	LDA $824D
C1/220C:	D0 1B      	BNE $2229
C1/220E:	A9 10      	LDA #$10
C1/2210:	8D 4D 82   	STA $824D
C1/2213:	AD 4E 82   	LDA $824E
C1/2216:	AA         	TAX
C1/2217:	BD 2D 82   	LDA $822D,X
C1/221A:	8D 50 82   	STA $8250
C1/221D:	BD 2E 82   	LDA $822E,X
C1/2220:	8D 4F 82   	STA $824F
C1/2223:	EE 4E 82   	INC $824E
C1/2226:	EE 4E 82   	INC $824E

C1/2229:	CE 4D 82   	DEC $824D
C1/222C:	0E 4F 82   	ASL $824F
C1/222F:	2E 50 82   	ROL $8250
C1/2232:	60         	RTS

C1/2233:	5A         	PHY
C1/2234:	C2 20      	REP #$20
C1/2236:	98         	TYA
C1/2237:	18         	CLC
C1/2238:	65 61      	ADC $61
C1/223A:	85 10      	STA $10
C1/223C:	7B         	TDC
C1/223D:	E2 20      	SEP #$20           ; 8-bit A
C1/223F:	AD AC 81   	LDA $81AC
C1/2242:	10 37      	BPL $227B
C1/2244:	C2 20      	REP #$20
C1/2246:	AD 54 82   	LDA $8254
C1/2249:	A8         	TAY
C1/224A:	18         	CLC
C1/224B:	69 18 00   	ADC #$0018
C1/224E:	8D 54 82   	STA $8254
C1/2251:	A9 08 00   	LDA #$0008
C1/2254:	85 12      	STA $12
C1/2256:	B7 64      	LDA [$64],Y
C1/2258:	92 10      	STA ($10)
C1/225A:	E6 10      	INC $10
C1/225C:	E6 10      	INC $10
C1/225E:	C8         	INY
C1/225F:	C8         	INY
C1/2260:	C6 12      	DEC $12
C1/2262:	D0 F2      	BNE $2256
C1/2264:	A9 08 00   	LDA #$0008
C1/2267:	85 12      	STA $12
C1/2269:	B7 64      	LDA [$64],Y
C1/226B:	29 FF 00   	AND #$00FF
C1/226E:	92 10      	STA ($10)
C1/2270:	E6 10      	INC $10
C1/2272:	E6 10      	INC $10
C1/2274:	C8         	INY
C1/2275:	C6 12      	DEC $12
C1/2277:	D0 F0      	BNE $2269
C1/2279:	80 20      	BRA $229B
C1/227B:	C2 20      	REP #$20
C1/227D:	AD 54 82   	LDA $8254
C1/2280:	A8         	TAY
C1/2281:	18         	CLC
C1/2282:	69 20 00   	ADC #$0020
C1/2285:	8D 54 82   	STA $8254
C1/2288:	A9 10 00   	LDA #$0010
C1/228B:	85 12      	STA $12
C1/228D:	B7 64      	LDA [$64],Y
C1/228F:	92 10      	STA ($10)
C1/2291:	E6 10      	INC $10
C1/2293:	E6 10      	INC $10
C1/2295:	C8         	INY
C1/2296:	C8         	INY
C1/2297:	C6 12      	DEC $12
C1/2299:	D0 F2      	BNE $228D

C1/229B:	68         	PLA
C1/229C:	18         	CLC
C1/229D:	69 20 00   	ADC #$0020
C1/22A0:	A8         	TAY
C1/22A1:	7B         	TDC
C1/22A2:	E2 20      	SEP #$20           ; 8-bit A
C1/22A4:	60         	RTS

C1/22A5:	A4 00      	LDY $00
C1/22A7:	20 09 22   	JSR $2209
C1/22AA:	90 05      	BCC $22B1
C1/22AC:	20 33 22   	JSR $2233
C1/22AF:	80 0B      	BRA $22BC
C1/22B1:	C2 20      	REP #$20
C1/22B3:	98         	TYA
C1/22B4:	18         	CLC
C1/22B5:	69 20 00   	ADC #$0020
C1/22B8:	A8         	TAY
C1/22B9:	7B         	TDC
C1/22BA:	E2 20      	SEP #$20           ; 8-bit A

C1/22BC:	CE 52 82   	DEC $8252
C1/22BF:	D0 E6      	BNE $22A7
C1/22C1:	9C 4D 82   	STZ $824D
C1/22C4:	AD 51 82   	LDA $8251
C1/22C7:	8D 52 82   	STA $8252
C1/22CA:	C2 20      	REP #$20
C1/22CC:	A5 61      	LDA $61
C1/22CE:	18         	CLC
C1/22CF:	69 00 02   	ADC #$0200
C1/22D2:	85 61      	STA $61
C1/22D4:	7B         	TDC
C1/22D5:	E2 20      	SEP #$20           ; 8-bit A
C1/22D7:	CE 53 82   	DEC $8253
C1/22DA:	D0 C9      	BNE $22A5
C1/22DC:	60         	RTS

C1/22DD:	C2 20      	REP #$20
C1/22DF:	64 10      	STZ $10
C1/22E1:	A6 00      	LDX $00
C1/22E3:	BD 17 81   	LDA $8117,X
C1/22E6:	C9 FF FF   	CMP #$FFFF
C1/22E9:	F0 17      	BEQ $2302
C1/22EB:	A4 00      	LDY $00
C1/22ED:	D9 23 81   	CMP $8123,Y
C1/22F0:	F0 10      	BEQ $2302
C1/22F2:	C8         	INY
C1/22F3:	C8         	INY
C1/22F4:	C0 0C 00   	CPY #$000C
C1/22F7:	D0 F4      	BNE $22ED
C1/22F9:	A4 10      	LDY $10
C1/22FB:	99 23 81   	STA $8123,Y
C1/22FE:	C8         	INY
C1/22FF:	C8         	INY
C1/2300:	84 10      	STY $10
C1/2302:	E8         	INX
C1/2303:	E8         	INX
C1/2304:	E0 0C 00   	CPX #$000C
C1/2307:	D0 DA      	BNE $22E3
C1/2309:	A6 00      	LDX $00
C1/230B:	BD 17 81   	LDA $8117,X
C1/230E:	A4 00      	LDY $00
C1/2310:	D9 23 81   	CMP $8123,Y
C1/2313:	F0 09      	BEQ $231E
C1/2315:	C8         	INY
C1/2316:	C8         	INY
C1/2317:	C0 06 00   	CPY #$0006
C1/231A:	D0 F4      	BNE $2310
C1/231C:	A4 00      	LDY $00
C1/231E:	98         	TYA
C1/231F:	4A         	LSR A
C1/2320:	0A         	ASL A
C1/2321:	9D DB 80   	STA $80DB,X
C1/2324:	A9 31 00   	LDA #$0031
C1/2327:	9D DC 80   	STA $80DC,X
C1/232A:	A9 20 00   	LDA #$0020
C1/232D:	9D 00 81   	STA $8100,X
C1/2330:	E8         	INX
C1/2331:	E8         	INX
C1/2332:	E0 0C 00   	CPX #$000C
C1/2335:	D0 D4      	BNE $230B
C1/2337:	A9 00 7F   	LDA #$7F00
C1/233A:	85 10      	STA $10
C1/233C:	A4 00      	LDY $00
C1/233E:	B9 23 81   	LDA $8123,Y
C1/2341:	0A         	ASL A
C1/2342:	0A         	ASL A
C1/2343:	0A         	ASL A
C1/2344:	0A         	ASL A
C1/2345:	AA         	TAX
C1/2346:	5A         	PHY
C1/2347:	A4 00      	LDY $00
C1/2349:	BF 20 78 D2	LDA $D27820,X
C1/234D:	91 10      	STA ($10),Y
C1/234F:	E8         	INX
C1/2350:	E8         	INX
C1/2351:	C8         	INY
C1/2352:	C8         	INY
C1/2353:	C0 20 00   	CPY #$0020
C1/2356:	D0 F1      	BNE $2349
C1/2358:	A5 10      	LDA $10
C1/235A:	18         	CLC
C1/235B:	69 20 00   	ADC #$0020
C1/235E:	85 10      	STA $10
C1/2360:	7A         	PLY
C1/2361:	C8         	INY
C1/2362:	C8         	INY
C1/2363:	C0 06 00   	CPY #$0006
C1/2366:	D0 D6      	BNE $233E
C1/2368:	7B         	TDC
C1/2369:	E2 20      	SEP #$20           ; 8-bit A
C1/236B:	60         	RTS

C1/236C:	A0 00 C5   	LDY #$C500
C1/236F:	84 14      	STY $14
C1/2371:	A9 7F      	LDA #$7F
C1/2373:	85 16      	STA $16
C1/2375:	64 18      	STZ $18
C1/2377:	7B         	TDC
C1/2378:	AA         	TAX
C1/2379:	86 1A      	STX $1A
C1/237B:	A4 00      	LDY $00
C1/237D:	64 1C      	STZ $1C
C1/237F:	20 09 22   	JSR $2209
C1/2382:	90 15      	BCC $2399
C1/2384:	20 33 22   	JSR $2233
C1/2387:	5A         	PHY
C1/2388:	A4 1A      	LDY $1A
C1/238A:	A5 18      	LDA $18
C1/238C:	97 14      	STA [$14],Y
C1/238E:	C8         	INY
C1/238F:	C8         	INY
C1/2390:	84 1A      	STY $1A
C1/2392:	E6 18      	INC $18
C1/2394:	E6 1C      	INC $1C
C1/2396:	7A         	PLY
C1/2397:	80 0C      	BRA $23A5

C1/2399:	5A         	PHY
C1/239A:	A4 1A      	LDY $1A
C1/239C:	A9 3F      	LDA #$3F
C1/239E:	97 14      	STA [$14],Y
C1/23A0:	C8         	INY
C1/23A1:	C8         	INY
C1/23A2:	84 1A      	STY $1A
C1/23A4:	7A         	PLY
C1/23A5:	CE 52 82   	DEC $8252
C1/23A8:	D0 D5      	BNE $237F
C1/23AA:	9C 4D 82   	STZ $824D
C1/23AD:	AD 51 82   	LDA $8251
C1/23B0:	8D 52 82   	STA $8252
C1/23B3:	A5 1C      	LDA $1C
C1/23B5:	C2 20      	REP #$20
C1/23B7:	0A         	ASL A
C1/23B8:	0A         	ASL A
C1/23B9:	0A         	ASL A
C1/23BA:	0A         	ASL A
C1/23BB:	0A         	ASL A
C1/23BC:	85 1C      	STA $1C
C1/23BE:	A5 14      	LDA $14
C1/23C0:	18         	CLC
C1/23C1:	69 00 01   	ADC #$0100
C1/23C4:	85 14      	STA $14
C1/23C6:	A5 61      	LDA $61
C1/23C8:	18         	CLC
C1/23C9:	65 1C      	ADC $1C
C1/23CB:	85 61      	STA $61
C1/23CD:	64 1A      	STZ $1A
C1/23CF:	7B         	TDC
C1/23D0:	E2 20      	SEP #$20           ; 8-bit A
C1/23D2:	CE 53 82   	DEC $8253
C1/23D5:	D0 A4      	BNE $237B
C1/23D7:	60         	RTS

C1/23D8:	86 10      	STX $10
C1/23DA:	20 20 20   	JSR $2020
C1/23DD:	20 F5 24   	JSR $24F5
C1/23E0:	4C E5 24   	JMP $24E5

C1/23E3:	A9 3F      	LDA #$3F
C1/23E5:	85 14      	STA $14
C1/23E7:	A9 7E      	LDA #$7E
C1/23E9:	A2 3F AE   	LDX #$AE3F
C1/23EC:	22 27 C0 C2	JSL $C2C027
C1/23F0:	A2 00 20   	LDX #$2000
C1/23F3:	86 10      	STX $10
C1/23F5:	A2 00 C4   	LDX #$C400
C1/23F8:	A0 00 00   	LDY #$0000
C1/23FB:	A9 7F      	LDA #$7F
C1/23FD:	4C 8D 19   	JMP $198D         ; initialize VRAM DMA transfer

C1/2400:	20 D8 23   	JSR $23D8
C1/2403:	20 6C 23   	JSR $236C
C1/2406:	20 E3 23   	JSR $23E3
C1/2409:	6B         	RTL

C1/240A:	20 D8 23   	JSR $23D8
C1/240D:	A0 00 CA   	LDY #$CA00
C1/2410:	20 6F 23   	JSR $236F
C1/2413:	8B         	PHB
C1/2414:	A9 7F      	LDA #$7F
C1/2416:	48         	PHA
C1/2417:	AB         	PLB
C1/2418:	7B         	TDC
C1/2419:	AA         	TAX
C1/241A:	BD 10 CA   	LDA $CA10,X
C1/241D:	9D 00 CE   	STA $CE00,X
C1/2420:	A9 3F      	LDA #$3F
C1/2422:	9D 10 CA   	STA $CA10,X
C1/2425:	BD 10 CB   	LDA $CB10,X
C1/2428:	9D 00 CF   	STA $CF00,X
C1/242B:	A9 3F      	LDA #$3F
C1/242D:	9D 10 CB   	STA $CB10,X
C1/2430:	BD 10 CC   	LDA $CC10,X
C1/2433:	9D 00 D0   	STA $D000,X
C1/2436:	A9 3F      	LDA #$3F
C1/2438:	9D 10 CC   	STA $CC10,X
C1/243B:	BD 10 CD   	LDA $CD10,X
C1/243E:	9D 00 D1   	STA $D100,X
C1/2441:	A9 3F      	LDA #$3F
C1/2443:	9D 10 CD   	STA $CD10,X
C1/2446:	E8         	INX
C1/2447:	E8         	INX
C1/2448:	E0 10 00   	CPX #$0010
C1/244B:	D0 CD      	BNE $241A
C1/244D:	AB         	PLB
C1/244E:	20 E3 23   	JSR $23E3
C1/2451:	6B         	RTL

C1/2452:	20 56 24   	JSR $2456
C1/2455:	6B         	RTL

C1/2456:	20 97 24   	JSR $2497
C1/2459:	A2 00 18   	LDX #$1800
C1/245C:	86 10      	STX $10
C1/245E:	A2 3F AE   	LDX #$AE3F
C1/2461:	A0 00 00   	LDY #$0000
C1/2464:	A9 7E      	LDA #$7E
C1/2466:	4C 8D 19   	JMP $198D         ; initialize VRAM DMA transfer

C1/2469:	A2 8F 01   	LDX #$018F
C1/246C:	20 97 24   	JSR $2497
C1/246F:	A2 00 08   	LDX #$0800
C1/2472:	86 10      	STX $10
C1/2474:	A2 3F AE   	LDX #$AE3F
C1/2477:	A0 00 20   	LDY #$2000
C1/247A:	A9 7E      	LDA #$7E
C1/247C:	20 8D 19   	JSR $198D         ; initialize VRAM DMA transfer
C1/247F:	6B         	RTL

C1/2480:	20 84 24   	JSR $2484
C1/2483:	6B         	RTL

; VRAM Battle Animation Sprite Graphics (Monster Graphics, maybe?)
C1/2484:	20 97 24   	JSR $2497
C1/2487:	A2 00 14   	LDX #$1400
C1/248A:	86 10      	STX $10
C1/248C:	A2 3F AE   	LDX #$AE3F
C1/248F:	A0 00 24   	LDY #$2400
C1/2492:	A9 7E      	LDA #$7E
C1/2494:	4C 8D 19   	JMP $198D         ; initialize VRAM DMA transfer

C1/2497:	86 10      	STX $10
C1/2499:	20 20 20   	JSR $2020
C1/249C:	20 F5 24   	JSR $24F5
C1/249F:	20 E5 24   	JSR $24E5
C1/24A2:	4C A5 22   	JMP $22A5

C1/24A5:	20 A9 24   	JSR $24A9
C1/24A8:	6B         	RTL

C1/24A9:	20 97 24   	JSR $2497
C1/24AC:	7B         	TDC
C1/24AD:	AA         	TAX
C1/24AE:	48         	PHA
C1/24AF:	C2 20      	REP #$20
C1/24B1:	A9 80 01   	LDA #$0180
C1/24B4:	85 10      	STA $10
C1/24B6:	BF 73 D4 C2	LDA $C2D473,X
C1/24BA:	A8         	TAY
C1/24BB:	BF 71 D4 C2	LDA $C2D471,X
C1/24BF:	AA         	TAX
C1/24C0:	7B         	TDC
C1/24C1:	E2 20      	SEP #$20           ; 8-bit A
C1/24C3:	A9 7E      	LDA #$7E
C1/24C5:	20 8D 19   	JSR $198D         ; initialize VRAM DMA transfer
C1/24C8:	68         	PLA
C1/24C9:	18         	CLC
C1/24CA:	69 04      	ADC #$04
C1/24CC:	C9 28      	CMP #$28
C1/24CE:	D0 DD      	BNE $24AD
C1/24D0:	60         	RTS

C1/24D1:	20 97 24   	JSR $2497
C1/24D4:	A2 00 20   	LDX #$2000
C1/24D7:	86 10      	STX $10
C1/24D9:	A2 3F AE   	LDX #$AE3F
C1/24DC:	A0 00 00   	LDY #$0000
C1/24DF:	A9 7E      	LDA #$7E
C1/24E1:	20 8D 19   	JSR $198D         ; initialize VRAM DMA transfer
C1/24E4:	6B         	RTL

C1/24E5:	20 5F 21   	JSR $215F
C1/24E8:	AD 51 82   	LDA $8251
C1/24EB:	8D 6B 61   	STA $616B
C1/24EE:	AD 53 82   	LDA $8253
C1/24F1:	8D 6C 61   	STA $616C
C1/24F4:	60         	RTS

C1/24F5:	C2 20      	REP #$20
C1/24F7:	A5 10      	LDA $10
C1/24F9:	0A         	ASL A
C1/24FA:	0A         	ASL A
C1/24FB:	18         	CLC
C1/24FC:	65 10      	ADC $10
C1/24FE:	AA         	TAX
C1/24FF:	BF 02 70 D2	LDA $D27002,X
C1/2503:	EB         	XBA
C1/2504:	29 FF 03   	AND #$03FF
C1/2507:	0A         	ASL A
C1/2508:	0A         	ASL A
C1/2509:	0A         	ASL A
C1/250A:	0A         	ASL A
C1/250B:	8D 69 61   	STA $6169
C1/250E:	BF 00 70 D2	LDA $D27000,X
C1/2512:	29 FF 7F   	AND #$7FFF
C1/2515:	8D A8 81   	STA $81A8
C1/2518:	7B         	TDC
C1/2519:	E2 20      	SEP #$20           ; 8-bit A
C1/251B:	BF 01 70 D2	LDA $D27001,X
C1/251F:	29 80      	AND #$80
C1/2521:	8D AC 81   	STA $81AC
C1/2524:	BF 02 70 D2	LDA $D27002,X
C1/2528:	4A         	LSR A
C1/2529:	0D AC 81   	ORA $81AC
C1/252C:	8D AC 81   	STA $81AC
C1/252F:	4A         	LSR A
C1/2530:	4A         	LSR A
C1/2531:	4A         	LSR A
C1/2532:	4A         	LSR A
C1/2533:	4A         	LSR A
C1/2534:	29 01      	AND #$01
C1/2536:	8D AB 81   	STA $81AB
C1/2539:	BF 04 70 D2	LDA $D27004,X
C1/253D:	8D AA 81   	STA $81AA
C1/2540:	A9 C2      	LDA #$C2
C1/2542:	85 14      	STA $14
C1/2544:	A9 06      	LDA #$06
C1/2546:	0A         	ASL A
C1/2547:	AA         	TAX
C1/2548:	C2 20      	REP #$20
C1/254A:	BF 1A D0 C2	LDA $C2D01A,X
C1/254E:	85 12      	STA $12
C1/2550:	A7 12      	LDA [$12]
C1/2552:	18         	CLC
C1/2553:	69 3F AE   	ADC #$AE3F
C1/2556:	85 61      	STA $61
C1/2558:	E6 12      	INC $12
C1/255A:	E6 12      	INC $12
C1/255C:	A7 12      	LDA [$12]
C1/255E:	8D 56 82   	STA $8256
C1/2561:	AD A8 81   	LDA $81A8
C1/2564:	0A         	ASL A
C1/2565:	0A         	ASL A
C1/2566:	0A         	ASL A
C1/2567:	85 64      	STA $64
C1/2569:	9C 54 82   	STZ $8254
C1/256C:	7B         	TDC
C1/256D:	E2 20      	SEP #$20           ; 8-bit A
C1/256F:	AD A9 81   	LDA $81A9
C1/2572:	4A         	LSR A
C1/2573:	4A         	LSR A
C1/2574:	4A         	LSR A
C1/2575:	4A         	LSR A
C1/2576:	4A         	LSR A
C1/2577:	85 66      	STA $66
C1/2579:	4C 0B 21   	JMP $210B

C1/257C:	20 20 20   	JSR $2020
C1/257F:	7B         	TDC
C1/2580:	AA         	TAX
C1/2581:	A9 FF      	LDA #$FF
C1/2583:	9D 17 81   	STA $8117,X
C1/2586:	9D 23 81   	STA $8123,X
C1/2589:	E8         	INX
C1/258A:	E0 0C 00   	CPX #$000C
C1/258D:	D0 F4      	BNE $2583
C1/258F:	9C 58 82   	STZ $8258
C1/2592:	AD 58 82   	LDA $8258
C1/2595:	0A         	ASL A
C1/2596:	AA         	TAX
C1/2597:	BD 02 20   	LDA $2002,X
C1/259A:	C9 FF      	CMP #$FF
C1/259C:	F0 14      	BEQ $25B2
C1/259E:	DA         	PHX
C1/259F:	DA         	PHX
C1/25A0:	AD 58 82   	LDA $8258
C1/25A3:	20 5A 20   	JSR $205A
C1/25A6:	FA         	PLX
C1/25A7:	20 1F 21   	JSR $211F
C1/25AA:	20 A5 22   	JSR $22A5
C1/25AD:	FA         	PLX
C1/25AE:	22 32 B5 C2	JSL $C2B532
C1/25B2:	EE 58 82   	INC $8258
C1/25B5:	AD 58 82   	LDA $8258
C1/25B8:	C9 06      	CMP #$06
C1/25BA:	D0 D6      	BNE $2592
C1/25BC:	60         	RTS

C1/25BD:	20 C1 25   	JSR $25C1
C1/25C0:	6B         	RTL

C1/25C1:	A2 00 20   	LDX #$2000
C1/25C4:	86 10      	STX $10
C1/25C6:	A2 3F AE   	LDX #$AE3F
C1/25C9:	A0 00 30   	LDY #$3000
C1/25CC:	A9 7E      	LDA #$7E
C1/25CE:	4C 8D 19   	JMP $198D         ; initialize VRAM DMA transfer

C1/25D1:	A2 00 20   	LDX #$2000
C1/25D4:	86 36      	STX $36
C1/25D6:	A2 3F AE   	LDX #$AE3F
C1/25D9:	A0 00 30   	LDY #$3000
C1/25DC:	A9 7E      	LDA #$7E
C1/25DE:	4C 2B 1A   	JMP $1A2B         ; execute VRAM DMA transfer

C1/25E1:	AD D1 62   	LDA $62D1
C1/25E4:	F0 22      	BEQ $2608
C1/25E6:	7B         	TDC
C1/25E7:	A8         	TAY
C1/25E8:	A5 7B      	LDA $7B
C1/25EA:	D9 42 61   	CMP $6142,Y
C1/25ED:	D0 12      	BNE $2601
C1/25EF:	5A         	PHY
C1/25F0:	98         	TYA
C1/25F1:	0A         	ASL A
C1/25F2:	AA         	TAX
C1/25F3:	C2 20      	REP #$20
C1/25F5:	BF 8B CE C2	LDA $C2CE8B,X   ; increment of 128 bytes
C1/25F9:	AA         	TAX
C1/25FA:	7B         	TDC
C1/25FB:	E2 20      	SEP #$20           ; 8-bit A
C1/25FD:	20 08 26   	JSR $2608
C1/2600:	7A         	PLY
C1/2601:	C8         	INY
C1/2602:	C0 0A 00   	CPY #$000A
C1/2605:	D0 E1      	BNE $25E8
C1/2607:	60         	RTS

C1/2608:	AD AA 60   	LDA $60AA
C1/260B:	F0 0A      	BEQ $2617
C1/260D:	A5 0E      	LDA $0E
C1/260F:	29 01      	AND #$01
C1/2611:	F0 04      	BEQ $2617
C1/2613:	A9 02      	LDA #$02
C1/2615:	80 03      	BRA $261A
C1/2617:	AD 0D 7B   	LDA $7B0D
C1/261A:	30 25      	BMI $2641
C1/261C:	29 0F      	AND #$0F
C1/261E:	8D FC 7A   	STA $7AFC
C1/2621:	BD DE 64   	LDA $64DE,X
C1/2624:	F0 0B      	BEQ $2631
C1/2626:	BD E7 64   	LDA $64E7,X
C1/2629:	F0 06      	BEQ $2631
C1/262B:	20 AA 26   	JSR $26AA
C1/262E:	AE FA 7A   	LDX $7AFA
C1/2631:	C2 20      	REP #$20
C1/2633:	8A         	TXA
C1/2634:	18         	CLC
C1/2635:	69 10 00   	ADC #$0010
C1/2638:	AA         	TAX
C1/2639:	7B         	TDC
C1/263A:	E2 20      	SEP #$20           ; 8-bit A
C1/263C:	CE FC 7A   	DEC $7AFC
C1/263F:	D0 E0      	BNE $2621
C1/2641:	60         	RTS

C1/2642:	AD D1 62   	LDA $62D1
C1/2645:	F0 22      	BEQ $2669
C1/2647:	7B         	TDC
C1/2648:	A8         	TAY
C1/2649:	A5 7B      	LDA $7B
C1/264B:	D9 42 61   	CMP $6142,Y
C1/264E:	D0 12      	BNE $2662
C1/2650:	5A         	PHY
C1/2651:	98         	TYA
C1/2652:	0A         	ASL A
C1/2653:	AA         	TAX
C1/2654:	C2 20      	REP #$20
C1/2656:	BF 8B CE C2	LDA $C2CE8B,X   ; increment of 128 bytes
C1/265A:	AA         	TAX
C1/265B:	7B         	TDC
C1/265C:	E2 20      	SEP #$20           ; 8-bit A
C1/265E:	20 69 26   	JSR $2669
C1/2661:	7A         	PLY
C1/2662:	C8         	INY
C1/2663:	C0 0A 00   	CPY #$000A
C1/2666:	D0 E1      	BNE $2649
C1/2668:	60         	RTS

C1/2669:	AD AA 60   	LDA $60AA
C1/266C:	F0 0A      	BEQ $2678
C1/266E:	A5 0E      	LDA $0E
C1/2670:	29 01      	AND #$01
C1/2672:	F0 04      	BEQ $2678
C1/2674:	A9 02      	LDA #$02
C1/2676:	80 03      	BRA $267B
C1/2678:	AD 0D 7B   	LDA $7B0D
C1/267B:	30 2C      	BMI $26A9
C1/267D:	29 0F      	AND #$0F
C1/267F:	8D FC 7A   	STA $7AFC
C1/2682:	BD DE 64   	LDA $64DE,X
C1/2685:	F0 12      	BEQ $2699
C1/2687:	BD 86 6F   	LDA $6F86,X
C1/268A:	29 03      	AND #$03
C1/268C:	D0 0B      	BNE $2699
C1/268E:	BD E7 64   	LDA $64E7,X
C1/2691:	D0 06      	BNE $2699
C1/2693:	20 AA 26   	JSR $26AA
C1/2696:	AE FA 7A   	LDX $7AFA
C1/2699:	C2 20      	REP #$20
C1/269B:	8A         	TXA
C1/269C:	18         	CLC
C1/269D:	69 10 00   	ADC #$0010
C1/26A0:	AA         	TAX
C1/26A1:	7B         	TDC
C1/26A2:	E2 20      	SEP #$20           ; 8-bit A
C1/26A4:	CE FC 7A   	DEC $7AFC
C1/26A7:	D0 D9      	BNE $2682
C1/26A9:	60         	RTS

; Copy Sprite Tile data to OAM buffer?

C1/26AA:	8E FA 7A   	STX $7AFA
C1/26AD:	BD E4 64   	LDA $64E4,X        ; animation thread sprite tile offset
C1/26B0:	85 3C      	STA $3C            ; store it
C1/26B2:	C2 20      	REP #$20           ; 16-bit A
C1/26B4:	BD DF 64   	LDA $64DF,X        ; sprite X position
C1/26B7:	85 36      	STA $36            ; store it
C1/26B9:	BD E1 64   	LDA $64E1,X        ; sprite Y position
C1/26BC:	85 38      	STA $38            ; store it
C1/26BE:	BD E5 64   	LDA $64E5,X        ; sprite flipped flag
C1/26C1:	85 3A      	STA $3A            ; store it
C1/26C3:	BD E3 64   	LDA $64E3,X        ; animation frame number [?]
C1/26C6:	29 FF 00   	AND #$00FF
C1/26C9:	0A         	ASL A              ; x2
C1/26CA:	AA         	TAX                ; index it
C1/26CB:	A5 3A      	LDA $3A            ; sprite flipped flag
C1/26CD:	29 40 00   	AND #$0040         ; isolate ^
C1/26D0:	F0 06      	BEQ $26D8          ; branch if not flipped
C1/26D2:	BF 24 C4 C2	LDA $C2C424,X      ; offset for thread frame (flipped)
C1/26D6:	80 04      	BRA $26DC
C1/26D8:	BF E4 C3 C2	LDA $C2C3E4,X      ; offset for thread frame (normal)
C1/26DC:	AA         	TAX                ; index it
C1/26DD:	A5 71      	LDA $71            ; next available sprite buffer index
C1/26DF:	29 FF 00   	AND #$00FF         ; isolate ^
C1/26E2:	0A         	ASL A
C1/26E3:	0A         	ASL A              ; x4
C1/26E4:	A8         	TAY                ; index it
C1/26E5:	7B         	TDC                ; zero A/B
C1/26E6:	E2 20      	SEP #$20           ; 8-bit A
C1/26E8:	BD 00 00   	LDA $0000,X        ; read data at thread frame byte $00
C1/26EB:	C9 FF      	CMP #$FF           ; null/end
C1/26ED:	F0 7C      	BEQ $276B          ; rts if ^
C1/26EF:	10 0C      	BPL $26FD          ; branch if bit7 clear
                                         ; does this tell us which VRAM table
                                         ; to load from?

C1/26F1:	18         	CLC                ; clear carry
C1/26F2:	65 36      	ADC $36            ; add sprite X position
C1/26F4:	99 00 03   	STA $0300,Y        ; save to sprite buffer
C1/26F7:	A5 37      	LDA $37            ; sprite X position (hi)
C1/26F9:	69 01      	ADC #$01           ; add 1 (plus carry)
C1/26FB:	80 0A      	BRA $2707          ; branch

C1/26FD:	18         	CLC                ; clear carry
C1/26FE:	65 36      	ADC $36            ; add sprite X position
C1/2700:	99 00 03   	STA $0300,Y        ; save to sprite buffer
C1/2703:	A5 37      	LDA $37            ; sprite X position (hi)
C1/2705:	69 00      	ADC #$00           ; add 0 (plus carry)

C1/2707:	29 01      	AND #$01           ; odd/even hibyte
C1/2709:	F0 11      	BEQ $271C          ; branch if even
C1/270B:	86 3E      	STX $3E            ; save thread frame RAM address
C1/270D:	B9 7F A1   	LDA $A17F,Y        ; pointer to more sprite buffer data
C1/2710:	AA         	TAX                ; index it
C1/2711:	BD 00 05   	LDA $0500,X        ; sprite data high byte [?]
C1/2714:	19 7F A7   	ORA $A77F,Y        ; combine with x coord [?]
C1/2717:	9D 00 05   	STA $0500,X        ; update sprite data [?]
C1/271A:	A6 3E      	LDX $3E            ; get thread frame RAM address

C1/271C:	18         	CLC                ; clear carry
C1/271D:	BD 01 00   	LDA $0001,X        ; get tile relative Y coordinate
C1/2720:	10 0B      	BPL $272D          ; branch if bit 7 unset
C1/2722:	65 38      	ADC $38            ; add to sprite Y position
C1/2724:	85 3E      	STA $3E            ; save computed sprite Y position
C1/2726:	A5 39      	LDA $39            ; sprite Y position (hi)
C1/2728:	69 01      	ADC #$01           ; +1
C1/272A:	4C 35 27   	JMP $2735          ; branch

C1/272D:	65 38      	ADC $38
C1/272F:	85 3E      	STA $3E
C1/2731:	A5 39      	LDA $39
C1/2733:	69 00      	ADC #$00

C1/2735:	29 01      	AND #$01
C1/2737:	F0 09      	BEQ $2742          ; branch if not hiding tile
C1/2739:	A5 3E      	LDA $3E            ; get computed sprite Y position
C1/273B:	C9 E0      	CMP #$E0           ; bottom of screen [?]
C1/273D:	B0 0B      	BCS $274A          ; branch if below bottom of screen [?]
C1/273F:	4C 48 27   	JMP $2748          ; else, use minimum offscreen value

C1/2742:	A5 3E      	LDA $3E            ; computed sprite Y position
C1/2744:	C9 97      	CMP #$97           ; behind battle menus
C1/2746:	90 02      	BCC $274A          ; branch if in visible fight arena
C1/2748:	A9 E0      	LDA #$E0           ; else, place offscreen
C1/274A:	99 01 03   	STA $0301,Y        ; save to sprite buffer

C1/274D:	BD 02 00   	LDA $0002,X        ; tile graphic ID
C1/2750:	18         	CLC                ; clear carry
C1/2751:	65 3C      	ADC $3C            ; add to thread's sprite index
C1/2753:	99 02 03   	STA $0302,Y        ; save tile ID in OAM buffer
C1/2756:	BD 03 00   	LDA $0003,X        ; sprite flags [?]
C1/2759:	05 3B      	ORA $3B            ; combine with sprite flags [?]
C1/275B:	99 03 03   	STA $0303,Y        ; update 
C1/275E:	E8         	INX
C1/275F:	E8         	INX
C1/2760:	E8         	INX
C1/2761:	E8         	INX                ; X += 4
C1/2762:	C8         	INY
C1/2763:	C8         	INY
C1/2764:	C8         	INY
C1/2765:	C8         	INY                ; Y += 4
C1/2766:	E6 71      	INC $71            ; increment next sprite buffer index
C1/2768:	4C E8 26   	JMP $26E8          ; loop until all 4-byte chunks are copied

C1/276B:	60         	RTS

C1/276C:	AD 1E 20   	LDA $201E
C1/276F:	2D AB 61   	AND $61AB
C1/2772:	2D AB 60   	AND $60AB
C1/2775:	8D D1 88   	STA $88D1
C1/2778:	7B         	TDC
C1/2779:	AA         	TAX
C1/277A:	BD 1A 63   	LDA $631A,X
C1/277D:	29 7F      	AND #$7F
C1/277F:	F0 29      	BEQ $27AA
C1/2781:	BD 1E 63   	LDA $631E,X
C1/2784:	C9 04      	CMP #$04
C1/2786:	90 12      	BCC $279A
C1/2788:	38         	SEC
C1/2789:	E9 04      	SBC #$04
C1/278B:	DA         	PHX
C1/278C:	20 09 1A   	JSR $1A09
C1/278F:	FA         	PLX
C1/2790:	2D D1 88   	AND $88D1
C1/2793:	D0 15      	BNE $27AA
C1/2795:	9E 1A 63   	STZ $631A,X
C1/2798:	80 10      	BRA $27AA

C1/279A:	DA         	PHX
C1/279B:	20 09 1A   	JSR $1A09
C1/279E:	FA         	PLX
C1/279F:	2D 1D 20   	AND $201D
C1/27A2:	2D AC 61   	AND $61AC
C1/27A5:	D0 03      	BNE $27AA
C1/27A7:	9E 1A 63   	STZ $631A,X
C1/27AA:	E8         	INX
C1/27AB:	E0 04 00   	CPX #$0004
C1/27AE:	D0 CA      	BNE $277A
C1/27B0:	AD 67 7B   	LDA $7B67
C1/27B3:	0A         	ASL A
C1/27B4:	AA         	TAX
C1/27B5:	7C B8 27   	JMP ($27B8,X)  ; Jump table

C1/27B8:	BC27
C1/27BA:	BF27

C1/27BC:	4C 97 28   	JMP $2897

C1/27BF:	4C 69 28   	JMP $2869

C1/27C2:	AD D2 88   	LDA $88D2
C1/27C5:	48         	PHA
C1/27C6:	85 7B      	STA $7B
C1/27C8:	0A         	ASL A
C1/27C9:	AA         	TAX
C1/27CA:	C2 20      	REP #$20
C1/27CC:	BF 93 CE C2	LDA $C2CE93,X
C1/27D0:	AA         	TAX
C1/27D1:	7B         	TDC
C1/27D2:	E2 20      	SEP #$20           ; 8-bit A
C1/27D4:	DA         	PHX
C1/27D5:	20 42 26   	JSR $2642
C1/27D8:	AD D2 88   	LDA $88D2
C1/27DB:	20 2A 2B   	JSR $2B2A
C1/27DE:	A5 71      	LDA $71
C1/27E0:	8D 60 00   	STA $0060
C1/27E3:	AD D2 88   	LDA $88D2
C1/27E6:	20 09 1A   	JSR $1A09
C1/27E9:	2D D1 88   	AND $88D1
C1/27EC:	2D 1E 20   	AND $201E
C1/27EF:	2D AB 61   	AND $61AB
C1/27F2:	2D E6 E9   	AND $E9E6
C1/27F5:	2D 91 61   	AND $6191
C1/27F8:	F0 64      	BEQ $285E
C1/27FA:	20 35 39   	JSR $3935
C1/27FD:	AD D2 88   	LDA $88D2
C1/2800:	29 07      	AND #$07
C1/2802:	20 09 1A   	JSR $1A09
C1/2805:	2D 9D 61   	AND $619D
C1/2808:	F0 54      	BEQ $285E
C1/280A:	AD D2 88   	LDA $88D2
C1/280D:	29 07      	AND #$07
C1/280F:	0A         	ASL A
C1/2810:	AA         	TAX
C1/2811:	BD 30 81   	LDA $8130,X
C1/2814:	C2 20      	REP #$20
C1/2816:	0A         	ASL A
C1/2817:	0A         	ASL A
C1/2818:	0A         	ASL A
C1/2819:	85 36      	STA $36
C1/281B:	BD CF 80   	LDA $80CF,X
C1/281E:	48         	PHA
C1/281F:	18         	CLC
C1/2820:	65 36      	ADC $36
C1/2822:	9D CF 80   	STA $80CF,X
C1/2825:	7B         	TDC
C1/2826:	E2 20      	SEP #$20           ; 8-bit A
C1/2828:	BD DC 80   	LDA $80DC,X
C1/282B:	48         	PHA
C1/282C:	BD F3 80   	LDA $80F3,X
C1/282F:	5D 7E 61   	EOR $617E,X
C1/2832:	48         	PHA
C1/2833:	DA         	PHX
C1/2834:	BD F3 80   	LDA $80F3,X
C1/2837:	5D 7E 61   	EOR $617E,X
C1/283A:	09 02      	ORA #$02
C1/283C:	9D F3 80   	STA $80F3,X
C1/283F:	BD DC 80   	LDA $80DC,X
C1/2842:	29 CF      	AND #$CF
C1/2844:	09 20      	ORA #$20
C1/2846:	9D DC 80   	STA $80DC,X
C1/2849:	20 35 39   	JSR $3935
C1/284C:	FA         	PLX
C1/284D:	68         	PLA
C1/284E:	9D F3 80   	STA $80F3,X
C1/2851:	68         	PLA
C1/2852:	9D DC 80   	STA $80DC,X
C1/2855:	C2 20      	REP #$20
C1/2857:	68         	PLA
C1/2858:	9D CF 80   	STA $80CF,X
C1/285B:	7B         	TDC
C1/285C:	E2 20      	SEP #$20           ; 8-bit A
C1/285E:	AD 60 00   	LDA $0060
C1/2861:	85 71      	STA $71
C1/2863:	FA         	PLX
C1/2864:	20 E1 25   	JSR $25E1
C1/2867:	68         	PLA
C1/2868:	60         	RTS

C1/2869:	20 7A 28   	JSR $287A
C1/286C:	49 FF      	EOR #$FF
C1/286E:	2D 1E 20   	AND $201E
C1/2871:	2D AB 61   	AND $61AB
C1/2874:	8D D1 88   	STA $88D1
C1/2877:	4C 97 28   	JMP $2897

C1/287A:	7B         	TDC
C1/287B:	AA         	TAX
C1/287C:	9C D1 88   	STZ $88D1
C1/287F:	BD F4 80   	LDA $80F4,X
C1/2882:	4A         	LSR A
C1/2883:	0D D1 88   	ORA $88D1
C1/2886:	6A         	ROR A
C1/2887:	8D D1 88   	STA $88D1
C1/288A:	E8         	INX
C1/288B:	E8         	INX
C1/288C:	E0 0C 00   	CPX #$000C
C1/288F:	D0 EE      	BNE $287F
C1/2891:	4A         	LSR A
C1/2892:	4A         	LSR A
C1/2893:	8D D1 88   	STA $88D1
C1/2896:	60         	RTS

C1/2897:	AD 0C 7B   	LDA $7B0C
C1/289A:	F0 2E      	BEQ $28CA
C1/289C:	9C 0C 7B   	STZ $7B0C
C1/289F:	7B         	TDC
C1/28A0:	AA         	TAX
C1/28A1:	C2 20      	REP #$20
C1/28A3:	E2 10      	SEP #$10
C1/28A5:	BD 1F 7A   	LDA $7A1F,X
C1/28A8:	9D 47 7A   	STA $7A47,X
C1/28AB:	BD 21 7A   	LDA $7A21,X
C1/28AE:	9D 49 7A   	STA $7A49,X
C1/28B1:	BD 33 7A   	LDA $7A33,X
C1/28B4:	9D 5B 7A   	STA $7A5B,X
C1/28B7:	BD 35 7A   	LDA $7A35,X
C1/28BA:	9D 5D 7A   	STA $7A5D,X
C1/28BD:	E8         	INX
C1/28BE:	E8         	INX
C1/28BF:	E8         	INX
C1/28C0:	E8         	INX
C1/28C1:	E0 14      	CPX #$14
C1/28C3:	D0 E0      	BNE $28A5
C1/28C5:	7B         	TDC
C1/28C6:	E2 20      	SEP #$20           ; 8-bit A
C1/28C8:	C2 10      	REP #$10

C1/28CA:	20 26 3A   	JSR $3A26
C1/28CD:	AD B0 62   	LDA $62B0
C1/28D0:	D0 0B      	BNE $28DD
C1/28D2:	A9 01      	LDA #$01
C1/28D4:	8D 0D 7B   	STA $7B0D
C1/28D7:	A2 20 05   	LDX #$0520
C1/28DA:	20 69 26   	JSR $2669
C1/28DD:	A9 01      	LDA #$01
C1/28DF:	8D 0D 7B   	STA $7B0D
C1/28E2:	A2 30 05   	LDX #$0530
C1/28E5:	20 69 26   	JSR $2669
C1/28E8:	A9 01      	LDA #$01
C1/28EA:	8D 0D 7B   	STA $7B0D
C1/28ED:	A2 40 05   	LDX #$0540
C1/28F0:	20 69 26   	JSR $2669
C1/28F3:	7B         	TDC
C1/28F4:	AA         	TAX
C1/28F5:	DA         	PHX
C1/28F6:	AD 0E 7B   	LDA $7B0E
C1/28F9:	8D 0D 7B   	STA $7B0D
C1/28FC:	BD 49 7A   	LDA $7A49,X
C1/28FF:	C9 04      	CMP #$04
C1/2901:	90 25      	BCC $2928
C1/2903:	C9 0A      	CMP #$0A
C1/2905:	B0 54      	BCS $295B
C1/2907:	38         	SEC
C1/2908:	E9 04      	SBC #$04
C1/290A:	AA         	TAX
C1/290B:	8D D2 88   	STA $88D2
C1/290E:	BF 01 1A C1	LDA $C11A01,X    ; Data
C1/2912:	2D AF 62   	AND $62AF
C1/2915:	D0 0C      	BNE $2923
C1/2917:	BF 01 1A C1	LDA $C11A01,X    ; Data
C1/291B:	2D 1E 20   	AND $201E
C1/291E:	2D AB 61   	AND $61AB
C1/2921:	F0 38      	BEQ $295B
C1/2923:	20 C2 27   	JSR $27C2
C1/2926:	80 33      	BRA $295B

C1/2928:	09 80      	ORA #$80
C1/292A:	85 7B      	STA $7B
C1/292C:	29 03      	AND #$03
C1/292E:	0A         	ASL A
C1/292F:	AA         	TAX
C1/2930:	C2 20      	REP #$20
C1/2932:	BF 8B CE C2	LDA $C2CE8B,X   ; increment of 128 bytes
C1/2936:	AA         	TAX
C1/2937:	7B         	TDC
C1/2938:	E2 20      	SEP #$20           ; 8-bit A
C1/293A:	AD 0F 7B   	LDA $7B0F
C1/293D:	8D 0D 7B   	STA $7B0D
C1/2940:	DA         	PHX
C1/2941:	A5 7B      	LDA $7B
C1/2943:	48         	PHA
C1/2944:	20 42 26   	JSR $2642
C1/2947:	68         	PLA
C1/2948:	20 7F 29   	JSR $297F
C1/294B:	29 7F      	AND #$7F
C1/294D:	CD 68 7B   	CMP $7B68
C1/2950:	D0 03      	BNE $2955
C1/2952:	20 92 2D   	JSR $2D92

C1/2955:	FA         	PLX
C1/2956:	48         	PHA
C1/2957:	20 E1 25   	JSR $25E1
C1/295A:	68         	PLA
C1/295B:	FA         	PLX
C1/295C:	E8         	INX
C1/295D:	E8         	INX
C1/295E:	E8         	INX
C1/295F:	E8         	INX
C1/2960:	E0 28 00   	CPX #$0028
C1/2963:	D0 90      	BNE $28F5
C1/2965:	AD B0 62   	LDA $62B0
C1/2968:	F0 0B      	BEQ $2975
C1/296A:	A9 01      	LDA #$01
C1/296C:	8D 0D 7B   	STA $7B0D
C1/296F:	A2 20 05   	LDX #$0520
C1/2972:	20 69 26   	JSR $2669
C1/2975:	AD 68 7B   	LDA $7B68
C1/2978:	1A         	INC A
C1/2979:	29 03      	AND #$03
C1/297B:	8D 68 7B   	STA $7B68
C1/297E:	60         	RTS

C1/297F:	48         	PHA
C1/2980:	29 03      	AND #$03
C1/2982:	AA         	TAX
C1/2983:	DA         	PHX
C1/2984:	BF 01 1A C1	LDA $C11A01,X    ; Data
C1/2988:	85 2C      	STA $2C
C1/298A:	FA         	PLX
C1/298B:	AD 1D 20   	LDA $201D
C1/298E:	2D AC 61   	AND $61AC
C1/2991:	25 2C      	AND $2C
C1/2993:	D0 03      	BNE $2998
C1/2995:	4C 25 2A   	JMP $2A25

C1/2998:	BF 5B CF C2	LDA $C2CF5B,X
C1/299C:	AA         	TAX
C1/299D:	BD AE 2E   	LDA $2EAE,X
C1/29A0:	C9 FF      	CMP #$FF
C1/29A2:	F0 F1      	BEQ $2995
C1/29A4:	BD C0 2E   	LDA $2EC0,X
C1/29A7:	29 20      	AND #$20
C1/29A9:	D0 7A      	BNE $2A25
C1/29AB:	68         	PLA
C1/29AC:	20 2A 2B   	JSR $2B2A
C1/29AF:	85 36      	STA $36
C1/29B1:	AD BD 62   	LDA $62BD
C1/29B4:	D0 6E      	BNE $2A24
C1/29B6:	A5 36      	LDA $36
C1/29B8:	48         	PHA
C1/29B9:	AD BA 64   	LDA $64BA
C1/29BC:	D0 5A      	BNE $2A18
C1/29BE:	68         	PLA
C1/29BF:	20 A3 33   	JSR $33A3
C1/29C2:	20 DB 34   	JSR $34DB
C1/29C5:	48         	PHA
C1/29C6:	29 03      	AND #$03
C1/29C8:	85 36      	STA $36
C1/29CA:	20 09 1A   	JSR $1A09
C1/29CD:	2D 9C 61   	AND $619C
C1/29D0:	F0 3C      	BEQ $2A0E
C1/29D2:	A5 36      	LDA $36
C1/29D4:	29 03      	AND #$03
C1/29D6:	AA         	TAX
C1/29D7:	BF 5B CF C2	LDA $C2CF5B,X
C1/29DB:	AA         	TAX
C1/29DC:	C2 20      	REP #$20
C1/29DE:	BD B9 61   	LDA $61B9,X
C1/29E1:	48         	PHA
C1/29E2:	18         	CLC
C1/29E3:	69 18 00   	ADC #$0018
C1/29E6:	9D B9 61   	STA $61B9,X
C1/29E9:	BD BD 61   	LDA $61BD,X
C1/29EC:	48         	PHA
C1/29ED:	DA         	PHX
C1/29EE:	7B         	TDC
C1/29EF:	E2 20      	SEP #$20           ; 8-bit A
C1/29F1:	BD BD 61   	LDA $61BD,X
C1/29F4:	29 CF      	AND #$CF
C1/29F6:	09 A0      	ORA #$A0
C1/29F8:	9D BD 61   	STA $61BD,X
C1/29FB:	A5 36      	LDA $36
C1/29FD:	20 DB 34   	JSR $34DB
C1/2A00:	C2 20      	REP #$20
C1/2A02:	FA         	PLX
C1/2A03:	68         	PLA
C1/2A04:	9D BD 61   	STA $61BD,X
C1/2A07:	68         	PLA
C1/2A08:	9D B9 61   	STA $61B9,X
C1/2A0B:	7B         	TDC
C1/2A0C:	E2 20      	SEP #$20           ; 8-bit A
C1/2A0E:	68         	PLA
C1/2A0F:	20 27 2A   	JSR $2A27
C1/2A12:	20 4A 2A   	JSR $2A4A
C1/2A15:	4C 75 31   	JMP $3175

C1/2A18:	68         	PLA
C1/2A19:	48         	PHA
C1/2A1A:	20 DB 34   	JSR $34DB
C1/2A1D:	20 27 2A   	JSR $2A27
C1/2A20:	20 9F 32   	JSR $329F
C1/2A23:	68         	PLA
C1/2A24:	60         	RTS

C1/2A25:	68         	PLA
C1/2A26:	60         	RTS

C1/2A27:	48         	PHA
C1/2A28:	29 03      	AND #$03
C1/2A2A:	0A         	ASL A
C1/2A2B:	A8         	TAY
C1/2A2C:	AA         	TAX
C1/2A2D:	AD DA E9   	LDA $E9DA
C1/2A30:	4A         	LSR A
C1/2A31:	29 08      	AND #$08
C1/2A33:	85 36      	STA $36
C1/2A35:	8A         	TXA
C1/2A36:	18         	CLC
C1/2A37:	65 36      	ADC $36
C1/2A39:	AA         	TAX
C1/2A3A:	BF 43 BF C2	LDA $C2BF43,X
C1/2A3E:	99 D2 E9   	STA $E9D2,Y
C1/2A41:	BF 44 BF C2	LDA $C2BF44,X
C1/2A45:	99 D3 E9   	STA $E9D3,Y
C1/2A48:	68         	PLA
C1/2A49:	60         	RTS

C1/2A4A:	48         	PHA
C1/2A4B:	29 03      	AND #$03
C1/2A4D:	CD D3 62   	CMP $62D3
C1/2A50:	D0 05      	BNE $2A57
C1/2A52:	AD D4 62   	LDA $62D4
C1/2A55:	D0 02      	BNE $2A59
C1/2A57:	68         	PLA
C1/2A58:	60         	RTS

C1/2A59:	A5 0E      	LDA $0E
C1/2A5B:	2D D5 62   	AND $62D5
C1/2A5E:	D0 47      	BNE $2AA7
C1/2A60:	A2 38 00   	LDX #$0038
C1/2A63:	C2 20      	REP #$20
C1/2A65:	BD CE 62   	LDA $62CE,X
C1/2A68:	9D D6 62   	STA $62D6,X
C1/2A6B:	BD D0 62   	LDA $62D0,X
C1/2A6E:	9D D8 62   	STA $62D8,X
C1/2A71:	BD D2 62   	LDA $62D2,X
C1/2A74:	9D DA 62   	STA $62DA,X
C1/2A77:	BD D4 62   	LDA $62D4,X
C1/2A7A:	9D DC 62   	STA $62DC,X
C1/2A7D:	8A         	TXA
C1/2A7E:	38         	SEC
C1/2A7F:	E9 08 00   	SBC #$0008
C1/2A82:	AA         	TAX
C1/2A83:	D0 E0      	BNE $2A65
C1/2A85:	A5 71      	LDA $71
C1/2A87:	29 FF 00   	AND #$00FF
C1/2A8A:	3A         	DEC A
C1/2A8B:	3A         	DEC A
C1/2A8C:	0A         	ASL A
C1/2A8D:	0A         	ASL A
C1/2A8E:	AA         	TAX
C1/2A8F:	BD 00 03   	LDA $0300,X
C1/2A92:	8D D6 62   	STA $62D6
C1/2A95:	BD 02 03   	LDA $0302,X
C1/2A98:	8D D8 62   	STA $62D8
C1/2A9B:	BD 04 03   	LDA $0304,X
C1/2A9E:	8D DA 62   	STA $62DA
C1/2AA1:	BD 06 03   	LDA $0306,X
C1/2AA4:	8D DC 62   	STA $62DC
C1/2AA7:	C2 20      	REP #$20
C1/2AA9:	A5 71      	LDA $71
C1/2AAB:	29 FF 00   	AND #$00FF
C1/2AAE:	0A         	ASL A
C1/2AAF:	0A         	ASL A
C1/2AB0:	AA         	TAX
C1/2AB1:	A5 0E      	LDA $0E
C1/2AB3:	29 01 00   	AND #$0001
C1/2AB6:	F0 05      	BEQ $2ABD
C1/2AB8:	A0 08 00   	LDY #$0008
C1/2ABB:	80 01      	BRA $2ABE
C1/2ABD:	A8         	TAY
C1/2ABE:	B9 D6 62   	LDA $62D6,Y
C1/2AC1:	9D 00 03   	STA $0300,X
C1/2AC4:	B9 D8 62   	LDA $62D8,Y
C1/2AC7:	9D 02 03   	STA $0302,X
C1/2ACA:	B9 DA 62   	LDA $62DA,Y
C1/2ACD:	9D 04 03   	STA $0304,X
C1/2AD0:	B9 DC 62   	LDA $62DC,Y
C1/2AD3:	9D 06 03   	STA $0306,X
C1/2AD6:	B9 E6 62   	LDA $62E6,Y
C1/2AD9:	9D 08 03   	STA $0308,X
C1/2ADC:	B9 E8 62   	LDA $62E8,Y
C1/2ADF:	9D 0A 03   	STA $030A,X
C1/2AE2:	B9 EA 62   	LDA $62EA,Y
C1/2AE5:	9D 0C 03   	STA $030C,X
C1/2AE8:	B9 EC 62   	LDA $62EC,Y
C1/2AEB:	9D 0E 03   	STA $030E,X
C1/2AEE:	B9 F6 62   	LDA $62F6,Y
C1/2AF1:	9D 10 03   	STA $0310,X
C1/2AF4:	B9 F8 62   	LDA $62F8,Y
C1/2AF7:	9D 12 03   	STA $0312,X
C1/2AFA:	B9 FA 62   	LDA $62FA,Y
C1/2AFD:	9D 14 03   	STA $0314,X
C1/2B00:	B9 FC 62   	LDA $62FC,Y
C1/2B03:	9D 16 03   	STA $0316,X
C1/2B06:	B9 06 63   	LDA $6306,Y
C1/2B09:	9D 18 03   	STA $0318,X
C1/2B0C:	B9 08 63   	LDA $6308,Y
C1/2B0F:	9D 1A 03   	STA $031A,X
C1/2B12:	B9 0A 63   	LDA $630A,Y
C1/2B15:	9D 1C 03   	STA $031C,X
C1/2B18:	B9 0C 63   	LDA $630C,Y
C1/2B1B:	9D 1E 03   	STA $031E,X
C1/2B1E:	7B         	TDC
C1/2B1F:	E2 20      	SEP #$20           ; 8-bit A
C1/2B21:	A5 71      	LDA $71
C1/2B23:	18         	CLC
C1/2B24:	69 08      	ADC #$08
C1/2B26:	85 71      	STA $71
C1/2B28:	68         	PLA
C1/2B29:	60         	RTS

C1/2B2A:	20 67 2C   	JSR $2C67
C1/2B2D:	48         	PHA
C1/2B2E:	85 3A      	STA $3A
C1/2B30:	AD 3E 7B   	LDA $7B3E
C1/2B33:	F0 1F      	BEQ $2B54
C1/2B35:	20 FC 2B   	JSR $2BFC
C1/2B38:	B0 11      	BCS $2B4B
C1/2B3A:	A5 3A      	LDA $3A
C1/2B3C:	AA         	TAX
C1/2B3D:	BD 3F 7B   	LDA $7B3F,X
C1/2B40:	29 7F      	AND #$7F
C1/2B42:	F0 07      	BEQ $2B4B
C1/2B44:	BD 49 7B   	LDA $7B49,X
C1/2B47:	C9 40      	CMP #$40
C1/2B49:	D0 0C      	BNE $2B57
C1/2B4B:	A5 3A      	LDA $3A
C1/2B4D:	AA         	TAX
C1/2B4E:	9E 3F 7B   	STZ $7B3F,X
C1/2B51:	9E 49 7B   	STZ $7B49,X

C1/2B54:	4C FA 2B   	JMP $2BFA

C1/2B57:	DA         	PHX
C1/2B58:	AA         	TAX
C1/2B59:	BF 93 CF C2	LDA $C2CF93,X
C1/2B5D:	85 3C      	STA $3C
C1/2B5F:	FA         	PLX
C1/2B60:	FE 49 7B   	INC $7B49,X
C1/2B63:	64 41      	STZ $41
C1/2B65:	BD 53 7B   	LDA $7B53,X
C1/2B68:	85 40      	STA $40
C1/2B6A:	10 02      	BPL $2B6E
C1/2B6C:	C6 41      	DEC $41
C1/2B6E:	C2 20      	REP #$20
C1/2B70:	A5 36      	LDA $36
C1/2B72:	38         	SEC
C1/2B73:	E5 40      	SBC $40
C1/2B75:	85 36      	STA $36
C1/2B77:	7B         	TDC
C1/2B78:	E2 20      	SEP #$20           ; 8-bit A
C1/2B7A:	A5 38      	LDA $38
C1/2B7C:	38         	SEC
C1/2B7D:	E5 3C      	SBC $3C
C1/2B7F:	85 38      	STA $38
C1/2B81:	A5 71      	LDA $71
C1/2B83:	C2 20      	REP #$20
C1/2B85:	0A         	ASL A
C1/2B86:	0A         	ASL A
C1/2B87:	A8         	TAY
C1/2B88:	7B         	TDC
C1/2B89:	E2 20      	SEP #$20           ; 8-bit A
C1/2B8B:	A5 3A      	LDA $3A
C1/2B8D:	AA         	TAX
C1/2B8E:	BD 3F 7B   	LDA $7B3F,X
C1/2B91:	29 80      	AND #$80
C1/2B93:	D0 04      	BNE $2B99
C1/2B95:	A9 38      	LDA #$38
C1/2B97:	80 02      	BRA $2B9B
C1/2B99:	A9 3A      	LDA #$3A
C1/2B9B:	99 03 03   	STA $0303,Y
C1/2B9E:	99 07 03   	STA $0307,Y
C1/2BA1:	A5 36      	LDA $36
C1/2BA3:	99 00 03   	STA $0300,Y
C1/2BA6:	A5 37      	LDA $37
C1/2BA8:	29 01      	AND #$01
C1/2BAA:	F0 0F      	BEQ $2BBB
C1/2BAC:	DA         	PHX
C1/2BAD:	B9 7F A1   	LDA $A17F,Y
C1/2BB0:	AA         	TAX
C1/2BB1:	BD 00 05   	LDA $0500,X
C1/2BB4:	19 7F A7   	ORA $A77F,Y
C1/2BB7:	9D 00 05   	STA $0500,X
C1/2BBA:	FA         	PLX
C1/2BBB:	C2 20      	REP #$20
C1/2BBD:	A5 36      	LDA $36
C1/2BBF:	18         	CLC
C1/2BC0:	69 10 00   	ADC #$0010
C1/2BC3:	85 36      	STA $36
C1/2BC5:	7B         	TDC
C1/2BC6:	E2 20      	SEP #$20           ; 8-bit A
C1/2BC8:	A5 36      	LDA $36
C1/2BCA:	99 04 03   	STA $0304,Y
C1/2BCD:	A5 37      	LDA $37
C1/2BCF:	29 01      	AND #$01
C1/2BD1:	F0 0F      	BEQ $2BE2
C1/2BD3:	DA         	PHX
C1/2BD4:	B9 83 A1   	LDA $A183,Y
C1/2BD7:	AA         	TAX
C1/2BD8:	BD 00 05   	LDA $0500,X
C1/2BDB:	19 83 A7   	ORA $A783,Y
C1/2BDE:	9D 00 05   	STA $0500,X
C1/2BE1:	FA         	PLX
C1/2BE2:	A5 38      	LDA $38
C1/2BE4:	99 01 03   	STA $0301,Y
C1/2BE7:	99 05 03   	STA $0305,Y
C1/2BEA:	BF 98 E3 C2	LDA $C2E398,X
C1/2BEE:	99 02 03   	STA $0302,Y
C1/2BF1:	1A         	INC A
C1/2BF2:	1A         	INC A
C1/2BF3:	99 06 03   	STA $0306,Y
C1/2BF6:	E6 71      	INC $71
C1/2BF8:	E6 71      	INC $71
C1/2BFA:	68         	PLA
C1/2BFB:	60         	RTS

C1/2BFC:	A5 3A      	LDA $3A
C1/2BFE:	10 2A      	BPL $2C2A
C1/2C00:	29 03      	AND #$03
C1/2C02:	85 3A      	STA $3A
C1/2C04:	20 09 1A   	JSR $1A09
C1/2C07:	2D 1D 20   	AND $201D
C1/2C0A:	2D AC 61   	AND $61AC
C1/2C0D:	D0 02      	BNE $2C11
C1/2C0F:	38         	SEC
C1/2C10:	60         	RTS
C1/2C11:	BD 10 7B   	LDA $7B10,X
C1/2C14:	85 2C      	STA $2C
C1/2C16:	8A         	TXA
C1/2C17:	0A         	ASL A
C1/2C18:	AA         	TAX
C1/2C19:	BD 43 80   	LDA $8043,X
C1/2C1C:	85 38      	STA $38
C1/2C1E:	BD 34 80   	LDA $8034,X
C1/2C21:	85 37      	STA $37
C1/2C23:	BD 33 80   	LDA $8033,X
C1/2C26:	85 36      	STA $36
C1/2C28:	80 32      	BRA $2C5C
C1/2C2A:	A5 3A      	LDA $3A
C1/2C2C:	20 09 1A   	JSR $1A09
C1/2C2F:	2D 1E 20   	AND $201E
C1/2C32:	2D AB 61   	AND $61AB
C1/2C35:	F0 27      	BEQ $2C5E
C1/2C37:	8A         	TXA
C1/2C38:	0A         	ASL A
C1/2C39:	AA         	TAX
C1/2C3A:	BD 27 80   	LDA $8027,X
C1/2C3D:	85 38      	STA $38
C1/2C3F:	BD 0F 80   	LDA $800F,X
C1/2C42:	85 36      	STA $36
C1/2C44:	BD 10 80   	LDA $8010,X
C1/2C47:	85 37      	STA $37
C1/2C49:	BD F3 80   	LDA $80F3,X
C1/2C4C:	5D 7E 61   	EOR $617E,X
C1/2C4F:	29 01      	AND #$01
C1/2C51:	49 01      	EOR #$01
C1/2C53:	85 2C      	STA $2C
C1/2C55:	A5 3A      	LDA $3A
C1/2C57:	18         	CLC
C1/2C58:	69 04      	ADC #$04
C1/2C5A:	85 3A      	STA $3A

C1/2C5C:	18         	CLC
C1/2C5D:	60         	RTS

C1/2C5E:	A5 3A      	LDA $3A
C1/2C60:	18         	CLC
C1/2C61:	69 04      	ADC #$04
C1/2C63:	85 3A      	STA $3A
C1/2C65:	38         	SEC
C1/2C66:	60         	RTS

C1/2C67:	8D 41 61   	STA $6141
C1/2C6A:	85 3A      	STA $3A
C1/2C6C:	20 FC 2B   	JSR $2BFC
C1/2C6F:	90 20      	BCC $2C91
C1/2C71:	7B         	TDC
C1/2C72:	AA         	TAX
C1/2C73:	BD 1A 63   	LDA $631A,X
C1/2C76:	29 7F      	AND #$7F
C1/2C78:	F0 0D      	BEQ $2C87
C1/2C7A:	BD 1E 63   	LDA $631E,X
C1/2C7D:	C5 3A      	CMP $3A
C1/2C7F:	D0 06      	BNE $2C87
C1/2C81:	9E 1A 63   	STZ $631A,X
C1/2C84:	9E 22 63   	STZ $6322,X
C1/2C87:	E8         	INX
C1/2C88:	E0 04 00   	CPX #$0004
C1/2C8B:	D0 E6      	BNE $2C73
C1/2C8D:	AD 41 61   	LDA $6141
C1/2C90:	60         	RTS

C1/2C91:	7B         	TDC
C1/2C92:	AA         	TAX
C1/2C93:	BD 1A 63   	LDA $631A,X
C1/2C96:	29 7F      	AND #$7F
C1/2C98:	F0 1E      	BEQ $2CB8
C1/2C9A:	BD 1E 63   	LDA $631E,X
C1/2C9D:	C5 3A      	CMP $3A
C1/2C9F:	D0 17      	BNE $2CB8
C1/2CA1:	A5 3A      	LDA $3A
C1/2CA3:	48         	PHA
C1/2CA4:	DA         	PHX
C1/2CA5:	86 3C      	STX $3C
C1/2CA7:	AD 41 61   	LDA $6141
C1/2CAA:	85 3A      	STA $3A
C1/2CAC:	20 FC 2B   	JSR $2BFC
C1/2CAF:	A6 3C      	LDX $3C
C1/2CB1:	20 C2 2C   	JSR $2CC2
C1/2CB4:	FA         	PLX
C1/2CB5:	68         	PLA
C1/2CB6:	85 3A      	STA $3A
C1/2CB8:	E8         	INX
C1/2CB9:	E0 04 00   	CPX #$0004
C1/2CBC:	D0 D5      	BNE $2C93
C1/2CBE:	AD 41 61   	LDA $6141
C1/2CC1:	60         	RTS

C1/2CC2:	48         	PHA
C1/2CC3:	BD 22 63   	LDA $6322,X
C1/2CC6:	C9 40      	CMP #$40
C1/2CC8:	D0 08      	BNE $2CD2
C1/2CCA:	9E 1A 63   	STZ $631A,X
C1/2CCD:	9E 22 63   	STZ $6322,X
C1/2CD0:	68         	PLA
C1/2CD1:	60         	RTS

C1/2CD2:	DA         	PHX
C1/2CD3:	AA         	TAX
C1/2CD4:	BF 93 CF C2	LDA $C2CF93,X
C1/2CD8:	85 3C      	STA $3C
C1/2CDA:	FA         	PLX
C1/2CDB:	FE 22 63   	INC $6322,X
C1/2CDE:	64 41      	STZ $41
C1/2CE0:	BD 26 63   	LDA $6326,X
C1/2CE3:	85 40      	STA $40
C1/2CE5:	10 02      	BPL $2CE9
C1/2CE7:	C6 41      	DEC $41
C1/2CE9:	C2 20      	REP #$20
C1/2CEB:	A5 36      	LDA $36
C1/2CED:	38         	SEC
C1/2CEE:	E5 40      	SBC $40
C1/2CF0:	85 36      	STA $36
C1/2CF2:	7B         	TDC
C1/2CF3:	E2 20      	SEP #$20           ; 8-bit A
C1/2CF5:	A5 38      	LDA $38
C1/2CF7:	38         	SEC
C1/2CF8:	E5 3C      	SBC $3C
C1/2CFA:	85 38      	STA $38
C1/2CFC:	A5 3A      	LDA $3A
C1/2CFE:	C9 04      	CMP #$04
C1/2D00:	90 0C      	BCC $2D0E
C1/2D02:	38         	SEC
C1/2D03:	E9 04      	SBC #$04
C1/2D05:	0A         	ASL A
C1/2D06:	A8         	TAY
C1/2D07:	B9 E8 80   	LDA $80E8,Y
C1/2D0A:	85 3A      	STA $3A
C1/2D0C:	80 04      	BRA $2D12
C1/2D0E:	A9 FF      	LDA #$FF
C1/2D10:	85 3A      	STA $3A
C1/2D12:	A5 71      	LDA $71
C1/2D14:	C2 20      	REP #$20
C1/2D16:	0A         	ASL A
C1/2D17:	0A         	ASL A
C1/2D18:	A8         	TAY
C1/2D19:	7B         	TDC
C1/2D1A:	E2 20      	SEP #$20           ; 8-bit A
C1/2D1C:	BD 1A 63   	LDA $631A,X
C1/2D1F:	29 80      	AND #$80
C1/2D21:	D0 04      	BNE $2D27
C1/2D23:	A9 38      	LDA #$38
C1/2D25:	80 02      	BRA $2D29
C1/2D27:	A9 3A      	LDA #$3A

C1/2D29:	25 3A      	AND $3A
C1/2D2B:	99 03 03   	STA $0303,Y
C1/2D2E:	99 07 03   	STA $0307,Y
C1/2D31:	A5 36      	LDA $36
C1/2D33:	99 00 03   	STA $0300,Y
C1/2D36:	A5 37      	LDA $37
C1/2D38:	29 01      	AND #$01
C1/2D3A:	F0 0F      	BEQ $2D4B
C1/2D3C:	DA         	PHX
C1/2D3D:	B9 7F A1   	LDA $A17F,Y
C1/2D40:	AA         	TAX
C1/2D41:	BD 00 05   	LDA $0500,X
C1/2D44:	19 7F A7   	ORA $A77F,Y
C1/2D47:	9D 00 05   	STA $0500,X
C1/2D4A:	FA         	PLX
C1/2D4B:	C2 20      	REP #$20
C1/2D4D:	A5 36      	LDA $36
C1/2D4F:	18         	CLC
C1/2D50:	69 10 00   	ADC #$0010
C1/2D53:	85 36      	STA $36
C1/2D55:	7B         	TDC
C1/2D56:	E2 20      	SEP #$20           ; 8-bit A
C1/2D58:	A5 36      	LDA $36
C1/2D5A:	99 04 03   	STA $0304,Y
C1/2D5D:	A5 37      	LDA $37
C1/2D5F:	29 01      	AND #$01
C1/2D61:	F0 0F      	BEQ $2D72
C1/2D63:	DA         	PHX
C1/2D64:	B9 83 A1   	LDA $A183,Y
C1/2D67:	AA         	TAX
C1/2D68:	BD 00 05   	LDA $0500,X
C1/2D6B:	19 83 A7   	ORA $A783,Y
C1/2D6E:	9D 00 05   	STA $0500,X
C1/2D71:	FA         	PLX
C1/2D72:	A5 38      	LDA $38
C1/2D74:	C9 97      	CMP #$97
C1/2D76:	90 02      	BCC $2D7A
C1/2D78:	A9 E0      	LDA #$E0
C1/2D7A:	99 01 03   	STA $0301,Y
C1/2D7D:	99 05 03   	STA $0305,Y
C1/2D80:	BF 94 E3 C2	LDA $C2E394,X
C1/2D84:	99 02 03   	STA $0302,Y
C1/2D87:	1A         	INC A
C1/2D88:	1A         	INC A
C1/2D89:	99 06 03   	STA $0306,Y
C1/2D8C:	E6 71      	INC $71
C1/2D8E:	E6 71      	INC $71
C1/2D90:	68         	PLA
C1/2D91:	60         	RTS

C1/2D92:	48         	PHA
C1/2D93:	AD 68 7B   	LDA $7B68
C1/2D96:	AA         	TAX
C1/2D97:	DA         	PHX
C1/2D98:	BF 01 1A C1	LDA $C11A01,X    ; Data
C1/2D9C:	85 2C      	STA $2C
C1/2D9E:	FA         	PLX
C1/2D9F:	AD 1D 20   	LDA $201D
C1/2DA2:	2D AC 61   	AND $61AC
C1/2DA5:	25 2C      	AND $2C
C1/2DA7:	F0 28      	BEQ $2DD1
C1/2DA9:	BF 5B CF C2	LDA $C2CF5B,X
C1/2DAD:	AA         	TAX
C1/2DAE:	BD AE 2E   	LDA $2EAE,X
C1/2DB1:	C9 FF      	CMP #$FF
C1/2DB3:	F0 1C      	BEQ $2DD1
C1/2DB5:	BD C0 2E   	LDA $2EC0,X
C1/2DB8:	29 20      	AND #$20
C1/2DBA:	D0 15      	BNE $2DD1
C1/2DBC:	BD C2 2E   	LDA $2EC2,X
C1/2DBF:	29 04      	AND #$04
C1/2DC1:	F0 0E      	BEQ $2DD1
C1/2DC3:	A9 01      	LDA #$01
C1/2DC5:	8D 69 7B   	STA $7B69
C1/2DC8:	AD 68 7B   	LDA $7B68
C1/2DCB:	20 DB 34   	JSR $34DB
C1/2DCE:	9C 69 7B   	STZ $7B69
C1/2DD1:	68         	PLA
C1/2DD2:	60         	RTS

C1/2DD3:	AD 98 00   	LDA $0098
C1/2DD6:	1A         	INC A
C1/2DD7:	29 03      	AND #$03
C1/2DD9:	0A         	ASL A
C1/2DDA:	0A         	ASL A
C1/2DDB:	0A         	ASL A
C1/2DDC:	0A         	ASL A
C1/2DDD:	0A         	ASL A
C1/2DDE:	A8         	TAY
C1/2DDF:	5A         	PHY
C1/2DE0:	A2 18 00   	LDX #$0018
C1/2DE3:	B9 AD 81   	LDA $81AD,Y
C1/2DE6:	99 80 7F   	STA $7F80,Y
C1/2DE9:	C8         	INY
C1/2DEA:	CA         	DEX
C1/2DEB:	D0 F6      	BNE $2DE3
C1/2DED:	7A         	PLY
C1/2DEE:	B9 CD 61   	LDA $61CD,Y
C1/2DF1:	F0 12      	BEQ $2E05
C1/2DF3:	3A         	DEC A
C1/2DF4:	3A         	DEC A
C1/2DF5:	99 CD 61   	STA $61CD,Y
C1/2DF8:	D0 03      	BNE $2DFD
C1/2DFA:	9C 6A 7B   	STZ $7B6A
C1/2DFD:	A9 05      	LDA #$05
C1/2DFF:	20 B5 2E   	JSR $2EB5
C1/2E02:	4C B4 2E   	JMP $2EB4

C1/2E05:	C2 20      	REP #$20
C1/2E07:	B9 C1 2E   	LDA $2EC1,Y
C1/2E0A:	85 36      	STA $36
C1/2E0C:	B9 C3 2E   	LDA $2EC3,Y
C1/2E0F:	85 38      	STA $38
C1/2E11:	7B         	TDC
C1/2E12:	E2 20      	SEP #$20           ; 8-bit A
C1/2E14:	A5 36      	LDA $36
C1/2E16:	29 40      	AND #$40
C1/2E18:	F0 13      	BEQ $2E2D
C1/2E1A:	7B         	TDC
C1/2E1B:	AA         	TAX
C1/2E1C:	BF EC CF C2	LDA $C2CFEC,X
C1/2E20:	99 82 7F   	STA $7F82,Y
C1/2E23:	C8         	INY
C1/2E24:	E8         	INX
C1/2E25:	E0 16 00   	CPX #$0016
C1/2E28:	D0 F2      	BNE $2E1C
C1/2E2A:	4C B4 2E   	JMP $2EB4

C1/2E2D:	A5 39      	LDA $39
C1/2E2F:	29 02      	AND #$02
C1/2E31:	F0 12      	BEQ $2E45
C1/2E33:	7B         	TDC
C1/2E34:	AA         	TAX
C1/2E35:	5A         	PHY
C1/2E36:	BF 04 D0 C2	LDA $C2D004,X
C1/2E3A:	99 82 7F   	STA $7F82,Y
C1/2E3D:	C8         	INY
C1/2E3E:	E8         	INX
C1/2E3F:	E0 16 00   	CPX #$0016
C1/2E42:	D0 F2      	BNE $2E36
C1/2E44:	7A         	PLY
C1/2E45:	A5 36      	LDA $36
C1/2E47:	29 04      	AND #$04
C1/2E49:	F0 06      	BEQ $2E51
C1/2E4B:	7B         	TDC
C1/2E4C:	20 0D 2F   	JSR $2F0D
C1/2E4F:	80 63      	BRA $2EB4
C1/2E51:	A5 36      	LDA $36
C1/2E53:	29 02      	AND #$02
C1/2E55:	F0 07      	BEQ $2E5E
C1/2E57:	A9 01      	LDA #$01
C1/2E59:	20 0D 2F   	JSR $2F0D
C1/2E5C:	80 56      	BRA $2EB4
C1/2E5E:	A5 37      	LDA $37
C1/2E60:	29 10      	AND #$10
C1/2E62:	F0 07      	BEQ $2E6B
C1/2E64:	A9 02      	LDA #$02
C1/2E66:	20 0D 2F   	JSR $2F0D
C1/2E69:	80 49      	BRA $2EB4
C1/2E6B:	A5 38      	LDA $38
C1/2E6D:	10 06      	BPL $2E75
C1/2E6F:	7B         	TDC
C1/2E70:	20 C3 2E   	JSR $2EC3
C1/2E73:	80 3F      	BRA $2EB4
C1/2E75:	29 40      	AND #$40
C1/2E77:	F0 07      	BEQ $2E80
C1/2E79:	A9 01      	LDA #$01
C1/2E7B:	20 C3 2E   	JSR $2EC3
C1/2E7E:	80 34      	BRA $2EB4
C1/2E80:	A5 38      	LDA $38
C1/2E82:	29 20      	AND #$20
C1/2E84:	F0 07      	BEQ $2E8D
C1/2E86:	A9 02      	LDA #$02
C1/2E88:	20 C3 2E   	JSR $2EC3
C1/2E8B:	80 27      	BRA $2EB4
C1/2E8D:	A5 38      	LDA $38
C1/2E8F:	29 10      	AND #$10
C1/2E91:	F0 07      	BEQ $2E9A
C1/2E93:	A9 07      	LDA #$07
C1/2E95:	20 C3 2E   	JSR $2EC3
C1/2E98:	80 1A      	BRA $2EB4
C1/2E9A:	A5 38      	LDA $38
C1/2E9C:	29 08      	AND #$08
C1/2E9E:	F0 07      	BEQ $2EA7
C1/2EA0:	A9 03      	LDA #$03
C1/2EA2:	20 C3 2E   	JSR $2EC3
C1/2EA5:	80 0D      	BRA $2EB4
C1/2EA7:	A5 38      	LDA $38
C1/2EA9:	29 04      	AND #$04
C1/2EAB:	F0 07      	BEQ $2EB4
C1/2EAD:	A9 04      	LDA #$04
C1/2EAF:	20 C3 2E   	JSR $2EC3
C1/2EB2:	80 00      	BRA $2EB4 ; ...
C1/2EB4:	60         	RTS

C1/2EB5:	48         	PHA
C1/2EB6:	B9 CD 61   	LDA $61CD,Y
C1/2EB9:	0A         	ASL A
C1/2EBA:	0A         	ASL A
C1/2EBB:	18         	CLC
C1/2EBC:	69 40      	ADC #$40
C1/2EBE:	85 2C      	STA $2C
C1/2EC0:	68         	PLA
C1/2EC1:	80 06      	BRA $2EC9
C1/2EC3:	48         	PHA
C1/2EC4:	A5 0E      	LDA $0E
C1/2EC6:	85 2C      	STA $2C
C1/2EC8:	68         	PLA

C1/2EC9:	48         	PHA
C1/2ECA:	A5 2C      	LDA $2C
C1/2ECC:	29 03      	AND #$03
C1/2ECE:	AA         	TAX
C1/2ECF:	BF AA E3 C2	LDA $C2E3AA,X
C1/2ED3:	18         	CLC
C1/2ED4:	65 2C      	ADC $2C
C1/2ED6:	85 36      	STA $36
C1/2ED8:	29 40      	AND #$40
C1/2EDA:	F0 12      	BEQ $2EEE
C1/2EDC:	A5 36      	LDA $36
C1/2EDE:	29 3C      	AND #$3C
C1/2EE0:	4A         	LSR A
C1/2EE1:	85 2C      	STA $2C
C1/2EE3:	A9 1F      	LDA #$1F
C1/2EE5:	38         	SEC
C1/2EE6:	E5 2C      	SBC $2C
C1/2EE8:	85 2C      	STA $2C
C1/2EEA:	64 2D      	STZ $2D
C1/2EEC:	80 09      	BRA $2EF7
C1/2EEE:	A5 36      	LDA $36
C1/2EF0:	29 3C      	AND #$3C
C1/2EF2:	4A         	LSR A
C1/2EF3:	85 2C      	STA $2C
C1/2EF5:	64 2D      	STZ $2D

C1/2EF7:	68         	PLA
C1/2EF8:	0A         	ASL A
C1/2EF9:	AA         	TAX
C1/2EFA:	C2 20      	REP #$20
C1/2EFC:	20 E4 41   	JSR $41E4
C1/2EFF:	BF BA E3 C2	LDA $C2E3BA,X
C1/2F03:	20 02 42   	JSR $4202
C1/2F06:	99 82 7F   	STA $7F82,Y
C1/2F09:	7B         	TDC
C1/2F0A:	E2 20      	SEP #$20           ; 8-bit A
C1/2F0C:	60         	RTS

C1/2F0D:	0A         	ASL A
C1/2F0E:	0A         	ASL A
C1/2F0F:	AA         	TAX
C1/2F10:	C2 20      	REP #$20
C1/2F12:	BF AE E3 C2	LDA $C2E3AE,X
C1/2F16:	99 8C 7F   	STA $7F8C,Y
C1/2F19:	BF B0 E3 C2	LDA $C2E3B0,X
C1/2F1D:	99 8E 7F   	STA $7F8E,Y
C1/2F20:	7B         	TDC
C1/2F21:	E2 20      	SEP #$20           ; 8-bit A
C1/2F23:	60         	RTS

C1/2F24:	DA         	PHX
C1/2F25:	BD BE 2E   	LDA $2EBE,X
C1/2F28:	85 10      	STA $10
C1/2F2A:	10 04      	BPL $2F30
C1/2F2C:	A9 06      	LDA #$06
C1/2F2E:	80 40      	BRA $2F70
C1/2F30:	A5 10      	LDA $10
C1/2F32:	29 20      	AND #$20
C1/2F34:	F0 04      	BEQ $2F3A
C1/2F36:	A9 02      	LDA #$02
C1/2F38:	80 36      	BRA $2F70
C1/2F3A:	A5 10      	LDA $10
C1/2F3C:	29 10      	AND #$10
C1/2F3E:	F0 04      	BEQ $2F44
C1/2F40:	A9 04      	LDA #$04
C1/2F42:	80 2C      	BRA $2F70
C1/2F44:	BD C0 2E   	LDA $2EC0,X
C1/2F47:	29 01      	AND #$01
C1/2F49:	F0 04      	BEQ $2F4F
C1/2F4B:	A9 04      	LDA #$04
C1/2F4D:	80 21      	BRA $2F70
C1/2F4F:	BD BD 2E   	LDA $2EBD,X
C1/2F52:	29 04      	AND #$04
C1/2F54:	F0 04      	BEQ $2F5A
C1/2F56:	A9 01      	LDA #$01
C1/2F58:	80 16      	BRA $2F70
C1/2F5A:	BD BD 2E   	LDA $2EBD,X
C1/2F5D:	29 01      	AND #$01
C1/2F5F:	F0 04      	BEQ $2F65
C1/2F61:	A9 03      	LDA #$03
C1/2F63:	80 0B      	BRA $2F70
C1/2F65:	A5 10      	LDA $10
C1/2F67:	29 08      	AND #$08
C1/2F69:	F0 04      	BEQ $2F6F
C1/2F6B:	A9 05      	LDA #$05
C1/2F6D:	80 01      	BRA $2F70
C1/2F6F:	7B         	TDC
C1/2F70:	9D CF 61   	STA $61CF,X
C1/2F73:	FA         	PLX
C1/2F74:	60         	RTS

C1/2F75:	20 79 2F   	JSR $2F79
C1/2F78:	6B         	RTL

C1/2F79:	AD 78 7B   	LDA $7B78
C1/2F7C:	29 03      	AND #$03
C1/2F7E:	A8         	TAY
C1/2F7F:	0A         	ASL A
C1/2F80:	0A         	ASL A
C1/2F81:	0A         	ASL A
C1/2F82:	0A         	ASL A
C1/2F83:	0A         	ASL A
C1/2F84:	AA         	TAX
C1/2F85:	BD CD 61   	LDA $61CD,X
C1/2F88:	F0 03      	BEQ $2F8D
C1/2F8A:	4C 4C 30   	JMP $304C

C1/2F8D:	A9 01      	LDA #$01
C1/2F8F:	9D CE 61   	STA $61CE,X
C1/2F92:	AD 4B 2F   	LDA $2F4B
C1/2F95:	29 01      	AND #$01
C1/2F97:	D0 38      	BNE $2FD1
C1/2F99:	BD C0 2E   	LDA $2EC0,X
C1/2F9C:	29 08      	AND #$08
C1/2F9E:	F0 15      	BEQ $2FB5
C1/2FA0:	B9 6C 7B   	LDA $7B6C,Y
C1/2FA3:	C9 12      	CMP #$12
C1/2FA5:	F0 3F      	BEQ $2FE6
C1/2FA7:	A9 12      	LDA #$12
C1/2FA9:	99 6C 7B   	STA $7B6C,Y
C1/2FAC:	20 57 31   	JSR $3157
C1/2FAF:	7B         	TDC
C1/2FB0:	99 70 7B   	STA $7B70,Y
C1/2FB3:	80 31      	BRA $2FE6
C1/2FB5:	BD BD 2E   	LDA $2EBD,X
C1/2FB8:	29 20      	AND #$20
C1/2FBA:	F0 15      	BEQ $2FD1
C1/2FBC:	B9 6C 7B   	LDA $7B6C,Y
C1/2FBF:	C9 0F      	CMP #$0F
C1/2FC1:	F0 23      	BEQ $2FE6
C1/2FC3:	A9 0F      	LDA #$0F
C1/2FC5:	99 6C 7B   	STA $7B6C,Y
C1/2FC8:	20 57 31   	JSR $3157
C1/2FCB:	7B         	TDC
C1/2FCC:	99 70 7B   	STA $7B70,Y
C1/2FCF:	80 15      	BRA $2FE6
C1/2FD1:	B9 6C 7B   	LDA $7B6C,Y
C1/2FD4:	DD AE 2E   	CMP $2EAE,X
C1/2FD7:	F0 0D      	BEQ $2FE6
C1/2FD9:	BD AE 2E   	LDA $2EAE,X
C1/2FDC:	99 6C 7B   	STA $7B6C,Y
C1/2FDF:	20 57 31   	JSR $3157
C1/2FE2:	7B         	TDC
C1/2FE3:	99 70 7B   	STA $7B70,Y
C1/2FE6:	AD 4B 2F   	LDA $2F4B
C1/2FE9:	29 01      	AND #$01
C1/2FEB:	D0 26      	BNE $3013
C1/2FED:	BD BD 2E   	LDA $2EBD,X
C1/2FF0:	29 10      	AND #$10
C1/2FF2:	F0 1F      	BEQ $3013
C1/2FF4:	B9 70 7B   	LDA $7B70,Y
C1/2FF7:	D0 39      	BNE $3032
C1/2FF9:	AD 6A 7B   	LDA $7B6A
C1/2FFC:	D0 34      	BNE $3032
C1/2FFE:	EE 6A 7B   	INC $7B6A
C1/3001:	20 50 30   	JSR $3050
C1/3004:	20 06 31   	JSR $3106
C1/3007:	A9 01      	LDA #$01
C1/3009:	99 70 7B   	STA $7B70,Y
C1/300C:	A9 1E      	LDA #$1E
C1/300E:	9D CD 61   	STA $61CD,X
C1/3011:	80 1F      	BRA $3032
C1/3013:	B9 70 7B   	LDA $7B70,Y
C1/3016:	F0 1A      	BEQ $3032
C1/3018:	AD 6A 7B   	LDA $7B6A
C1/301B:	D0 15      	BNE $3032
C1/301D:	EE 6A 7B   	INC $7B6A
C1/3020:	20 50 30   	JSR $3050
C1/3023:	B9 6C 7B   	LDA $7B6C,Y
C1/3026:	20 57 31   	JSR $3157
C1/3029:	7B         	TDC
C1/302A:	99 70 7B   	STA $7B70,Y
C1/302D:	A9 1E      	LDA #$1E
C1/302F:	9D CD 61   	STA $61CD,X
C1/3032:	9E CE 61   	STZ $61CE,X
C1/3035:	20 71 30   	JSR $3071
C1/3038:	20 24 2F   	JSR $2F24
C1/303B:	C2 20      	REP #$20
C1/303D:	BD BD 2E   	LDA $2EBD,X
C1/3040:	9D C1 2E   	STA $2EC1,X
C1/3043:	BD BF 2E   	LDA $2EBF,X
C1/3046:	9D C3 2E   	STA $2EC3,X
C1/3049:	7B         	TDC
C1/304A:	E2 20      	SEP #$20           ; 8-bit A
C1/304C:	EE 78 7B   	INC $7B78
C1/304F:	60         	RTS

C1/3050:	5A         	PHY
C1/3051:	DA         	PHX
C1/3052:	AD 78 7B   	LDA $7B78
C1/3055:	29 03      	AND #$03
C1/3057:	0A         	ASL A
C1/3058:	AA         	TAX
C1/3059:	8B         	PHB
C1/305A:	C2 20      	REP #$20
C1/305C:	BF 22 E4 C2	LDA $C2E422,X
C1/3060:	AA         	TAX
C1/3061:	A0 00 80   	LDY #$8000
C1/3064:	A9 FF 1F   	LDA #$1FFF
C1/3067:	54 7F 7F   	MVN 7F 7F
C1/306A:	7B         	TDC
C1/306B:	E2 20      	SEP #$20           ; 8-bit A
C1/306D:	AB         	PLB
C1/306E:	FA         	PLX
C1/306F:	7A         	PLY
C1/3070:	60         	RTS

C1/3071:	DA         	PHX
C1/3072:	C2 20      	REP #$20
C1/3074:	BD BD 2E   	LDA $2EBD,X
C1/3077:	85 10      	STA $10
C1/3079:	BD BF 2E   	LDA $2EBF,X
C1/307C:	85 12      	STA $12
C1/307E:	7B         	TDC
C1/307F:	E2 20      	SEP #$20           ; 8-bit A
C1/3081:	A5 10      	LDA $10
C1/3083:	10 04      	BPL $3089
C1/3085:	A9 01      	LDA #$01
C1/3087:	80 35      	BRA $30BE
C1/3089:	A5 11      	LDA $11
C1/308B:	10 04      	BPL $3091
C1/308D:	A9 0A      	LDA #$0A
C1/308F:	80 2D      	BRA $30BE

C1/3091:	29 20      	AND #$20
C1/3093:	F0 04      	BEQ $3099
C1/3095:	A9 25      	LDA #$25
C1/3097:	80 25      	BRA $30BE
C1/3099:	A5 13      	LDA $13
C1/309B:	29 10      	AND #$10
C1/309D:	F0 04      	BEQ $30A3
C1/309F:	A9 09      	LDA #$09
C1/30A1:	80 1B      	BRA $30BE
C1/30A3:	A5 10      	LDA $10
C1/30A5:	29 04      	AND #$04
C1/30A7:	F0 04      	BEQ $30AD
C1/30A9:	A9 0A      	LDA #$0A
C1/30AB:	80 11      	BRA $30BE
C1/30AD:	A5 11      	LDA $11
C1/30AF:	29 02      	AND #$02
C1/30B1:	F0 04      	BEQ $30B7
C1/30B3:	A9 0A      	LDA #$0A
C1/30B5:	80 07      	BRA $30BE
C1/30B7:	BD BB 61   	LDA $61BB,X       ; character sprite animation
C1/30BA:	D0 02      	BNE $30BE         ; branch if ^
C1/30BC:	A9 06      	LDA #$06          ; else, use default sprite
C1/30BE:	9D BF 61   	STA $61BF,X
C1/30C1:	FA         	PLX
C1/30C2:	60         	RTS

C1/30C3:	5A         	PHY
C1/30C4:	DA         	PHX
C1/30C5:	8B         	PHB
C1/30C6:	A9 7F      	LDA #$7F
C1/30C8:	48         	PHA
C1/30C9:	AB         	PLB
C1/30CA:	A2 00 80   	LDX #$8000
C1/30CD:	A0 00 01   	LDY #$0100
C1/30D0:	A9 08      	LDA #$08
C1/30D2:	85 16      	STA $16
C1/30D4:	BD 01 00   	LDA $0001,X
C1/30D7:	1D 10 00   	ORA $0010,X
C1/30DA:	1D 11 00   	ORA $0011,X
C1/30DD:	49 FF      	EOR #$FF
C1/30DF:	3D 00 00   	AND $0000,X
C1/30E2:	9D 00 00   	STA $0000,X
C1/30E5:	9E 01 00   	STZ $0001,X
C1/30E8:	9E 10 00   	STZ $0010,X
C1/30EB:	9E 11 00   	STZ $0011,X
C1/30EE:	E8         	INX
C1/30EF:	E8         	INX
C1/30F0:	C6 16      	DEC $16
C1/30F2:	D0 E0      	BNE $30D4
C1/30F4:	C2 20      	REP #$20
C1/30F6:	8A         	TXA
C1/30F7:	18         	CLC
C1/30F8:	69 10 00   	ADC #$0010
C1/30FB:	AA         	TAX
C1/30FC:	7B         	TDC
C1/30FD:	E2 20      	SEP #$20           ; 8-bit A
C1/30FF:	88         	DEY
C1/3100:	D0 CE      	BNE $30D0
C1/3102:	AB         	PLB
C1/3103:	FA         	PLX
C1/3104:	7A         	PLY
C1/3105:	60         	RTS

C1/3106:	5A         	PHY
C1/3107:	DA         	PHX
C1/3108:	AD 78 7B   	LDA $7B78
C1/310B:	29 03      	AND #$03
C1/310D:	0A         	ASL A
C1/310E:	AA         	TAX
C1/310F:	C2 20      	REP #$20
C1/3111:	BF 22 E4 C2	LDA $C2E422,X
C1/3115:	AA         	TAX
C1/3116:	7B         	TDC
C1/3117:	E2 20      	SEP #$20           ; 8-bit A
C1/3119:	8B         	PHB
C1/311A:	A9 7F      	LDA #$7F
C1/311C:	48         	PHA
C1/311D:	AB         	PLB
C1/311E:	A0 00 01   	LDY #$0100
C1/3121:	A9 08      	LDA #$08
C1/3123:	85 16      	STA $16
C1/3125:	BD 01 00   	LDA $0001,X
C1/3128:	1D 10 00   	ORA $0010,X
C1/312B:	1D 11 00   	ORA $0011,X
C1/312E:	49 FF      	EOR #$FF
C1/3130:	3D 00 00   	AND $0000,X
C1/3133:	9D 00 00   	STA $0000,X
C1/3136:	9E 01 00   	STZ $0001,X
C1/3139:	9E 10 00   	STZ $0010,X
C1/313C:	9E 11 00   	STZ $0011,X
C1/313F:	E8         	INX
C1/3140:	E8         	INX
C1/3141:	C6 16      	DEC $16
C1/3143:	D0 E0      	BNE $3125
C1/3145:	C2 20      	REP #$20
C1/3147:	8A         	TXA
C1/3148:	18         	CLC
C1/3149:	69 10 00   	ADC #$0010
C1/314C:	AA         	TAX
C1/314D:	7B         	TDC
C1/314E:	E2 20      	SEP #$20           ; 8-bit A
C1/3150:	88         	DEY
C1/3151:	D0 CE      	BNE $3121
C1/3153:	AB         	PLB
C1/3154:	FA         	PLX
C1/3155:	7A         	PLY
C1/3156:	60         	RTS

C1/3157:	5A         	PHY
C1/3158:	DA         	PHX
C1/3159:	48         	PHA
C1/315A:	98         	TYA
C1/315B:	85 10      	STA $10
C1/315D:	AD 78 7B   	LDA $7B78
C1/3160:	29 03      	AND #$03
C1/3162:	0A         	ASL A
C1/3163:	AA         	TAX
C1/3164:	C2 20      	REP #$20
C1/3166:	BF 22 E4 C2	LDA $C2E422,X
C1/316A:	AA         	TAX
C1/316B:	7B         	TDC
C1/316C:	E2 20      	SEP #$20           ; 8-bit A
C1/316E:	68         	PLA
C1/316F:	20 43 3D   	JSR $3D43
C1/3172:	FA         	PLX
C1/3173:	7A         	PLY
C1/3174:	60         	RTS

C1/3175:	48         	PHA
C1/3176:	29 03      	AND #$03
C1/3178:	AA         	TAX
C1/3179:	BF 5B CF C2	LDA $C2CF5B,X
C1/317D:	AA         	TAX
C1/317E:	64 42      	STZ $42
C1/3180:	BD BD 61   	LDA $61BD,X
C1/3183:	85 43      	STA $43
C1/3185:	A5 71      	LDA $71
C1/3187:	C2 20      	REP #$20
C1/3189:	0A         	ASL A
C1/318A:	0A         	ASL A
C1/318B:	A8         	TAY
C1/318C:	BD B7 61   	LDA $61B7,X
C1/318F:	18         	CLC
C1/3190:	7D C5 61   	ADC $61C5,X
C1/3193:	18         	CLC
C1/3194:	7D D4 61   	ADC $61D4,X
C1/3197:	85 36      	STA $36
C1/3199:	BD B9 61   	LDA $61B9,X
C1/319C:	18         	CLC
C1/319D:	69 10 00   	ADC #$0010
C1/31A0:	7D C7 61   	ADC $61C7,X
C1/31A3:	85 38      	STA $38
C1/31A5:	A5 42      	LDA $42
C1/31A7:	09 2C 0C   	ORA #$0C2C
C1/31AA:	85 42      	STA $42
C1/31AC:	7B         	TDC
C1/31AD:	E2 20      	SEP #$20           ; 8-bit A
C1/31AF:	A5 36      	LDA $36
C1/31B1:	99 00 03   	STA $0300,Y
C1/31B4:	A5 37      	LDA $37
C1/31B6:	29 01      	AND #$01
C1/31B8:	F0 0D      	BEQ $31C7
C1/31BA:	B9 7F A1   	LDA $A17F,Y
C1/31BD:	AA         	TAX
C1/31BE:	BD 00 05   	LDA $0500,X
C1/31C1:	19 7F A7   	ORA $A77F,Y
C1/31C4:	9D 00 05   	STA $0500,X
C1/31C7:	A5 39      	LDA $39
C1/31C9:	29 01      	AND #$01
C1/31CB:	F0 09      	BEQ $31D6
C1/31CD:	A5 38      	LDA $38
C1/31CF:	C9 E0      	CMP #$E0
C1/31D1:	B0 0B      	BCS $31DE
C1/31D3:	4C DC 31   	JMP $31DC

C1/31D6:	A5 38      	LDA $38
C1/31D8:	C9 97      	CMP #$97
C1/31DA:	90 02      	BCC $31DE
C1/31DC:	A9 97      	LDA #$97
C1/31DE:	99 01 03   	STA $0301,Y
C1/31E1:	C2 20      	REP #$20
C1/31E3:	A5 42      	LDA $42
C1/31E5:	99 02 03   	STA $0302,Y
C1/31E8:	7B         	TDC
C1/31E9:	E2 20      	SEP #$20           ; 8-bit A
C1/31EB:	E6 71      	INC $71
C1/31ED:	68         	PLA
C1/31EE:	60         	RTS

C1/31EF:	29 03      	AND #$03
C1/31F1:	85 36      	STA $36
C1/31F3:	A5 0E      	LDA $0E
C1/31F5:	29 03      	AND #$03
C1/31F7:	C5 36      	CMP $36
C1/31F9:	D0 6F      	BNE $326A
C1/31FB:	AA         	TAX
C1/31FC:	A8         	TAY
C1/31FD:	AD EF E9   	LDA $E9EF
C1/3200:	F0 07      	BEQ $3209
C1/3202:	A5 0E      	LDA $0E
C1/3204:	4A         	LSR A
C1/3205:	4A         	LSR A
C1/3206:	4A         	LSR A
C1/3207:	80 04      	BRA $320D
C1/3209:	A5 0E      	LDA $0E
C1/320B:	4A         	LSR A
C1/320C:	4A         	LSR A

C1/320D:	29 03      	AND #$03
C1/320F:	85 36      	STA $36
C1/3211:	BD CC 64   	LDA $64CC,X
C1/3214:	0A         	ASL A
C1/3215:	0A         	ASL A
C1/3216:	18         	CLC
C1/3217:	65 36      	ADC $36
C1/3219:	AA         	TAX
C1/321A:	BF 73 CF C2	LDA $C2CF73,X
C1/321E:	0A         	ASL A
C1/321F:	0A         	ASL A
C1/3220:	AA         	TAX
C1/3221:	C2 20      	REP #$20
C1/3223:	BF 5F CF C2	LDA $C2CF5F,X
C1/3227:	8D BC 64   	STA $64BC
C1/322A:	18         	CLC
C1/322B:	69 80 00   	ADC #$0080
C1/322E:	8D C0 64   	STA $64C0
C1/3231:	18         	CLC
C1/3232:	69 80 01   	ADC #$0180
C1/3235:	8D BE 64   	STA $64BE
C1/3238:	18         	CLC
C1/3239:	69 80 00   	ADC #$0080
C1/323C:	8D C2 64   	STA $64C2
C1/323F:	A5 0E      	LDA $0E
C1/3241:	29 03 00   	AND #$0003
C1/3244:	0A         	ASL A
C1/3245:	0A         	ASL A
C1/3246:	0A         	ASL A
C1/3247:	AA         	TAX
C1/3248:	BF 37 CF C2	LDA $C2CF37,X
C1/324C:	8D C4 64   	STA $64C4
C1/324F:	BF 39 CF C2	LDA $C2CF39,X
C1/3253:	8D C6 64   	STA $64C6
C1/3256:	BF 3B CF C2	LDA $C2CF3B,X
C1/325A:	8D C8 64   	STA $64C8
C1/325D:	BF 3D CF C2	LDA $C2CF3D,X
C1/3261:	8D CA 64   	STA $64CA
C1/3264:	7B         	TDC
C1/3265:	E2 20      	SEP #$20           ; 8-bit A
C1/3267:	EE BB 64   	INC $64BB
C1/326A:	60         	RTS

C1/326B:	DA         	PHX
C1/326C:	A5 0E      	LDA $0E
C1/326E:	29 03      	AND #$03
C1/3270:	C5 32      	CMP $32
C1/3272:	D0 29      	BNE $329D
C1/3274:	AA         	TAX
C1/3275:	A8         	TAY
C1/3276:	A5 0E      	LDA $0E
C1/3278:	4A         	LSR A
C1/3279:	4A         	LSR A
C1/327A:	85 36      	STA $36
C1/327C:	AD EF E9   	LDA $E9EF
C1/327F:	F0 02      	BEQ $3283
C1/3281:	46 36      	LSR $36
C1/3283:	A5 36      	LDA $36
C1/3285:	29 03      	AND #$03
C1/3287:	85 36      	STA $36
C1/3289:	BD CC 64   	LDA $64CC,X
C1/328C:	0A         	ASL A
C1/328D:	0A         	ASL A
C1/328E:	18         	CLC
C1/328F:	65 36      	ADC $36
C1/3291:	AA         	TAX
C1/3292:	BF 73 CF C2	LDA $C2CF73,X
C1/3296:	F0 02      	BEQ $329A
C1/3298:	A9 01      	LDA #$01
C1/329A:	99 D0 64   	STA $64D0,Y

C1/329D:	FA         	PLX
C1/329E:	60         	RTS

C1/329F:	48         	PHA
C1/32A0:	29 03      	AND #$03
C1/32A2:	85 32      	STA $32
C1/32A4:	AA         	TAX
C1/32A5:	20 6B 32   	JSR $326B
C1/32A8:	BD D0 64   	LDA $64D0,X
C1/32AB:	85 3C      	STA $3C
C1/32AD:	BF 5B CF C2	LDA $C2CF5B,X
C1/32B1:	AA         	TAX
C1/32B2:	64 3A      	STZ $3A
C1/32B4:	BD C3 61   	LDA $61C3,X
C1/32B7:	C9 30      	CMP #$30
C1/32B9:	90 04      	BCC $32BF
C1/32BB:	A9 40      	LDA #$40
C1/32BD:	85 3A      	STA $3A
C1/32BF:	BD BE 61   	LDA $61BE,X
C1/32C2:	29 C0      	AND #$C0
C1/32C4:	45 3A      	EOR $3A
C1/32C6:	1D BD 61   	ORA $61BD,X
C1/32C9:	29 F1      	AND #$F1
C1/32CB:	0D D4 64   	ORA $64D4
C1/32CE:	85 43      	STA $43
C1/32D0:	64 42      	STZ $42
C1/32D2:	A5 71      	LDA $71
C1/32D4:	3A         	DEC A
C1/32D5:	3A         	DEC A
C1/32D6:	C2 20      	REP #$20
C1/32D8:	0A         	ASL A
C1/32D9:	0A         	ASL A
C1/32DA:	A8         	TAY
C1/32DB:	7B         	TDC
C1/32DC:	E2 20      	SEP #$20           ; 8-bit A
C1/32DE:	B9 01 03   	LDA $0301,Y
C1/32E1:	18         	CLC
C1/32E2:	65 3C      	ADC $3C
C1/32E4:	99 01 03   	STA $0301,Y
C1/32E7:	B9 05 03   	LDA $0305,Y
C1/32EA:	18         	CLC
C1/32EB:	65 3C      	ADC $3C
C1/32ED:	99 05 03   	STA $0305,Y
C1/32F0:	A5 71      	LDA $71
C1/32F2:	C2 20      	REP #$20
C1/32F4:	0A         	ASL A
C1/32F5:	0A         	ASL A
C1/32F6:	A8         	TAY
C1/32F7:	BD B7 61   	LDA $61B7,X
C1/32FA:	18         	CLC
C1/32FB:	7D C5 61   	ADC $61C5,X
C1/32FE:	18         	CLC
C1/32FF:	7D D4 61   	ADC $61D4,X
C1/3302:	85 36      	STA $36
C1/3304:	BD B9 61   	LDA $61B9,X
C1/3307:	18         	CLC
C1/3308:	7D C7 61   	ADC $61C7,X
C1/330B:	18         	CLC
C1/330C:	7D D2 61   	ADC $61D2,X
C1/330F:	85 38      	STA $38
C1/3311:	7B         	TDC
C1/3312:	E2 20      	SEP #$20           ; 8-bit A
C1/3314:	A5 32      	LDA $32
C1/3316:	0A         	ASL A
C1/3317:	0A         	ASL A
C1/3318:	AA         	TAX
C1/3319:	18         	CLC
C1/331A:	BF 83 CF C2	LDA $C2CF83,X
C1/331E:	10 0C      	BPL $332C
C1/3320:	65 36      	ADC $36
C1/3322:	99 00 03   	STA $0300,Y
C1/3325:	A5 37      	LDA $37
C1/3327:	69 01      	ADC #$01
C1/3329:	4C 35 33   	JMP $3335

C1/332C:	65 36      	ADC $36
C1/332E:	99 00 03   	STA $0300,Y
C1/3331:	A5 37      	LDA $37
C1/3333:	69 00      	ADC #$00
C1/3335:	29 01      	AND #$01
C1/3337:	F0 13      	BEQ $334C
C1/3339:	86 3C      	STX $3C
C1/333B:	B9 7F A1   	LDA $A17F,Y
C1/333E:	AA         	TAX
C1/333F:	BD 00 05   	LDA $0500,X
C1/3342:	19 7F A5   	ORA $A57F,Y
C1/3345:	9D 00 05   	STA $0500,X
C1/3348:	A6 3C      	LDX $3C
C1/334A:	80 11      	BRA $335D
C1/334C:	86 3C      	STX $3C
C1/334E:	B9 7F A1   	LDA $A17F,Y
C1/3351:	AA         	TAX
C1/3352:	BD 00 05   	LDA $0500,X
C1/3355:	19 7F A3   	ORA $A37F,Y
C1/3358:	9D 00 05   	STA $0500,X
C1/335B:	A6 3C      	LDX $3C

C1/335D:	18         	CLC
C1/335E:	BF 84 CF C2	LDA $C2CF84,X
C1/3362:	10 0A      	BPL $336E
C1/3364:	65 38      	ADC $38
C1/3366:	85 3E      	STA $3E
C1/3368:	A5 39      	LDA $39
C1/336A:	69 01      	ADC #$01
C1/336C:	80 08      	BRA $3376
C1/336E:	65 38      	ADC $38
C1/3370:	85 3E      	STA $3E
C1/3372:	A5 39      	LDA $39
C1/3374:	69 00      	ADC #$00
C1/3376:	29 01      	AND #$01
C1/3378:	F0 09      	BEQ $3383
C1/337A:	A5 3E      	LDA $3E
C1/337C:	C9 E0      	CMP #$E0
C1/337E:	B0 0B      	BCS $338B
C1/3380:	4C 89 33   	JMP $3389

C1/3383:	A5 3E      	LDA $3E
C1/3385:	C9 97      	CMP #$97
C1/3387:	90 02      	BCC $338B
C1/3389:	A9 97      	LDA #$97
C1/338B:	99 01 03   	STA $0301,Y
C1/338E:	C2 20      	REP #$20
C1/3390:	BF 85 CF C2	LDA $C2CF85,X
C1/3394:	05 42      	ORA $42
C1/3396:	99 02 03   	STA $0302,Y
C1/3399:	7B         	TDC
C1/339A:	E2 20      	SEP #$20           ; 8-bit A
C1/339C:	E6 71      	INC $71
C1/339E:	68         	PLA
C1/339F:	20 EF 31   	JSR $31EF
C1/33A2:	60         	RTS

C1/33A3:	48         	PHA
C1/33A4:	29 03      	AND #$03
C1/33A6:	AA         	TAX
C1/33A7:	64 42      	STZ $42
C1/33A9:	BF 5B CF C2	LDA $C2CF5B,X
C1/33AD:	AA         	TAX
C1/33AE:	BD CF 61   	LDA $61CF,X
C1/33B1:	D0 02      	BNE $33B5
C1/33B3:	68         	PLA
C1/33B4:	60         	RTS

C1/33B5:	64 3A      	STZ $3A
C1/33B7:	BD C3 61   	LDA $61C3,X
C1/33BA:	C9 30      	CMP #$30
C1/33BC:	90 04      	BCC $33C2
C1/33BE:	A9 40      	LDA #$40
C1/33C0:	85 3A      	STA $3A
C1/33C2:	BD C3 61   	LDA $61C3,X
C1/33C5:	C9 14      	CMP #$14
C1/33C7:	F0 09      	BEQ $33D2
C1/33C9:	C9 44      	CMP #$44
C1/33CB:	F0 05      	BEQ $33D2
C1/33CD:	64 3C      	STZ $3C
C1/33CF:	4C D6 33   	JMP $33D6

C1/33D2:	A9 1C      	LDA #$1C
C1/33D4:	85 3C      	STA $3C
C1/33D6:	64 32      	STZ $32
C1/33D8:	BD BE 61   	LDA $61BE,X
C1/33DB:	29 C0      	AND #$C0
C1/33DD:	45 3A      	EOR $3A
C1/33DF:	1D BD 61   	ORA $61BD,X
C1/33E2:	85 43      	STA $43
C1/33E4:	29 40      	AND #$40
C1/33E6:	F0 05      	BEQ $33ED
C1/33E8:	BD CF 61   	LDA $61CF,X
C1/33EB:	85 32      	STA $32
C1/33ED:	20 A5 34   	JSR $34A5
C1/33F0:	A5 71      	LDA $71
C1/33F2:	C2 20      	REP #$20
C1/33F4:	0A         	ASL A
C1/33F5:	0A         	ASL A
C1/33F6:	A8         	TAY
C1/33F7:	BD B7 61   	LDA $61B7,X
C1/33FA:	18         	CLC
C1/33FB:	7D C5 61   	ADC $61C5,X
C1/33FE:	18         	CLC
C1/33FF:	7D D4 61   	ADC $61D4,X
C1/3402:	85 36      	STA $36
C1/3404:	BD B9 61   	LDA $61B9,X
C1/3407:	18         	CLC
C1/3408:	7D C7 61   	ADC $61C7,X
C1/340B:	7D D2 61   	ADC $61D2,X
C1/340E:	65 38      	ADC $38
C1/3410:	85 38      	STA $38
C1/3412:	DA         	PHX
C1/3413:	A5 32      	LDA $32
C1/3415:	29 FF 00   	AND #$00FF
C1/3418:	0A         	ASL A
C1/3419:	AA         	TAX
C1/341A:	BF CA E3 C2	LDA $C2E3CA,X
C1/341E:	18         	CLC
C1/341F:	65 36      	ADC $36
C1/3421:	85 36      	STA $36
C1/3423:	FA         	PLX
C1/3424:	7B         	TDC
C1/3425:	E2 20      	SEP #$20           ; 8-bit A
C1/3427:	BD CF 61   	LDA $61CF,X
C1/342A:	3A         	DEC A
C1/342B:	0A         	ASL A
C1/342C:	0A         	ASL A
C1/342D:	18         	CLC
C1/342E:	65 3C      	ADC $3C
C1/3430:	AA         	TAX
C1/3431:	18         	CLC
C1/3432:	BF DA E3 C2	LDA $C2E3DA,X
C1/3436:	10 0C      	BPL $3444
C1/3438:	65 36      	ADC $36
C1/343A:	99 00 03   	STA $0300,Y
C1/343D:	A5 37      	LDA $37
C1/343F:	69 01      	ADC #$01
C1/3441:	4C 4D 34   	JMP $344D

C1/3444:	65 36      	ADC $36
C1/3446:	99 00 03   	STA $0300,Y
C1/3449:	A5 37      	LDA $37
C1/344B:	69 00      	ADC #$00
C1/344D:	29 01      	AND #$01
C1/344F:	F0 11      	BEQ $3462
C1/3451:	86 3C      	STX $3C
C1/3453:	B9 7F A1   	LDA $A17F,Y
C1/3456:	AA         	TAX
C1/3457:	BD 00 05   	LDA $0500,X
C1/345A:	19 7F A7   	ORA $A77F,Y
C1/345D:	9D 00 05   	STA $0500,X
C1/3460:	A6 3C      	LDX $3C
C1/3462:	18         	CLC
C1/3463:	BF DB E3 C2	LDA $C2E3DB,X
C1/3467:	10 0A      	BPL $3473
C1/3469:	65 38      	ADC $38
C1/346B:	85 3E      	STA $3E
C1/346D:	A5 39      	LDA $39
C1/346F:	69 01      	ADC #$01
C1/3471:	80 08      	BRA $347B
C1/3473:	65 38      	ADC $38
C1/3475:	85 3E      	STA $3E
C1/3477:	A5 39      	LDA $39
C1/3479:	69 00      	ADC #$00
C1/347B:	29 01      	AND #$01
C1/347D:	F0 09      	BEQ $3488
C1/347F:	A5 3E      	LDA $3E
C1/3481:	C9 E0      	CMP #$E0
C1/3483:	B0 0B      	BCS $3490
C1/3485:	4C 8E 34   	JMP $348E

C1/3488:	A5 3E      	LDA $3E
C1/348A:	C9 97      	CMP #$97
C1/348C:	90 02      	BCC $3490
C1/348E:	A9 97      	LDA #$97
C1/3490:	99 01 03   	STA $0301,Y
C1/3493:	C2 20      	REP #$20
C1/3495:	BF DC E3 C2	LDA $C2E3DC,X
C1/3499:	05 42      	ORA $42
C1/349B:	99 02 03   	STA $0302,Y
C1/349E:	7B         	TDC
C1/349F:	E2 20      	SEP #$20           ; 8-bit A
C1/34A1:	E6 71      	INC $71
C1/34A3:	68         	PLA
C1/34A4:	60         	RTS

C1/34A5:	64 38      	STZ $38        ; topmost cursor row: 0
C1/34A7:	64 39      	STZ $39        ; rightmost cursor column: 0
C1/34A9:	AD BA 64   	LDA $64BA
C1/34AC:	F0 08      	BEQ $34B6
C1/34AE:	DA         	PHX
C1/34AF:	A2 F4 FF   	LDX #$FFF4
C1/34B2:	86 38      	STX $38
C1/34B4:	FA         	PLX
C1/34B5:	60         	RTS

C1/34B6:	BD C4 2E   	LDA $2EC4,X
C1/34B9:	10 1F      	BPL $34DA
C1/34BB:	BD D1 61   	LDA $61D1,X
C1/34BE:	D0 1A      	BNE $34DA
C1/34C0:	BD C1 61   	LDA $61C1,X
C1/34C3:	D0 15      	BNE $34DA
C1/34C5:	DA         	PHX
C1/34C6:	BD C2 61   	LDA $61C2,X
C1/34C9:	29 38      	AND #$38
C1/34CB:	4A         	LSR A
C1/34CC:	4A         	LSR A
C1/34CD:	4A         	LSR A
C1/34CE:	AA         	TAX
C1/34CF:	A9 FF      	LDA #$FF
C1/34D1:	85 39      	STA $39
C1/34D3:	BF A2 E3 C2	LDA $C2E3A2,X
C1/34D7:	85 38      	STA $38
C1/34D9:	FA         	PLX
C1/34DA:	60         	RTS

C1/34DB:	48         	PHA
C1/34DC:	29 03      	AND #$03
C1/34DE:	A8         	TAY
C1/34DF:	AA         	TAX
C1/34E0:	BF 01 1A C1	LDA $C11A01,X    ; Data
C1/34E4:	85 36      	STA $36
C1/34E6:	BF 57 CF C2	LDA $C2CF57,X
C1/34EA:	85 40      	STA $40
C1/34EC:	BF 5B CF C2	LDA $C2CF5B,X
C1/34F0:	AA         	TAX
C1/34F1:	AD 69 7B   	LDA $7B69
C1/34F4:	F0 03      	BEQ $34F9
C1/34F6:	DE C2 61   	DEC $61C2,X
C1/34F9:	64 44      	STZ $44
C1/34FB:	64 45      	STZ $45
C1/34FD:	BD BC 61   	LDA $61BC,X
C1/3500:	1D BD 61   	ORA $61BD,X
C1/3503:	85 42      	STA $42
C1/3505:	AD 9A 62   	LDA $629A
C1/3508:	D0 3F      	BNE $3549
C1/350A:	AD B8 EC   	LDA $ECB8
C1/350D:	C9 21      	CMP #$21
C1/350F:	F0 05      	BEQ $3516
C1/3511:	AD 45 2F   	LDA $2F45
C1/3514:	F0 33      	BEQ $3549
C1/3516:	B9 A5 62   	LDA $62A5,Y
C1/3519:	D0 2E      	BNE $3549
C1/351B:	B9 A0 62   	LDA $62A0,Y
C1/351E:	D0 29      	BNE $3549
C1/3520:	AD 47 2F   	LDA $2F47
C1/3523:	25 36      	AND $36
C1/3525:	D0 22      	BNE $3549
C1/3527:	BD C1 2E   	LDA $2EC1,X
C1/352A:	29 C2      	AND #$C2
C1/352C:	D0 1B      	BNE $3549
C1/352E:	BD C2 2E   	LDA $2EC2,X
C1/3531:	29 80      	AND #$80
C1/3533:	D0 14      	BNE $3549
C1/3535:	BD C3 2E   	LDA $2EC3,X
C1/3538:	29 10      	AND #$10
C1/353A:	D0 0D      	BNE $3549
C1/353C:	BD C4 2E   	LDA $2EC4,X
C1/353F:	29 08      	AND #$08
C1/3541:	D0 06      	BNE $3549
C1/3543:	A9 0C      	LDA #$0C
C1/3545:	85 36      	STA $36
C1/3547:	80 16      	BRA $355F
C1/3549:	BD C1 61   	LDA $61C1,X
C1/354C:	D0 47      	BNE $3595
C1/354E:	BD C0 61   	LDA $61C0,X
C1/3551:	D0 03      	BNE $3556
C1/3553:	BD BF 61   	LDA $61BF,X       ; character sprite animation ID [?]

C1/3556:	0A         	ASL A
C1/3557:	0A         	ASL A
C1/3558:	85 36      	STA $36
C1/355A:	BD D0 61   	LDA $61D0,X
C1/355D:	F0 05      	BEQ $3564
C1/355F:	BD C2 61   	LDA $61C2,X
C1/3562:	80 04      	BRA $3568
C1/3564:	BD C2 61   	LDA $61C2,X
C1/3567:	4A         	LSR A
C1/3568:	4A         	LSR A
C1/3569:	4A         	LSR A
C1/356A:	85 38      	STA $38
C1/356C:	AD BA 64   	LDA $64BA
C1/356F:	F0 07      	BEQ $3578
C1/3571:	AD EF E9   	LDA $E9EF
C1/3574:	F0 02      	BEQ $3578
C1/3576:	46 38      	LSR $38
C1/3578:	A5 38      	LDA $38
C1/357A:	29 03      	AND #$03
C1/357C:	18         	CLC
C1/357D:	65 36      	ADC $36
C1/357F:	9B         	TXY
C1/3580:	AA         	TAX
C1/3581:	BF A9 C6 C2	LDA $C2C6A9,X
C1/3585:	85 36      	STA $36
C1/3587:	29 1F      	AND #$1F
C1/3589:	C9 07      	CMP #$07
C1/358B:	D0 05      	BNE $3592
C1/358D:	A6 44      	LDX $44
C1/358F:	CA         	DEX
C1/3590:	86 44      	STX $44
C1/3592:	BB         	TYX
C1/3593:	A5 36      	LDA $36
C1/3595:	9D C3 61   	STA $61C3,X
C1/3598:	85 36      	STA $36
C1/359A:	64 38      	STZ $38
C1/359C:	C9 30      	CMP #$30
C1/359E:	90 09      	BCC $35A9
C1/35A0:	38         	SEC
C1/35A1:	E9 30      	SBC #$30
C1/35A3:	85 36      	STA $36
C1/35A5:	A9 40      	LDA #$40
C1/35A7:	85 38      	STA $38
C1/35A9:	64 3A      	STZ $3A
C1/35AB:	A5 36      	LDA $36
C1/35AD:	D0 04      	BNE $35B3
C1/35AF:	A9 08      	LDA #$08
C1/35B1:	85 3A      	STA $3A
C1/35B3:	BD BE 61   	LDA $61BE,X
C1/35B6:	29 C0      	AND #$C0
C1/35B8:	45 38      	EOR $38
C1/35BA:	05 42      	ORA $42
C1/35BC:	85 42      	STA $42
C1/35BE:	29 C0      	AND #$C0
C1/35C0:	4A         	LSR A
C1/35C1:	4A         	LSR A
C1/35C2:	05 3A      	ORA $3A
C1/35C4:	85 3A      	STA $3A
C1/35C6:	8D DA E9   	STA $E9DA
C1/35C9:	64 36      	STZ $36
C1/35CB:	64 37      	STZ $37
C1/35CD:	AD 69 7B   	LDA $7B69
C1/35D0:	F0 10      	BEQ $35E2
C1/35D2:	A5 42      	LDA $42
C1/35D4:	29 40      	AND #$40
C1/35D6:	F0 05      	BEQ $35DD
C1/35D8:	A0 F8 FF   	LDY #$FFF8
C1/35DB:	80 03      	BRA $35E0
C1/35DD:	A0 08 00   	LDY #$0008
C1/35E0:	84 36      	STY $36
C1/35E2:	20 A5 34   	JSR $34A5
C1/35E5:	FE C2 61   	INC $61C2,X
C1/35E8:	A5 71      	LDA $71
C1/35EA:	C2 20      	REP #$20
C1/35EC:	0A         	ASL A
C1/35ED:	0A         	ASL A
C1/35EE:	A8         	TAY
C1/35EF:	BD B7 61   	LDA $61B7,X
C1/35F2:	18         	CLC
C1/35F3:	7D D4 61   	ADC $61D4,X
C1/35F6:	18         	CLC
C1/35F7:	7D C5 61   	ADC $61C5,X
C1/35FA:	18         	CLC
C1/35FB:	65 36      	ADC $36
C1/35FD:	85 36      	STA $36
C1/35FF:	BD B9 61   	LDA $61B9,X
C1/3602:	18         	CLC
C1/3603:	7D C7 61   	ADC $61C7,X
C1/3606:	7D D2 61   	ADC $61D2,X
C1/3609:	65 38      	ADC $38
C1/360B:	65 44      	ADC $44
C1/360D:	85 38      	STA $38
C1/360F:	7B         	TDC
C1/3610:	E2 20      	SEP #$20           ; 8-bit A
C1/3612:	A5 3A      	LDA $3A
C1/3614:	AA         	TAX
C1/3615:	A9 02      	LDA #$02
C1/3617:	85 41      	STA $41
C1/3619:	18         	CLC
C1/361A:	BF A3 CE C2	LDA $C2CEA3,X
C1/361E:	10 0C      	BPL $362C
C1/3620:	65 36      	ADC $36
C1/3622:	99 00 03   	STA $0300,Y
C1/3625:	A5 37      	LDA $37
C1/3627:	69 01      	ADC #$01
C1/3629:	4C 35 36   	JMP $3635

C1/362C:	65 36      	ADC $36
C1/362E:	99 00 03   	STA $0300,Y
C1/3631:	A5 37      	LDA $37
C1/3633:	69 00      	ADC #$00
C1/3635:	29 01      	AND #$01
C1/3637:	F0 11      	BEQ $364A
C1/3639:	86 3C      	STX $3C
C1/363B:	B9 7F A1   	LDA $A17F,Y
C1/363E:	AA         	TAX
C1/363F:	BD 00 05   	LDA $0500,X
C1/3642:	19 7F A7   	ORA $A77F,Y
C1/3645:	9D 00 05   	STA $0500,X
C1/3648:	A6 3C      	LDX $3C
C1/364A:	C8         	INY
C1/364B:	E8         	INX
C1/364C:	18         	CLC
C1/364D:	BF A3 CE C2	LDA $C2CEA3,X
C1/3651:	10 0B      	BPL $365E
C1/3653:	65 38      	ADC $38
C1/3655:	85 3E      	STA $3E
C1/3657:	A5 39      	LDA $39
C1/3659:	69 01      	ADC #$01
C1/365B:	4C 66 36   	JMP $3666

C1/365E:	65 38      	ADC $38
C1/3660:	85 3E      	STA $3E
C1/3662:	A5 39      	LDA $39
C1/3664:	69 00      	ADC #$00
C1/3666:	29 01      	AND #$01
C1/3668:	F0 09      	BEQ $3673
C1/366A:	A5 3E      	LDA $3E
C1/366C:	C9 E0      	CMP #$E0
C1/366E:	B0 0B      	BCS $367B
C1/3670:	4C 79 36   	JMP $3679

C1/3673:	A5 3E      	LDA $3E
C1/3675:	C9 97      	CMP #$97
C1/3677:	90 02      	BCC $367B
C1/3679:	A9 97      	LDA #$97
C1/367B:	99 00 03   	STA $0300,Y
C1/367E:	C8         	INY
C1/367F:	E8         	INX
C1/3680:	BF A3 CE C2	LDA $C2CEA3,X
C1/3684:	18         	CLC
C1/3685:	65 40      	ADC $40
C1/3687:	99 00 03   	STA $0300,Y
C1/368A:	C8         	INY
C1/368B:	E8         	INX
C1/368C:	BF A3 CE C2	LDA $C2CEA3,X
C1/3690:	05 42      	ORA $42
C1/3692:	99 00 03   	STA $0300,Y
C1/3695:	C8         	INY
C1/3696:	E8         	INX
C1/3697:	E6 71      	INC $71
C1/3699:	C6 41      	DEC $41
C1/369B:	F0 03      	BEQ $36A0
C1/369D:	4C 19 36   	JMP $3619

C1/36A0:	68         	PLA
C1/36A1:	60         	RTS

C1/36A2:	7B         	TDC
C1/36A3:	64 2C      	STZ $2C
C1/36A5:	AA         	TAX
C1/36A6:	48         	PHA
C1/36A7:	BD CE 61   	LDA $61CE,X
C1/36AA:	D0 2B      	BNE $36D7
C1/36AC:	BD C2 61   	LDA $61C2,X
C1/36AF:	3A         	DEC A
C1/36B0:	29 07      	AND #$07
C1/36B2:	F0 08      	BEQ $36BC
C1/36B4:	BD C3 61   	LDA $61C3,X
C1/36B7:	DD C4 61   	CMP $61C4,X
C1/36BA:	F0 1B      	BEQ $36D7
C1/36BC:	BD C3 61   	LDA $61C3,X
C1/36BF:	9D C4 61   	STA $61C4,X
C1/36C2:	C9 30      	CMP #$30
C1/36C4:	90 03      	BCC $36C9
C1/36C6:	38         	SEC
C1/36C7:	E9 30      	SBC #$30
C1/36C9:	85 37      	STA $37
C1/36CB:	BD CD 61   	LDA $61CD,X
C1/36CE:	85 3A      	STA $3A
C1/36D0:	64 3B      	STZ $3B
C1/36D2:	A5 2C      	LDA $2C
C1/36D4:	20 E2 36   	JSR $36E2
C1/36D7:	E6 2C      	INC $2C
C1/36D9:	68         	PLA
C1/36DA:	18         	CLC
C1/36DB:	69 20      	ADC #$20
C1/36DD:	C9 80      	CMP #$80
C1/36DF:	D0 C4      	BNE $36A5
C1/36E1:	60         	RTS

C1/36E2:	48         	PHA
C1/36E3:	85 3C      	STA $3C
C1/36E5:	A5 3A      	LDA $3A
C1/36E7:	D0 05      	BNE $36EE
C1/36E9:	20 47 37   	JSR $3747
C1/36EC:	80 0A      	BRA $36F8
C1/36EE:	4A         	LSR A
C1/36EF:	4A         	LSR A
C1/36F0:	4A         	LSR A
C1/36F1:	29 03      	AND #$03
C1/36F3:	0A         	ASL A
C1/36F4:	AA         	TAX
C1/36F5:	FC 3F 37   	JSR ($373F,X)  ; Pointer table

C1/36F8:	68         	PLA
C1/36F9:	29 03      	AND #$03
C1/36FB:	AA         	TAX
C1/36FC:	BD 2A 20   	LDA $202A,X
C1/36FF:	F0 3D      	BEQ $373E
C1/3701:	8A         	TXA
C1/3702:	0A         	ASL A
C1/3703:	AA         	TAX
C1/3704:	8B         	PHB
C1/3705:	A9 7F      	LDA #$7F
C1/3707:	48         	PHA
C1/3708:	AB         	PLB
C1/3709:	C2 20      	REP #$20
C1/370B:	BF D2 E9 7E	LDA $7EE9D2,X
C1/370F:	A8         	TAY
C1/3710:	BF 1A E4 C2	LDA $C2E41A,X
C1/3714:	AA         	TAX
C1/3715:	A9 08 00   	LDA #$0008
C1/3718:	85 3A      	STA $3A
C1/371A:	B9 00 00   	LDA $0000,Y
C1/371D:	9D 00 00   	STA $0000,X
C1/3720:	B9 10 00   	LDA $0010,Y
C1/3723:	9D 10 00   	STA $0010,X
C1/3726:	B9 20 00   	LDA $0020,Y
C1/3729:	9D 20 00   	STA $0020,X
C1/372C:	B9 30 00   	LDA $0030,Y
C1/372F:	9D 30 00   	STA $0030,X
C1/3732:	C8         	INY
C1/3733:	C8         	INY
C1/3734:	E8         	INX
C1/3735:	E8         	INX
C1/3736:	C6 3A      	DEC $3A
C1/3738:	D0 E0      	BNE $371A
C1/373A:	7B         	TDC
C1/373B:	E2 20      	SEP #$20           ; 8-bit A
C1/373D:	AB         	PLB
C1/373E:	60         	RTS

C1/373F:	9A37
C1/3741:	E737
C1/3743:	3438
C1/3745:	8138

C1/3747:	A5 3C      	LDA $3C
C1/3749:	0A         	ASL A
C1/374A:	AA         	TAX
C1/374B:	8B         	PHB
C1/374C:	64 36      	STZ $36
C1/374E:	C2 20      	REP #$20
C1/3750:	BF 1A E4 C2	LDA $C2E41A,X
C1/3754:	85 38      	STA $38
C1/3756:	A8         	TAY
C1/3757:	BF 22 E4 C2	LDA $C2E422,X
C1/375B:	18         	CLC
C1/375C:	65 36      	ADC $36
C1/375E:	AA         	TAX
C1/375F:	A9 3F 00   	LDA #$003F
C1/3762:	54 7F 7F   	MVN 7F 7F
C1/3765:	A5 38      	LDA $38
C1/3767:	18         	CLC
C1/3768:	69 00 02   	ADC #$0200
C1/376B:	A8         	TAY
C1/376C:	A9 3F 00   	LDA #$003F
C1/376F:	54 7F 7F   	MVN 7F 7F
C1/3772:	A5 38      	LDA $38
C1/3774:	18         	CLC
C1/3775:	69 40 00   	ADC #$0040
C1/3778:	A8         	TAY
C1/3779:	A9 3F 00   	LDA #$003F
C1/377C:	54 7F 7F   	MVN 7F 7F
C1/377F:	AF BA 64 7E	LDA $7E64BA
C1/3783:	29 FF 00   	AND #$00FF
C1/3786:	D0 0D      	BNE $3795
C1/3788:	A5 38      	LDA $38
C1/378A:	18         	CLC
C1/378B:	69 40 02   	ADC #$0240
C1/378E:	A8         	TAY
C1/378F:	A9 3F 00   	LDA #$003F
C1/3792:	54 7F 7F   	MVN $7F,$7F
C1/3795:	7B         	TDC
C1/3796:	E2 20      	SEP #$20           ; 8-bit A
C1/3798:	AB         	PLB
C1/3799:	60         	RTS

C1/379A:	A5 3C      	LDA $3C
C1/379C:	0A         	ASL A
C1/379D:	AA         	TAX
C1/379E:	8B         	PHB
C1/379F:	64 36      	STZ $36
C1/37A1:	C2 20      	REP #$20
C1/37A3:	BF 12 E4 C2	LDA $C2E412,X
C1/37A7:	85 3C      	STA $3C
C1/37A9:	BF 1A E4 C2	LDA $C2E41A,X
C1/37AD:	85 38      	STA $38
C1/37AF:	A8         	TAY
C1/37B0:	BF 22 E4 C2	LDA $C2E422,X
C1/37B4:	18         	CLC
C1/37B5:	65 36      	ADC $36
C1/37B7:	AA         	TAX
C1/37B8:	A9 3F 00   	LDA #$003F
C1/37BB:	54 7F 7F   	MVN 7F 7F
C1/37BE:	A5 38      	LDA $38
C1/37C0:	18         	CLC
C1/37C1:	69 00 02   	ADC #$0200
C1/37C4:	A8         	TAY
C1/37C5:	A9 3F 00   	LDA #$003F
C1/37C8:	54 7F 7F   	MVN 7F 7F
C1/37CB:	A5 38      	LDA $38
C1/37CD:	18         	CLC
C1/37CE:	69 40 00   	ADC #$0040
C1/37D1:	A8         	TAY
C1/37D2:	A9 3F 00   	LDA #$003F
C1/37D5:	54 7F 7F   	MVN 7F 7F
C1/37D8:	A5 38      	LDA $38
C1/37DA:	18         	CLC
C1/37DB:	69 40 02   	ADC #$0240
C1/37DE:	A8         	TAY
C1/37DF:	20 D2 38   	JSR $38D2
C1/37E2:	7B         	TDC
C1/37E3:	E2 20      	SEP #$20           ; 8-bit A
C1/37E5:	AB         	PLB
C1/37E6:	60         	RTS

C1/37E7:	A5 3C      	LDA $3C
C1/37E9:	0A         	ASL A
C1/37EA:	AA         	TAX
C1/37EB:	8B         	PHB
C1/37EC:	64 36      	STZ $36
C1/37EE:	C2 20      	REP #$20
C1/37F0:	BF 12 E4 C2	LDA $C2E412,X
C1/37F4:	85 3C      	STA $3C
C1/37F6:	BF 1A E4 C2	LDA $C2E41A,X
C1/37FA:	85 38      	STA $38
C1/37FC:	A8         	TAY
C1/37FD:	BF 22 E4 C2	LDA $C2E422,X
C1/3801:	18         	CLC
C1/3802:	65 36      	ADC $36
C1/3804:	AA         	TAX
C1/3805:	A9 3F 00   	LDA #$003F
C1/3808:	54 7F 7F   	MVN 7F 7F
C1/380B:	A5 38      	LDA $38
C1/380D:	18         	CLC
C1/380E:	69 00 02   	ADC #$0200
C1/3811:	A8         	TAY
C1/3812:	A9 3F 00   	LDA #$003F
C1/3815:	54 7F 7F   	MVN 7F 7F
C1/3818:	A5 38      	LDA $38
C1/381A:	18         	CLC
C1/381B:	69 40 00   	ADC #$0040
C1/381E:	A8         	TAY
C1/381F:	20 D2 38   	JSR $38D2
C1/3822:	A5 38      	LDA $38
C1/3824:	18         	CLC
C1/3825:	69 40 02   	ADC #$0240
C1/3828:	A8         	TAY
C1/3829:	A9 3F 00   	LDA #$003F
C1/382C:	54 7F 7F   	MVN 7F 7F
C1/382F:	7B         	TDC
C1/3830:	E2 20      	SEP #$20           ; 8-bit A
C1/3832:	AB         	PLB
C1/3833:	60         	RTS

C1/3834:	A5 3C      	LDA $3C
C1/3836:	0A         	ASL A
C1/3837:	AA         	TAX
C1/3838:	8B         	PHB
C1/3839:	64 36      	STZ $36
C1/383B:	C2 20      	REP #$20
C1/383D:	BF 12 E4 C2	LDA $C2E412,X
C1/3841:	85 3C      	STA $3C
C1/3843:	BF 1A E4 C2	LDA $C2E41A,X
C1/3847:	85 38      	STA $38
C1/3849:	A8         	TAY
C1/384A:	BF 22 E4 C2	LDA $C2E422,X
C1/384E:	18         	CLC
C1/384F:	65 36      	ADC $36
C1/3851:	AA         	TAX
C1/3852:	A9 3F 00   	LDA #$003F
C1/3855:	54 7F 7F   	MVN 7F 7F
C1/3858:	A5 38      	LDA $38
C1/385A:	18         	CLC
C1/385B:	69 00 02   	ADC #$0200
C1/385E:	A8         	TAY
C1/385F:	20 D2 38   	JSR $38D2
C1/3862:	A5 38      	LDA $38
C1/3864:	18         	CLC
C1/3865:	69 40 00   	ADC #$0040
C1/3868:	A8         	TAY
C1/3869:	A9 3F 00   	LDA #$003F
C1/386C:	54 7F 7F   	MVN 7F 7F
C1/386F:	A5 38      	LDA $38
C1/3871:	18         	CLC
C1/3872:	69 40 02   	ADC #$0240
C1/3875:	A8         	TAY
C1/3876:	A9 3F 00   	LDA #$003F
C1/3879:	54 7F 7F   	MVN 7F 7F
C1/387C:	7B         	TDC
C1/387D:	E2 20      	SEP #$20           ; 8-bit A
C1/387F:	AB         	PLB
C1/3880:	60         	RTS

C1/3881:	A5 3C      	LDA $3C
C1/3883:	0A         	ASL A
C1/3884:	AA         	TAX
C1/3885:	8B         	PHB
C1/3886:	A9 7F      	LDA #$7F
C1/3888:	48         	PHA
C1/3889:	AB         	PLB
C1/388A:	64 36      	STZ $36
C1/388C:	C2 20      	REP #$20
C1/388E:	BF 12 E4 C2	LDA $C2E412,X
C1/3892:	85 3C      	STA $3C
C1/3894:	BF 1A E4 C2	LDA $C2E41A,X
C1/3898:	85 38      	STA $38
C1/389A:	A8         	TAY
C1/389B:	BF 22 E4 C2	LDA $C2E422,X
C1/389F:	18         	CLC
C1/38A0:	65 36      	ADC $36
C1/38A2:	AA         	TAX
C1/38A3:	20 D2 38   	JSR $38D2
C1/38A6:	A5 38      	LDA $38
C1/38A8:	18         	CLC
C1/38A9:	69 00 02   	ADC #$0200
C1/38AC:	A8         	TAY
C1/38AD:	A9 3F 00   	LDA #$003F
C1/38B0:	54 7F 7F   	MVN 7F 7F
C1/38B3:	A5 38      	LDA $38
C1/38B5:	18         	CLC
C1/38B6:	69 40 00   	ADC #$0040
C1/38B9:	A8         	TAY
C1/38BA:	A9 3F 00   	LDA #$003F
C1/38BD:	54 7F 7F   	MVN 7F 7F
C1/38C0:	A5 38      	LDA $38
C1/38C2:	18         	CLC
C1/38C3:	69 40 02   	ADC #$0240
C1/38C6:	A8         	TAY
C1/38C7:	A9 3F 00   	LDA #$003F
C1/38CA:	54 7F 7F   	MVN 7F 7F
C1/38CD:	7B         	TDC
C1/38CE:	E2 20      	SEP #$20           ; 8-bit A
C1/38D0:	AB         	PLB
C1/38D1:	60         	RTS

C1/38D2:	DA         	PHX
C1/38D3:	A5 3A      	LDA $3A
C1/38D5:	29 07 00   	AND #$0007
C1/38D8:	85 3A      	STA $3A
C1/38DA:	A9 08 00   	LDA #$0008
C1/38DD:	38         	SEC
C1/38DE:	E5 3A      	SBC $3A
C1/38E0:	85 3E      	STA $3E
C1/38E2:	BD 00 00   	LDA $0000,X
C1/38E5:	99 00 00   	STA $0000,Y
C1/38E8:	BD 10 00   	LDA $0010,X
C1/38EB:	99 10 00   	STA $0010,Y
C1/38EE:	BD 20 00   	LDA $0020,X
C1/38F1:	99 20 00   	STA $0020,Y
C1/38F4:	BD 30 00   	LDA $0030,X
C1/38F7:	99 30 00   	STA $0030,Y
C1/38FA:	E8         	INX
C1/38FB:	E8         	INX
C1/38FC:	C8         	INY
C1/38FD:	C8         	INY
C1/38FE:	C6 3E      	DEC $3E
C1/3900:	D0 E0      	BNE $38E2
C1/3902:	A5 3A      	LDA $3A
C1/3904:	F0 25      	BEQ $392B
C1/3906:	8A         	TXA
C1/3907:	18         	CLC
C1/3908:	65 3C      	ADC $3C
C1/390A:	AA         	TAX
C1/390B:	BD 00 00   	LDA $0000,X
C1/390E:	99 00 00   	STA $0000,Y
C1/3911:	BD 10 00   	LDA $0010,X
C1/3914:	99 10 00   	STA $0010,Y
C1/3917:	BD 20 00   	LDA $0020,X
C1/391A:	99 20 00   	STA $0020,Y
C1/391D:	BD 30 00   	LDA $0030,X
C1/3920:	99 30 00   	STA $0030,Y
C1/3923:	E8         	INX
C1/3924:	E8         	INX
C1/3925:	C8         	INY
C1/3926:	C8         	INY
C1/3927:	C6 3A      	DEC $3A
C1/3929:	D0 E0      	BNE $390B

C1/392B:	68         	PLA
C1/392C:	18         	CLC
C1/392D:	65 3C      	ADC $3C
C1/392F:	18         	CLC
C1/3930:	69 40 00   	ADC #$0040
C1/3933:	AA         	TAX
C1/3934:	60         	RTS

C1/3935:	AD D2 88   	LDA $88D2
C1/3938:	A8         	TAY
C1/3939:	0A         	ASL A
C1/393A:	AA         	TAX
C1/393B:	86 2E      	STX $2E
C1/393D:	B9 B9 88   	LDA $88B9,Y
C1/3940:	85 2C      	STA $2C
C1/3942:	BD DB 80   	LDA $80DB,X
C1/3945:	1D DC 80   	ORA $80DC,X
C1/3948:	3D E8 80   	AND $80E8,X
C1/394B:	85 3D      	STA $3D
C1/394D:	64 3C      	STZ $3C
C1/394F:	A9 C2      	LDA #$C2
C1/3951:	85 38      	STA $38
C1/3953:	BD F3 80   	LDA $80F3,X
C1/3956:	5D 7E 61   	EOR $617E,X
C1/3959:	29 03      	AND #$03
C1/395B:	0A         	ASL A
C1/395C:	0A         	ASL A
C1/395D:	AA         	TAX
C1/395E:	C2 20      	REP #$20
C1/3960:	A5 3C      	LDA $3C
C1/3962:	5F 64 C4 C2	EOR $C2C464,X
C1/3966:	85 3C      	STA $3C
C1/3968:	BF 66 C4 C2	LDA $C2C466,X
C1/396C:	85 36      	STA $36
C1/396E:	A4 2E      	LDY $2E
C1/3970:	BB         	TYX
C1/3971:	B7 36      	LDA [$36],Y
C1/3973:	A8         	TAY
C1/3974:	BD C3 80   	LDA $80C3,X
C1/3977:	85 38      	STA $38
C1/3979:	BD CF 80   	LDA $80CF,X
C1/397C:	85 3A      	STA $3A
C1/397E:	A5 60      	LDA $60
C1/3980:	29 FF 00   	AND #$00FF
C1/3983:	0A         	ASL A
C1/3984:	0A         	ASL A
C1/3985:	AA         	TAX
C1/3986:	7B         	TDC
C1/3987:	E2 20      	SEP #$20           ; 8-bit A
C1/3989:	18         	CLC
C1/398A:	B9 00 00   	LDA $0000,Y
C1/398D:	10 10      	BPL $399F
C1/398F:	65 38      	ADC $38
C1/3991:	9D 00 03   	STA $0300,X
C1/3994:	A5 39      	LDA $39
C1/3996:	69 01      	ADC #$01
C1/3998:	29 01      	AND #$01
C1/399A:	D0 24      	BNE $39C0
C1/399C:	4C AC 39   	JMP $39AC

C1/399F:	65 38      	ADC $38
C1/39A1:	9D 00 03   	STA $0300,X
C1/39A4:	A5 39      	LDA $39
C1/39A6:	69 00      	ADC #$00
C1/39A8:	29 01      	AND #$01
C1/39AA:	D0 14      	BNE $39C0
C1/39AC:	84 44      	STY $44
C1/39AE:	BD 7F A1   	LDA $A17F,X
C1/39B1:	A8         	TAY
C1/39B2:	B9 00 05   	LDA $0500,Y
C1/39B5:	1D 7F A3   	ORA $A37F,X
C1/39B8:	99 00 05   	STA $0500,Y
C1/39BB:	A4 44      	LDY $44
C1/39BD:	4C D1 39   	JMP $39D1

C1/39C0:	84 44      	STY $44
C1/39C2:	BD 7F A1   	LDA $A17F,X
C1/39C5:	A8         	TAY
C1/39C6:	B9 00 05   	LDA $0500,Y
C1/39C9:	1D 7F A5   	ORA $A57F,X
C1/39CC:	99 00 05   	STA $0500,Y
C1/39CF:	A4 44      	LDY $44
C1/39D1:	C8         	INY
C1/39D2:	E8         	INX
C1/39D3:	B9 00 00   	LDA $0000,Y
C1/39D6:	10 10      	BPL $39E8
C1/39D8:	18         	CLC
C1/39D9:	65 3A      	ADC $3A
C1/39DB:	85 3E      	STA $3E
C1/39DD:	A5 3B      	LDA $3B
C1/39DF:	69 01      	ADC #$01
C1/39E1:	29 01      	AND #$01
C1/39E3:	F0 19      	BEQ $39FE
C1/39E5:	4C F5 39   	JMP $39F5

C1/39E8:	18         	CLC
C1/39E9:	65 3A      	ADC $3A
C1/39EB:	85 3E      	STA $3E
C1/39ED:	A5 3B      	LDA $3B
C1/39EF:	69 00      	ADC #$00
C1/39F1:	29 01      	AND #$01
C1/39F3:	F0 09      	BEQ $39FE
C1/39F5:	A5 3E      	LDA $3E
C1/39F7:	C9 E0      	CMP #$E0
C1/39F9:	B0 0B      	BCS $3A06
C1/39FB:	4C 04 3A   	JMP $3A04

C1/39FE:	A5 3E      	LDA $3E
C1/3A00:	C9 97      	CMP #$97
C1/3A02:	90 02      	BCC $3A06
C1/3A04:	A9 97      	LDA #$97
C1/3A06:	9D 00 03   	STA $0300,X
C1/3A09:	C8         	INY
C1/3A0A:	E8         	INX
C1/3A0B:	C2 20      	REP #$20
C1/3A0D:	B9 00 00   	LDA $0000,Y
C1/3A10:	05 3C      	ORA $3C
C1/3A12:	9D 00 03   	STA $0300,X
C1/3A15:	7B         	TDC
C1/3A16:	E2 20      	SEP #$20           ; 8-bit A
C1/3A18:	C8         	INY
C1/3A19:	C8         	INY
C1/3A1A:	E8         	INX
C1/3A1B:	E8         	INX
C1/3A1C:	E6 60      	INC $60
C1/3A1E:	C6 2C      	DEC $2C
C1/3A20:	F0 03      	BEQ $3A25
C1/3A22:	4C 89 39   	JMP $3989

C1/3A25:	60         	RTS

C1/3A26:	AE C9 61   	LDX $61C9
C1/3A29:	EC CB 61   	CPX $61CB
C1/3A2C:	F0 10      	BEQ $3A3E
C1/3A2E:	8E CB 61   	STX $61CB
C1/3A31:	86 36      	STX $36
C1/3A33:	AD B9 61   	LDA $61B9
C1/3A36:	85 2C      	STA $2C
C1/3A38:	20 87 3A   	JSR $3A87
C1/3A3B:	8E B7 61   	STX $61B7
C1/3A3E:	AE E9 61   	LDX $61E9
C1/3A41:	EC EB 61   	CPX $61EB
C1/3A44:	F0 10      	BEQ $3A56
C1/3A46:	8E EB 61   	STX $61EB
C1/3A49:	86 36      	STX $36
C1/3A4B:	AD D9 61   	LDA $61D9
C1/3A4E:	85 2C      	STA $2C
C1/3A50:	20 87 3A   	JSR $3A87
C1/3A53:	8E D7 61   	STX $61D7
C1/3A56:	AE 09 62   	LDX $6209
C1/3A59:	EC 0B 62   	CPX $620B
C1/3A5C:	F0 10      	BEQ $3A6E
C1/3A5E:	8E 0B 62   	STX $620B
C1/3A61:	86 36      	STX $36
C1/3A63:	AD F9 61   	LDA $61F9
C1/3A66:	85 2C      	STA $2C
C1/3A68:	20 87 3A   	JSR $3A87
C1/3A6B:	8E F7 61   	STX $61F7
C1/3A6E:	AE 29 62   	LDX $6229
C1/3A71:	EC 2B 62   	CPX $622B
C1/3A74:	F0 10      	BEQ $3A86
C1/3A76:	8E 2B 62   	STX $622B
C1/3A79:	86 36      	STX $36
C1/3A7B:	AD 19 62   	LDA $6219
C1/3A7E:	85 2C      	STA $2C
C1/3A80:	20 87 3A   	JSR $3A87
C1/3A83:	8E 17 62   	STX $6217
C1/3A86:	60         	RTS

C1/3A87:	64 2D      	STZ $2D
C1/3A89:	A5 2C      	LDA $2C
C1/3A8B:	18         	CLC
C1/3A8C:	69 68      	ADC #$68
C1/3A8E:	85 2C      	STA $2C
C1/3A90:	C2 20      	REP #$20
C1/3A92:	A5 36      	LDA $36
C1/3A94:	29 FF 01   	AND #$01FF
C1/3A97:	38         	SEC
C1/3A98:	E9 00 01   	SBC #$0100
C1/3A9B:	85 2E      	STA $2E
C1/3A9D:	A5 2E      	LDA $2E
C1/3A9F:	10 0F      	BPL $3AB0
C1/3AA1:	49 FF FF   	EOR #$FFFF
C1/3AA4:	85 2E      	STA $2E
C1/3AA6:	20 67 18   	JSR $1867
C1/3AA9:	A5 31      	LDA $31
C1/3AAB:	49 FF FF   	EOR #$FFFF
C1/3AAE:	80 05      	BRA $3AB5
C1/3AB0:	20 67 18   	JSR $1867
C1/3AB3:	A5 31      	LDA $31
C1/3AB5:	18         	CLC
C1/3AB6:	69 78 00   	ADC #$0078
C1/3AB9:	AA         	TAX
C1/3ABA:	7B         	TDC
C1/3ABB:	E2 20      	SEP #$20           ; 8-bit A
C1/3ABD:	60         	RTS

C1/3ABE:	AD B8 EC   	LDA $ECB8
C1/3AC1:	C9 2C      	CMP #$2C
C1/3AC3:	D0 04      	BNE $3AC9
C1/3AC5:	A9 04      	LDA #$04
C1/3AC7:	80 03      	BRA $3ACC
C1/3AC9:	AD 1F 20   	LDA $201F
C1/3ACC:	0A         	ASL A
C1/3ACD:	0A         	ASL A
C1/3ACE:	AA         	TAX
C1/3ACF:	BF 03 CF C2	LDA $C2CF03,X
C1/3AD3:	A8         	TAY
C1/3AD4:	8C B9 61   	STY $61B9
C1/3AD7:	BF 04 CF C2	LDA $C2CF04,X
C1/3ADB:	A8         	TAY
C1/3ADC:	8C D9 61   	STY $61D9
C1/3ADF:	BF 05 CF C2	LDA $C2CF05,X
C1/3AE3:	A8         	TAY
C1/3AE4:	8C F9 61   	STY $61F9
C1/3AE7:	BF 06 CF C2	LDA $C2CF06,X
C1/3AEB:	A8         	TAY
C1/3AEC:	8C 19 62   	STY $6219
C1/3AEF:	BF 3E E4 C2	LDA $C2E43E,X
C1/3AF3:	8D BE 61   	STA $61BE
C1/3AF6:	BF 3F E4 C2	LDA $C2E43F,X
C1/3AFA:	8D DE 61   	STA $61DE
C1/3AFD:	BF 40 E4 C2	LDA $C2E440,X
C1/3B01:	8D FE 61   	STA $61FE
C1/3B04:	BF 41 E4 C2	LDA $C2E441,X
C1/3B08:	8D 1E 62   	STA $621E
C1/3B0B:	22 A3 AF C2	JSL $C2AFA3
C1/3B0F:	64 10      	STZ $10
C1/3B11:	AD AE 2E   	LDA $2EAE
C1/3B14:	8D 6C 7B   	STA $7B6C
C1/3B17:	A2 00 00   	LDX #$0000
C1/3B1A:	20 43 3D   	JSR $3D43
C1/3B1D:	A9 01      	LDA #$01
C1/3B1F:	85 10      	STA $10
C1/3B21:	AD CE 2E   	LDA $2ECE
C1/3B24:	8D 6D 7B   	STA $7B6D
C1/3B27:	A2 00 20   	LDX #$2000
C1/3B2A:	20 43 3D   	JSR $3D43
C1/3B2D:	A9 02      	LDA #$02
C1/3B2F:	85 10      	STA $10
C1/3B31:	AD EE 2E   	LDA $2EEE
C1/3B34:	8D 6E 7B   	STA $7B6E
C1/3B37:	A2 00 40   	LDX #$4000
C1/3B3A:	20 43 3D   	JSR $3D43
C1/3B3D:	A9 03      	LDA #$03
C1/3B3F:	85 10      	STA $10
C1/3B41:	AD 0E 2F   	LDA $2F0E
C1/3B44:	8D 6F 7B   	STA $7B6F
C1/3B47:	A2 00 60   	LDX #$6000
C1/3B4A:	20 43 3D   	JSR $3D43
C1/3B4D:	A9 D0      	LDA #$D0
C1/3B4F:	85 1E      	STA $1E
C1/3B51:	AD 1F 20   	LDA $201F
C1/3B54:	0A         	ASL A
C1/3B55:	0A         	ASL A
C1/3B56:	AA         	TAX
C1/3B57:	BF 4E E4 C2	LDA $C2E44E,X
C1/3B5B:	8D 10 7B   	STA $7B10
C1/3B5E:	BF 4F E4 C2	LDA $C2E44F,X
C1/3B62:	8D 11 7B   	STA $7B11
C1/3B65:	BF 50 E4 C2	LDA $C2E450,X
C1/3B69:	8D 12 7B   	STA $7B12
C1/3B6C:	BF 51 E4 C2	LDA $C2E451,X
C1/3B70:	8D 13 7B   	STA $7B13
C1/3B73:	AD 1F 20   	LDA $201F
C1/3B76:	0A         	ASL A
C1/3B77:	0A         	ASL A
C1/3B78:	0A         	ASL A
C1/3B79:	AA         	TAX
C1/3B7A:	C2 20      	REP #$20
C1/3B7C:	BF 17 CF C2	LDA $C2CF17,X
C1/3B80:	8D C9 61   	STA $61C9
C1/3B83:	1A         	INC A
C1/3B84:	8D CB 61   	STA $61CB
C1/3B87:	AD C5 2E   	LDA $2EC5
C1/3B8A:	29 FF 00   	AND #$00FF
C1/3B8D:	F0 14      	BEQ $3BA3
C1/3B8F:	E2 20      	SEP #$20           ; 8-bit A
C1/3B91:	A9 01      	LDA #$01
C1/3B93:	8D C5 2E   	STA $2EC5
C1/3B96:	C2 20      	REP #$20
C1/3B98:	AD C9 61   	LDA $61C9
C1/3B9B:	18         	CLC
C1/3B9C:	7F E3 CE C2	ADC $C2CEE3,X
C1/3BA0:	8D C9 61   	STA $61C9
C1/3BA3:	BF 19 CF C2	LDA $C2CF19,X
C1/3BA7:	8D E9 61   	STA $61E9
C1/3BAA:	1A         	INC A
C1/3BAB:	8D EB 61   	STA $61EB
C1/3BAE:	AD E5 2E   	LDA $2EE5
C1/3BB1:	29 FF 00   	AND #$00FF
C1/3BB4:	F0 14      	BEQ $3BCA
C1/3BB6:	E2 20      	SEP #$20           ; 8-bit A
C1/3BB8:	A9 01      	LDA #$01
C1/3BBA:	8D E5 2E   	STA $2EE5
C1/3BBD:	C2 20      	REP #$20
C1/3BBF:	AD E9 61   	LDA $61E9
C1/3BC2:	18         	CLC
C1/3BC3:	7F E5 CE C2	ADC $C2CEE5,X
C1/3BC7:	8D E9 61   	STA $61E9
C1/3BCA:	BF 1B CF C2	LDA $C2CF1B,X
C1/3BCE:	8D 09 62   	STA $6209
C1/3BD1:	1A         	INC A
C1/3BD2:	8D 0B 62   	STA $620B
C1/3BD5:	AD 05 2F   	LDA $2F05
C1/3BD8:	29 FF 00   	AND #$00FF
C1/3BDB:	F0 14      	BEQ $3BF1
C1/3BDD:	E2 20      	SEP #$20           ; 8-bit A
C1/3BDF:	A9 01      	LDA #$01
C1/3BE1:	8D 05 2F   	STA $2F05
C1/3BE4:	C2 20      	REP #$20
C1/3BE6:	AD 09 62   	LDA $6209
C1/3BE9:	18         	CLC
C1/3BEA:	7F E7 CE C2	ADC $C2CEE7,X
C1/3BEE:	8D 09 62   	STA $6209
C1/3BF1:	BF 1D CF C2	LDA $C2CF1D,X
C1/3BF5:	8D 29 62   	STA $6229
C1/3BF8:	1A         	INC A
C1/3BF9:	8D 2B 62   	STA $622B
C1/3BFC:	AD 25 2F   	LDA $2F25
C1/3BFF:	29 FF 00   	AND #$00FF
C1/3C02:	F0 14      	BEQ $3C18
C1/3C04:	E2 20      	SEP #$20           ; 8-bit A
C1/3C06:	A9 01      	LDA #$01
C1/3C08:	8D 25 2F   	STA $2F25
C1/3C0B:	C2 20      	REP #$20
C1/3C0D:	AD 29 62   	LDA $6229
C1/3C10:	18         	CLC
C1/3C11:	7F E9 CE C2	ADC $C2CEE9,X
C1/3C15:	8D 29 62   	STA $6229
C1/3C18:	9C D3 61   	STZ $61D3
C1/3C1B:	9C F3 61   	STZ $61F3
C1/3C1E:	9C 13 62   	STZ $6213
C1/3C21:	9C 33 62   	STZ $6233
C1/3C24:	7B         	TDC
C1/3C25:	E2 20      	SEP #$20           ; 8-bit A
C1/3C27:	AE E0 11   	LDX $11E0
C1/3C2A:	E0 3E 02   	CPX #$023E
C1/3C2D:	F0 05      	BEQ $3C34
C1/3C2F:	E0 3F 02   	CPX #$023F
C1/3C32:	D0 06      	BNE $3C3A
C1/3C34:	A0 68 00   	LDY #$0068
C1/3C37:	8C B9 61   	STY $61B9
C1/3C3A:	7B         	TDC
C1/3C3B:	AA         	TAX
C1/3C3C:	A8         	TAY
C1/3C3D:	C2 20      	REP #$20
C1/3C3F:	BD 46 62   	LDA $6246,X
C1/3C42:	C9 FF FF   	CMP #$FFFF
C1/3C45:	F0 0D      	BEQ $3C54
C1/3C47:	18         	CLC
C1/3C48:	69 80 00   	ADC #$0080
C1/3C4B:	99 C9 61   	STA $61C9,Y
C1/3C4E:	BD 48 62   	LDA $6248,X
C1/3C51:	99 B9 61   	STA $61B9,Y
C1/3C54:	E8         	INX
C1/3C55:	E8         	INX
C1/3C56:	E8         	INX
C1/3C57:	E8         	INX
C1/3C58:	98         	TYA
C1/3C59:	18         	CLC
C1/3C5A:	69 20 00   	ADC #$0020
C1/3C5D:	A8         	TAY
C1/3C5E:	C0 80 00   	CPY #$0080
C1/3C61:	D0 DC      	BNE $3C3F
C1/3C63:	7B         	TDC
C1/3C64:	E2 20      	SEP #$20           ; 8-bit A
C1/3C66:	A9 08      	LDA #$08
C1/3C68:	8D BC 61   	STA $61BC
C1/3C6B:	A9 0A      	LDA #$0A
C1/3C6D:	8D DC 61   	STA $61DC
C1/3C70:	A9 0C      	LDA #$0C
C1/3C72:	8D FC 61   	STA $61FC
C1/3C75:	A9 0E      	LDA #$0E
C1/3C77:	8D 1C 62   	STA $621C
C1/3C7A:	A9 30      	LDA #$30
C1/3C7C:	8D BD 61   	STA $61BD
C1/3C7F:	8D DD 61   	STA $61DD
C1/3C82:	8D FD 61   	STA $61FD
C1/3C85:	8D 1D 62   	STA $621D
C1/3C88:	A9 06      	LDA #$06
C1/3C8A:	8D BF 61   	STA $61BF
C1/3C8D:	8D DF 61   	STA $61DF
C1/3C90:	8D FF 61   	STA $61FF
C1/3C93:	8D 1F 62   	STA $621F
C1/3C96:	A6 00      	LDX $00
C1/3C98:	8E C0 61   	STX $61C0
C1/3C9B:	8E E0 61   	STX $61E0
C1/3C9E:	8E 00 62   	STX $6200
C1/3CA1:	8E 20 62   	STX $6220
C1/3CA4:	7B         	TDC
C1/3CA5:	8D 98 00   	STA $0098
C1/3CA8:	8D C2 61   	STA $61C2
C1/3CAB:	1A         	INC A
C1/3CAC:	1A         	INC A
C1/3CAD:	8D E2 61   	STA $61E2
C1/3CB0:	1A         	INC A
C1/3CB1:	1A         	INC A
C1/3CB2:	8D 02 62   	STA $6202
C1/3CB5:	1A         	INC A
C1/3CB6:	1A         	INC A
C1/3CB7:	8D 22 62   	STA $6222
C1/3CBA:	7B         	TDC
C1/3CBB:	AA         	TAX
C1/3CBC:	A8         	TAY
C1/3CBD:	BD AE 2E   	LDA $2EAE,X
C1/3CC0:	C9 FF      	CMP #$FF
C1/3CC2:	F0 0D      	BEQ $3CD1
C1/3CC4:	C8         	INY
C1/3CC5:	8A         	TXA
C1/3CC6:	18         	CLC
C1/3CC7:	69 20      	ADC #$20
C1/3CC9:	AA         	TAX
C1/3CCA:	E0 80 00   	CPX #$0080
C1/3CCD:	D0 EE      	BNE $3CBD
C1/3CCF:	7B         	TDC
C1/3CD0:	A8         	TAY
C1/3CD1:	BB         	TYX
C1/3CD2:	BF 5E E4 C2	LDA $C2E45E,X
C1/3CD6:	8D D4 64   	STA $64D4
C1/3CD9:	8A         	TXA
C1/3CDA:	0A         	ASL A
C1/3CDB:	0A         	ASL A
C1/3CDC:	0A         	ASL A
C1/3CDD:	0A         	ASL A
C1/3CDE:	0A         	ASL A
C1/3CDF:	A8         	TAY
C1/3CE0:	AD BA 64   	LDA $64BA
C1/3CE3:	F0 16      	BEQ $3CFB
C1/3CE5:	A9 18      	LDA #$18
C1/3CE7:	85 10      	STA $10
C1/3CE9:	7B         	TDC
C1/3CEA:	AA         	TAX
C1/3CEB:	BF D4 CF C2	LDA $C2CFD4,X
C1/3CEF:	99 AD 81   	STA $81AD,Y
C1/3CF2:	99 80 7F   	STA $7F80,Y
C1/3CF5:	E8         	INX
C1/3CF6:	C8         	INY
C1/3CF7:	C6 10      	DEC $10
C1/3CF9:	D0 F0      	BNE $3CEB
C1/3CFB:	AD 47 2F   	LDA $2F47
C1/3CFE:	85 10      	STA $10
C1/3D00:	7B         	TDC
C1/3D01:	AA         	TAX
C1/3D02:	A8         	TAY
C1/3D03:	46 10      	LSR $10
C1/3D05:	90 10      	BCC $3D17
C1/3D07:	BD 10 7B   	LDA $7B10,X
C1/3D0A:	49 01      	EOR #$01
C1/3D0C:	9D 10 7B   	STA $7B10,X
C1/3D0F:	B9 BE 61   	LDA $61BE,Y
C1/3D12:	49 40      	EOR #$40
C1/3D14:	99 BE 61   	STA $61BE,Y
C1/3D17:	98         	TYA
C1/3D18:	18         	CLC
C1/3D19:	69 20      	ADC #$20
C1/3D1B:	A8         	TAY
C1/3D1C:	E8         	INX
C1/3D1D:	E0 04 00   	CPX #$0004
C1/3D20:	D0 E1      	BNE $3D03
C1/3D22:	60         	RTS

C1/3D23:	20 BE 3A   	JSR $3ABE
C1/3D26:	60         	RTS

C1/3D27:	20 BE 3A   	JSR $3ABE
C1/3D2A:	20 26 3A   	JSR $3A26
C1/3D2D:	A9 04      	LDA #$04
C1/3D2F:	CE 98 00   	DEC $0098
C1/3D32:	48         	PHA
C1/3D33:	20 D3 2D   	JSR $2DD3
C1/3D36:	20 79 2F   	JSR $2F79
C1/3D39:	EE 98 00   	INC $0098
C1/3D3C:	E6 0E      	INC $0E
C1/3D3E:	68         	PLA
C1/3D3F:	3A         	DEC A
C1/3D40:	D0 F0      	BNE $3D32
C1/3D42:	60         	RTS

C1/3D43:	C9 FF      	CMP #$FF
C1/3D45:	D0 01      	BNE $3D48
C1/3D47:	60         	RTS

C1/3D48:	85 14      	STA $14
C1/3D4A:	86 1C      	STX $1C
C1/3D4C:	AA         	TAX
C1/3D4D:	A5 10      	LDA $10
C1/3D4F:	48         	PHA
C1/3D50:	48         	PHA
C1/3D51:	DA         	PHX
C1/3D52:	A6 1C      	LDX $1C
C1/3D54:	86 1A      	STX $1A
C1/3D56:	A5 14      	LDA $14
C1/3D58:	0A         	ASL A
C1/3D59:	18         	CLC
C1/3D5A:	65 14      	ADC $14
C1/3D5C:	AA         	TAX
C1/3D5D:	A9 C2      	LDA #$C2
C1/3D5F:	85 16      	STA $16
C1/3D61:	8B         	PHB
C1/3D62:	A9 7F      	LDA #$7F
C1/3D64:	48         	PHA
C1/3D65:	AB         	PLB
C1/3D66:	BF 45 CE C2	LDA $C2CE45,X
C1/3D6A:	85 12      	STA $12
C1/3D6C:	C2 20      	REP #$20
C1/3D6E:	BF 43 CE C2	LDA $C2CE43,X
C1/3D72:	85 10      	STA $10
C1/3D74:	A9 45 C7   	LDA #$C745
C1/3D77:	85 14      	STA $14
C1/3D79:	A6 1A      	LDX $1A
C1/3D7B:	A9 00 01   	LDA #$0100
C1/3D7E:	85 1A      	STA $1A
C1/3D80:	A9 10 00   	LDA #$0010
C1/3D83:	85 18      	STA $18
C1/3D85:	A7 14      	LDA [$14]
C1/3D87:	C9 FF FF   	CMP #$FFFF
C1/3D8A:	D0 0C      	BNE $3D98
C1/3D8C:	7B         	TDC
C1/3D8D:	9D 00 00   	STA $0000,X
C1/3D90:	E8         	INX
C1/3D91:	E8         	INX
C1/3D92:	C6 18      	DEC $18
C1/3D94:	D0 F7      	BNE $3D8D
C1/3D96:	80 0E      	BRA $3DA6
C1/3D98:	A8         	TAY
C1/3D99:	B7 10      	LDA [$10],Y
C1/3D9B:	9D 00 00   	STA $0000,X
C1/3D9E:	E8         	INX
C1/3D9F:	E8         	INX
C1/3DA0:	C8         	INY
C1/3DA1:	C8         	INY
C1/3DA2:	C6 18      	DEC $18
C1/3DA4:	D0 F3      	BNE $3D99
C1/3DA6:	E6 14      	INC $14
C1/3DA8:	E6 14      	INC $14
C1/3DAA:	C6 1A      	DEC $1A
C1/3DAC:	D0 D2      	BNE $3D80
C1/3DAE:	7B         	TDC
C1/3DAF:	E2 20      	SEP #$20           ; 8-bit A
C1/3DB1:	A6 1C      	LDX $1C
C1/3DB3:	A9 40      	LDA #$40
C1/3DB5:	85 12      	STA $12
C1/3DB7:	BD C0 03   	LDA $03C0,X
C1/3DBA:	0A         	ASL A
C1/3DBB:	66 10      	ROR $10
C1/3DBD:	0A         	ASL A
C1/3DBE:	66 10      	ROR $10
C1/3DC0:	0A         	ASL A
C1/3DC1:	66 10      	ROR $10
C1/3DC3:	0A         	ASL A
C1/3DC4:	66 10      	ROR $10
C1/3DC6:	0A         	ASL A
C1/3DC7:	66 10      	ROR $10
C1/3DC9:	0A         	ASL A
C1/3DCA:	66 10      	ROR $10
C1/3DCC:	0A         	ASL A
C1/3DCD:	66 10      	ROR $10
C1/3DCF:	0A         	ASL A
C1/3DD0:	66 10      	ROR $10
C1/3DD2:	A5 10      	LDA $10
C1/3DD4:	9D C0 03   	STA $03C0,X
C1/3DD7:	BD C0 10   	LDA $10C0,X
C1/3DDA:	0A         	ASL A
C1/3DDB:	66 10      	ROR $10
C1/3DDD:	0A         	ASL A
C1/3DDE:	66 10      	ROR $10
C1/3DE0:	0A         	ASL A
C1/3DE1:	66 10      	ROR $10
C1/3DE3:	0A         	ASL A
C1/3DE4:	66 10      	ROR $10
C1/3DE6:	0A         	ASL A
C1/3DE7:	66 10      	ROR $10
C1/3DE9:	0A         	ASL A
C1/3DEA:	66 10      	ROR $10
C1/3DEC:	0A         	ASL A
C1/3DED:	66 10      	ROR $10
C1/3DEF:	0A         	ASL A
C1/3DF0:	66 10      	ROR $10
C1/3DF2:	A5 10      	LDA $10
C1/3DF4:	9D C0 10   	STA $10C0,X
C1/3DF7:	E8         	INX
C1/3DF8:	C6 12      	DEC $12
C1/3DFA:	D0 BB      	BNE $3DB7
C1/3DFC:	AB         	PLB
C1/3DFD:	FA         	PLX
C1/3DFE:	68         	PLA
C1/3DFF:	0A         	ASL A
C1/3E00:	0A         	ASL A
C1/3E01:	0A         	ASL A
C1/3E02:	0A         	ASL A
C1/3E03:	0A         	ASL A
C1/3E04:	DA         	PHX
C1/3E05:	AA         	TAX
C1/3E06:	BD AE 2E   	LDA $2EAE,X
C1/3E09:	C9 0E      	CMP #$0E
C1/3E0B:	D0 12      	BNE $3E1F
C1/3E0D:	BD C6 2E   	LDA $2EC6,X
C1/3E10:	C9 01      	CMP #$01
C1/3E12:	D0 0B      	BNE $3E1F
C1/3E14:	AD A0 1E   	LDA $1EA0
C1/3E17:	29 08      	AND #$08
C1/3E19:	F0 04      	BEQ $3E1F
C1/3E1B:	FA         	PLX
C1/3E1C:	7B         	TDC
C1/3E1D:	80 05      	BRA $3E24
C1/3E1F:	FA         	PLX
C1/3E20:	BF 2B CE C2	LDA $C2CE2B,X
C1/3E24:	C2 20      	REP #$20
C1/3E26:	0A         	ASL A
C1/3E27:	0A         	ASL A
C1/3E28:	0A         	ASL A
C1/3E29:	0A         	ASL A
C1/3E2A:	0A         	ASL A
C1/3E2B:	AA         	TAX
C1/3E2C:	7B         	TDC
C1/3E2D:	E2 20      	SEP #$20           ; 8-bit A
C1/3E2F:	68         	PLA
C1/3E30:	0A         	ASL A
C1/3E31:	0A         	ASL A
C1/3E32:	0A         	ASL A
C1/3E33:	0A         	ASL A
C1/3E34:	0A         	ASL A
C1/3E35:	A8         	TAY
C1/3E36:	5A         	PHY
C1/3E37:	A9 18      	LDA #$18
C1/3E39:	85 10      	STA $10
C1/3E3B:	BF 00 63 ED	LDA $ED6300,X
C1/3E3F:	99 AD 81   	STA $81AD,Y
C1/3E42:	E8         	INX
C1/3E43:	C8         	INY
C1/3E44:	C6 10      	DEC $10
C1/3E46:	D0 F3      	BNE $3E3B
C1/3E48:	FA         	PLX
C1/3E49:	FE C4 61   	INC $61C4,X
C1/3E4C:	60         	RTS

C1/3E4D:	7B         	TDC
C1/3E4E:	AA         	TAX
C1/3E4F:	BF 89 C6 C2	LDA $C2C689,X
C1/3E53:	9D 98 7F   	STA $7F98,X
C1/3E56:	BF 91 C6 C2	LDA $C2C691,X
C1/3E5A:	9D B8 7F   	STA $7FB8,X
C1/3E5D:	BF 99 C6 C2	LDA $C2C699,X
C1/3E61:	9D D8 7F   	STA $7FD8,X
C1/3E64:	BF A1 C6 C2	LDA $C2C6A1,X
C1/3E68:	9D F8 7F   	STA $7FF8,X
C1/3E6B:	E8         	INX
C1/3E6C:	E0 08 00   	CPX #$0008
C1/3E6F:	D0 DE      	BNE $3E4F
C1/3E71:	60         	RTS

C1/3E72:	A9 FF      	LDA #$FF
C1/3E74:	7B         	TDC
C1/3E75:	AA         	TAX
C1/3E76:	9D 59 82   	STA $8259,X
C1/3E79:	9D F1 83   	STA $83F1,X
C1/3E7C:	9D 89 85   	STA $8589,X
C1/3E7F:	9D 21 87   	STA $8721,X
C1/3E82:	E8         	INX
C1/3E83:	E0 98 01   	CPX #$0198
C1/3E86:	D0 EE      	BNE $3E76
C1/3E88:	AD 00 20   	LDA $2000
C1/3E8B:	85 22      	STA $22
C1/3E8D:	A9 0C      	LDA #$0C
C1/3E8F:	85 24      	STA $24
C1/3E91:	20 D9 18   	JSR $18D9     ; Multiplication ($26 = $22 * $24)
C1/3E94:	A5 26      	LDA $26
C1/3E96:	AA         	TAX
C1/3E97:	BF A4 C4 C2	LDA $C2C4A4,X
C1/3E9B:	85 10      	STA $10
C1/3E9D:	BF A5 C4 C2	LDA $C2C4A5,X
C1/3EA1:	85 11      	STA $11
C1/3EA3:	A9 C2      	LDA #$C2
C1/3EA5:	85 12      	STA $12
C1/3EA7:	A2 59 82   	LDX #$8259
C1/3EAA:	86 14      	STX $14
C1/3EAC:	A9 06      	LDA #$06
C1/3EAE:	85 16      	STA $16
C1/3EB0:	C2 20      	REP #$20
C1/3EB2:	A7 10      	LDA [$10]
C1/3EB4:	85 18      	STA $18
C1/3EB6:	E6 10      	INC $10
C1/3EB8:	E6 10      	INC $10
C1/3EBA:	7B         	TDC
C1/3EBB:	E2 20      	SEP #$20           ; 8-bit A
C1/3EBD:	A4 00      	LDY $00
C1/3EBF:	A7 10      	LDA [$10]
C1/3EC1:	30 2C      	BMI $3EEF
C1/3EC3:	0A         	ASL A
C1/3EC4:	0A         	ASL A
C1/3EC5:	AA         	TAX
C1/3EC6:	BF E7 B9 C2	LDA $C2B9E7,X
C1/3ECA:	38         	SEC
C1/3ECB:	E5 18      	SBC $18
C1/3ECD:	91 14      	STA ($14),Y
C1/3ECF:	C8         	INY
C1/3ED0:	BF E8 B9 C2	LDA $C2B9E8,X
C1/3ED4:	38         	SEC
C1/3ED5:	E5 19      	SBC $19
C1/3ED7:	91 14      	STA ($14),Y
C1/3ED9:	C8         	INY
C1/3EDA:	BF E9 B9 C2	LDA $C2B9E9,X
C1/3EDE:	91 14      	STA ($14),Y
C1/3EE0:	C8         	INY
C1/3EE1:	BF EA B9 C2	LDA $C2B9EA,X
C1/3EE5:	91 14      	STA ($14),Y
C1/3EE7:	C8         	INY
C1/3EE8:	A6 10      	LDX $10
C1/3EEA:	E8         	INX
C1/3EEB:	86 10      	STX $10
C1/3EED:	80 D0      	BRA $3EBF
C1/3EEF:	91 14      	STA ($14),Y
C1/3EF1:	C2 20      	REP #$20
C1/3EF3:	E6 10      	INC $10
C1/3EF5:	A5 14      	LDA $14
C1/3EF7:	18         	CLC
C1/3EF8:	69 44 00   	ADC #$0044
C1/3EFB:	85 14      	STA $14
C1/3EFD:	7B         	TDC
C1/3EFE:	E2 20      	SEP #$20           ; 8-bit A
C1/3F00:	C6 16      	DEC $16
C1/3F02:	D0 AC      	BNE $3EB0
C1/3F04:	A6 00      	LDX $00
C1/3F06:	BD 59 82   	LDA $8259,X
C1/3F09:	9D F1 83   	STA $83F1,X
C1/3F0C:	9D 89 85   	STA $8589,X
C1/3F0F:	9D 21 87   	STA $8721,X
C1/3F12:	E8         	INX
C1/3F13:	E0 98 01   	CPX #$0198
C1/3F16:	D0 EE      	BNE $3F06
C1/3F18:	64 14      	STZ $14
C1/3F1A:	A9 01      	LDA #$01
C1/3F1C:	85 12      	STA $12
C1/3F1E:	A6 00      	LDX $00
C1/3F20:	C6 12      	DEC $12
C1/3F22:	D0 12      	BNE $3F36
C1/3F24:	A9 11      	LDA #$11
C1/3F26:	85 12      	STA $12
C1/3F28:	A5 14      	LDA $14
C1/3F2A:	0A         	ASL A
C1/3F2B:	A8         	TAY
C1/3F2C:	B9 2F 81   	LDA $812F,Y
C1/3F2F:	0A         	ASL A
C1/3F30:	0A         	ASL A
C1/3F31:	0A         	ASL A
C1/3F32:	85 10      	STA $10
C1/3F34:	E6 14      	INC $14
C1/3F36:	BD 59 82   	LDA $8259,X
C1/3F39:	C9 FF      	CMP #$FF
C1/3F3B:	F0 09      	BEQ $3F46
C1/3F3D:	49 FF      	EOR #$FF
C1/3F3F:	1A         	INC A
C1/3F40:	38         	SEC
C1/3F41:	E9 20      	SBC #$20
C1/3F43:	18         	CLC
C1/3F44:	65 10      	ADC $10
C1/3F46:	9D F1 83   	STA $83F1,X
C1/3F49:	9D 21 87   	STA $8721,X
C1/3F4C:	E8         	INX
C1/3F4D:	E8         	INX
C1/3F4E:	E8         	INX
C1/3F4F:	E8         	INX
C1/3F50:	E0 98 01   	CPX #$0198
C1/3F53:	D0 CB      	BNE $3F20
C1/3F55:	64 14      	STZ $14
C1/3F57:	A9 01      	LDA #$01
C1/3F59:	85 12      	STA $12
C1/3F5B:	A6 00      	LDX $00
C1/3F5D:	C6 12      	DEC $12
C1/3F5F:	D0 12      	BNE $3F73
C1/3F61:	A9 11      	LDA #$11
C1/3F63:	85 12      	STA $12
C1/3F65:	A5 14      	LDA $14
C1/3F67:	0A         	ASL A
C1/3F68:	A8         	TAY
C1/3F69:	B9 30 81   	LDA $8130,Y
C1/3F6C:	0A         	ASL A
C1/3F6D:	0A         	ASL A
C1/3F6E:	0A         	ASL A
C1/3F6F:	85 10      	STA $10
C1/3F71:	E6 14      	INC $14
C1/3F73:	BD 5A 82   	LDA $825A,X
C1/3F76:	C9 FF      	CMP #$FF
C1/3F78:	F0 09      	BEQ $3F83
C1/3F7A:	49 FF      	EOR #$FF
C1/3F7C:	1A         	INC A
C1/3F7D:	38         	SEC
C1/3F7E:	E9 20      	SBC #$20
C1/3F80:	18         	CLC
C1/3F81:	65 10      	ADC $10
C1/3F83:	9D 8A 85   	STA $858A,X
C1/3F86:	9D 22 87   	STA $8722,X
C1/3F89:	E8         	INX
C1/3F8A:	E8         	INX
C1/3F8B:	E8         	INX
C1/3F8C:	E8         	INX
C1/3F8D:	E0 98 01   	CPX #$0198
C1/3F90:	D0 CB      	BNE $3F5D
C1/3F92:	7B         	TDC
C1/3F93:	A8         	TAY
C1/3F94:	98         	TYA
C1/3F95:	0A         	ASL A
C1/3F96:	AA         	TAX
C1/3F97:	BF 74 C4 C2	LDA $C2C474,X
C1/3F9B:	85 10      	STA $10
C1/3F9D:	BF 75 C4 C2	LDA $C2C475,X
C1/3FA1:	85 11      	STA $11
C1/3FA3:	A9 11      	LDA #$11
C1/3FA5:	85 12      	STA $12
C1/3FA7:	7B         	TDC
C1/3FA8:	99 B9 88   	STA $88B9,Y
C1/3FAB:	B2 10      	LDA ($10)
C1/3FAD:	C9 FF      	CMP #$FF
C1/3FAF:	F0 13      	BEQ $3FC4
C1/3FB1:	B9 B9 88   	LDA $88B9,Y
C1/3FB4:	1A         	INC A
C1/3FB5:	99 B9 88   	STA $88B9,Y
C1/3FB8:	A6 10      	LDX $10
C1/3FBA:	E8         	INX
C1/3FBB:	E8         	INX
C1/3FBC:	E8         	INX
C1/3FBD:	E8         	INX
C1/3FBE:	86 10      	STX $10
C1/3FC0:	C6 12      	DEC $12
C1/3FC2:	D0 E7      	BNE $3FAB
C1/3FC4:	C8         	INY
C1/3FC5:	C0 06 00   	CPY #$0006
C1/3FC8:	D0 CA      	BNE $3F94
C1/3FCA:	60         	RTS

C1/3FCB:	B4
C1/3FCC:	B5
C1/3FCD:	B6
C1/3FCE:	B7
C1/3FCF:	B8
C1/3FD0:	B9
C1/3FD1:	BA
C1/3FD2:	BB
C1/3FD3:	BC
C1/3FD4:	BD
C1/3FD5:	8C
C1/3FD6:	87
C1/3FD7:	8F
C1/3FD8:	C0
C1/3FD9:	8D
C1/3FDA:	9E
C1/3FDB:	9D
C1/3FDC:	8C
C1/3FDD:	8F
C1/3FDE:	FF
C1/3FDF:	FF

C1/3FE0:	0000ED
C1/3FE3:	8003ED
C1/3FE6:	0007ED
C1/3FE9:	800AED
C1/3FEC:	000EED
C1/3FEF:	8011ED
C1/3FF2:	0015ED
C1/3FF5:	8018ED

C1/3FF8:	571D00
C1/3FFB:	651D00
C1/3FFE:	731D00
C1/4001:	811D00
C1/4004:	8F1D00
C1/4007:	9D1D00
C1/400A:	AB1D00
C1/400D:	B91D00

C1/4010:	AD 34 2F   	LDA $2F34
C1/4013:	29 07      	AND #$07
C1/4015:	8D 34 2F   	STA $2F34
C1/4018:	0A         	ASL A
C1/4019:	18         	CLC
C1/401A:	6D 34 2F   	ADC $2F34
C1/401D:	AA         	TAX
C1/401E:	BF E2 3F C1	LDA $C13FE2,X    ; Data
C1/4022:	85 12      	STA $12
C1/4024:	C2 20      	REP #$20
C1/4026:	BF E0 3F C1	LDA $C13FE0,X    ; Data
C1/402A:	AA         	TAX
C1/402B:	7B         	TDC
C1/402C:	E2 20      	SEP #$20           ; 8-bit A
C1/402E:	A0 80 03   	LDY #$0380
C1/4031:	84 10      	STY $10
C1/4033:	60         	RTS

C1/4034:	20 10 40   	JSR $4010
C1/4037:	A0 00 0A   	LDY #$0A00
C1/403A:	A5 12      	LDA $12
C1/403C:	4C 8D 19   	JMP $198D         ; initialize VRAM DMA transfer

C1/403F:	20 10 40   	JSR $4010
C1/4042:	A4 10      	LDY $10
C1/4044:	84 36      	STY $36
C1/4046:	A5 12      	LDA $12
C1/4048:	A0 00 42   	LDY #$4200
C1/404B:	20 2B 1A   	JSR $1A2B         ; execute VRAM DMA transfer
C1/404E:	A2 00 08   	LDX #$0800
C1/4051:	86 36      	STX $36
C1/4053:	A2 00 F0   	LDX #$F000
C1/4056:	A0 00 44   	LDY #$4400
C1/4059:	A9 D2      	LDA #$D2
C1/405B:	20 2B 1A   	JSR $1A2B         ; execute VRAM DMA transfer
C1/405E:	A2 00 10   	LDX #$1000
C1/4061:	86 36      	STX $36
C1/4063:	A2 C0 7F   	LDX #$7FC0
C1/4066:	A0 00 58   	LDY #$5800
C1/4069:	A9 C4      	LDA #$C4
C1/406B:	20 2B 1A   	JSR $1A2B         ; execute VRAM DMA transfer
C1/406E:	AD 34 2F   	LDA $2F34
C1/4071:	29 07      	AND #$07
C1/4073:	8D 34 2F   	STA $2F34
C1/4076:	0A         	ASL A
C1/4077:	18         	CLC
C1/4078:	6D 34 2F   	ADC $2F34
C1/407B:	AA         	TAX
C1/407C:	BF FA 3F C1	LDA $C13FFA,X    ; Data
C1/4080:	85 38      	STA $38
C1/4082:	C2 20      	REP #$20
C1/4084:	BF F8 3F C1	LDA $C13FF8,X    ; Data
C1/4088:	85 36      	STA $36
C1/408A:	7B         	TDC
C1/408B:	AA         	TAX
C1/408C:	A8         	TAY
C1/408D:	A9 08 00   	LDA #$0008
C1/4090:	85 2C      	STA $2C
C1/4092:	20 E4 41   	JSR $41E4
C1/4095:	B7 36      	LDA [$36],Y
C1/4097:	20 7E 41   	JSR $417E
C1/409A:	9D 42 7E   	STA $7E42,X
C1/409D:	C8         	INY
C1/409E:	C8         	INY
C1/409F:	E8         	INX
C1/40A0:	E8         	INX
C1/40A1:	E0 0E 00   	CPX #$000E
C1/40A4:	D0 EF      	BNE $4095
C1/40A6:	7B         	TDC
C1/40A7:	AA         	TAX
C1/40A8:	BF C0 62 ED	LDA $ED62C0,X
C1/40AC:	9D 00 7E   	STA $7E00,X
C1/40AF:	BF D0 62 ED	LDA $ED62D0,X
C1/40B3:	9D 10 7E   	STA $7E10,X
C1/40B6:	E8         	INX
C1/40B7:	E8         	INX
C1/40B8:	E0 10 00   	CPX #$0010
C1/40BB:	D0 EB      	BNE $40A8
C1/40BD:	AD 55 1D   	LDA $1D55
C1/40C0:	8D 06 7E   	STA $7E06
C1/40C3:	7B         	TDC
C1/40C4:	E2 20      	SEP #$20           ; 8-bit A
C1/40C6:	A0 80 40   	LDY #$4080
C1/40C9:	7B         	TDC
C1/40CA:	AA         	TAX
C1/40CB:	BF CB 3F C1	LDA $C13FCB,X    ; Data
C1/40CF:	DA         	PHX
C1/40D0:	C2 20      	REP #$20
C1/40D2:	0A         	ASL A
C1/40D3:	0A         	ASL A
C1/40D4:	0A         	ASL A
C1/40D5:	0A         	ASL A
C1/40D6:	18         	CLC
C1/40D7:	69 C0 7F   	ADC #$7FC0
C1/40DA:	AA         	TAX
C1/40DB:	A9 10 00   	LDA #$0010
C1/40DE:	85 36      	STA $36
C1/40E0:	7B         	TDC
C1/40E1:	E2 20      	SEP #$20           ; 8-bit A
C1/40E3:	A9 C4      	LDA #$C4
C1/40E5:	20 2B 1A   	JSR $1A2B         ; execute VRAM DMA transfer
C1/40E8:	FA         	PLX
C1/40E9:	C2 20      	REP #$20
C1/40EB:	98         	TYA
C1/40EC:	18         	CLC
C1/40ED:	69 10 00   	ADC #$0010
C1/40F0:	A8         	TAY
C1/40F1:	7B         	TDC
C1/40F2:	E2 20      	SEP #$20           ; 8-bit A
C1/40F4:	E8         	INX
C1/40F5:	E0 15 00   	CPX #$0015
C1/40F8:	D0 D1      	BNE $40CB
C1/40FA:	20 FE 40   	JSR $40FE
C1/40FD:	60         	RTS

C1/40FE:	7B         	TDC
C1/40FF:	AA         	TAX
C1/4100:	BF E8 62 ED	LDA $ED62E8,X
C1/4104:	9D 28 7E   	STA $7E28,X
C1/4107:	E8         	INX
C1/4108:	E0 18 00   	CPX #$0018
C1/410B:	D0 F3      	BNE $4100
C1/410D:	60         	RTS

C1/410E:	7B         	TDC
C1/410F:	AA         	TAX
C1/4110:	BF 4E 41 C1	LDA $C1414E,X
C1/4114:	9D 50 7E   	STA $7E50,X
C1/4117:	E8         	INX
C1/4118:	E0 10 00   	CPX #$0010
C1/411B:	D0 F3      	BNE $4110
C1/411D:	60         	RTS

C1/411E:	7B         	TDC
C1/411F:	AA         	TAX
C1/4120:	9D 50 7E   	STA $7E50,X
C1/4123:	E8         	INX
C1/4124:	E0 10 00   	CPX #$0010
C1/4127:	D0 F7      	BNE $4120
C1/4129:	60         	RTS

C1/412A:	7B         	TDC
C1/412B:	AA         	TAX
C1/412C:	C2 20      	REP #$20
C1/412E:	BF 66 41 C1	LDA $C14166,X
C1/4132:	49 FF FF   	EOR #$FFFF
C1/4135:	9D 28 7E   	STA $7E28,X
C1/4138:	E8         	INX
C1/4139:	E8         	INX
C1/413A:	E0 18 00   	CPX #$0018
C1/413D:	D0 EF      	BNE $412E
C1/413F:	7B         	TDC
C1/4140:	E2 20      	SEP #$20           ; 8-bit A
C1/4142:	60         	RTS

C1/4143:	7B         	TDC
C1/4144:	9E 28 7E   	STZ $7E28,X
C1/4147:	E8         	INX
C1/4148:	E0 18 00   	CPX #$0018
C1/414B:	D0 F7      	BNE $4144
C1/414D:	60         	RTS

C1/414E:	9C73
C1/4150:	1863
C1/4152:	9452
C1/4154:	1042
C1/4156:	8C31
C1/4158:	0821
C1/415A:	8410
C1/415C:	0000
C1/415E:	0000
C1/4160:	E07F
C1/4162:	E07F
C1/4164:	E07F

C1/4166:	186F
C1/4168:	104A
C1/416A:	2829
C1/416C:	7F03
C1/416E:	5402
C1/4170:	8E01
C1/4172:	1F00
C1/4174:	1600
C1/4176:	C17C
C1/4178:	E36C
C1/417A:	FF7F
C1/417C:	0000

C1/417E:	85 32      	STA $32
C1/4180:	29 1F 00   	AND #$001F
C1/4183:	18         	CLC
C1/4184:	65 2C      	ADC $2C
C1/4186:	85 34      	STA $34
C1/4188:	29 E0 7F   	AND #$7FE0
C1/418B:	D0 0B      	BNE $4198
C1/418D:	A5 32      	LDA $32
C1/418F:	29 E0 7F   	AND #$7FE0
C1/4192:	05 34      	ORA $34
C1/4194:	85 32      	STA $32
C1/4196:	80 07      	BRA $419F
C1/4198:	A5 32      	LDA $32
C1/419A:	09 1F 00   	ORA #$001F
C1/419D:	85 32      	STA $32
C1/419F:	A5 32      	LDA $32
C1/41A1:	29 E0 03   	AND #$03E0
C1/41A4:	18         	CLC
C1/41A5:	65 2E      	ADC $2E
C1/41A7:	85 34      	STA $34
C1/41A9:	29 1F 7C   	AND #$7C1F
C1/41AC:	D0 0B      	BNE $41B9
C1/41AE:	A5 32      	LDA $32
C1/41B0:	29 1F 7C   	AND #$7C1F
C1/41B3:	05 34      	ORA $34
C1/41B5:	85 32      	STA $32
C1/41B7:	80 07      	BRA $41C0
C1/41B9:	A5 32      	LDA $32
C1/41BB:	09 E0 03   	ORA #$03E0
C1/41BE:	85 32      	STA $32
C1/41C0:	A5 32      	LDA $32
C1/41C2:	29 00 7C   	AND #$7C00
C1/41C5:	18         	CLC
C1/41C6:	65 30      	ADC $30
C1/41C8:	85 34      	STA $34
C1/41CA:	29 FF 83   	AND #$83FF
C1/41CD:	D0 0B      	BNE $41DA
C1/41CF:	A5 32      	LDA $32
C1/41D1:	29 FF 03   	AND #$03FF
C1/41D4:	05 34      	ORA $34
C1/41D6:	85 32      	STA $32
C1/41D8:	80 07      	BRA $41E1
C1/41DA:	A5 32      	LDA $32
C1/41DC:	09 00 7C   	ORA #$7C00
C1/41DF:	85 32      	STA $32
C1/41E1:	A5 32      	LDA $32
C1/41E3:	60         	RTS

C1/41E4:	A5 2C      	LDA $2C
C1/41E6:	0A         	ASL A
C1/41E7:	0A         	ASL A
C1/41E8:	0A         	ASL A
C1/41E9:	0A         	ASL A
C1/41EA:	0A         	ASL A
C1/41EB:	29 E0 03   	AND #$03E0
C1/41EE:	85 2E      	STA $2E
C1/41F0:	0A         	ASL A
C1/41F1:	0A         	ASL A
C1/41F2:	0A         	ASL A
C1/41F3:	0A         	ASL A
C1/41F4:	0A         	ASL A
C1/41F5:	29 00 7C   	AND #$7C00
C1/41F8:	85 30      	STA $30
C1/41FA:	A5 2C      	LDA $2C
C1/41FC:	29 1F 00   	AND #$001F
C1/41FF:	85 2C      	STA $2C
C1/4201:	60         	RTS

C1/4202:	85 32      	STA $32
C1/4204:	29 1F 00   	AND #$001F
C1/4207:	38         	SEC
C1/4208:	E5 2C      	SBC $2C
C1/420A:	85 34      	STA $34
C1/420C:	29 E0 7F   	AND #$7FE0
C1/420F:	D0 0B      	BNE $421C
C1/4211:	A5 32      	LDA $32
C1/4213:	29 E0 7F   	AND #$7FE0
C1/4216:	05 34      	ORA $34
C1/4218:	85 32      	STA $32
C1/421A:	80 07      	BRA $4223
C1/421C:	A5 32      	LDA $32
C1/421E:	29 E0 7F   	AND #$7FE0
C1/4221:	85 32      	STA $32
C1/4223:	A5 32      	LDA $32
C1/4225:	29 E0 03   	AND #$03E0
C1/4228:	38         	SEC
C1/4229:	E5 2E      	SBC $2E
C1/422B:	85 34      	STA $34
C1/422D:	29 1F 7C   	AND #$7C1F
C1/4230:	D0 0B      	BNE $423D
C1/4232:	A5 32      	LDA $32
C1/4234:	29 1F 7C   	AND #$7C1F
C1/4237:	05 34      	ORA $34
C1/4239:	85 32      	STA $32
C1/423B:	80 07      	BRA $4244
C1/423D:	A5 32      	LDA $32
C1/423F:	29 1F 7C   	AND #$7C1F
C1/4242:	85 32      	STA $32
C1/4244:	A5 32      	LDA $32
C1/4246:	29 00 7C   	AND #$7C00
C1/4249:	38         	SEC
C1/424A:	E5 30      	SBC $30
C1/424C:	85 34      	STA $34
C1/424E:	29 FF 83   	AND #$83FF
C1/4251:	D0 0B      	BNE $425E
C1/4253:	A5 32      	LDA $32
C1/4255:	29 FF 03   	AND #$03FF
C1/4258:	05 34      	ORA $34
C1/425A:	85 32      	STA $32
C1/425C:	80 07      	BRA $4265
C1/425E:	A5 32      	LDA $32
C1/4260:	29 FF 03   	AND #$03FF
C1/4263:	85 32      	STA $32
C1/4265:	A5 32      	LDA $32
C1/4267:	60         	RTS

C1/4268:	AD 83 7B   	LDA $7B83
C1/426B:	10 05      	BPL $4272
C1/426D:	A9 1C      	LDA #$1C
C1/426F:	8D 83 7B   	STA $7B83
C1/4272:	20 86 42   	JSR $4286
C1/4275:	AD 83 7B   	LDA $7B83
C1/4278:	38         	SEC
C1/4279:	E9 04      	SBC #$04
C1/427B:	8D 83 7B   	STA $7B83
C1/427E:	C9 FC      	CMP #$FC
C1/4280:	D0 03      	BNE $4285
C1/4282:	4C 4A 5A   	JMP $5A4A

C1/4285:	60         	RTS

C1/4286:	7B         	TDC
C1/4287:	AA         	TAX
C1/4288:	C2 20      	REP #$20
C1/428A:	AD 83 7B   	LDA $7B83
C1/428D:	85 2C      	STA $2C
C1/428F:	20 E4 41   	JSR $41E4
C1/4292:	BF 66 41 C1	LDA $C14166,X
C1/4296:	49 FF FF   	EOR #$FFFF
C1/4299:	20 02 42   	JSR $4202
C1/429C:	9D 28 7E   	STA $7E28,X
C1/429F:	E8         	INX
C1/42A0:	E8         	INX
C1/42A1:	E0 18 00   	CPX #$0018
C1/42A4:	D0 EC      	BNE $4292
C1/42A6:	7B         	TDC
C1/42A7:	AA         	TAX
C1/42A8:	AD 83 7B   	LDA $7B83
C1/42AB:	85 2C      	STA $2C
C1/42AD:	20 E4 41   	JSR $41E4
C1/42B0:	BF 4E 41 C1	LDA $C1414E,X
C1/42B4:	49 FF FF   	EOR #$FFFF
C1/42B7:	20 02 42   	JSR $4202
C1/42BA:	9D 50 7E   	STA $7E50,X
C1/42BD:	E8         	INX
C1/42BE:	E8         	INX
C1/42BF:	E0 10 00   	CPX #$0010
C1/42C2:	D0 EC      	BNE $42B0
C1/42C4:	7B         	TDC
C1/42C5:	E2 20      	SEP #$20           ; 8-bit A
C1/42C7:	60         	RTS

C1/42C8:	AD 83 7B   	LDA $7B83
C1/42CB:	10 03      	BPL $42D0
C1/42CD:	9C 83 7B   	STZ $7B83
C1/42D0:	20 86 42   	JSR $4286
C1/42D3:	AD 83 7B   	LDA $7B83
C1/42D6:	18         	CLC
C1/42D7:	69 04      	ADC #$04
C1/42D9:	8D 83 7B   	STA $7B83
C1/42DC:	C9 20      	CMP #$20
C1/42DE:	D0 03      	BNE $42E3
C1/42E0:	4C 4A 5A   	JMP $5A4A

C1/42E3:	60         	RTS

C1/42E4:	20 BB 5D   	JSR $5DBB
C1/42E7:	A2 00 58   	LDX #$5800
C1/42EA:	8E BF E9   	STX $E9BF
C1/42ED:	20 9B 63   	JSR $639B
C1/42F0:	A2 00 5A   	LDX #$5A00
C1/42F3:	8E BF E9   	STX $E9BF
C1/42F6:	20 9B 63   	JSR $639B
C1/42F9:	A2 00 5C   	LDX #$5C00
C1/42FC:	8E BF E9   	STX $E9BF
C1/42FF:	20 9B 63   	JSR $639B
C1/4302:	A2 00 5E   	LDX #$5E00
C1/4305:	8E BF E9   	STX $E9BF
C1/4308:	20 9B 63   	JSR $639B
C1/430B:	20 6D 43   	JSR $436D
C1/430E:	20 AC 99   	JSR $99AC
C1/4311:	60         	RTS

C1/4312:	A2 FF FF   	LDX #$FFFF
C1/4315:	8E 01 40   	STX $4001
C1/4318:	8E 03 40   	STX $4003
C1/431B:	AD CA 7B   	LDA $7BCA
C1/431E:	F0 05      	BEQ $4325
C1/4320:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/4323:	80 ED      	BRA $4312
C1/4325:	AD D5 64   	LDA $64D5
C1/4328:	D0 20      	BNE $434A
C1/432A:	20 4B 43   	JSR $434B
C1/432D:	EE D5 64   	INC $64D5
C1/4330:	A9 3B      	LDA #$3B
C1/4332:	8D C3 7B   	STA $7BC3
C1/4335:	A9 01      	LDA #$01
C1/4337:	8D C2 7B   	STA $7BC2
C1/433A:	AD F0 7B   	LDA $7BF0
C1/433D:	0D C2 7B   	ORA $7BC2
C1/4340:	F0 05      	BEQ $4347
C1/4342:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/4345:	80 F3      	BRA $433A
C1/4347:	20 E4 42   	JSR $42E4
C1/434A:	60         	RTS

C1/434B:	20 4C 99   	JSR $994C
C1/434E:	A0 00 7C   	LDY #$7C00
C1/4351:	20 AC 43   	JSR $43AC
C1/4354:	A0 40 7C   	LDY #$7C40
C1/4357:	20 AC 43   	JSR $43AC
C1/435A:	A0 80 7C   	LDY #$7C80
C1/435D:	20 AC 43   	JSR $43AC
C1/4360:	A0 C0 7C   	LDY #$7CC0
C1/4363:	20 AC 43   	JSR $43AC
C1/4366:	A0 00 7D   	LDY #$7D00
C1/4369:	20 AC 43   	JSR $43AC
C1/436C:	60         	RTS

C1/436D:	20 4C 99   	JSR $994C
C1/4370:	A2 00 31   	LDX #$3100
C1/4373:	A0 00 7C   	LDY #$7C00
C1/4376:	20 95 43   	JSR $4395
C1/4379:	A2 40 31   	LDX #$3140
C1/437C:	A0 40 7C   	LDY #$7C40
C1/437F:	20 95 43   	JSR $4395
C1/4382:	A2 80 31   	LDX #$3180
C1/4385:	A0 80 7C   	LDY #$7C80
C1/4388:	20 95 43   	JSR $4395
C1/438B:	A2 C0 31   	LDX #$31C0
C1/438E:	A0 C0 7C   	LDY #$7CC0
C1/4391:	20 95 43   	JSR $4395
C1/4394:	60         	RTS

C1/4395:	C2 20      	REP #$20
C1/4397:	8A         	TXA
C1/4398:	A6 00      	LDX $00
C1/439A:	9D 45 E7   	STA $E745,X
C1/439D:	1A         	INC A
C1/439E:	9D 85 E7   	STA $E785,X
C1/43A1:	1A         	INC A
C1/43A2:	E8         	INX
C1/43A3:	E8         	INX
C1/43A4:	E0 34 00   	CPX #$0034
C1/43A7:	D0 F1      	BNE $439A
C1/43A9:	7B         	TDC
C1/43AA:	E2 20      	SEP #$20           ; 8-bit A
C1/43AC:	A2 80 00   	LDX #$0080
C1/43AF:	86 10      	STX $10
C1/43B1:	A2 3F E7   	LDX #$E73F
C1/43B4:	A9 7E      	LDA #$7E
C1/43B6:	4C 8D 19   	JMP $198D         ; initialize VRAM DMA transfer

C1/43B9:	20 4B 43   	JSR $434B
C1/43BC:	A2 00 10   	LDX #$1000
C1/43BF:	86 10      	STX $10
C1/43C1:	A2 C0 7F   	LDX #$7FC0
C1/43C4:	A0 00 58   	LDY #$5800
C1/43C7:	A9 C4      	LDA #$C4
C1/43C9:	4C 8D 19   	JMP $198D         ; initialize VRAM DMA transfer

C1/43CC:	AD D5 64   	LDA $64D5
C1/43CF:	F0 10      	BEQ $43E1
C1/43D1:	20 B9 43   	JSR $43B9
C1/43D4:	A9 3C      	LDA #$3C
C1/43D6:	8D C3 7B   	STA $7BC3
C1/43D9:	A9 02      	LDA #$02
C1/43DB:	8D C2 7B   	STA $7BC2
C1/43DE:	9C D5 64   	STZ $64D5
C1/43E1:	60         	RTS

; Menu state $22
C1/43E2:	AE CA 62   	LDX $62CA         ; active character index
C1/43E5:	AD CC 7B   	LDA $7BCC         ; swapping battle menus
C1/43E8:	D0 04      	BNE $43EE         ; branch if ^
C1/43EA:	A9 FF      	LDA #$FF
C1/43EC:	80 38      	BRA $4426

; Handle new active character battle menu [?]
C1/43EE:	C9 02      	CMP #$02
C1/43F0:	D0 32      	BNE $4424
C1/43F2:	7B         	TDC
C1/43F3:	AA         	TAX
C1/43F4:	BD 01 40   	LDA $4001,X       ; character menu order
C1/43F7:	C9 FF      	CMP #$FF
C1/43F9:	F0 03      	BEQ $43FE
C1/43FB:	FE 01 40   	INC $4001,X
C1/43FE:	E8         	INX
C1/43FF:	E0 04 00   	CPX #$0004
C1/4402:	D0 F0      	BNE $43F4
C1/4404:	7B         	TDC
C1/4405:	AA         	TAX
C1/4406:	64 10      	STZ $10
C1/4408:	86 12      	STX $12
C1/440A:	BD 01 40   	LDA $4001,X       ; character menu position
C1/440D:	C9 FF      	CMP #$FF
C1/440F:	F0 08      	BEQ $4419
C1/4411:	C5 10      	CMP $10
C1/4413:	90 04      	BCC $4419
C1/4415:	85 10      	STA $10
C1/4417:	86 12      	STX $12
C1/4419:	E8         	INX
C1/441A:	E0 04 00   	CPX #$0004
C1/441D:	D0 EB      	BNE $440A
C1/441F:	A6 12      	LDX $12
C1/4421:	7B         	TDC
C1/4422:	80 02      	BRA $4426
C1/4424:	A9 04      	LDA #$04
C1/4426:	85 14      	STA $14
C1/4428:	BD 01 40   	LDA $4001,X
C1/442B:	C9 FF      	CMP #$FF
C1/442D:	F0 05      	BEQ $4434
C1/442F:	A5 14      	LDA $14
C1/4431:	9D 01 40   	STA $4001,X
C1/4434:	9C 41 2F   	STZ $2F41
C1/4437:	9C CA 7B   	STZ $7BCA
C1/443A:	9C CC 7B   	STZ $7BCC
C1/443D:	20 E9 50   	JSR $50E9
C1/4440:	22 97 01 C1	JSL $C10197    ; update displayed monster names
C1/4444:	60         	RTS

; Add obtained items to battle inventory (for Steal [?])

C1/4445:	AD DB 64   	LDA $64DB      ; next buffer slot to add to inventory
C1/4448:	29 0F      	AND #$0F       ; should be 0-15
C1/444A:	85 10      	STA $10
C1/444C:	0A         	ASL A
C1/444D:	0A         	ASL A
C1/444E:	18         	CLC
C1/444F:	65 10      	ADC $10
C1/4451:	A8         	TAY            ; Y = $10 * 5
C1/4452:	84 12      	STY $12        ; save it (index for new item)
C1/4454:	B9 2D 60   	LDA $602D,Y    ; A = new item id#
C1/4457:	C9 FF      	CMP #$FF
C1/4459:	F0 46      	BEQ $44A1      ; exit if null
C1/445B:	A2 00 00   	LDX #$0000
C1/445E:	DD 86 26   	CMP $2686,X    ; check battle inventory for match
C1/4461:	F0 21      	BEQ $4484      ; branch if matched found
C1/4463:	E8         	INX
C1/4464:	E8         	INX
C1/4465:	E8         	INX
C1/4466:	E8         	INX
C1/4467:	E8         	INX            ; advance to next inventory item
C1/4468:	E0 00 05   	CPX #$0500
C1/446B:	D0 F1      	BNE $445E      ; loop through all inventory until matched
C1/446D:	20 D2 8C   	JSR $8CD2      ; if no match, get first empty item slot
C1/4470:	B0 2F      	BCS $44A1      ; exit if no empty slots
C1/4472:	A9 05      	LDA #$05
C1/4474:	85 10      	STA $10        ; iterate to move 5 bytes
C1/4476:	B9 2D 60   	LDA $602D,Y
C1/4479:	9D 86 26   	STA $2686,X    ; move newest item to empty slot in inventory
C1/447C:	C8         	INY
C1/447D:	E8         	INX
C1/447E:	C6 10      	DEC $10
C1/4480:	D0 F4      	BNE $4476
C1/4482:	80 10      	BRA $4494

C1/4484:	B9 30 60   	LDA $6030,Y    ; quantity of newest item
C1/4487:	18         	CLC
C1/4488:	7D 89 26   	ADC $2689,X    ; add to inventory quantity
C1/448B:	C9 64      	CMP #$64       ; > 99?
C1/448D:	90 02      	BCC $4491      ; if not, branch
C1/448F:	A9 63      	LDA #$63       ; else, set max quantity (99)
C1/4491:	9D 89 26   	STA $2689,X    ; update inventory item quantity

C1/4494:	A4 12      	LDY $12
C1/4496:	A9 FF      	LDA #$FF
C1/4498:	99 2D 60   	STA $602D,Y
C1/449B:	EE DB 64   	INC $64DB      ; "last item added to inventory" counter
C1/449E:	4C 45 44   	JMP $4445      ; loop through all obtained items
C1/44A1:	60         	RTS

; Draw active battle menu
C1/44A2:	A9 01      	LDA #$01
C1/44A4:	8D 98 7B   	STA $7B98      ; battle menu opening
C1/44A7:	20 45 44   	JSR $4445      ; add obtained items to battle inventory
C1/44AA:	20 59 47   	JSR $4759      ; transfer battle menu tiles [?]
C1/44AD:	A9 04      	LDA #$04
C1/44AF:	8D C3 7B   	STA $7BC3      ; set queued menu cursor state to 4
C1/44B2:	A9 01      	LDA #$01
C1/44B4:	8D C2 7B   	STA $7BC2      ; set menu cursor state to advance
C1/44B7:	EE BB 7B   	INC $7BBB      ; battle menu update pending
C1/44BA:	EE CA 7B   	INC $7BCA      ; flag menu open or opening
C1/44BD:	60         	RTS

; Update ATB/Morph/Condemned graphics (every frame)
C1/44BE:	AD 98 7B   	LDA $7B98      ; battle menu opening
C1/44C1:	0D 9C 7B   	ORA $7B9C      ; drawing menu text [?]
C1/44C4:	D0 11      	BNE $44D7      ; branch if either ^ set
C1/44C6:	AD 99 7B   	LDA $7B99      ; counter 0-7 [?]
C1/44C9:	0A         	ASL A
C1/44CA:	AA         	TAX
C1/44CB:	FC ED 44   	JSR ($44ED,X)  ; Pointer table
C1/44CE:	AD 99 7B   	LDA $7B99      ; get counter
C1/44D1:	1A         	INC A          ; increment counter
C1/44D2:	29 07      	AND #$07       ; modulo 8
C1/44D4:	8D 99 7B   	STA $7B99      ; save updated counter

C1/44D7:	AD 9A 7B   	LDA $7B9A      ; counter 0-3 for gauge/condemned updates
C1/44DA:	1A         	INC A          ; do next character
C1/44DB:	29 03      	AND #$03       ; modulo 4
C1/44DD:	8D 9A 7B   	STA $7B9A      ; save updated counter
C1/44E0:	0A         	ASL A
C1/44E1:	AA         	TAX
C1/44E2:	7C E5 44   	JMP ($44E5,X)  ; update one character's gauge per frame

; Pointers to ATB/Morph/Condemned updates
C1/44E5:	BC4A ; 00: Character 1 ($4ABC)
C1/44E7:	CA4A ; 01: Character 2 ($4ACA)
C1/44E9:	DB4A ; 02: Character 3 ($4ADB)
C1/44EB:	EC4A ; 03: Character 4 ($4AEC)

C1/44ED:	FD4A ; 00: Character 1 menu text [?] ($4AFD)
C1/44EF:	0045 ; 01: Set flag ($4500)
C1/44F1:	044B ; 02: Character 2 menu text [?] ($4B04)
C1/44F3:	0045 ; 03: Set flag ($4500)
C1/44F5:	0D4B ; 04: Character 3 menu text [?] ($4B0D)
C1/44F7:	0045 ; 05: Set flag ($4500)
C1/44F9:	164B ; 06: Character 4 menu text [?] ($4B16)
C1/44FB:	FD44 ; 07: ($44FD)

C1/44FD:	20 3E 4B   	JSR $4B3E
C1/4500:	EE 9C 7B   	INC $7B9C
C1/4503:	60         	RTS

; Menu changes [?]
C1/4504:	AD BB 7B   	LDA $7BBB      ; battle menu update pending
C1/4507:	D0 0C      	BNE $4515      ; branch to exit if so
C1/4509:	A6 00      	LDX $00
C1/450B:	86 10      	STX $10
C1/450D:	AD F0 7B   	LDA $7BF0      ; current menu state
C1/4510:	0A         	ASL A
C1/4511:	AA         	TAX
C1/4512:	7C 17 45   	JMP ($4517,X)  ; jump table for menu state
C1/4515:	60         	RTS

C1/4516:	60         	RTS

C1/4517:	1645 ; 00: Empty ($4516)
C1/4519:	CE50 ; 01: Advance menu state queue after changes ($50CE)
C1/451B:	DD50 ; 02: ($50DD)
C1/451D:	3746 ; 03
C1/451F:	F34F ; 04: ($4FF3) Slot machine [?]
C1/4521:	6B46 ; 05: ($466B)
C1/4523:	AD50 ; 06
C1/4525:	8850 ; 07
C1/4527:	B650 ; 08: Close menu [?] ($50B6)
C1/4529:	B74F ; 09: Load equipment menu ($4FB7)
C1/452B:	C44F ; 0A
C1/452D:	9850 ; 0B
C1/452F:	B650 ; 0C
C1/4531:	9B4F ; 0D
C1/4533:	A84F ; 0E
C1/4535:	1645 ; 0F
C1/4537:	E950 ; 10: Advance menu state queue now ($50E9)
C1/4539:	9850 ; 11
C1/453B:	B650 ; 12
C1/453D:	8850 ; 13
C1/453F:	B650 ; 14
C1/4541:	8850 ; 15
C1/4543:	B650 ; 16
C1/4545:	074F ; 17: Row Command Menu ($4F07)
C1/4547:	464F ; 18
C1/4549:	184F ; 19
C1/454B:	464F ; 1A: ($4F46)
C1/454D:	8850 ; 1B: Magitek Menu ($5088) [?]
C1/454F:	B650 ; 1C
C1/4551:	8850 ; 1D
C1/4553:	B650 ; 1E
C1/4555:	C850 ; 1F
C1/4557:	8850 ; 20
C1/4559:	B650 ; 21
C1/455B:	E243 ; 22
C1/455D:	1645 ; 23
C1/455F:	1645 ; 24
C1/4561:	DA4E ; 25
C1/4563:	F24E ; 26
C1/4565:	3E50 ; 27
C1/4567:	6250 ; 28
C1/4569:	2052 ; 29
C1/456B:	3552 ; 2A
C1/456D:	FE45 ; 2B: ($45FE) Target allies menu open [?]
C1/456F:	7145 ; 2C: ($4571) Target allies menu close [?]

C1/4571:	E6 10       INC $10
C1/4573:	A9 1A       LDA #$1A
C1/4575:	18          CLC
C1/4576:	6D BA EC    ADC $ECBA        ; 0: Item, 1: Magic
C1/4579:	20 FB 50    JSR $50FB        ; get menu window dimensions
C1/457C:	A9 0A       LDA #$0A
C1/457E:	20 65 51    JSR $5165
C1/4581:	20 8C 4F    JSR $4F8C
C1/4584:	4C F2 48    JMP $48F2

C1/4587:	C2 20      	REP #$20
C1/4589:	BD BD 2E   	LDA $2EBD,X
C1/458C:	F0 11      	BEQ $459F
C1/458E:	EB         	XBA
C1/458F:	A2 00 00   	LDX #$0000
C1/4592:	0A         	ASL A
C1/4593:	B0 06      	BCS $459B
C1/4595:	E8         	INX
C1/4596:	E0 10 00   	CPX #$0010
C1/4599:	D0 F7      	BNE $4592
C1/459B:	8A         	TXA
C1/459C:	E2 20      	SEP #$20           ; 8-bit A
C1/459E:	60         	RTS

C1/459F:	BD BF 2E   	LDA $2EBF,X
C1/45A2:	A2 10 00   	LDX #$0010
C1/45A5:	EB         	XBA
C1/45A6:	0A         	ASL A
C1/45A7:	B0 06      	BCS $45AF
C1/45A9:	E8         	INX
C1/45AA:	E0 1F 00   	CPX #$001F
C1/45AD:	D0 F7      	BNE $45A6
C1/45AF:	8A         	TXA
C1/45B0:	E2 20      	SEP #$20           ; 8-bit A
C1/45B2:	60         	RTS

C1/45B3:	AA         	TAX
C1/45B4:	BD D6 64   	LDA $64D6,X
C1/45B7:	30 08      	BMI $45C1
C1/45B9:	0A         	ASL A
C1/45BA:	0A         	ASL A
C1/45BB:	0A         	ASL A
C1/45BC:	0A         	ASL A
C1/45BD:	0A         	ASL A
C1/45BE:	AA         	TAX
C1/45BF:	38         	SEC
C1/45C0:	60         	RTS

C1/45C1:	18         	CLC
C1/45C2:	60         	RTS

C1/45C3:	A9 21      	LDA #$21
C1/45C5:	20 5A 4E   	JSR $4E5A
C1/45C8:	7B         	TDC
C1/45C9:	20 B3 45   	JSR $45B3
C1/45CC:	90 2D      	BCC $45FB
C1/45CE:	20 87 45   	JSR $4587
C1/45D1:	8D D6 56   	STA $56D6
C1/45D4:	A9 01      	LDA #$01
C1/45D6:	20 B3 45   	JSR $45B3
C1/45D9:	90 20      	BCC $45FB
C1/45DB:	20 87 45   	JSR $4587
C1/45DE:	8D D9 56   	STA $56D9
C1/45E1:	A9 02      	LDA #$02
C1/45E3:	20 B3 45   	JSR $45B3
C1/45E6:	90 13      	BCC $45FB
C1/45E8:	20 87 45   	JSR $4587
C1/45EB:	8D DC 56   	STA $56DC
C1/45EE:	A9 03      	LDA #$03
C1/45F0:	20 B3 45   	JSR $45B3
C1/45F3:	90 06      	BCC $45FB
C1/45F5:	20 87 45   	JSR $4587
C1/45F8:	8D DF 56   	STA $56DF
C1/45FB:	4C B1 66   	JMP $66B1

; Open "Target Allies" menu [?] TODO
C1/45FE:	A9 22      	LDA #$22
C1/4600:	20 5A 4E   	JSR $4E5A     ; move lots of pointers [?]
C1/4603:	20 B1 66   	JSR $66B1
C1/4606:	20 C3 45   	JSR $45C3
C1/4609:	A9 11      	LDA #$11
C1/460B:	20 04 47   	JSR $4704     ; transfer graphics from buffer
C1/460E:	1A         	INC A
C1/460F:	20 04 47   	JSR $4704     ; transfer graphics from buffer
C1/4612:	A9 02      	LDA #$02      ; "Current HP" tile buffer
C1/4614:	20 04 47   	JSR $4704     ; transfer graphics from buffer
C1/4617:	1A         	INC A
C1/4618:	20 04 47   	JSR $4704     ; transfer graphics from buffer
C1/461B:	A9 02      	LDA #$02
C1/461D:	A0 53 8D   	LDY #$8D53
C1/4620:	20 21 47   	JSR $4721
C1/4623:	A9 01      	LDA #$01      ; set flag
C1/4625:	8D 85 7B   	STA $7B85     ; flag to open menu instantly [?]
C1/4628:	64 10      	STZ $10
C1/462A:	A9 19      	LDA #$19
C1/462C:	20 FB 50   	JSR $50FB
C1/462F:	A9 0A      	LDA #$0A
C1/4631:	20 65 51   	JSR $5165
C1/4634:	4C 77 4F   	JMP $4F77

C1/4637:	AE CA 62   	LDX $62CA
C1/463A:	BD CC 62   	LDA $62CC,X
C1/463D:	D0 09      	BNE $4648
C1/463F:	AD 2E 2F   	LDA $2F2E     ; command menu mode (short/window)
C1/4642:	F0 04      	BEQ $4648
C1/4644:	A9 16      	LDA #$16
C1/4646:	80 02      	BRA $464A
C1/4648:	A9 01      	LDA #$01
C1/464A:	20 FB 50   	JSR $50FB
C1/464D:	7B         	TDC
C1/464E:	20 65 51   	JSR $5165
C1/4651:	20 AC 47   	JSR $47AC
C1/4654:	20 77 4F   	JSR $4F77
C1/4657:	EE BB 7B   	INC $7BBB
C1/465A:	A9 01      	LDA #$01      ; menu: advance queue when ready
C1/465C:	8D F0 7B   	STA $7BF0     ; update menu state
C1/465F:	8D 85 7B   	STA $7B85     ; flag to open menu instantly [?]
C1/4662:	EE DD 7B   	INC $7BDD
C1/4665:	EE D1 7B   	INC $7BD1
C1/4668:	E6 93      	INC $93       ; sound: character ready
C1/466A:	60         	RTS

; Menu state $05
C1/466B:	E6 10      	INC $10       ; increment open menu count [?]
C1/466D:	7B         	TDC           ; A = 0000
C1/466E:	20 FB 50   	JSR $50FB     ; get menu window dimensions
C1/4671:	20 2B 4B   	JSR $4B2B     ; get active character menu slot
C1/4674:	A9 21      	LDA #$21
C1/4676:	20 80 47   	JSR $4780
C1/4679:	7B         	TDC           ; A = 0000
C1/467A:	20 65 51   	JSR $5165     ; get more window dimensions [?]
C1/467D:	EE EE 7B   	INC $7BEE
C1/4680:	A9 02      	LDA #$02
C1/4682:	8D F0 7B   	STA $7BF0     ; update menu state
C1/4685:	9C 85 7B   	STZ $7B85     ; flag to open menu instantly [?]
C1/4688:	EE DD 7B   	INC $7BDD
C1/468B:	EE D1 7B   	INC $7BD1     ; menu window needs size change
C1/468E:	60         	RTS

C1/468F:	A0 EE 01   	LDY #$01EE
C1/4692:	C2 20      	REP #$20
C1/4694:	A6 00      	LDX $00
C1/4696:	98         	TYA
C1/4697:	9D 55 58   	STA $5855,X
C1/469A:	E8         	INX
C1/469B:	E8         	INX
C1/469C:	E0 80 02   	CPX #$0280
C1/469F:	D0 F6      	BNE $4697
C1/46A1:	7B         	TDC
C1/46A2:	E2 20      	SEP #$20           ; 8-bit A
C1/46A4:	60         	RTS

C1/46A5:	A9 04      	LDA #$04
C1/46A7:	8D FD 7A   	STA $7AFD
C1/46AA:	E2 10      	SEP #$10
C1/46AC:	C2 20      	REP #$20
C1/46AE:	0B         	PHD
C1/46AF:	A9 00 01   	LDA #$0100
C1/46B2:	48         	PHA
C1/46B3:	2B         	PLD
C1/46B4:	A2 00      	LDX #$00
C1/46B6:	BD 07 43   	LDA $4307,X
C1/46B9:	95 02      	STA $02,X
C1/46BB:	9D F7 51   	STA $51F7,X
C1/46BE:	E8         	INX
C1/46BF:	E8         	INX
C1/46C0:	E8         	INX
C1/46C1:	E8         	INX
C1/46C2:	E0 C0      	CPX #$C0
C1/46C4:	D0 F0      	BNE $46B6
C1/46C6:	BD 07 43   	LDA $4307,X
C1/46C9:	95 02      	STA $02,X
C1/46CB:	E8         	INX
C1/46CC:	E8         	INX
C1/46CD:	E8         	INX
C1/46CE:	E8         	INX
C1/46CF:	E0 F0      	CPX #$F0
C1/46D1:	D0 F3      	BNE $46C6
C1/46D3:	2B         	PLD
C1/46D4:	7B         	TDC
C1/46D5:	E2 20      	SEP #$20           ; 8-bit A
C1/46D7:	C2 10      	REP #$10
C1/46D9:	60         	RTS

; Move data blocks to 64-byte destination blocks
C1/46DA:	E2 10      	SEP #$10       ; 8-bit XY
C1/46DC:	C2 20      	REP #$20       ; 16-bit A
C1/46DE:	A6 16      	LDX $16        ; how many structs to move
C1/46E0:	A4 00      	LDY $00        ; data block offset (always 0000?)

C1/46E2:	B1 10      	LDA ($10),Y    ; source data
C1/46E4:	91 12      	STA ($12),Y    ; move to destination
C1/46E6:	C8         	INY
C1/46E7:	C8         	INY            ; get next 2 bytes
C1/46E8:	C4 14      	CPY $14        ; data length
C1/46EA:	D0 F6      	BNE $46E2      ; loop till all moved

C1/46EC:	A5 10      	LDA $10
C1/46EE:	18         	CLC
C1/46EF:	65 14      	ADC $14
C1/46F1:	85 10      	STA $10        ; advance to next data block
C1/46F3:	A5 12      	LDA $12
C1/46F5:	18         	CLC
C1/46F6:	69 40 00   	ADC #$0040     ; destination data always 64 bytes long
C1/46F9:	85 12      	STA $12        ; set next destination
C1/46FB:	CA         	DEX
C1/46FC:	D0 E2      	BNE $46E0      ; loop to move all structs
C1/46FE:	7B         	TDC            ; A = 0000
C1/46FF:	C2 10      	REP #$10       ; 16-bit XY
C1/4701:	E2 20      	SEP #$20       ; 8-bit A
C1/4703:	60         	RTS

; Move some data - instructions at index A in C2/DF9E
C1/4704:	48         	PHA             ; save index
C1/4705:	0A         	ASL A
C1/4706:	0A         	ASL A
C1/4707:	0A         	ASL A
C1/4708:	AA         	TAX             ; X = A * 8 (offset of data)
C1/4709:	A4 00      	LDY $00         ; destination offset (always 0000?)
C1/470B:	BF 9E DF C2	LDA $C2DF9E,X   ; move 8 bytes
C1/470F:	99 10 00   	STA $0010,Y     ; should be direct page address $10?
C1/4712:	E8         	INX
C1/4713:	C8         	INY
C1/4714:	C0 08 00   	CPY #$0008
C1/4717:	D0 F2      	BNE $470B       ; loop to move all 8 bytes
C1/4719:	20 DA 46   	JSR $46DA
C1/471C:	68         	PLA             ; restore index
C1/471D:	60         	RTS

C1/471E:	A0 55 58   	LDY #$5855

C1/4721:	5A         	PHY
C1/4722:	48         	PHA
C1/4723:	AD BB 7B   	LDA $7BBB        ; battle menu update pending
C1/4726:	F0 05      	BEQ $472D        ; branch if not ^
C1/4728:	20 24 1A   	JSR $1A24
C1/472B:	80 F6      	BRA $4723

C1/472D:	68         	PLA
C1/472E:	0A         	ASL A
C1/472F:	0A         	ASL A            ; x4
C1/4730:	AA         	TAX              ; index it
C1/4731:	C2 20      	REP #$20         ; 16-bit A
C1/4733:	BF 49 47 C1	LDA $C14749,X    ; Data
C1/4737:	8D BC 7B   	STA $7BBC        ; tile data size [?]
C1/473A:	BF 4B 47 C1	LDA $C1474B,X    ; Data
C1/473E:	8D BE 7B   	STA $7BBE        ; pointer to menu tile data
C1/4741:	7A         	PLY
C1/4742:	8C C0 7B   	STY $7BC0        ; pointer to menu tile buffer
C1/4745:	7B         	TDC              ; zero A
C1/4746:	E2 20      	SEP #$20         ; 8-bit A
C1/4748:	60         	RTS

C1/4749:	0002
C1/474B:	0078
C1/474D:	0002
C1/474F:	0079
C1/4751:	0002
C1/4753:	007A
C1/4755:	8002
C1/4757:	007C

; Transfer battle menu tiles [?]
C1/4759:	7B         	TDC            ; "Enemy Names" tile buffer
C1/475A:	20 04 47   	JSR $4704      ; transfer graphics from buffer
C1/475D:	1A         	INC A          ; "Character Names" tile buffer
C1/475E:	20 04 47   	JSR $4704      ; transfer graphics from buffer
C1/4761:	1A         	INC A          ; "Current HP" tile buffer
C1/4762:	20 04 47   	JSR $4704      ; transfer graphics from buffer
C1/4765:	1A         	INC A          ; "ATB/MaxHP" tile backup [?]
C1/4766:	20 04 47   	JSR $4704      ; transfer graphics from buffer
C1/4769:	7B         	TDC
C1/476A:	4C 1E 47   	JMP $471E

C1/476D:	00
C1/476E:	1C
C1/476F:	38
C1/4770:	54

C1/4771:	7B         	TDC
C1/4772:	AA         	TAX
C1/4773:	A9 21      	LDA #$21
C1/4775:	9D 96 5B   	STA $5B96,X
C1/4778:	E8         	INX
C1/4779:	E8         	INX
C1/477A:	E0 70 00   	CPX #$0070
C1/477D:	D0 F6      	BNE $4775
C1/477F:	60         	RTS

; Update name text palette for active character

C1/4780:	48         	PHA            ; store palette to use
C1/4781:	DA         	PHX            ; store character slot to modify
C1/4782:	7B         	TDC            ; A = 0000
C1/4783:	AA         	TAX            ; X = 0000
C1/4784:	A9 21      	LDA #$21       ; "white" palette
C1/4786:	20 91 47   	JSR $4791      ; reset palette to "white"
C1/4789:	E8         	INX            ; next slot
C1/478A:	E0 04 00   	CPX #$0004     ; do all 4
C1/478D:	D0 F5      	BNE $4784      ; loop
C1/478F:	FA         	PLX            ; now use target slot
C1/4790:	68         	PLA            ; and target palette

C1/4791:	DA         	PHX
C1/4792:	48         	PHA
C1/4793:	8A         	TXA
C1/4794:	29 03      	AND #$03
C1/4796:	AA         	TAX
C1/4797:	BF 6D 47 C1	LDA $C1476D,X    ; Data
C1/479B:	AA         	TAX
C1/479C:	A9 0E      	LDA #$0E
C1/479E:	85 12      	STA $12
C1/47A0:	68         	PLA
C1/47A1:	9D 96 5B   	STA $5B96,X
C1/47A4:	E8         	INX
C1/47A5:	E8         	INX
C1/47A6:	C6 12      	DEC $12
C1/47A8:	D0 F7      	BNE $47A1
C1/47AA:	FA         	PLX
C1/47AB:	60         	RTS

C1/47AC:	AE CA 62   	LDX $62CA
C1/47AF:	BD CC 62   	LDA $62CC,X
C1/47B2:	D0 3A      	BNE $47EE
C1/47B4:	AD 2E 2F   	LDA $2F2E     ; command menu mode (short/window)
C1/47B7:	F0 77      	BEQ $4830
C1/47B9:	A9 1F      	LDA #$1F
C1/47BB:	20 5A 4E   	JSR $4E5A
C1/47BE:	AE CA 62   	LDX $62CA
C1/47C1:	BF 5B 4B C1	LDA $C14B5B,X
C1/47C5:	AA         	TAX
C1/47C6:	7B         	TDC
C1/47C7:	A8         	TAY
C1/47C8:	BD 2E 20   	LDA $202E,X
C1/47CB:	99 DA 56   	STA $56DA,Y
C1/47CE:	BD 2F 20   	LDA $202F,X
C1/47D1:	20 6B 4B   	JSR $4B6B
C1/47D4:	19 D8 56   	ORA $56D8,Y
C1/47D7:	99 D8 56   	STA $56D8,Y
C1/47DA:	E8         	INX
C1/47DB:	E8         	INX
C1/47DC:	E8         	INX
C1/47DD:	98         	TYA
C1/47DE:	18         	CLC
C1/47DF:	69 09      	ADC #$09
C1/47E1:	A8         	TAY
C1/47E2:	C9 24      	CMP #$24
C1/47E4:	D0 E2      	BNE $47C8
C1/47E6:	20 B1 66   	JSR $66B1
C1/47E9:	A9 01      	LDA #$01
C1/47EB:	4C 1E 47   	JMP $471E

C1/47EE:	20 2B 4B   	JSR $4B2B
C1/47F1:	A9 29      	LDA #$29
C1/47F3:	20 80 47   	JSR $4780
C1/47F6:	A9 01      	LDA #$01
C1/47F8:	20 04 47   	JSR $4704         ; transfer graphics from buffer
C1/47FB:	A9 20      	LDA #$20
C1/47FD:	20 5A 4E   	JSR $4E5A
C1/4800:	AE CA 62   	LDX $62CA
C1/4803:	BF 5B 4B C1	LDA $C14B5B,X
C1/4807:	AA         	TAX
C1/4808:	7B         	TDC
C1/4809:	A8         	TAY
C1/480A:	BD 5E 20   	LDA $205E,X
C1/480D:	99 D9 56   	STA $56D9,Y
C1/4810:	BD 5F 20   	LDA $205F,X
C1/4813:	20 6B 4B   	JSR $4B6B
C1/4816:	19 D7 56   	ORA $56D7,Y
C1/4819:	99 D7 56   	STA $56D7,Y
C1/481C:	E8         	INX
C1/481D:	E8         	INX
C1/481E:	E8         	INX
C1/481F:	98         	TYA
C1/4820:	18         	CLC
C1/4821:	69 08      	ADC #$08
C1/4823:	A8         	TAY
C1/4824:	C9 20      	CMP #$20
C1/4826:	D0 E2      	BNE $480A
C1/4828:	20 B1 66   	JSR $66B1
C1/482B:	A9 01      	LDA #$01
C1/482D:	4C 1E 47   	JMP $471E

C1/4830:	20 2B 4B   	JSR $4B2B
C1/4833:	A9 29      	LDA #$29
C1/4835:	20 80 47   	JSR $4780
C1/4838:	A9 01      	LDA #$01
C1/483A:	20 04 47   	JSR $4704        ; transfer graphics from buffer
C1/483D:	A9 04      	LDA #$04
C1/483F:	20 5A 4E   	JSR $4E5A
C1/4842:	AE CA 62   	LDX $62CA
C1/4845:	BF 5B 4B C1	LDA $C14B5B,X    ; Data
C1/4849:	AA         	TAX
C1/484A:	7B         	TDC
C1/484B:	A8         	TAY
C1/484C:	BD 2E 20   	LDA $202E,X
C1/484F:	99 DA 56   	STA $56DA,Y
C1/4852:	BD 2F 20   	LDA $202F,X
C1/4855:	20 6B 4B   	JSR $4B6B
C1/4858:	19 D8 56   	ORA $56D8,Y
C1/485B:	99 D8 56   	STA $56D8,Y
C1/485E:	E8         	INX
C1/485F:	E8         	INX
C1/4860:	E8         	INX
C1/4861:	98         	TYA
C1/4862:	18         	CLC
C1/4863:	69 08      	ADC #$08
C1/4865:	A8         	TAY
C1/4866:	C9 20      	CMP #$20
C1/4868:	D0 E2      	BNE $484C
C1/486A:	20 B1 66   	JSR $66B1
C1/486D:	A9 01      	LDA #$01
C1/486F:	4C 1E 47   	JMP $471E

C1/4872:	AE CA 62   	LDX $62CA
C1/4875:	A9 07      	LDA #$07
C1/4877:	38         	SEC
C1/4878:	ED 20 20   	SBC $2020
C1/487B:	AA         	TAX
C1/487C:	7B         	TDC
C1/487D:	A8         	TAY
C1/487E:	BF 60 A8 C2	LDA $C2A860,X
C1/4882:	99 DA 5D   	STA $5DDA,Y
C1/4885:	E8         	INX
C1/4886:	C8         	INY
C1/4887:	C8         	INY
C1/4888:	C0 10 00   	CPY #$0010
C1/488B:	D0 F1      	BNE $487E
C1/488D:	A9 0C      	LDA #$0C
C1/488F:	20 04 47   	JSR $4704  ; transfer graphics from buffer
C1/4892:	A9 0D      	LDA #$0D
C1/4894:	20 04 47   	JSR $4704  ; transfer graphics from buffer
C1/4897:	A9 0E      	LDA #$0E
C1/4899:	20 04 47   	JSR $4704  ; transfer graphics from buffer
C1/489C:	A9 02      	LDA #$02
C1/489E:	A0 53 8D   	LDY #$8D53
C1/48A1:	4C 21 47   	JMP $4721

C1/48A4:	A9 0C      	LDA #$0C
C1/48A6:	20 04 47   	JSR $4704  ; transfer graphics from buffer
C1/48A9:	A9 0D      	LDA #$0D
C1/48AB:	20 04 47   	JSR $4704  ; transfer graphics from buffer
C1/48AE:	AD 2E 2F   	LDA $2F2E     ; command menu mode (short/window)
C1/48B1:	F0 04      	BEQ $48B7
C1/48B3:	A9 10      	LDA #$10
C1/48B5:	80 09      	BRA $48C0
C1/48B7:	AE CA 62   	LDX $62CA
C1/48BA:	BD 0F 89   	LDA $890F,X
C1/48BD:	18         	CLC
C1/48BE:	69 08      	ADC #$08
C1/48C0:	20 04 47   	JSR $4704  ; transfer graphics from buffer
C1/48C3:	A9 02      	LDA #$02
C1/48C5:	A0 53 8D   	LDY #$8D53
C1/48C8:	4C 21 47   	JMP $4721

; Build "Row" Command Menu Contents [?]
C1/48CB:	A9 0C      	LDA #$0C
C1/48CD:	20 04 47   	JSR $4704           ; move some object data [?]
C1/48D0:	A9 0D      	LDA #$0D
C1/48D2:	20 04 47   	JSR $4704           ; move some object data [?]
C1/48D5:	AD 2E 2F   	LDA $2F2E           ; command menu mode (short/window)
C1/48D8:	F0 04      	BEQ $48DE
C1/48DA:	A9 0F      	LDA #$0F
C1/48DC:	80 09      	BRA $48E7

C1/48DE:	AE CA 62   	LDX $62CA           ; active character
C1/48E1:	BD 0F 89   	LDA $890F,X         ; character's cursor position
C1/48E4:	18         	CLC
C1/48E5:	69 04      	ADC #$04            ; +4

C1/48E7:	20 04 47   	JSR $4704           ; move "Row" text data [?]
C1/48EA:	A9 02      	LDA #$02
C1/48EC:	A0 53 8D   	LDY #$8D53
C1/48EF:	4C 21 47   	JMP $4721

C1/48F2:	8B         	PHB
C1/48F3:	C2 20      	REP #$20
C1/48F5:	A2 55 58   	LDX #$5855
C1/48F8:	A0 53 8D   	LDY #$8D53
C1/48FB:	A9 FF 01   	LDA #$01FF
C1/48FE:	54 7E 7E   	MVN 7E 7E
C1/4901:	7B         	TDC
C1/4902:	E2 20      	SEP #$20           ; 8-bit A
C1/4904:	AB         	PLB
C1/4905:	60         	RTS

C1/4906:	84 10      	STY $10
C1/4908:	C2 20      	REP #$20
C1/490A:	A9 10 00   	LDA #$0010
C1/490D:	85 18      	STA $18
C1/490F:	BF 00 A8 C2	LDA $C2A800,X
C1/4913:	0A         	ASL A
C1/4914:	DA         	PHX
C1/4915:	AA         	TAX
C1/4916:	BF 5B 49 C1	LDA $C1495B,X    ; Data
C1/491A:	85 16      	STA $16
C1/491C:	FA         	PLX
C1/491D:	A9 02 00   	LDA #$0002
C1/4920:	85 14      	STA $14
C1/4922:	A5 10      	LDA $10
C1/4924:	8F 16 21 00	STA $002116
C1/4928:	A5 16      	LDA $16
C1/492A:	8F 18 21 00	STA $002118
C1/492E:	1A         	INC A
C1/492F:	8F 18 21 00	STA $002118
C1/4933:	1A         	INC A
C1/4934:	8F 18 21 00	STA $002118
C1/4938:	1A         	INC A
C1/4939:	8F 18 21 00	STA $002118
C1/493D:	A5 10      	LDA $10
C1/493F:	18         	CLC
C1/4940:	69 20 00   	ADC #$0020
C1/4943:	85 10      	STA $10
C1/4945:	A5 16      	LDA $16
C1/4947:	18         	CLC
C1/4948:	69 10 00   	ADC #$0010
C1/494B:	85 16      	STA $16
C1/494D:	C6 14      	DEC $14
C1/494F:	D0 D1      	BNE $4922
C1/4951:	E8         	INX
C1/4952:	E8         	INX
C1/4953:	C6 18      	DEC $18
C1/4955:	D0 B8      	BNE $490F
C1/4957:	7B         	TDC
C1/4958:	E2 20      	SEP #$20           ; 8-bit A
C1/495A:	60         	RTS

C1/495B:	4006
C1/495D:	4406
C1/495F:	4806
C1/4961:	4C06
C1/4963:	6006
C1/4965:	6406
C1/4967:	6806
C1/4969:	6C06

C1/496B:	A0 09 6C   	LDY #$6C09
C1/496E:	A2 00 00   	LDX #$0000
C1/4971:	20 06 49   	JSR $4906
C1/4974:	A0 0E 6C   	LDY #$6C0E
C1/4977:	A2 20 00   	LDX #$0020
C1/497A:	20 06 49   	JSR $4906
C1/497D:	A0 13 6C   	LDY #$6C13
C1/4980:	A2 40 00   	LDX #$0040
C1/4983:	20 06 49   	JSR $4906
C1/4986:	A0 EE 00   	LDY #$00EE
C1/4989:	20 92 46   	JSR $4692
C1/498C:	7B         	TDC
C1/498D:	AA         	TAX
C1/498E:	A8         	TAY
C1/498F:	BF 37 4A C1	LDA $C14A37,X    ; Default "CurrentMP/MaxMP" tile data
C1/4993:	99 83 58   	STA $5883,Y      ; copy to buffer
C1/4996:	BF 4C 4A C1	LDA $C14A4C,X    ; Data
C1/499A:	99 84 58   	STA $5884,Y      
C1/499D:	BF 3E 4A C1	LDA $C14A3E,X    ; Data
C1/49A1:	99 03 59   	STA $5903,Y      ; Default "MP Needed" tile data
C1/49A4:	BF 53 4A C1	LDA $C14A53,X    ; Data
C1/49A8:	99 04 59   	STA $5904,Y
C1/49AB:	BF 45 4A C1	LDA $C14A45,X    ; Data
C1/49AF:	99 83 59   	STA $5983,Y
C1/49B2:	BF 5A 4A C1	LDA $C14A5A,X    ; Data
C1/49B6:	99 84 59   	STA $5984,Y
C1/49B9:	C8         	INY
C1/49BA:	C8         	INY
C1/49BB:	E8         	INX
C1/49BC:	E0 07 00   	CPX #$0007
C1/49BF:	D0 CE      	BNE $498F
C1/49C1:	A2 80 01   	LDX #$0180
C1/49C4:	86 36      	STX $36
C1/49C6:	A2 55 58   	LDX #$5855
C1/49C9:	A0 A0 6A   	LDY #$6AA0
C1/49CC:	A9 7E      	LDA #$7E
C1/49CE:	20 2B 1A   	JSR $1A2B         ; execute VRAM DMA transfer
C1/49D1:	7B         	TDC
C1/49D2:	A8         	TAY
C1/49D3:	B9 83 58   	LDA $5883,Y       ; default MP/MaxMP tiles data [?]
C1/49D6:	99 15 5D   	STA $5D15,Y       ; update MP/MaxMP tile buffer
C1/49D9:	B9 03 59   	LDA $5903,Y       ; default MP Needed tiles
C1/49DC:	99 23 5D   	STA $5D23,Y       ; update MP Needed tile buffer
C1/49DF:	C8         	INY
C1/49E0:	C0 0E 00   	CPY #$000E
C1/49E3:	D0 EE      	BNE $49D3
C1/49E5:	20 17 5A   	JSR $5A17
C1/49E8:	A9 06      	LDA #$06
C1/49EA:	20 5A 4E   	JSR $4E5A
C1/49ED:	20 B1 66   	JSR $66B1
C1/49F0:	A2 80 00   	LDX #$0080
C1/49F3:	86 36      	STX $36
C1/49F5:	A2 4D 5E   	LDX #$5E4D
C1/49F8:	A9 7E      	LDA #$7E
C1/49FA:	A0 00 7E   	LDY #$7E00
C1/49FD:	20 2B 1A   	JSR $1A2B         ; execute VRAM DMA transfer
C1/4A00:	60         	RTS

; This is where monster names are drawn [?]
C1/4A01:	20 61 4A   	JSR $4A61
C1/4A04:	20 8F 4A   	JSR $4A8F
C1/4A07:	20 23 4B   	JSR $4B23
C1/4A0A:	20 4B 4B   	JSR $4B4B
C1/4A0D:	20 68 4A   	JSR $4A68
C1/4A10:	A9 1E      	LDA #$1E
C1/4A12:	20 5A 4E   	JSR $4E5A
C1/4A15:	AE CA 62   	LDX $62CA
C1/4A18:	A9 07      	LDA #$07
C1/4A1A:	38         	SEC
C1/4A1B:	ED 20 20   	SBC $2020
C1/4A1E:	AA         	TAX
C1/4A1F:	7B         	TDC
C1/4A20:	A8         	TAY
C1/4A21:	BF 60 A8 C2	LDA $C2A860,X
C1/4A25:	99 D8 56   	STA $56D8,Y
C1/4A28:	E8         	INX
C1/4A29:	C8         	INY
C1/4A2A:	C8         	INY
C1/4A2B:	C8         	INY
C1/4A2C:	C0 18 00   	CPY #$0018
C1/4A2F:	D0 F0      	BNE $4A21
C1/4A31:	20 B1 66   	JSR $66B1
C1/4A34:	4C 53 4B   	JMP $4B53

C1/4A37:	08      	; 0
C1/4A38:	08      	; 0
C1/4A39:	08      	; 0
C1/4A3A:	15      	; /
C1/4A3B:	08      	; 0
C1/4A3C:	08      	; 0
C1/4A3D:	08      	; 0

C1/4A3E:	08      	; 0
C1/4A3F:	08      	; 0
C1/4A40:	08      	; 0
C1/4A41:	FF      	; Space char
C1/4A42:	19      	; M
C1/4A43:	1A      	; P
C1/4A44:	FF      	; Space char

C1/4A45:	FF      	; Space char
C1/4A46:	16      	; N
C1/4A47:	17      	; e
C1/4A48:	17      	; e
C1/4A49:	18      	; d
C1/4A4A:	17      	; e
C1/4A4B:	18      	; d

C1/4A4C:	02
C1/4A4D:	02
C1/4A4E:	02
C1/4A4F:	02
C1/4A50:	02
C1/4A51:	02
C1/4A52:	02

C1/4A53:	02
C1/4A54:	02
C1/4A55:	02
C1/4A56:	00
C1/4A57:	02
C1/4A58:	02
C1/4A59:	00

C1/4A5A:	00
C1/4A5B:	02
C1/4A5C:	02
C1/4A5D:	02
C1/4A5E:	02
C1/4A5F:	02
C1/4A60:	02

C1/4A61:	7B         	TDC
C1/4A62:	20 5A 4E   	JSR $4E5A
C1/4A65:	4C B1 66   	JMP $66B1

C1/4A68:	7B         	TDC
C1/4A69:	AA         	TAX
C1/4A6A:	C2 20      	REP #$20
C1/4A6C:	A9 FF 01   	LDA #$01FF
C1/4A6F:	9D 31 5D   	STA $5D31,X
C1/4A72:	9D 77 5D   	STA $5D77,X
C1/4A75:	E8         	INX
C1/4A76:	E8         	INX
C1/4A77:	E0 46 00   	CPX #$0046
C1/4A7A:	D0 F3      	BNE $4A6F
C1/4A7C:	7B         	TDC
C1/4A7D:	E2 20      	SEP #$20           ; 8-bit A
C1/4A7F:	A9 08      	LDA #$08
C1/4A81:	20 5A 4E   	JSR $4E5A
C1/4A84:	20 B1 66   	JSR $66B1
C1/4A87:	A9 09      	LDA #$09
C1/4A89:	20 5A 4E   	JSR $4E5A
C1/4A8C:	4C B1 66   	JMP $66B1

C1/4A8F:	A9 01      	LDA #$01
C1/4A91:	20 5A 4E   	JSR $4E5A
C1/4A94:	4C B1 66   	JMP $66B1


; Get ATB/Morph/Condemned data for selected battle menu
; Return $04 if morph gauge active, $00 otherwise
C1/4A97:	AA         	TAX            ; X = 0-3 index
C1/4A98:	BD D6 64   	LDA $64D6,X    ; character slot for selected battle menu?
C1/4A9B:	30 1D      	BMI $4ABA      ; return #00 if null (no character)?
C1/4A9D:	29 03      	AND #$03       ; ensure slot is 0-3
C1/4A9F:	AA         	TAX
C1/4AA0:	BD 22 20   	LDA $2022,X    ; A = ATB gauge value
C1/4AA3:	9D 9E 61   	STA $619E,X    ; copy here
C1/4AA6:	BD 26 20   	LDA $2026,X    ; A = morph gauge value
C1/4AA9:	9D A2 61   	STA $61A2,X    ; copy here
C1/4AAC:	BD 2A 20   	LDA $202A,X    ; A = character condemned counter
C1/4AAF:	9D A6 61   	STA $61A6,X    ; copy here
C1/4AB2:	BD 26 20   	LDA $2026,X    ; A = morph gauge (why again?)
C1/4AB5:	F0 03      	BEQ $4ABA      ; return #00 if morph disabled
C1/4AB7:	A9 04      	LDA #$04       ; else return #04
C1/4AB9:	60         	RTS

C1/4ABA:	7B         	TDC
C1/4ABB:	60         	RTS

C1/4ABC:	7B         	TDC
C1/4ABD:	20 97 4A   	JSR $4A97      ; copy ATB/Morph/Condemned data
C1/4AC0:	18         	CLC            ; for character at this battle menu index
C1/4AC1:	69 12      	ADC #$12       ; A = index + morph gauge offset
C1/4AC3:	20 1D 4B   	JSR $4B1D      ; draw the graphic/tiles (text?)
C1/4AC6:	9C 9B 7B   	STZ $7B9B      ; zero character to update for condemned?
C1/4AC9:	60         	RTS

C1/4ACA:	A9 01      	LDA #$01       ; same as above, for battle menu 1
C1/4ACC:	20 97 4A   	JSR $4A97
C1/4ACF:	18         	CLC
C1/4AD0:	69 13      	ADC #$13
C1/4AD2:	20 1D 4B   	JSR $4B1D
C1/4AD5:	A9 01      	LDA #$01
C1/4AD7:	8D 9B 7B   	STA $7B9B
C1/4ADA:	60         	RTS

C1/4ADB:	A9 02      	LDA #$02       ; same as above, for battle menu 2
C1/4ADD:	20 97 4A   	JSR $4A97
C1/4AE0:	18         	CLC
C1/4AE1:	69 14      	ADC #$14
C1/4AE3:	20 1D 4B   	JSR $4B1D
C1/4AE6:	A9 02      	LDA #$02
C1/4AE8:	8D 9B 7B   	STA $7B9B
C1/4AEB:	60         	RTS

C1/4AEC:	A9 03      	LDA #$03       ; same as above, for battle menu 3
C1/4AEE:	20 97 4A   	JSR $4A97
C1/4AF1:	18         	CLC
C1/4AF2:	69 15      	ADC #$15
C1/4AF4:	20 1D 4B   	JSR $4B1D
C1/4AF7:	A9 03      	LDA #$03
C1/4AF9:	8D 9B 7B   	STA $7B9B
C1/4AFC:	60         	RTS

C1/4AFD:	9C 9D 7B   	STZ $7B9D      ; character 1 [?]
C1/4B00:	A9 0E      	LDA #$0E
C1/4B02:	80 19      	BRA $4B1D

C1/4B04:	A9 01      	LDA #$01       ; character 2 [?]
C1/4B06:	8D 9D 7B   	STA $7B9D
C1/4B09:	A9 0F      	LDA #$0F
C1/4B0B:	80 10      	BRA $4B1D

C1/4B0D:	A9 02      	LDA #$02       ; character 3 [?]
C1/4B0F:	8D 9D 7B   	STA $7B9D
C1/4B12:	A9 10      	LDA #$10
C1/4B14:	80 07      	BRA $4B1D

C1/4B16:	A9 03      	LDA #$03       ; character 4 [?]
C1/4B18:	8D 9D 7B   	STA $7B9D
C1/4B1B:	A9 11      	LDA #$11

C1/4B1D:	20 5A 4E   	JSR $4E5A
C1/4B20:	4C B1 66   	JMP $66B1      ; write menu text tiles [?]

C1/4B23:	A9 02      	LDA #$02
C1/4B25:	20 5A 4E   	JSR $4E5A
C1/4B28:	4C B1 66   	JMP $66B1

; Get battle menu slot of active character
; X holds index of menu -- return 0 default
C1/4B2B:	7B         	TDC            ; A = 0000
C1/4B2C:	AA         	TAX            ; X = 0000
C1/4B2D:	AD CA 62   	LDA $62CA      ; active character
C1/4B30:	DD D6 64   	CMP $64D6,X    ; battle menu order
C1/4B33:	F0 08      	BEQ $4B3D      ; exit if matched
C1/4B35:	E8         	INX            ; try next battle menu slot
C1/4B36:	E0 04 00   	CPX #$0004     ; check all 4 battle menus
C1/4B39:	D0 F5      	BNE $4B30      ; loop till all checked
C1/4B3B:	7B         	TDC            ; A = 0000
C1/4B3C:	AA         	TAX            ; X = 0000
C1/4B3D:	60         	RTS

C1/4B3E:	20 2B 4B   	JSR $4B2B
C1/4B41:	8A         	TXA
C1/4B42:	18         	CLC
C1/4B43:	69 0A      	ADC #$0A
C1/4B45:	20 5A 4E   	JSR $4E5A
C1/4B48:	4C B1 66   	JMP $66B1

C1/4B4B:	A9 07      	LDA #$07
C1/4B4D:	20 5A 4E   	JSR $4E5A
C1/4B50:	4C B1 66   	JMP $66B1

C1/4B53:	A9 03      	LDA #$03
C1/4B55:	20 5A 4E   	JSR $4E5A
C1/4B58:	4C B1 66   	JMP $66B1

C1/4B5B:	00
C1/4B5C:	0C
C1/4B5D:	18
C1/4B5E:	24

C1/4B5F:	0000
C1/4B61:	3C01
C1/4B63:	7802
C1/4B65:	B403

C1/4B67:	00
C1/4B68:	05
C1/4B69:	0A
C1/4B6A:	0F

C1/4B6B:	29 80      	AND #$80       ; isolate bit 7
C1/4B6D:	4A         	LSR A
C1/4B6E:	4A         	LSR A
C1/4B6F:	4A         	LSR A
C1/4B70:	4A         	LSR A
C1/4B71:	4A         	LSR A          ; move into bit 2 ($04)
C1/4B72:	60         	RTS

; Determine palette color for item
; In equipment swap mode
C1/4B73:	25 40      	AND $40        ; active char bit in blocked equippers
C1/4B75:	F0 03      	BEQ $4B7A      ; continue if equip not blocked

C1/4B77:	A9 04      	LDA #$04       ; load gray color
C1/4B79:	60         	RTS

C1/4B7A:	AD 0D 89   	LDA $890D      ; equipped item index
C1/4B7D:	C9 FF      	CMP #$FF       ; is it null
C1/4B7F:	F0 28      	BEQ $4BA9      ; exit w/ yellow if no equipped item
C1/4B81:	A5 2C      	LDA $2C        ; item index
C1/4B83:	C9 FF      	CMP #$FF       ; is it null
C1/4B85:	F0 22      	BEQ $4BA9      ; exit if so
C1/4B87:	AE CA 62   	LDX $62CA      ; active character index
C1/4B8A:	BD 6E 2E   	LDA $2E6E,X    ; has genji glove
C1/4B8D:	F0 0F      	BEQ $4B9E      ; branch if no dual-wield
C1/4B8F:	AD 0E 89   	LDA $890E      ; equipped item flags
C1/4B92:	29 08      	AND #$08       ; is a shield
C1/4B94:	F0 13      	BEQ $4BA9      ; exit w/ yellow if not a shield
C1/4B96:	A5 2D      	LDA $2D        ; item flags
C1/4B98:	29 08      	AND #$08       ; is a shield
C1/4B9A:	D0 DB      	BNE $4B77      ; exit w/ gray if shield (no dual-shields)
C1/4B9C:	80 0B      	BRA $4BA9      ; else exit w/ yellow

; Character cannot dual wield
C1/4B9E:	A5 2D      	LDA $2D        ; item flags
C1/4BA0:	0D 0E 89   	ORA $890E      ; combine with equipped item flags
C1/4BA3:	29 18      	AND #$18       ; isolate "is shield" and "is weapon"
C1/4BA5:	C9 18      	CMP #$18       ; if one a weapon and one a shield?
C1/4BA7:	D0 CE      	BNE $4B77      ; exit if not (no dual-anything)

C1/4BA9:	A9 08      	LDA #$08       ; yellow palette color
C1/4BAB:	60         	RTS

C1/4BAC:	05
C1/4BAD:	02
C1/4BAE:	04
C1/4BAF:	21
C1/4BB0:	0E
C1/4BB1:	00
C1/4BB2:	FF
C1/4BB3:	FF
C1/4BB4:	04
C1/4BB5:	21
C1/4BB6:	0E
C1/4BB7:	00
C1/4BB8:	FF
C1/4BB9:	00

; Draw equipped items
C1/4BBA:	7B         	TDC             ; A = 0000
C1/4BBB:	AA         	TAX             ; X = 0000
C1/4BBC:	BF AC 4B C1	LDA $C14BAC,X   ; hardcoded data above
C1/4BC0:	9D 55 57   	STA $5755,X     ; copy to tile buffer [?]
C1/4BC3:	E8         	INX             ; advance index
C1/4BC4:	E0 13 00   	CPX #$0013      ; copy 19 bytes (BUG? Should be $0D?)
C1/4BC7:	D0 F3      	BNE $4BBC       ; loop until all bytes copied
C1/4BC9:	AE CA 62   	LDX $62CA       ; active character index
C1/4BCC:	BF 67 4B C1	LDA $C14B67,X   ; character equipped item index
C1/4BD0:	A8         	TAY             ; set in Y
C1/4BD1:	BF 01 1A C1	LDA $C11A01,X   ; active character bitmask
C1/4BD5:	85 40      	STA $40         ; save for later
C1/4BD7:	B9 86 2B   	LDA $2B86,Y     ; righthand item index
C1/4BDA:	8D 5A 57   	STA $575A       ; store in buffer
C1/4BDD:	B9 9A 2B   	LDA $2B9A,Y     ; lefthand item index
C1/4BE0:	8D 60 57   	STA $5760       ; store in buffer
C1/4BE3:	20 07 4E   	JSR $4E07       ; prepare tile move [?]
C1/4BE6:	4C AB 63   	JMP $63AB       ; execute tile move [?]

C1/4BE9:	05
C1/4BEA:	02
C1/4BEB:	04
C1/4BEC:	21
C1/4BED:	0E
C1/4BEE:	00
C1/4BEF:	FF
C1/4BF0:	FF
C1/4BF1:	04
C1/4BF2:	21
C1/4BF3:	0E
C1/4BF4:	00
C1/4BF5:	FF
C1/4BF6:	00

C1/4BF7:	5A         	PHY
C1/4BF8:	C2 20      	REP #$20
C1/4BFA:	0A         	ASL A
C1/4BFB:	85 40      	STA $40
C1/4BFD:	0A         	ASL A
C1/4BFE:	18         	CLC
C1/4BFF:	65 40      	ADC $40
C1/4C01:	A8         	TAY
C1/4C02:	7B         	TDC
C1/4C03:	E2 20      	SEP #$20           ; 8-bit A
C1/4C05:	AA         	TAX
C1/4C06:	BF E9 4B C1	LDA $C14BE9,X
C1/4C0A:	9D 55 57   	STA $5755,X
C1/4C0D:	E8         	INX
C1/4C0E:	E0 13 00   	CPX #$0013
C1/4C11:	D0 F3      	BNE $4C06
C1/4C13:	B9 05 40   	LDA $4005,Y
C1/4C16:	8D 5A 57   	STA $575A
C1/4C19:	B9 08 40   	LDA $4008,Y
C1/4C1C:	8D 60 57   	STA $5760
C1/4C1F:	20 07 4E   	JSR $4E07
C1/4C22:	20 AB 63   	JSR $63AB
C1/4C25:	7A         	PLY
C1/4C26:	60         	RTS

C1/4C27:	5A         	PHY
C1/4C28:	C2 20      	REP #$20
C1/4C2A:	85 40      	STA $40
C1/4C2C:	0A         	ASL A
C1/4C2D:	18         	CLC
C1/4C2E:	65 40      	ADC $40
C1/4C30:	A8         	TAY
C1/4C31:	7B         	TDC
C1/4C32:	E2 20      	SEP #$20           ; 8-bit A
C1/4C34:	AA         	TAX
C1/4C35:	BF 74 E0 C2	LDA $C2E074,X
C1/4C39:	9D 55 57   	STA $5755,X
C1/4C3C:	E8         	INX
C1/4C3D:	E0 13 00   	CPX #$0013
C1/4C40:	D0 F3      	BNE $4C35
C1/4C42:	B9 05 40   	LDA $4005,Y
C1/4C45:	C9 FF      	CMP #$FF
C1/4C47:	F0 08      	BEQ $4C51
C1/4C49:	B9 06 40   	LDA $4006,Y
C1/4C4C:	8D 5D 57   	STA $575D
C1/4C4F:	D0 09      	BNE $4C5A
C1/4C51:	7B         	TDC
C1/4C52:	8D 5D 57   	STA $575D
C1/4C55:	A9 FF      	LDA #$FF
C1/4C57:	8D 5B 57   	STA $575B
C1/4C5A:	B9 05 40   	LDA $4005,Y
C1/4C5D:	8D 5A 57   	STA $575A
C1/4C60:	8D 61 57   	STA $5761
C1/4C63:	20 07 4E   	JSR $4E07
C1/4C66:	20 AB 63   	JSR $63AB
C1/4C69:	7A         	PLY
C1/4C6A:	60         	RTS

; Draw item menu slot
C1/4C6B:	5A         	PHY              ; store Y
C1/4C6C:	C2 20      	REP #$20         ; 16-bit A
C1/4C6E:	85 40      	STA $40          ; store A (only used in math below)
C1/4C70:	0A         	ASL A
C1/4C71:	0A         	ASL A
C1/4C72:	18         	CLC
C1/4C73:	65 40      	ADC $40          ; A = item slot * 5
C1/4C75:	A8         	TAY              ; index to battle inventory
C1/4C76:	7B         	TDC              ; A = 0000
C1/4C77:	E2 20      	SEP #$20         ; 8-bit A
C1/4C79:	AA         	TAX              ; X = 0000
C1/4C7A:	BF 74 E0 C2	LDA $C2E074,X    ; next item menu script byte
C1/4C7E:	9D 55 57   	STA $5755,X      ; copy to buffer
C1/4C81:	E8         	INX              ; increment script index
C1/4C82:	E0 13 00   	CPX #$0013       ; copied 19 bytes?
C1/4C85:	D0 F3      	BNE $4C7A        ; loop if not
C1/4C87:	AE CA 62   	LDX $62CA        ; X = active character
C1/4C8A:	BF 01 1A C1	LDA $C11A01,X    ; unique bit for active character
C1/4C8E:	85 40      	STA $40          ; store bit mask (used in $4B73)
C1/4C90:	B9 86 26   	LDA $2686,Y      ; slot's item index
C1/4C93:	C9 FF      	CMP #$FF         ; check for null value
C1/4C95:	F0 08      	BEQ $4C9F        ; branch if empty slot
C1/4C97:	B9 89 26   	LDA $2689,Y      ; item quantity
C1/4C9A:	8D 5D 57   	STA $575D        ; replace quantity placeholder
C1/4C9D:	D0 09      	BNE $4CA8        ; branch if not zero

; Empty item slot or zero quantity
C1/4C9F:	7B         	TDC              ; A = 0000
C1/4CA0:	8D 5D 57   	STA $575D        ; replace quantity placeholder
C1/4CA3:	A9 FF      	LDA #$FF         ; space character
C1/4CA5:	8D 5B 57   	STA $575B        ; replace ':' character with space

C1/4CA8:	B9 86 26   	LDA $2686,Y      ; slot's item index
C1/4CAB:	8D 5A 57   	STA $575A        ; replace item index placeholder
C1/4CAE:	8D 61 57   	STA $5761        ; replace item index placeholder
C1/4CB1:	AD 0C 89   	LDA $890C        ; equipment swap mode
C1/4CB4:	F0 18      	BEQ $4CCE        ; branch if unset
C1/4CB6:	B9 86 26   	LDA $2686,Y      ; slot's item index
C1/4CB9:	85 2C      	STA $2C          ; save for later
C1/4CBB:	B9 87 26   	LDA $2687,Y      ; slot's item flags
C1/4CBE:	85 2D      	STA $2D          ; save for later
C1/4CC0:	B9 8A 26   	LDA $268A,Y      ; slot's item equipability blacklist
C1/4CC3:	20 73 4B   	JSR $4B73        ; get item palette color
C1/4CC6:	0D 58 57   	ORA $5758        ; combine with slot color palette
C1/4CC9:	8D 58 57   	STA $5758        ; save updated palette (gray if $04)
C1/4CCC:	80 0C      	BRA $4CDA

; Fork if not swapping equipment
C1/4CCE:	B9 87 26   	LDA $2687,Y      ; slot's item flags
C1/4CD1:	20 6B 4B   	JSR $4B6B        ; get "not usable in battle" bit as $04
C1/4CD4:	0D 58 57   	ORA $5758        ; combine with slot color palette
C1/4CD7:	8D 58 57   	STA $5758        ; save updated palette (gray if $04)

C1/4CDA:	20 07 4E   	JSR $4E07        ; prepare tile move [?]
C1/4CDD:	20 AB 63   	JSR $63AB        ; perform tile move [?]
C1/4CE0:	7A         	PLY              ; restore Y
C1/4CE1:	60         	RTS

; Draw Rage Menu Row [?]
C1/4CE2:	5A         	PHY
C1/4CE3:	0A         	ASL A
C1/4CE4:	A8         	TAY
C1/4CE5:	7B         	TDC
C1/4CE6:	AA         	TAX
C1/4CE7:	BF 67 E0 C2	LDA $C2E067,X
C1/4CEB:	9D 55 57   	STA $5755,X
C1/4CEE:	E8         	INX
C1/4CEF:	E0 0D 00   	CPX #$000D
C1/4CF2:	D0 F3      	BNE $4CE7
C1/4CF4:	B9 7E 25   	LDA $257E,Y
C1/4CF7:	8D 5A 57   	STA $575A
C1/4CFA:	B9 7F 25   	LDA $257F,Y
C1/4CFD:	8D 60 57   	STA $5760
C1/4D00:	20 07 4E   	JSR $4E07
C1/4D03:	20 AB 63   	JSR $63AB
C1/4D06:	7A         	PLY
C1/4D07:	60         	RTS

; Draw Dance Menu Row [?]
C1/4D08:	5A         	PHY
C1/4D09:	0A         	ASL A
C1/4D0A:	A8         	TAY
C1/4D0B:	7B         	TDC
C1/4D0C:	AA         	TAX
C1/4D0D:	BF 5A E0 C2	LDA $C2E05A,X
C1/4D11:	9D 55 57   	STA $5755,X
C1/4D14:	E8         	INX
C1/4D15:	E0 0D 00   	CPX #$000D
C1/4D18:	D0 F3      	BNE $4D0D
C1/4D1A:	B9 7E 26   	LDA $267E,Y
C1/4D1D:	8D 5A 57   	STA $575A
C1/4D20:	B9 7F 26   	LDA $267F,Y
C1/4D23:	8D 60 57   	STA $5760
C1/4D26:	20 07 4E   	JSR $4E07
C1/4D29:	20 AB 63   	JSR $63AB
C1/4D2C:	7A         	PLY
C1/4D2D:	60         	RTS

C1/4D2E:	5A         	PHY
C1/4D2F:	0A         	ASL A
C1/4D30:	A8         	TAY
C1/4D31:	7B         	TDC
C1/4D32:	AA         	TAX
C1/4D33:	BF 4D E0 C2	LDA $C2E04D,X
C1/4D37:	9D 55 57   	STA $5755,X
C1/4D3A:	E8         	INX
C1/4D3B:	E0 0D 00   	CPX #$000D
C1/4D3E:	D0 F3      	BNE $4D33
C1/4D40:	98         	TYA
C1/4D41:	AA         	TAX
C1/4D42:	AD CA 62   	LDA $62CA
C1/4D45:	0A         	ASL A
C1/4D46:	0A         	ASL A
C1/4D47:	0A         	ASL A
C1/4D48:	0A         	ASL A
C1/4D49:	0A         	ASL A
C1/4D4A:	A8         	TAY
C1/4D4B:	B9 AE 2E   	LDA $2EAE,Y
C1/4D4E:	D0 10      	BNE $4D60        ; Not Terra [?]

; Terra's Magitek Spells
C1/4D50:	BF 0C 91 C1	LDA $C1910C,X    ; Terra magitek spell (left)
C1/4D54:	8D 5A 57   	STA $575A
C1/4D57:	BF 0D 91 C1	LDA $C1910D,X    ; Terra magitek spell (right)
C1/4D5B:	8D 60 57   	STA $5760
C1/4D5E:	80 0E      	BRA $4D6E

; Regular Magitek Spells
C1/4D60:	BF 14 91 C1	LDA $C19114,X    ; Default magitek spell (left)
C1/4D64:	8D 5A 57   	STA $575A
C1/4D67:	BF 15 91 C1	LDA $C19115,X    ; Default magitek spell (right)
C1/4D6B:	8D 60 57   	STA $5760

C1/4D6E:	20 07 4E   	JSR $4E07
C1/4D71:	20 AB 63   	JSR $63AB
C1/4D74:	7A         	PLY
C1/4D75:	60         	RTS

C1/4D76:	5A         	PHY
C1/4D77:	85 40      	STA $40
C1/4D79:	AD CA 62   	LDA $62CA
C1/4D7C:	0A         	ASL A
C1/4D7D:	AA         	TAX
C1/4D7E:	A5 40      	LDA $40
C1/4D80:	C2 20      	REP #$20
C1/4D82:	0A         	ASL A
C1/4D83:	0A         	ASL A
C1/4D84:	18         	CLC
C1/4D85:	7F 5F 4B C1	ADC $C14B5F,X
C1/4D89:	A8         	TAY
C1/4D8A:	7B         	TDC
C1/4D8B:	E2 20      	SEP #$20           ; 8-bit A
C1/4D8D:	AA         	TAX
C1/4D8E:	BF 45 E0 C2	LDA $C2E045,X
C1/4D92:	9D 55 57   	STA $5755,X
C1/4D95:	E8         	INX
C1/4D96:	E0 0E 00   	CPX #$000E
C1/4D99:	D0 F3      	BNE $4D8E
C1/4D9B:	B9 6A 21   	LDA $216A,Y
C1/4D9E:	8D 5B 57   	STA $575B
C1/4DA1:	B9 6B 21   	LDA $216B,Y
C1/4DA4:	20 6B 4B   	JSR $4B6B
C1/4DA7:	0D 59 57   	ORA $5759
C1/4DAA:	8D 59 57   	STA $5759
C1/4DAD:	20 07 4E   	JSR $4E07
C1/4DB0:	20 AB 63   	JSR $63AB
C1/4DB3:	7A         	PLY
C1/4DB4:	60         	RTS

; Draw magic menu via script

C1/4DB5:	5A         	PHY
C1/4DB6:	0A         	ASL A
C1/4DB7:	85 40      	STA $40
C1/4DB9:	AD CA 62   	LDA $62CA
C1/4DBC:	0A         	ASL A
C1/4DBD:	AA         	TAX
C1/4DBE:	A5 40      	LDA $40
C1/4DC0:	C2 20      	REP #$20
C1/4DC2:	0A         	ASL A
C1/4DC3:	0A         	ASL A
C1/4DC4:	18         	CLC
C1/4DC5:	7F 5F 4B C1	ADC $C14B5F,X
C1/4DC9:	A8         	TAY
C1/4DCA:	7B         	TDC
C1/4DCB:	E2 20      	SEP #$20           ; 8-bit A
C1/4DCD:	AA         	TAX
C1/4DCE:	BF 36 E0 C2	LDA $C2E036,X
C1/4DD2:	9D 55 57   	STA $5755,X
C1/4DD5:	E8         	INX
C1/4DD6:	E0 10 00   	CPX #$0010
C1/4DD9:	D0 F3      	BNE $4DCE
C1/4DDB:	B9 92 20   	LDA $2092,Y
C1/4DDE:	8D 5A 57   	STA $575A
C1/4DE1:	B9 96 20   	LDA $2096,Y
C1/4DE4:	8D 60 57   	STA $5760
C1/4DE7:	B9 93 20   	LDA $2093,Y
C1/4DEA:	20 6B 4B   	JSR $4B6B
C1/4DED:	0D 58 57   	ORA $5758
C1/4DF0:	8D 58 57   	STA $5758
C1/4DF3:	B9 97 20   	LDA $2097,Y
C1/4DF6:	20 6B 4B   	JSR $4B6B
C1/4DF9:	0D 5E 57   	ORA $575E
C1/4DFC:	8D 5E 57   	STA $575E
C1/4DFF:	20 07 4E   	JSR $4E07
C1/4E02:	20 AB 63   	JSR $63AB
C1/4E05:	7A         	PLY
C1/4E06:	60         	RTS

; Prepare tile move [?]
C1/4E07:	A2 55 57   	LDX #$5755
C1/4E0A:	8E DD 88   	STX $88DD
C1/4E0D:	A2 4D 5E   	LDX #$5E4D
C1/4E10:	8E DF 88   	STX $88DF
C1/4E13:	A9 20      	LDA #$20
C1/4E15:	8D E1 88   	STA $88E1
C1/4E18:	A9 21      	LDA #$21
C1/4E1A:	8D E2 88   	STA $88E2
C1/4E1D:	60         	RTS

C1/4E1E:	7B         	TDC
C1/4E1F:	AA         	TAX
C1/4E20:	BF 83 E0 C2	LDA $C2E083,X
C1/4E24:	9D 55 57   	STA $5755,X
C1/4E27:	E8         	INX
C1/4E28:	E0 17 00   	CPX #$0017
C1/4E2B:	D0 F3      	BNE $4E20
C1/4E2D:	AD CA 62   	LDA $62CA
C1/4E30:	0A         	ASL A
C1/4E31:	AA         	TAX
C1/4E32:	C2 20      	REP #$20
C1/4E34:	BF 5F 4B C1	LDA $C14B5F,X
C1/4E38:	AA         	TAX
C1/4E39:	7B         	TDC
C1/4E3A:	E2 20      	SEP #$20           ; 8-bit A
C1/4E3C:	BD 8E 20   	LDA $208E,X
C1/4E3F:	8D 61 57   	STA $5761
C1/4E42:	BD 91 20   	LDA $2091,X
C1/4E45:	8D 6A 57   	STA $576A
C1/4E48:	BD 8F 20   	LDA $208F,X
C1/4E4B:	20 6B 4B   	JSR $4B6B
C1/4E4E:	0D 5F 57   	ORA $575F
C1/4E51:	8D 5F 57   	STA $575F
C1/4E54:	20 07 4E   	JSR $4E07
C1/4E57:	4C AB 63   	JMP $63AB

; Move lots of data/pointers for menu graphics or text [?]
C1/4E5A:	48         	PHA              ; index of menu/graphics section/type?
C1/4E5B:	0A         	ASL A
C1/4E5C:	AA         	TAX              ; use as pointer index
C1/4E5D:	A9 C2      	LDA #$C2         ; used as hi-byte of long address
C1/4E5F:	85 12      	STA $12          ; save it
C1/4E61:	C2 20      	REP #$20         ; 16-bit A
C1/4E63:	BF 9A E0 C2	LDA $C2E09A,X    ; get offset to this menu-drawing data
C1/4E67:	85 10      	STA $10          ; save it
C1/4E69:	A4 00      	LDY $00          ; Y = 0000

C1/4E6B:	B7 10      	LDA [$10],Y      ; load $C2/.... + Y
C1/4E6D:	99 D5 56   	STA $56D5,Y      ; store it in tile script buffer
C1/4E70:	C8         	INY
C1/4E71:	C8         	INY
C1/4E72:	C0 40 00   	CPY #$0040       ; move 64 bytes total
C1/4E75:	D0 F4      	BNE $4E6B

C1/4E77:	7B         	TDC              ; A = 0000
C1/4E78:	E2 20      	SEP #$20         ; 8-bit A
C1/4E7A:	68         	PLA
C1/4E7B:	0A         	ASL A
C1/4E7C:	0A         	ASL A
C1/4E7D:	AA         	TAX              ; X = menu-index * 4
C1/4E7E:	BF 12 DF C2	LDA $C2DF12,X    ; get first byte
C1/4E82:	8D D9 88   	STA $88D9
C1/4E85:	BF 13 DF C2	LDA $C2DF13,X    ; get second byte
C1/4E89:	8D DA 88   	STA $88DA
C1/4E8C:	BF 14 DF C2	LDA $C2DF14,X    ; get third byte
C1/4E90:	8D DB 88   	STA $88DB
C1/4E93:	A9 21      	LDA #$21
C1/4E95:	8D DC 88   	STA $88DC        ; fourth byte is always #21 (flags?)
C1/4E98:	A2 D5 56   	LDX #$56D5       ; RAM address holding pointer to text script
C1/4E9B:	8E D7 88   	STX $88D7        ; 6 bytes: D5 56 xx xx xx 21
C1/4E9E:	60         	RTS

C1/4E9F:	AD 2E 2F   	LDA $2F2E        ; command menu mode (short/window)
C1/4EA2:	F0 0A      	BEQ $4EAE
C1/4EA4:	A9 17      	LDA #$17
C1/4EA6:	20 FB 50   	JSR $50FB
C1/4EA9:	A9 05      	LDA #$05
C1/4EAB:	4C 65 51   	JMP $5165

C1/4EAE:	AE CA 62   	LDX $62CA
C1/4EB1:	BD 0F 89   	LDA $890F,X
C1/4EB4:	48         	PHA
C1/4EB5:	18         	CLC
C1/4EB6:	69 0A      	ADC #$0A
C1/4EB8:	20 FB 50   	JSR $50FB
C1/4EBB:	68         	PLA
C1/4EBC:	18         	CLC
C1/4EBD:	69 05      	ADC #$05
C1/4EBF:	4C 65 51   	JMP $5165

; Prepare background of new menu [?]
C1/4EC2:	A6 00      	LDX $00          ; zero X
C1/4EC4:	9D F1 8B   	STA $8BF1,X
C1/4EC7:	9D 39 8C   	STA $8C39,X
C1/4ECA:	9D 81 8C   	STA $8C81,X
C1/4ECD:	9D C9 8C   	STA $8CC9,X
C1/4ED0:	E8         	INX
C1/4ED1:	E8         	INX
C1/4ED2:	E8         	INX
C1/4ED3:	E8         	INX
C1/4ED4:	E0 48 00   	CPX #$0048
C1/4ED7:	D0 EB      	BNE $4EC4
C1/4ED9:	60         	RTS

C1/4EDA:	A9 83      	LDA #$83
C1/4EDC:	20 C2 4E   	JSR $4EC2
C1/4EDF:	A9 12      	LDA #$12
C1/4EE1:	20 FB 50   	JSR $50FB
C1/4EE4:	A9 09      	LDA #$09
C1/4EE6:	20 65 51   	JSR $5165
C1/4EE9:	EE DB 7B   	INC $7BDB
C1/4EEC:	20 72 48   	JSR $4872
C1/4EEF:	4C 77 4F   	JMP $4F77

C1/4EF2:	E6 10      	INC $10
C1/4EF4:	A9 13      	LDA #$13
C1/4EF6:	20 FB 50   	JSR $50FB
C1/4EF9:	EE DB 7B   	INC $7BDB
C1/4EFC:	A9 09      	LDA #$09
C1/4EFE:	20 65 51   	JSR $5165
C1/4F01:	20 8C 4F   	JSR $4F8C
C1/4F04:	4C F2 48   	JMP $48F2

; "Row" Command Window
C1/4F07:	A9 83      	LDA #$83        ; default menu background [?]
C1/4F09:	20 C2 4E   	JSR $4EC2       ; prepare menu background [?]
C1/4F0C:	20 9F 4E   	JSR $4E9F       ; [?]
C1/4F0F:	20 CB 48   	JSR $48CB       ; build "Row" menu [?]
C1/4F12:	EE DB 7B   	INC $7BDB       ; next menu BG update layer 1 (not 2)
C1/4F15:	4C 77 4F   	JMP $4F77       ; execute menu update

C1/4F18:	A9 83      	LDA #$83
C1/4F1A:	20 C2 4E   	JSR $4EC2
C1/4F1D:	20 9F 4E   	JSR $4E9F
C1/4F20:	20 A4 48   	JSR $48A4
C1/4F23:	AD 2E 2F   	LDA $2F2E     ; command menu mode (short/window)
C1/4F26:	F0 04      	BEQ $4F2C
C1/4F28:	A9 60      	LDA #$60
C1/4F2A:	80 02      	BRA $4F2E

C1/4F2C:	A9 30      	LDA #$30
C1/4F2E:	85 10      	STA $10
C1/4F30:	64 11      	STZ $11
C1/4F32:	C2 20      	REP #$20
C1/4F34:	AD D2 7B   	LDA $7BD2
C1/4F37:	38         	SEC
C1/4F38:	E5 10      	SBC $10
C1/4F3A:	8D D2 7B   	STA $7BD2
C1/4F3D:	7B         	TDC
C1/4F3E:	E2 20      	SEP #$20           ; 8-bit A
C1/4F40:	EE DB 7B   	INC $7BDB
C1/4F43:	4C 77 4F   	JMP $4F77

; Menu state $1A
C1/4F46:	E6 10      	INC $10        ; increment window count [?]
C1/4F48:	A9 01      	LDA #$01
C1/4F4A:	20 65 51   	JSR $5165      ; get menu 01 dimensions [?]
C1/4F4D:	AD 2E 2F   	LDA $2F2E      ; command config mode
C1/4F50:	F0 08      	BEQ $4F5A      ; branch if "window" mode

C1/4F52:	A9 18      	LDA #$18
C1/4F54:	20 FB 50   	JSR $50FB
C1/4F57:	7B         	TDC
C1/4F58:	80 0E      	BRA $4F68

C1/4F5A:	AE CA 62   	LDX $62CA
C1/4F5D:	BD 0F 89   	LDA $890F,X
C1/4F60:	48         	PHA
C1/4F61:	18         	CLC
C1/4F62:	69 0E      	ADC #$0E
C1/4F64:	20 FB 50   	JSR $50FB
C1/4F67:	68         	PLA
C1/4F68:	18         	CLC
C1/4F69:	69 05      	ADC #$05
C1/4F6B:	20 65 51   	JSR $5165
C1/4F6E:	EE DB 7B   	INC $7BDB
C1/4F71:	20 8C 4F   	JSR $4F8C
C1/4F74:	4C F2 48   	JMP $48F2

C1/4F77:	EE BB 7B   	INC $7BBB    ; battle menu update pending

; Finish menu window dimensions prep [?]
C1/4F7A:	A9 01      	LDA #$01     ; advance menu state queue when ready
C1/4F7C:	8D F0 7B   	STA $7BF0    ; set new menu state
C1/4F7F:	9C 85 7B   	STZ $7B85    ; flag to open menu instantly [?]
C1/4F82:	EE DD 7B   	INC $7BDD
C1/4F85:	EE D1 7B   	INC $7BD1    ; menu window size change pending
C1/4F88:	60         	RTS

C1/4F89:	EE BB 7B   	INC $7BBB

C1/4F8C:	A9 02      	LDA #$02
C1/4F8E:	8D F0 7B   	STA $7BF0
C1/4F91:	9C 85 7B   	STZ $7B85    ; flag to open menu instantly [?]
C1/4F94:	EE DD 7B   	INC $7BDD
C1/4F97:	EE D1 7B   	INC $7BD1
C1/4F9A:	60         	RTS

C1/4F9B:	A9 08      	LDA #$08
C1/4F9D:	20 FB 50   	JSR $50FB
C1/4FA0:	A9 03      	LDA #$03
C1/4FA2:	20 65 51   	JSR $5165
C1/4FA5:	4C 7A 4F   	JMP $4F7A

C1/4FA8:	E6 10      	INC $10
C1/4FAA:	A9 09      	LDA #$09
C1/4FAC:	20 FB 50   	JSR $50FB
C1/4FAF:	A9 03      	LDA #$03
C1/4FB1:	20 65 51   	JSR $5165
C1/4FB4:	4C 8C 4F   	JMP $4F8C

; Initialize equipment menu
C1/4FB7:	A9 05      	LDA #$05      ; menu window size id
C1/4FB9:	20 FB 50   	JSR $50FB     ; get menu window dimensions
C1/4FBC:	A9 04      	LDA #$04
C1/4FBE:	20 65 51   	JSR $5165     ; get more dimensions [?]
C1/4FC1:	4C 7A 4F   	JMP $4F7A

C1/4FC4:	E6 10      	INC $10
C1/4FC6:	A9 07      	LDA #$07
C1/4FC8:	20 FB 50   	JSR $50FB
C1/4FCB:	A9 04      	LDA #$04
C1/4FCD:	20 65 51   	JSR $5165
C1/4FD0:	4C 8C 4F   	JMP $4F8C

C1/4FD3:	C2 20      	REP #$20
C1/4FD5:	86 22      	STX $22
C1/4FD7:	84 24      	STY $24
C1/4FD9:	A2 8C 02   	LDX #$028C
C1/4FDC:	A5 22      	LDA $22
C1/4FDE:	9D F5 43   	STA $43F5,X
C1/4FE1:	A5 24      	LDA $24
C1/4FE3:	9D F7 43   	STA $43F7,X
C1/4FE6:	E8         	INX
C1/4FE7:	E8         	INX
C1/4FE8:	E8         	INX
C1/4FE9:	E8         	INX
C1/4FEA:	E0 4C 03   	CPX #$034C
C1/4FED:	D0 ED      	BNE $4FDC
C1/4FEF:	7B         	TDC
C1/4FF0:	E2 20      	SEP #$20           ; 8-bit A
C1/4FF2:	60         	RTS

; Opening Slot Machine [?]
C1/4FF3:	20 A5 46   	JSR $46A5
C1/4FF6:	A0 4C 00   	LDY #$004C
C1/4FF9:	A2 00 01   	LDX #$0100
C1/4FFC:	20 D3 4F   	JSR $4FD3          ; something with bg scroll data [?]
C1/4FFF:	A9 02      	LDA #$02
C1/5001:	20 FB 50   	JSR $50FB          ; get menu window dimensions
C1/5004:	A9 02      	LDA #$02
C1/5006:	20 65 51   	JSR $5165
C1/5009:	4C 7A 4F   	JMP $4F7A

C1/500C:	A9 04      	LDA #$04
C1/500E:	8D FD 7A   	STA $7AFD
C1/5011:	E2 10      	SEP #$10
C1/5013:	C2 20      	REP #$20
C1/5015:	0B         	PHD
C1/5016:	A9 00 01   	LDA #$0100
C1/5019:	48         	PHA
C1/501A:	2B         	PLD
C1/501B:	A2 00      	LDX #$00
C1/501D:	A9 60 00   	LDA #$0060
C1/5020:	95 02      	STA $02,X
C1/5022:	9D F7 51   	STA $51F7,X
C1/5025:	E8         	INX
C1/5026:	E8         	INX
C1/5027:	E8         	INX
C1/5028:	E8         	INX
C1/5029:	E0 C0      	CPX #$C0
C1/502B:	D0 F3      	BNE $5020
C1/502D:	95 02      	STA $02,X
C1/502F:	E8         	INX
C1/5030:	E8         	INX
C1/5031:	E8         	INX
C1/5032:	E8         	INX
C1/5033:	E0 00      	CPX #$00
C1/5035:	D0 F6      	BNE $502D
C1/5037:	2B         	PLD
C1/5038:	7B         	TDC
C1/5039:	E2 20      	SEP #$20           ; 8-bit A
C1/503B:	C2 10      	REP #$10
C1/503D:	60         	RTS

C1/503E:	7B         	TDC
C1/503F:	AA         	TAX
C1/5040:	C2 20      	REP #$20
C1/5042:	BD 61 4D   	LDA $4D61,X
C1/5045:	9D D5 52   	STA $52D5,X
C1/5048:	E8         	INX
C1/5049:	E8         	INX
C1/504A:	E0 00 01   	CPX #$0100
C1/504D:	D0 F3      	BNE $5042
C1/504F:	7B         	TDC
C1/5050:	E2 20      	SEP #$20           ; 8-bit A
C1/5052:	20 0C 50   	JSR $500C
C1/5055:	A9 14      	LDA #$14
C1/5057:	20 FB 50   	JSR $50FB
C1/505A:	A9 02      	LDA #$02
C1/505C:	20 65 51   	JSR $5165
C1/505F:	4C 7A 4F   	JMP $4F7A

C1/5062:	E6 10      	INC $10
C1/5064:	A9 15      	LDA #$15
C1/5066:	20 FB 50   	JSR $50FB
C1/5069:	7B         	TDC
C1/506A:	AA         	TAX
C1/506B:	C2 20      	REP #$20
C1/506D:	BD D5 52   	LDA $52D5,X
C1/5070:	9D D5 51   	STA $51D5,X
C1/5073:	E8         	INX
C1/5074:	E8         	INX
C1/5075:	E0 00 01   	CPX #$0100
C1/5078:	D0 F3      	BNE $506D
C1/507A:	7B         	TDC
C1/507B:	E2 20      	SEP #$20           ; 8-bit A
C1/507D:	A9 02      	LDA #$02
C1/507F:	20 65 51   	JSR $5165
C1/5082:	EE EE 7B   	INC $7BEE
C1/5085:	4C 8C 4F   	JMP $4F8C

C1/5088:	20 A5 46   	JSR $46A5
C1/508B:	A9 03      	LDA #$03           ; window arrangment ID
C1/508D:	20 FB 50   	JSR $50FB          ; load background window graphics
C1/5090:	A9 02      	LDA #$02
C1/5092:	20 65 51   	JSR $5165
C1/5095:	4C 7A 4F   	JMP $4F7A

C1/5098:	A9 82      	LDA #$82
C1/509A:	20 C2 4E   	JSR $4EC2
C1/509D:	20 A5 46   	JSR $46A5
C1/50A0:	A9 04      	LDA #$04
C1/50A2:	20 FB 50   	JSR $50FB
C1/50A5:	A9 02      	LDA #$02
C1/50A7:	20 65 51   	JSR $5165
C1/50AA:	4C 7A 4F   	JMP $4F7A

C1/50AD:	7B         	TDC
C1/50AE:	AA         	TAX
C1/50AF:	A8         	TAY
C1/50B0:	20 D3 4F   	JSR $4FD3
C1/50B3:	9C 92 89   	STZ $8992

; Close menu [?]
; Menu states 08,0C,12,14,16,1C,1E,21
C1/50B6:	E6 10      	INC $10        ; increment menu count [?]
C1/50B8:	A9 06      	LDA #$06
C1/50BA:	20 FB 50   	JSR $50FB
C1/50BD:	A9 02      	LDA #$02
C1/50BF:	20 65 51   	JSR $5165
C1/50C2:	EE EE 7B   	INC $7BEE
C1/50C5:	4C 8C 4F   	JMP $4F8C

C1/50C8:	20 F2 48   	JSR $48F2
C1/50CB:	4C E9 50   	JMP $50E9

; Advance menu queue when ready
; (menu state 01)
C1/50CE:	AD D1 7B   	LDA $7BD1      ; menu window needs size change
C1/50D1:	0D DD 7B   	ORA $7BDD      ; [?]
C1/50D4:	D0 06      	BNE $50DC      ; exit if either ^ set
C1/50D6:	9C 98 7B   	STZ $7B98      ; battle menu opening
C1/50D9:	20 E9 50   	JSR $50E9      ; advance menu queue
C1/50DC:	60         	RTS

; Advance menu queue when ready
; (menu state 02)
C1/50DD:	AD D1 7B   	LDA $7BD1      ; menu window needs size change
C1/50E0:	0D DD 7B   	ORA $7BDD      ; [?]
C1/50E3:	D0 03      	BNE $50E8      ; exit if either ^ set
C1/50E5:	20 E9 50   	JSR $50E9      ; advance menu queue
C1/50E8:	60         	RTS

; Advance menu queue
; (menu state 10)
C1/50E9:	7B         	TDC            ; A = 0000
C1/50EA:	AA         	TAX            ; X = 0000
C1/50EB:	8D FF 7B   	STA $7BFF      ; set queue endpoint
C1/50EE:	BD F1 7B   	LDA $7BF1,X    ; queued state
C1/50F1:	9D F0 7B   	STA $7BF0,X    ; move downward
C1/50F4:	E8         	INX
C1/50F5:	E0 0F 00   	CPX #$000F     ; shift 15 queue entries
C1/50F8:	D0 F4      	BNE $50EE      ; loop till all shifted down
C1/50FA:	60         	RTS

; Get menu window dimensions
C1/50FB:	0A         	ASL A          ; *2
C1/50FC:	0A         	ASL A          ; *4
C1/50FD:	AA         	TAX            ; index to 4 byte block
C1/50FE:	A5 10      	LDA $10        ; menu drawing buffer index [?]
C1/5100:	F0 31      	BEQ $5133      ; branch if no other menu open [?]

C1/5102:	C2 20      	REP #$20       ; 16-bit A
C1/5104:	BF A2 DE C2	LDA $C2DEA2,X
C1/5108:	8D D2 7B   	STA $7BD2      ; menu horizontal scroll (pixels)
C1/510B:	BF A4 DE C2	LDA $C2DEA4,X
C1/510F:	8D D4 7B   	STA $7BD4      ; menu vertical scroll (pixels)
C1/5112:	BF 34 DE C2	LDA $C2DE34,X
C1/5116:	8D D6 7B   	STA $7BD6      ; menu window height (tiles)
C1/5119:	0A         	ASL A
C1/511A:	0A         	ASL A
C1/511B:	0A         	ASL A
C1/511C:	0A         	ASL A
C1/511D:	0A         	ASL A          ; tiles * 32 (pixels)
C1/511E:	18         	CLC
C1/511F:	7F 32 DE C2	ADC $C2DE32,X  ; add window top (pixels)
C1/5123:	38         	SEC
C1/5124:	E9 10 00   	SBC #$0010     ; subtract 16 pixels [?]
C1/5127:	8D D7 7B   	STA $7BD7      ; menu window bottom (pixels)
C1/512A:	BF 32 DE C2	LDA $C2DE32,X
C1/512E:	8D D9 7B   	STA $7BD9      ; menu window top (pixels)
C1/5131:	80 2B      	BRA $515E

C1/5133:	C2 20      	REP #$20       ; 16-bit A
C1/5135:	BF A2 DE C2	LDA $C2DEA2,X
C1/5139:	8D D2 7B   	STA $7BD2      ; menu horizontal scroll (pixels)
C1/513C:	BF A4 DE C2	LDA $C2DEA4,X
C1/5140:	8D D4 7B   	STA $7BD4      ; menu vertical scroll (pixels)
C1/5143:	BF 34 DE C2	LDA $C2DE34,X
C1/5147:	8D D6 7B   	STA $7BD6      ; menu window height (tiles)
C1/514A:	3A         	DEC A
C1/514B:	0A         	ASL A
C1/514C:	0A         	ASL A
C1/514D:	0A         	ASL A
C1/514E:	0A         	ASL A          ; (tiles - 1) * 16
C1/514F:	18         	CLC
C1/5150:	7F 32 DE C2	ADC $C2DE32,X  ; add window top (pixels)
C1/5154:	8D D7 7B   	STA $7BD7      ; menu window bottom (pixels)
C1/5157:	18         	CLC
C1/5158:	69 10 00   	ADC #$0010     ; add 16 pixels [?]
C1/515B:	8D D9 7B   	STA $7BD9      ; menu window top (pixels)

C1/515E:	9C DB 7B   	STZ $7BDB      ; menu update for BG1, not BG2 [?]
C1/5161:	7B         	TDC            ; A = 0000
C1/5162:	E2 20      	SEP #$20       ; 8-bit A
C1/5164:	60         	RTS

C1/5165:	0A         	ASL A
C1/5166:	0A         	ASL A
C1/5167:	0A         	ASL A
C1/5168:	AA         	TAX
C1/5169:	9C EB 7B   	STZ $7BEB
C1/516C:	A5 10      	LDA $10
C1/516E:	F0 3D      	BEQ $51AD

C1/5170:	C2 20      	REP #$20
C1/5172:	BF DA DD C2	LDA $C2DDDA,X
C1/5176:	18         	CLC
C1/5177:	69 10 00   	ADC #$0010
C1/517A:	8D E2 7B   	STA $7BE2
C1/517D:	BF DC DD C2	LDA $C2DDDC,X
C1/5181:	18         	CLC
C1/5182:	69 10 00   	ADC #$0010
C1/5185:	8D E4 7B   	STA $7BE4
C1/5188:	BF DE DD C2	LDA $C2DDDE,X
C1/518C:	0A         	ASL A
C1/518D:	0A         	ASL A
C1/518E:	0A         	ASL A
C1/518F:	0A         	ASL A
C1/5190:	0A         	ASL A
C1/5191:	48         	PHA
C1/5192:	18         	CLC
C1/5193:	7F DA DD C2	ADC $C2DDDA,X
C1/5197:	38         	SEC
C1/5198:	E9 20 00   	SBC #$0020
C1/519B:	8D DE 7B   	STA $7BDE
C1/519E:	68         	PLA
C1/519F:	18         	CLC
C1/51A0:	7F DC DD C2	ADC $C2DDDC,X
C1/51A4:	38         	SEC
C1/51A5:	E9 20 00   	SBC #$0020
C1/51A8:	8D E0 7B   	STA $7BE0
C1/51AB:	80 2B      	BRA $51D8

C1/51AD:	C2 20      	REP #$20
C1/51AF:	BF DE DD C2	LDA $C2DDDE,X
C1/51B3:	3A         	DEC A
C1/51B4:	0A         	ASL A
C1/51B5:	0A         	ASL A
C1/51B6:	0A         	ASL A
C1/51B7:	0A         	ASL A
C1/51B8:	48         	PHA
C1/51B9:	18         	CLC
C1/51BA:	7F DA DD C2	ADC $C2DDDA,X
C1/51BE:	8D DE 7B   	STA $7BDE
C1/51C1:	18         	CLC
C1/51C2:	69 10 00   	ADC #$0010
C1/51C5:	8D E2 7B   	STA $7BE2
C1/51C8:	68         	PLA
C1/51C9:	18         	CLC
C1/51CA:	7F DC DD C2	ADC $C2DDDC,X
C1/51CE:	8D E0 7B   	STA $7BE0
C1/51D1:	18         	CLC
C1/51D2:	69 10 00   	ADC #$0010
C1/51D5:	8D E4 7B   	STA $7BE4

C1/51D8:	BF DA DD C2	LDA $C2DDDA,X
C1/51DC:	18         	CLC
C1/51DD:	69 10 00   	ADC #$0010
C1/51E0:	8D E7 7B   	STA $7BE7
C1/51E3:	BF DC DD C2	LDA $C2DDDC,X
C1/51E7:	18         	CLC
C1/51E8:	69 10 00   	ADC #$0010
C1/51EB:	8D E9 7B   	STA $7BE9
C1/51EE:	BF DE DD C2	LDA $C2DDDE,X
C1/51F2:	3A         	DEC A
C1/51F3:	0A         	ASL A
C1/51F4:	0A         	ASL A
C1/51F5:	0A         	ASL A
C1/51F6:	0A         	ASL A
C1/51F7:	0A         	ASL A
C1/51F8:	3A         	DEC A
C1/51F9:	8D EC 7B   	STA $7BEC
C1/51FC:	7B         	TDC
C1/51FD:	E2 20      	SEP #$20           ; 8-bit A
C1/51FF:	BF DE DD C2	LDA $C2DDDE,X
C1/5203:	3A         	DEC A
C1/5204:	8D E6 7B   	STA $7BE6
C1/5207:	9C EE 7B   	STZ $7BEE
C1/520A:	60         	RTS

C1/520B:	C2 20      	REP #$20
C1/520D:	A6 00      	LDX $00
C1/520F:	A9 FF 00   	LDA #$00FF
C1/5212:	9D 13 8D   	STA $8D13,X
C1/5215:	E8         	INX
C1/5216:	E8         	INX
C1/5217:	E0 00 03   	CPX #$0300
C1/521A:	D0 F3      	BNE $520F
C1/521C:	7B         	TDC
C1/521D:	E2 20      	SEP #$20           ; 8-bit A
C1/521F:	60         	RTS

C1/5220:	AE CA 62   	LDX $62CA
C1/5223:	BD CC 62   	LDA $62CC,X
C1/5226:	D0 15      	BNE $523D
C1/5228:	AD 2E 2F   	LDA $2F2E     ; command menu mode (short/window)
C1/522B:	F0 08      	BEQ $5235

C1/522D:	A9 01      	LDA #$01
C1/522F:	8D B8 64   	STA $64B8
C1/5232:	4C E9 50   	JMP $50E9

; Menu state $2A
C1/5235:	A9 02      	LDA #$02
C1/5237:	8D B8 64   	STA $64B8
C1/523A:	4C E9 50   	JMP $50E9

C1/523D:	A9 03      	LDA #$03
C1/523F:	8D B8 64   	STA $64B8
C1/5242:	4C E9 50   	JMP $50E9

C1/5245:	7B         	TDC
C1/5246:	AA         	TAX
C1/5247:	C2 20      	REP #$20
C1/5249:	BD 13 8D   	LDA $8D13,X
C1/524C:	9D 13 92   	STA $9213,X
C1/524F:	E8         	INX
C1/5250:	E8         	INX
C1/5251:	E0 00 02   	CPX #$0200
C1/5254:	D0 F3      	BNE $5249
C1/5256:	E2 20      	SEP #$20           ; 8-bit A
C1/5258:	7B         	TDC
C1/5259:	20 A0 53   	JSR $53A0
C1/525C:	A9 01      	LDA #$01
C1/525E:	20 A0 53   	JSR $53A0
C1/5261:	A9 0E      	LDA #$0E
C1/5263:	20 A0 53   	JSR $53A0
C1/5266:	7B         	TDC
C1/5267:	AA         	TAX
C1/5268:	C2 20      	REP #$20
C1/526A:	BD 13 8D   	LDA $8D13,X
C1/526D:	9D 13 94   	STA $9413,X
C1/5270:	E8         	INX
C1/5271:	E8         	INX
C1/5272:	E0 00 02   	CPX #$0200
C1/5275:	D0 F3      	BNE $526A
C1/5277:	E2 20      	SEP #$20           ; 8-bit A
C1/5279:	7B         	TDC
C1/527A:	20 A0 53   	JSR $53A0
C1/527D:	A9 01      	LDA #$01
C1/527F:	20 A0 53   	JSR $53A0
C1/5282:	A9 0D      	LDA #$0D
C1/5284:	20 A0 53   	JSR $53A0
C1/5287:	7B         	TDC
C1/5288:	AA         	TAX
C1/5289:	C2 20      	REP #$20
C1/528B:	BD 13 8D   	LDA $8D13,X
C1/528E:	9D 13 90   	STA $9013,X
C1/5291:	E8         	INX
C1/5292:	E8         	INX
C1/5293:	E0 00 02   	CPX #$0200
C1/5296:	D0 F3      	BNE $528B
C1/5298:	7B         	TDC
C1/5299:	E2 20      	SEP #$20           ; 8-bit A
C1/529B:	60         	RTS

C1/529C:	20 0B 52   	JSR $520B
C1/529F:	7B         	TDC
C1/52A0:	20 A0 53   	JSR $53A0
C1/52A3:	A9 01      	LDA #$01
C1/52A5:	20 A0 53   	JSR $53A0
C1/52A8:	7B         	TDC
C1/52A9:	20 73 53   	JSR $5373
C1/52AC:	A9 02      	LDA #$02
C1/52AE:	20 A0 53   	JSR $53A0
C1/52B1:	20 45 52   	JSR $5245
C1/52B4:	A9 01      	LDA #$01
C1/52B6:	20 73 53   	JSR $5373
C1/52B9:	A9 03      	LDA #$03
C1/52BB:	20 A0 53   	JSR $53A0
C1/52BE:	20 35 53   	JSR $5335
C1/52C1:	A9 02      	LDA #$02
C1/52C3:	20 73 53   	JSR $5373
C1/52C6:	A9 04      	LDA #$04
C1/52C8:	20 A0 53   	JSR $53A0
C1/52CB:	A9 03      	LDA #$03
C1/52CD:	20 73 53   	JSR $5373
C1/52D0:	A9 07      	LDA #$07
C1/52D2:	20 A0 53   	JSR $53A0
C1/52D5:	A9 05      	LDA #$05
C1/52D7:	20 97 53   	JSR $5397
C1/52DA:	A9 04      	LDA #$04
C1/52DC:	20 73 53   	JSR $5373
C1/52DF:	A9 06      	LDA #$06
C1/52E1:	20 A0 53   	JSR $53A0
C1/52E4:	A9 05      	LDA #$05
C1/52E6:	20 73 53   	JSR $5373
C1/52E9:	A9 08      	LDA #$08
C1/52EB:	20 A0 53   	JSR $53A0
C1/52EE:	A9 06      	LDA #$06
C1/52F0:	20 73 53   	JSR $5373
C1/52F3:	20 0B 52   	JSR $520B
C1/52F6:	A9 09      	LDA #$09
C1/52F8:	20 A0 53   	JSR $53A0
C1/52FB:	A9 07      	LDA #$07
C1/52FD:	20 73 53   	JSR $5373
C1/5300:	20 0B 52   	JSR $520B
C1/5303:	A9 0A      	LDA #$0A
C1/5305:	20 A0 53   	JSR $53A0
C1/5308:	A9 08      	LDA #$08
C1/530A:	4C 73 53   	JMP $5373

C1/530D:	9D 65 8D   	STA $8D65,X
C1/5310:	9D 6F 8D   	STA $8D6F,X
C1/5313:	9D 79 8D   	STA $8D79,X
C1/5316:	1A         	INC A
C1/5317:	9D 67 8D   	STA $8D67,X
C1/531A:	9D 71 8D   	STA $8D71,X
C1/531D:	9D 7B 8D   	STA $8D7B,X
C1/5320:	1A         	INC A
C1/5321:	9D 69 8D   	STA $8D69,X
C1/5324:	9D 73 8D   	STA $8D73,X
C1/5327:	9D 7D 8D   	STA $8D7D,X
C1/532A:	1A         	INC A
C1/532B:	9D 6B 8D   	STA $8D6B,X
C1/532E:	9D 75 8D   	STA $8D75,X
C1/5331:	9D 7F 8D   	STA $8D7F,X
C1/5334:	60         	RTS

C1/5335:	7B         	TDC
C1/5336:	AA         	TAX
C1/5337:	C2 20      	REP #$20
C1/5339:	A2 00 00   	LDX #$0000
C1/533C:	A9 68 2A   	LDA #$2A68
C1/533F:	20 0D 53   	JSR $530D
C1/5342:	A2 40 00   	LDX #$0040
C1/5345:	A9 78 2A   	LDA #$2A78
C1/5348:	20 0D 53   	JSR $530D
C1/534B:	A2 80 00   	LDX #$0080
C1/534E:	A9 6C 2A   	LDA #$2A6C
C1/5351:	20 0D 53   	JSR $530D
C1/5354:	A2 C0 00   	LDX #$00C0
C1/5357:	A9 7C 2A   	LDA #$2A7C
C1/535A:	20 0D 53   	JSR $530D
C1/535D:	A2 00 01   	LDX #$0100
C1/5360:	A9 78 AA   	LDA #$AA78
C1/5363:	20 0D 53   	JSR $530D
C1/5366:	A2 40 01   	LDX #$0140
C1/5369:	A9 68 AA   	LDA #$AA68
C1/536C:	20 0D 53   	JSR $530D
C1/536F:	7B         	TDC
C1/5370:	E2 20      	SEP #$20           ; 8-bit A
C1/5372:	60         	RTS

C1/5373:	0A         	ASL A
C1/5374:	AA         	TAX
C1/5375:	C2 20      	REP #$20
C1/5377:	BF 8C DD C2	LDA $C2DD8C,X
C1/537B:	A8         	TAY
C1/537C:	7B         	TDC
C1/537D:	E2 20      	SEP #$20           ; 8-bit A
C1/537F:	A2 00 02   	LDX #$0200
C1/5382:	86 36      	STX $36
C1/5384:	A2 13 8D   	LDX #$8D13
C1/5387:	A9 7E      	LDA #$7E
C1/5389:	4C 2B 1A   	JMP $1A2B         ; execute VRAM DMA transfer

C1/538C:	0A         	ASL A
C1/538D:	0A         	ASL A
C1/538E:	AA         	TAX
C1/538F:	A9 80      	LDA #$80
C1/5391:	85 7C      	STA $7C
C1/5393:	A9 28      	LDA #$28
C1/5395:	80 10      	BRA $53A7
C1/5397:	64 7C      	STZ $7C
C1/5399:	0A         	ASL A
C1/539A:	0A         	ASL A
C1/539B:	AA         	TAX
C1/539C:	A9 0A      	LDA #$0A
C1/539E:	80 07      	BRA $53A7
C1/53A0:	64 7C      	STZ $7C
C1/53A2:	0A         	ASL A
C1/53A3:	0A         	ASL A
C1/53A4:	AA         	TAX
C1/53A5:	A9 2A      	LDA #$2A
C1/53A7:	8D AE 7B   	STA $7BAE
C1/53AA:	A4 00      	LDY $00
C1/53AC:	BF 9E DD C2	LDA $C2DD9E,X
C1/53B0:	99 D3 88   	STA $88D3,Y
C1/53B3:	E8         	INX
C1/53B4:	C8         	INY
C1/53B5:	C0 04 00   	CPY #$0004
C1/53B8:	D0 F2      	BNE $53AC
C1/53BA:	AE D5 88   	LDX $88D5
C1/53BD:	86 10      	STX $10
C1/53BF:	64 14      	STZ $14
C1/53C1:	AD D4 88   	LDA $88D4
C1/53C4:	3A         	DEC A
C1/53C5:	3A         	DEC A
C1/53C6:	85 13      	STA $13
C1/53C8:	C2 20      	REP #$20
C1/53CA:	AF 10 55 C1	LDA $C15510    ; Data ...
C1/53CE:	85 22      	STA $22
C1/53D0:	AF 12 55 C1	LDA $C15512    ; Data ...
C1/53D4:	85 24      	STA $24
C1/53D6:	7B         	TDC
C1/53D7:	E2 20      	SEP #$20           ; 8-bit A
C1/53D9:	AD D3 88   	LDA $88D3
C1/53DC:	85 12      	STA $12
C1/53DE:	20 B8 54   	JSR $54B8
C1/53E1:	A9 40      	LDA #$40
C1/53E3:	20 AD 54   	JSR $54AD
C1/53E6:	A5 14      	LDA $14
C1/53E8:	29 0F      	AND #$0F
C1/53EA:	AA         	TAX
C1/53EB:	C2 20      	REP #$20
C1/53ED:	BF 00 55 C1	LDA $C15500,X    ; Data
C1/53F1:	85 22      	STA $22
C1/53F3:	BF 02 55 C1	LDA $C15502,X    ; Data
C1/53F7:	85 24      	STA $24
C1/53F9:	7B         	TDC
C1/53FA:	E2 20      	SEP #$20           ; 8-bit A
C1/53FC:	AD D3 88   	LDA $88D3
C1/53FF:	85 12      	STA $12
C1/5401:	20 B8 54   	JSR $54B8
C1/5404:	A5 14      	LDA $14
C1/5406:	18         	CLC
C1/5407:	69 04      	ADC #$04
C1/5409:	85 14      	STA $14
C1/540B:	A9 40      	LDA #$40
C1/540D:	20 AD 54   	JSR $54AD
C1/5410:	C6 13      	DEC $13
C1/5412:	D0 D2      	BNE $53E6
C1/5414:	C2 20      	REP #$20
C1/5416:	AF 14 55 C1	LDA $C15514    ; Data ...
C1/541A:	85 22      	STA $22
C1/541C:	AF 16 55 C1	LDA $C15516    ; Data ...
C1/5420:	85 24      	STA $24
C1/5422:	7B         	TDC
C1/5423:	E2 20      	SEP #$20           ; 8-bit A
C1/5425:	AD D3 88   	LDA $88D3
C1/5428:	85 12      	STA $12
C1/542A:	20 B8 54   	JSR $54B8
C1/542D:	AE D5 88   	LDX $88D5
C1/5430:	86 10      	STX $10
C1/5432:	AD D4 88   	LDA $88D4
C1/5435:	85 12      	STA $12
C1/5437:	AF 1C 55 C1	LDA $C1551C    ; Data ...
C1/543B:	85 22      	STA $22
C1/543D:	AF 1D 55 C1	LDA $C1551D    ; Data ...
C1/5441:	85 23      	STA $23
C1/5443:	A4 00      	LDY $00
C1/5445:	20 CE 54   	JSR $54CE
C1/5448:	AE D5 88   	LDX $88D5
C1/544B:	86 10      	STX $10
C1/544D:	AD D4 88   	LDA $88D4
C1/5450:	85 12      	STA $12
C1/5452:	AF 20 55 C1	LDA $C15520    ; Data ...
C1/5456:	85 22      	STA $22
C1/5458:	AF 21 55 C1	LDA $C15521    ; Data ...
C1/545C:	85 23      	STA $23
C1/545E:	AD D3 88   	LDA $88D3
C1/5461:	3A         	DEC A
C1/5462:	0A         	ASL A
C1/5463:	A8         	TAY
C1/5464:	20 CE 54   	JSR $54CE
C1/5467:	AE D5 88   	LDX $88D5
C1/546A:	86 10      	STX $10
C1/546C:	A4 00      	LDY $00
C1/546E:	AF 18 55 C1	LDA $C15518    ; Data ...
C1/5472:	20 F3 54   	JSR $54F3
C1/5475:	AD D3 88   	LDA $88D3
C1/5478:	3A         	DEC A
C1/5479:	0A         	ASL A
C1/547A:	A8         	TAY
C1/547B:	AF 19 55 C1	LDA $C15519    ; Data ...
C1/547F:	20 F3 54   	JSR $54F3
C1/5482:	AD D4 88   	LDA $88D4
C1/5485:	3A         	DEC A
C1/5486:	C2 20      	REP #$20
C1/5488:	0A         	ASL A
C1/5489:	0A         	ASL A
C1/548A:	0A         	ASL A
C1/548B:	0A         	ASL A
C1/548C:	0A         	ASL A
C1/548D:	0A         	ASL A
C1/548E:	18         	CLC
C1/548F:	6D D5 88   	ADC $88D5
C1/5492:	85 10      	STA $10
C1/5494:	7B         	TDC
C1/5495:	A8         	TAY
C1/5496:	E2 20      	SEP #$20           ; 8-bit A
C1/5498:	AF 1A 55 C1	LDA $C1551A    ; Data ...
C1/549C:	20 F3 54   	JSR $54F3
C1/549F:	AD D3 88   	LDA $88D3
C1/54A2:	3A         	DEC A
C1/54A3:	0A         	ASL A
C1/54A4:	A8         	TAY
C1/54A5:	AF 1B 55 C1	LDA $C1551B    ; Data ...
C1/54A9:	20 F3 54   	JSR $54F3
C1/54AC:	60         	RTS

C1/54AD:	C2 20      	REP #$20
C1/54AF:	18         	CLC
C1/54B0:	65 10      	ADC $10
C1/54B2:	85 10      	STA $10
C1/54B4:	7B         	TDC
C1/54B5:	E2 20      	SEP #$20           ; 8-bit A
C1/54B7:	60         	RTS

C1/54B8:	7B         	TDC
C1/54B9:	AA         	TAX
C1/54BA:	A8         	TAY
C1/54BB:	E2 10      	SEP #$10
C1/54BD:	B5 22      	LDA $22,X
C1/54BF:	20 F3 54   	JSR $54F3
C1/54C2:	8A         	TXA
C1/54C3:	1A         	INC A
C1/54C4:	29 03      	AND #$03
C1/54C6:	AA         	TAX
C1/54C7:	C6 12      	DEC $12
C1/54C9:	D0 F2      	BNE $54BD
C1/54CB:	C2 10      	REP #$10
C1/54CD:	60         	RTS

C1/54CE:	7B         	TDC
C1/54CF:	AA         	TAX
C1/54D0:	B5 22      	LDA $22,X
C1/54D2:	18         	CLC
C1/54D3:	65 7C      	ADC $7C
C1/54D5:	91 10      	STA ($10),Y
C1/54D7:	C8         	INY
C1/54D8:	AD AE 7B   	LDA $7BAE
C1/54DB:	91 10      	STA ($10),Y
C1/54DD:	C8         	INY
C1/54DE:	C2 20      	REP #$20
C1/54E0:	98         	TYA
C1/54E1:	18         	CLC
C1/54E2:	69 3E 00   	ADC #$003E
C1/54E5:	A8         	TAY
C1/54E6:	7B         	TDC
C1/54E7:	E2 20      	SEP #$20           ; 8-bit A
C1/54E9:	8A         	TXA
C1/54EA:	1A         	INC A
C1/54EB:	29 01      	AND #$01
C1/54ED:	AA         	TAX
C1/54EE:	C6 12      	DEC $12
C1/54F0:	D0 DE      	BNE $54D0
C1/54F2:	60         	RTS

C1/54F3:	18         	CLC
C1/54F4:	65 7C      	ADC $7C
C1/54F6:	91 10      	STA ($10),Y
C1/54F8:	C8         	INY
C1/54F9:	AD AE 7B   	LDA $7BAE
C1/54FC:	91 10      	STA ($10),Y
C1/54FE:	C8         	INY
C1/54FF:	60         	RTS

C1/5500:	2320
C1/5502:	2122
C1/5504:	2724
C1/5506:	2526
C1/5508:	2B28
C1/550A:	292A
C1/550C:	2F2C
C1/550E:	2D2E
C1/5510:	3231
C1/5512:	3231
C1/5514:	3A39
C1/5516:	3A39
C1/5518:	3033
C1/551A:	383B
C1/551C:	3634
C1/551E:	3634
C1/5520:	3735
C1/5522:	3735

C1/5524:	AD C2 7B   	LDA $7BC2      ; next menu cursor state
C1/5527:	0A         	ASL A          ; get pointer index
C1/5528:	AA         	TAX
C1/5529:	7C 2C 55   	JMP ($552C,X)  ; execute cursor state

C1/552C:	405A ; 00: Empty ($5A40)
C1/552E:	415A ; 01: Shift state queue downward ($5A41)
C1/5530:	4A5A ; 02:
C1/5532:	405A ; 03
C1/5534:	D659 ; 04: ($59D6)
C1/5536:	927A ; 05: Sustain command menu [?] ($7A92)
C1/5538:	AE59 ; 06: ($59AE) Sustain slot machine cursor [?]
C1/553A:	A056 ; 07: ($56A0) Close slot machine menu [?]
C1/553C:	087F ; 08: ($7F08) Sustain slot machine
C1/553E:	6957 ; 09
C1/5540:	7D88 ; 0A: Sustain item menu ($887D)
C1/5542:	4556 ; 0B: Open equipment menu ($5645)
C1/5544:	988D ; 0C: Sustain equipment menu ($8D98)
C1/5546:	A057 ; 0D
C1/5548:	4581 ; 0E: Sustain magic menu ($8145)
C1/554A:	8556 ; 0F: ($5685)
C1/554C:	5B56 ; 10
C1/554E:	405A ; 11
C1/5550:	F256 ; 12
C1/5552:	6956 ; 13
C1/5554:	E956 ; 14
C1/5556:	1F57 ; 15
C1/5558:	B382 ; 16: Sustain Esper menu ($82B3)
C1/555A:	915C ; 17
C1/555C:	F75C ; 18
C1/555E:	ED58 ; 19
C1/5560:	FB56 ; 1A
C1/5562:	0883 ; 1B: Sustain Lore menu ($8308)
C1/5564:	2759 ; 1C
C1/5566:	0457 ; 1D
C1/5568:	C684 ; 1E
C1/556A:	5859 ; 1F
C1/556C:	0D57 ; 20
C1/556E:	B485 ; 21
C1/5570:	3156 ; 22
C1/5572:	7C56 ; 23: ($567C)
C1/5574:	737E ; 24
C1/5576:	3B56 ; 25
C1/5578:	7356 ; 26: ($5673)
C1/557A:	057E ; 27
C1/557C:	8359 ; 28: ($5983) Initialize Magitek Menu
C1/557E:	1657 ; 29: ($5716)
C1/5580:	2586 ; 2A: ($8625) Sustain Magitek Menu
C1/5582:	7558 ; 2B: ($5875)
C1/5584:	E056 ; 2C
C1/5586:	B586 ; 2D
C1/5588:	B158 ; 2E
C1/558A:	9756 ; 2F
C1/558C:	9D87 ; 30
C1/558E:	3E8D ; 31: ($8D3E)
C1/5590:	C955 ; 32
C1/5592:	D756 ; 33
C1/5594:	B556 ; 34
C1/5596:	1B56 ; 35
C1/5598:	2856 ; 36
C1/559A:	257D ; 37
C1/559C:	906D ; 38: Sustain targeting ($6D90)
C1/559E:	6842 ; 39
C1/55A0:	C842 ; 3A
C1/55A2:	5557 ; 3B
C1/55A4:	5F57 ; 3C
C1/55A6:	F86F ; 3D
C1/55A8:	4C5B ; 3E
C1/55AA:	B055 ; 3F: Target allies
C1/55AC:	BA55 ; 40: Stop targeting allies [?]
C1/55AE:	1C91 ; 41: ($911C)

; Target allies
C1/55B0:	A9 2B       LDA #$2B       ; "Open target allies window"
C1/55B2:	8D F0 7B    STA $7BF0
C1/55B5:	A9 12       LDA #$12
C1/55B7:	4C 2C 5A    JMP $5A2C      ; queue cursor state sequence 12

; Stop targeting allies
C1/55BA:	A9 2C      	LDA #$2C       ; "Close target allies window"
C1/55BC:	8D F0 7B   	STA $7BF0      ; update current menu state
C1/55BF:	AD BA EC   	LDA $ECBA      ; 0: Item, 1: Magic (parent menu)
C1/55C2:	0A         	ASL A          ; x2
C1/55C3:	18         	CLC            ; clear carry
C1/55C4:	69 02      	ADC #$02       ; +2
C1/55C6:	4C 2C 5A   	JMP $5A2C      ; queue cursor state sequence 02 (item) or 04 (magic)

; Initialize Slot Machine [?]
C1/55C9:	7B         	TDC
C1/55CA:	AA         	TAX
C1/55CB:	A9 4C      	LDA #$4C
C1/55CD:	9D FD 5F   	STA $5FFD,X
C1/55D0:	9D 07 60   	STA $6007,X
C1/55D3:	9D 11 60   	STA $6011,X
C1/55D6:	E8         	INX
C1/55D7:	E8         	INX
C1/55D8:	E0 08 00   	CPX #$0008
C1/55DB:	D0 F0      	BNE $55CD
C1/55DD:	A9 01      	LDA #$01
C1/55DF:	8D 95 7B   	STA $7B95
C1/55E2:	8D 97 7B   	STA $7B97
C1/55E5:	8D 8B 7B   	STA $7B8B
C1/55E8:	8D 92 89   	STA $8992
C1/55EB:	A9 80      	LDA #$80
C1/55ED:	8D 83 7B   	STA $7B83
C1/55F0:	AD 0E 80   	LDA $800E
C1/55F3:	29 7F      	AND #$7F
C1/55F5:	8D 0E 80   	STA $800E
C1/55F8:	A9 0C      	LDA #$0C
C1/55FA:	8D 8A 7B   	STA $7B8A
C1/55FD:	9C 8F 7B   	STZ $7B8F
C1/5600:	9C 90 7B   	STZ $7B90
C1/5603:	9C 91 7B   	STZ $7B91
C1/5606:	9C 8C 7B   	STZ $7B8C
C1/5609:	9C 8D 7B   	STZ $7B8D
C1/560C:	9C 8E 7B   	STZ $7B8E
C1/560F:	9C 92 7B   	STZ $7B92
C1/5612:	9C 93 7B   	STZ $7B93
C1/5615:	9C 94 7B   	STZ $7B94
C1/5618:	4C 4A 5A   	JMP $5A4A

C1/561B:	9C 82 7B   	STZ $7B82
C1/561E:	A9 25      	LDA #$25
C1/5620:	8D F0 7B   	STA $7BF0
C1/5623:	A9 10      	LDA #$10
C1/5625:	4C 2C 5A   	JMP $5A2C     ; queue cursor state sequence 10

C1/5628:	A9 26      	LDA #$26
C1/562A:	8D F0 7B   	STA $7BF0
C1/562D:	7B         	TDC
C1/562E:	4C 2C 5A   	JMP $5A2C     ; queue cursor state sequence 00

; Open "Row" command menu
C1/5631:	A9 17      	LDA #$17      ; "Row" command menu ID
C1/5633:	8D F0 7B   	STA $7BF0     ; set next menu state
C1/5636:	A9 0B      	LDA #$0B      ; prepare cursor state
C1/5638:	4C 2C 5A   	JMP $5A2C     ; queue cursor state sequence 0B

C1/563B:	A9 19      	LDA #$19
C1/563D:	8D F0 7B   	STA $7BF0
C1/5640:	A9 0C      	LDA #$0C
C1/5642:	4C 2C 5A   	JMP $5A2C     ; queue cursor state sequence 0C

; Open equipment menu
C1/5645:	20 BA 4B   	JSR $4BBA     ; draw equipped items menu
C1/5648:	A2 40 7E   	LDX #$7E40    ; menu window palette offset
C1/564B:	8E AA 7B   	STX $7BAA     ; VRAM destination [?]
C1/564E:	EE A9 7B   	INC $7BA9     ; pending VRAM [?]
C1/5651:	A9 09      	LDA #$09
C1/5653:	8D F0 7B   	STA $7BF0     ; menu: load equipment menu
C1/5656:	A9 03      	LDA #$03      ; cursor state sequence: 010C
C1/5658:	4C 2C 5A   	JMP $5A2C     ; update cursor after menu loads

C1/565B:	9C CB 7B   	STZ $7BCB
C1/565E:	A9 22      	LDA #$22
C1/5660:	8D F0 7B   	STA $7BF0
C1/5663:	A9 01      	LDA #$01
C1/5665:	8D C2 7B   	STA $7BC2
C1/5668:	60         	RTS

C1/5669:	A9 0A      	LDA #$0A
C1/566B:	8D F0 7B   	STA $7BF0
C1/566E:	A9 08      	LDA #$08
C1/5670:	4C 2C 5A   	JMP $5A2C     ; queue cursor state sequence 08

; Menu state $26
C1/5673:	A9 1A      	LDA #$1A
C1/5675:	8D F0 7B   	STA $7BF0     ; update menu state
C1/5678:	7B         	TDC           ; A = 0000
C1/5679:	4C 2C 5A   	JMP $5A2C     ; queue cursor state sequence 00

; Menu state $23
C1/567C:	A9 18      	LDA #$18
C1/567E:	8D F0 7B   	STA $7BF0     ; update menu state
C1/5681:	7B         	TDC           ; A = 0000
C1/5682:	4C 2C 5A   	JMP $5A2C     ; queue cursor state sequence 00

; Cursor state $0F
C1/5685:	9C 2F 63   	STZ $632F
C1/5688:	A9 05      	LDA #$05
C1/568A:	8D F0 7B   	STA $7BF0     ; update menu state
C1/568D:	A9 2A      	LDA #$2A
C1/568F:	8D F1 7B   	STA $7BF1     ; queue menu state
C1/5692:	A9 05      	LDA #$05
C1/5694:	4C 2C 5A   	JMP $5A2C     ; queue cursor state sequence 05

C1/5697:	A9 21      	LDA #$21
C1/5699:	8D F0 7B   	STA $7BF0
C1/569C:	7B         	TDC
C1/569D:	4C 2C 5A   	JMP $5A2C     ; queue cursor state sequence 00

; Close Slot Machine
C1/56A0:	A9 80      	LDA #$80
C1/56A2:	8D 83 7B   	STA $7B83
C1/56A5:	A9 3A      	LDA #$3A
C1/56A7:	8D C2 7B   	STA $7BC2
C1/56AA:	A9 01      	LDA #$01
C1/56AC:	8D C3 7B   	STA $7BC3
C1/56AF:	A9 34      	LDA #$34
C1/56B1:	8D C4 7B   	STA $7BC4
C1/56B4:	60         	RTS

C1/56B5:	20 FE 40   	JSR $40FE
C1/56B8:	20 1E 41   	JSR $411E
C1/56BB:	A9 33      	LDA #$33
C1/56BD:	8D C2 7B   	STA $7BC2
C1/56C0:	A9 02      	LDA #$02
C1/56C2:	8D 95 7B   	STA $7B95
C1/56C5:	8D 97 7B   	STA $7B97
C1/56C8:	9C 8B 7B   	STZ $7B8B
C1/56CB:	AD 0E 80   	LDA $800E
C1/56CE:	29 7F      	AND #$7F
C1/56D0:	8D 0E 80   	STA $800E
C1/56D3:	9C 8A 7B   	STZ $7B8A
C1/56D6:	60         	RTS

C1/56D7:	A9 06      	LDA #$06
C1/56D9:	8D F0 7B   	STA $7BF0
C1/56DC:	7B         	TDC
C1/56DD:	4C 2C 5A   	JMP $5A2C     ; queue cursor state sequence 00

C1/56E0:	A9 1E      	LDA #$1E
C1/56E2:	8D F0 7B   	STA $7BF0
C1/56E5:	7B         	TDC
C1/56E6:	4C 2C 5A   	JMP $5A2C     ; queue cursor state sequence 00

C1/56E9:	A9 0C      	LDA #$0C
C1/56EB:	8D F0 7B   	STA $7BF0
C1/56EE:	7B         	TDC
C1/56EF:	4C 2C 5A   	JMP $5A2C     ; queue cursor state sequence 00

C1/56F2:	A9 08      	LDA #$08      ; menu state: close submenu [?]
C1/56F4:	8D F0 7B   	STA $7BF0     ; update menu state
C1/56F7:	7B         	TDC
C1/56F8:	4C 2C 5A   	JMP $5A2C     ; queue cursor state sequence 00

C1/56FB:	A9 12      	LDA #$12
C1/56FD:	8D F0 7B   	STA $7BF0
C1/5700:	7B         	TDC
C1/5701:	4C 2C 5A   	JMP $5A2C     ; queue cursor state sequence 00

C1/5704:	A9 14      	LDA #$14
C1/5706:	8D F0 7B   	STA $7BF0
C1/5709:	7B         	TDC
C1/570A:	4C 2C 5A   	JMP $5A2C     ; queue cursor state sequence 00

C1/570D:	A9 16      	LDA #$16
C1/570F:	8D F0 7B   	STA $7BF0
C1/5712:	7B         	TDC
C1/5713:	4C 2C 5A   	JMP $5A2C     ; queue cursor state sequence 00

C1/5716:	A9 1C      	LDA #$1C
C1/5718:	8D F0 7B   	STA $7BF0
C1/571B:	7B         	TDC
C1/571C:	4C 2C 5A   	JMP $5A2C     ; queue cursor state sequence 00

C1/571F:	A9 0E      	LDA #$0E
C1/5721:	8D F0 7B   	STA $7BF0
C1/5724:	A9 04      	LDA #$04
C1/5726:	4C 2C 5A   	JMP $5A2C

C1/5729:	AD A5 7B   	LDA $7BA5
C1/572C:	29 03      	AND #$03
C1/572E:	0A         	ASL A
C1/572F:	AA         	TAX
C1/5730:	BF 91 82 C1	LDA $C18291,X    ; Data
C1/5734:	8D AA 7B   	STA $7BAA
C1/5737:	BF 92 82 C1	LDA $C18292,X    ; Data
C1/573B:	8D AB 7B   	STA $7BAB
C1/573E:	EE A9 7B   	INC $7BA9
C1/5741:	EE A6 7B   	INC $7BA6
C1/5744:	EE A5 7B   	INC $7BA5
C1/5747:	AD A5 7B   	LDA $7BA5
C1/574A:	C9 84      	CMP #$84
C1/574C:	D0 05      	BNE $5753
C1/574E:	9C A5 7B   	STZ $7BA5
C1/5751:	38         	SEC
C1/5752:	60         	RTS

C1/5753:	18         	CLC
C1/5754:	60         	RTS

C1/5755:	A9 27      	LDA #$27
C1/5757:	8D F0 7B   	STA $7BF0
C1/575A:	A9 11      	LDA #$11
C1/575C:	4C 2C 5A   	JMP $5A2C

C1/575F:	A9 28      	LDA #$28
C1/5761:	8D F0 7B   	STA $7BF0
C1/5764:	A9 11      	LDA #$11
C1/5766:	4C 2C 5A   	JMP $5A2C

C1/5769:	9C 02 7B   	STZ $7B02      ; unset item swapping flag
C1/576C:	9C 0C 89   	STZ $890C      ; reset equipment swap mode
C1/576F:	A9 09      	LDA #$09
C1/5771:	8D C2 7B   	STA $7BC2
C1/5774:	AD A5 7B   	LDA $7BA5
C1/5777:	30 11      	BMI $578A
C1/5779:	20 17 5A   	JSR $5A17
C1/577C:	AE CA 62   	LDX $62CA
C1/577F:	BD 47 89   	LDA $8947,X    ; menu vertical scroll position
C1/5782:	8D A6 7B   	STA $7BA6
C1/5785:	A9 80      	LDA #$80
C1/5787:	8D A5 7B   	STA $7BA5
C1/578A:	AD A6 7B   	LDA $7BA6
C1/578D:	20 6B 4C   	JSR $4C6B      ; draw item menu slot
C1/5790:	20 29 57   	JSR $5729
C1/5793:	90 0A      	BCC $579F
C1/5795:	A9 07      	LDA #$07
C1/5797:	8D F0 7B   	STA $7BF0
C1/579A:	A9 02      	LDA #$02
C1/579C:	4C 2C 5A   	JMP $5A2C

C1/579F:	60         	RTS

C1/57A0:	A9 0D      	LDA #$0D
C1/57A2:	8D C2 7B   	STA $7BC2
C1/57A5:	AD A5 7B   	LDA $7BA5
C1/57A8:	30 1A      	BMI $57C4
C1/57AA:	20 14 84   	JSR $8414
C1/57AD:	BD 95 20   	LDA $2095,X
C1/57B0:	8D 78 61   	STA $6178
C1/57B3:	20 17 5A   	JSR $5A17
C1/57B6:	AE CA 62   	LDX $62CA
C1/57B9:	BD 13 89   	LDA $8913,X
C1/57BC:	8D A6 7B   	STA $7BA6
C1/57BF:	A9 80      	LDA #$80
C1/57C1:	8D A5 7B   	STA $7BA5
C1/57C4:	AD A6 7B   	LDA $7BA6
C1/57C7:	20 B5 4D   	JSR $4DB5
C1/57CA:	20 29 57   	JSR $5729
C1/57CD:	90 0A      	BCC $57D9
C1/57CF:	A9 0B      	LDA #$0B
C1/57D1:	8D F0 7B   	STA $7BF0
C1/57D4:	A9 04      	LDA #$04
C1/57D6:	4C 2C 5A   	JMP $5A2C

C1/57D9:	60         	RTS

; Get 256-length list of valid items for Tools/Throw
;
; Looks like maybe these always get called in sequence, because
; after each pointer is followed, the index is incremented. Is this
; to build items lists in 25% increments to avoid slowdown? Or are these
; called only when the next portion of the list is required due to player
; scrolling?

; Throw pointers
C1/57DA:	3A 58       ; $00 - build list of first 65 items?
C1/57DC:	50 58       ; $01 - build list of first 128 items?
C1/57DE:	56 58       ; $02 - build list of first 192 items?
C1/57E0:	5C 58       ; $03 - build list of first (all?) 256 items
C1/57E2:	82 58

; Tools pointers
C1/57E4:	36 58       ; $04 - build list of first 65 items?
C1/57E6:	50 58       ; $05 - build list of first 128 items?
C1/57E8:	56 58       ; $06 - build list of first 192 items?
C1/57EA:	5C 58       ; $07 - build list of first (all?) 256 items
C1/57EC:	BE 58       ; $08 - build list of

; Build tools list or throwables list
C1/57EE:	86 36      	STX $36         ; set max item index to check
C1/57F0:	AD A4 7B   	LDA $7BA4       ; A = #40 for tools(0), #20 for throw(0) ?
C1/57F3:	85 38      	STA $38         ; required item flag (is-a-tool/can-be-thrown)
C1/57F5:	AD A3 7B   	LDA $7BA3       ; starts at 0? -- slot number in new list
C1/57F8:	85 39      	STA $39
C1/57FA:	AE 9F 7B   	LDX $7B9F       ; destination index for valid items (starts at 0?)
C1/57FD:	AC A1 7B   	LDY $7BA1       ; index to item (starts at 0?)

C1/5800:	B9 87 26   	LDA $2687,Y     ; item flags
C1/5803:	25 38      	AND $38
C1/5805:	F0 15      	BEQ $581C       ; branch if not throwable/weapon/shield[?]
C1/5807:	B9 86 26   	LDA $2686,Y     ; item index#
C1/580A:	9D 05 40   	STA $4005,X
C1/580D:	B9 89 26   	LDA $2689,Y     ; item quantity
C1/5810:	9D 06 40   	STA $4006,X
C1/5813:	B9 88 26   	LDA $2688,Y     ; targeting flags
C1/5816:	9D 07 40   	STA $4007,X     ; move item info to valid items list
C1/5819:	E8         	INX
C1/581A:	E8         	INX
C1/581B:	E8         	INX             ; advance to next list slot

C1/581C:	E6 39      	INC $39         ; increment list slot
C1/581E:	C8         	INY
C1/581F:	C8         	INY
C1/5820:	C8         	INY
C1/5821:	C8         	INY
C1/5822:	C8         	INY             ; advance to next item index
C1/5823:	C4 36      	CPY $36
C1/5825:	D0 D9      	BNE $5800       ; keep looping until max index
C1/5827:	8E 9F 7B   	STX $7B9F       ; store offset for new list end
C1/582A:	8C A1 7B   	STY $7BA1       ; store offset after last item checked (should equal $36)
C1/582D:	EE 9E 7B   	INC $7B9E       ; advance command pointer (why?)
C1/5830:	A5 39      	LDA $39
C1/5832:	8D A3 7B   	STA $7BA3       ; store next list slot index
C1/5835:	60         	RTS

C1/5836:	A9 40      	LDA #$40
C1/5838:	80 02      	BRA $583C
C1/583A:	A9 20      	LDA #$20        ; throw enters here
C1/583C:	8D A4 7B   	STA $7BA4
C1/583F:	7B         	TDC
C1/5840:	AA         	TAX
C1/5841:	8E 9F 7B   	STX $7B9F
C1/5844:	8E A1 7B   	STX $7BA1
C1/5847:	9C A3 7B   	STZ $7BA3
C1/584A:	A2 40 01   	LDX #$0140
C1/584D:	4C EE 57   	JMP $57EE       ; loop through 65th item

C1/5850:	A2 80 02   	LDX #$0280
C1/5853:	4C EE 57   	JMP $57EE       ; loop through 128th item

C1/5856:	A2 C0 03   	LDX #$03C0
C1/5859:	4C EE 57   	JMP $57EE       ; loop through 192nd item

C1/585C:	A2 00 05   	LDX #$0500
C1/585F:	20 EE 57   	JSR $57EE       ; loop through 256th item
C1/5862:	A9 FF      	LDA #$FF
C1/5864:	E0 00 03   	CPX #$0300
C1/5867:	F0 0B      	BEQ $5874       ; branch once all 256 slots are full
C1/5869:	9D 05 40   	STA $4005,X     ; store empty item in slot
C1/586C:	9E 06 40   	STZ $4006,X     ; set quantity to 0 for slot
C1/586F:	E8         	INX
C1/5870:	E8         	INX
C1/5871:	E8         	INX
C1/5872:	80 F0      	BRA $5864       ; loop until all 256 slots are filled
C1/5874:	60         	RTS

; Throw battle menu

C1/5875:	A9 2B      	LDA #$2B
C1/5877:	8D C2 7B   	STA $7BC2       ; current cursor state
C1/587A:	AD 9E 7B   	LDA $7B9E       ; inventory id / section
C1/587D:	0A         	ASL A           ; x2
C1/587E:	AA         	TAX             ; index it
C1/587F:	7C DA 57   	JMP ($57DA,X)   ; build tool or throw inventory

C1/5882:	AD A5 7B   	LDA $7BA5
C1/5885:	30 11      	BMI $5898
C1/5887:	20 17 5A   	JSR $5A17
C1/588A:	AE CA 62   	LDX $62CA       ; active character
C1/588D:	BD 53 89   	LDA $8953,X
C1/5890:	8D A6 7B   	STA $7BA6
C1/5893:	A9 80      	LDA #$80
C1/5895:	8D A5 7B   	STA $7BA5

C1/5898:	AD A6 7B   	LDA $7BA6
C1/589B:	20 27 4C   	JSR $4C27
C1/589E:	20 29 57   	JSR $5729
C1/58A1:	90 0D      	BCC $58B0
C1/58A3:	9C 9E 7B   	STZ $7B9E
C1/58A6:	A9 1D      	LDA #$1D
C1/58A8:	8D F0 7B   	STA $7BF0       ; set menu state
C1/58AB:	A9 0E      	LDA #$0E
C1/58AD:	4C 2C 5A   	JMP $5A2C       ; queue up cursor state sequence $0E

C1/58B0:	60         	RTS

C1/58B1:	A9 2E      	LDA #$2E
C1/58B3:	8D C2 7B   	STA $7BC2
C1/58B6:	AD 9E 7B   	LDA $7B9E
C1/58B9:	0A         	ASL A
C1/58BA:	AA         	TAX
C1/58BB:	7C E4 57   	JMP ($57E4,X)  ; Jump table

C1/58BE:	AD A5 7B   	LDA $7BA5
C1/58C1:	30 11      	BMI $58D4
C1/58C3:	20 17 5A   	JSR $5A17
C1/58C6:	AE CA 62   	LDX $62CA
C1/58C9:	BD 5F 89   	LDA $895F,X
C1/58CC:	8D A6 7B   	STA $7BA6
C1/58CF:	A9 80      	LDA #$80
C1/58D1:	8D A5 7B   	STA $7BA5
C1/58D4:	AD A6 7B   	LDA $7BA6
C1/58D7:	20 F7 4B   	JSR $4BF7
C1/58DA:	20 29 57   	JSR $5729
C1/58DD:	90 0D      	BCC $58EC
C1/58DF:	9C 9E 7B   	STZ $7B9E
C1/58E2:	A9 20      	LDA #$20
C1/58E4:	8D F0 7B   	STA $7BF0
C1/58E7:	A9 0F      	LDA #$0F
C1/58E9:	4C 2C 5A   	JMP $5A2C

C1/58EC:	60         	RTS

C1/58ED:	A9 19      	LDA #$19
C1/58EF:	8D C2 7B   	STA $7BC2
C1/58F2:	AD A5 7B   	LDA $7BA5
C1/58F5:	30 1A      	BMI $5911
C1/58F7:	20 F7 83   	JSR $83F7
C1/58FA:	BD 6D 21   	LDA $216D,X
C1/58FD:	8D 78 61   	STA $6178
C1/5900:	20 17 5A   	JSR $5A17
C1/5903:	AE CA 62   	LDX $62CA
C1/5906:	BD 1F 89   	LDA $891F,X
C1/5909:	8D A6 7B   	STA $7BA6
C1/590C:	A9 80      	LDA #$80
C1/590E:	8D A5 7B   	STA $7BA5
C1/5911:	AD A6 7B   	LDA $7BA6
C1/5914:	20 76 4D   	JSR $4D76
C1/5917:	20 29 57   	JSR $5729
C1/591A:	90 0A      	BCC $5926
C1/591C:	A9 11      	LDA #$11
C1/591E:	8D F0 7B   	STA $7BF0
C1/5921:	A9 07      	LDA #$07
C1/5923:	4C 2C 5A   	JMP $5A2C

C1/5926:	60         	RTS

C1/5927:	A9 1C      	LDA #$1C
C1/5929:	8D C2 7B   	STA $7BC2
C1/592C:	AD A5 7B   	LDA $7BA5
C1/592F:	30 11      	BMI $5942
C1/5931:	20 17 5A   	JSR $5A17
C1/5934:	AE CA 62   	LDX $62CA
C1/5937:	BD 2B 89   	LDA $892B,X
C1/593A:	8D A6 7B   	STA $7BA6
C1/593D:	A9 80      	LDA #$80
C1/593F:	8D A5 7B   	STA $7BA5
C1/5942:	AD A6 7B   	LDA $7BA6
C1/5945:	20 E2 4C   	JSR $4CE2
C1/5948:	20 29 57   	JSR $5729
C1/594B:	90 0A      	BCC $5957
C1/594D:	A9 13      	LDA #$13
C1/594F:	8D F0 7B   	STA $7BF0
C1/5952:	A9 09      	LDA #$09
C1/5954:	4C 2C 5A   	JMP $5A2C

C1/5957:	60         	RTS

C1/5958:	A9 1F      	LDA #$1F
C1/595A:	8D C2 7B   	STA $7BC2
C1/595D:	AD A5 7B   	LDA $7BA5
C1/5960:	30 0B      	BMI $596D
C1/5962:	20 17 5A   	JSR $5A17
C1/5965:	9C A6 7B   	STZ $7BA6
C1/5968:	A9 80      	LDA #$80
C1/596A:	8D A5 7B   	STA $7BA5
C1/596D:	AD A6 7B   	LDA $7BA6
C1/5970:	20 08 4D   	JSR $4D08
C1/5973:	20 29 57   	JSR $5729
C1/5976:	90 0A      	BCC $5982
C1/5978:	A9 15      	LDA #$15
C1/597A:	8D F0 7B   	STA $7BF0
C1/597D:	A9 0A      	LDA #$0A
C1/597F:	4C 2C 5A   	JMP $5A2C

C1/5982:	60         	RTS

; Initialize Magitek Menu
C1/5983:	A9 28      	LDA #$28       ; cursor state
C1/5985:	8D C2 7B   	STA $7BC2      ; set menu cursor state
C1/5988:	AD A5 7B   	LDA $7BA5
C1/598B:	30 0B      	BMI $5998
C1/598D:	20 17 5A   	JSR $5A17
C1/5990:	9C A6 7B   	STZ $7BA6
C1/5993:	A9 80      	LDA #$80
C1/5995:	8D A5 7B   	STA $7BA5

C1/5998:	AD A6 7B   	LDA $7BA6
C1/599B:	20 2E 4D   	JSR $4D2E      ; some positioning?
C1/599E:	20 29 57   	JSR $5729
C1/59A1:	90 0A      	BCC $59AD
C1/59A3:	A9 1B      	LDA #$1B
C1/59A5:	8D F0 7B   	STA $7BF0      ; set menu state
C1/59A8:	A9 0D      	LDA #$0D
C1/59AA:	4C 2C 5A   	JMP $5A2C

C1/59AD:	60         	RTS

; Slot Machine Menu Init [?]
C1/59AE:	20 1E 41   	JSR $411E      ; zero some color palette [?]
C1/59B1:	A9 06      	LDA #$06
C1/59B3:	8D C2 7B   	STA $7BC2      ; set menu cursor state
C1/59B6:	AD A5 7B   	LDA $7BA5
C1/59B9:	30 0B      	BMI $59C6
C1/59BB:	20 17 5A   	JSR $5A17
C1/59BE:	9C A6 7B   	STZ $7BA6
C1/59C1:	A9 80      	LDA #$80
C1/59C3:	8D A5 7B   	STA $7BA5
C1/59C6:	20 29 57   	JSR $5729      ; prepare VRAM [?]
C1/59C9:	90 0A      	BCC $59D5
C1/59CB:	A9 04      	LDA #$04
C1/59CD:	8D F0 7B   	STA $7BF0      ; set menu state
C1/59D0:	A9 01      	LDA #$01
C1/59D2:	4C 2C 5A   	JMP $5A2C

C1/59D5:	60         	RTS

; Menu cursor state 04
C1/59D6:	AF 4E 1D 00	LDA $001D4E    ; config settings [why long?]
C1/59DA:	29 40      	AND #$40       ; cursor memory setting
C1/59DC:	D0 0B      	BNE $59E9
C1/59DE:	7B         	TDC            ; A = 0000
C1/59DF:	AA         	TAX            ; X = 0000
C1/59E0:	9E 0F 89   	STZ $890F,X    ; cursor position data
C1/59E3:	E8         	INX
C1/59E4:	E0 5C 00   	CPX #$005C     ; clear $890F-$896B
C1/59E7:	D0 F7      	BNE $59E0      ; loop till done

C1/59E9:	A9 01      	LDA #$01
C1/59EB:	8D 2F 63   	STA $632F
C1/59EE:	A9 29      	LDA #$29
C1/59F0:	8D F0 7B   	STA $7BF0      ; current (next) menu state
C1/59F3:	A9 03      	LDA #$03
C1/59F5:	8D F1 7B   	STA $7BF1      ; queued menu state
C1/59F8:	A9 1F      	LDA #$1F
C1/59FA:	8D F2 7B   	STA $7BF2      ; queued menu state
C1/59FD:	7B         	TDC            ; A = 0000
C1/59FE:	4C 2C 5A   	JMP $5A2C      ; queue up cursor state sequence 00

C1/5A01:	20 1E 4E   	JSR $4E1E
C1/5A04:	A2 80 7B   	LDX #$7B80
C1/5A07:	8E AA 7B   	STX $7BAA
C1/5A0A:	EE A9 7B   	INC $7BA9
C1/5A0D:	A9 0D      	LDA #$0D
C1/5A0F:	8D F0 7B   	STA $7BF0
C1/5A12:	A9 06      	LDA #$06
C1/5A14:	4C 2C 5A   	JMP $5A2C      ; queue cursor state sequence 06

C1/5A17:	C2 20      	REP #$20
C1/5A19:	A6 00      	LDX $00
C1/5A1B:	A9 FF 01   	LDA #$01FF
C1/5A1E:	9D 4D 5E   	STA $5E4D,X
C1/5A21:	E8         	INX
C1/5A22:	E8         	INX
C1/5A23:	E0 80 00   	CPX #$0080
C1/5A26:	D0 F6      	BNE $5A1E
C1/5A28:	7B         	TDC
C1/5A29:	E2 20      	SEP #$20           ; 8-bit A
C1/5A2B:	60         	RTS

; Queue cursor state sequence
C1/5A2C:	0A         	ASL A
C1/5A2D:	0A         	ASL A
C1/5A2E:	AA         	TAX            ; X = cursor state sequence index
C1/5A2F:	A4 00      	LDY $00        ; Y = 00
C1/5A31:	BF 48 E3 C2	LDA $C2E348,X  ; cursor state entry
C1/5A35:	99 C2 7B   	STA $7BC2,Y    ; set in current (and queued) state
C1/5A38:	E8         	INX
C1/5A39:	C8         	INY
C1/5A3A:	C0 04 00   	CPY #$0004     ; queue 4 states
C1/5A3D:	D0 F2      	BNE $5A31      ; loop till done
C1/5A3F:	60         	RTS

C1/5A40:	60         	RTS

; Menu cursor action 01
C1/5A41:	AD F0 7B   	LDA $7BF0       ; current menu state
C1/5A44:	D0 03      	BNE $5A49       ; exit if not zero
C1/5A46:	4C 4A 5A   	JMP $5A4A       ; shift menu cursor queue downward
C1/5A49:	60         	RTS

; Shift menu cursor queue downward
C1/5A4A:	7B         	TDC             ; A = 0000
C1/5A4B:	AA         	TAX             ; X = 0000
C1/5A4C:	8D C9 7B   	STA $7BC9       ; set cursor queue endpoint
C1/5A4F:	BD C3 7B   	LDA $7BC3,X     ; get later queue entry
C1/5A52:	9D C2 7B   	STA $7BC2,X     ; shift down one byte
C1/5A55:	E8         	INX
C1/5A56:	E0 07 00   	CPX #$0007      ; move 7 entries downward
C1/5A59:	D0 F4      	BNE $5A4F       ; loop till whole queue shifted
C1/5A5B:	60         	RTS

C1/5A5C:	AD DD 7B   	LDA $7BDD
C1/5A5F:	F0 6F      	BEQ $5AD0
C1/5A61:	AD BB 7B   	LDA $7BBB
C1/5A64:	D0 6A      	BNE $5AD0
C1/5A66:	AD EE 7B   	LDA $7BEE
C1/5A69:	D0 62      	BNE $5ACD
C1/5A6B:	AD EB 7B   	LDA $7BEB
C1/5A6E:	D0 11      	BNE $5A81
C1/5A70:	EE EB 7B   	INC $7BEB
C1/5A73:	C2 20      	REP #$20
C1/5A75:	AE E9 7B   	LDX $7BE9
C1/5A78:	A0 D5 55   	LDY #$55D5
C1/5A7B:	AD EC 7B   	LDA $7BEC
C1/5A7E:	54 7E 7E   	MVN 7E 7E
C1/5A81:	C2 20      	REP #$20
C1/5A83:	AD DE 7B   	LDA $7BDE
C1/5A86:	AA         	TAX
C1/5A87:	38         	SEC
C1/5A88:	E9 10 00   	SBC #$0010
C1/5A8B:	8D DE 7B   	STA $7BDE
C1/5A8E:	AD E0 7B   	LDA $7BE0
C1/5A91:	A8         	TAY
C1/5A92:	38         	SEC
C1/5A93:	E9 10 00   	SBC #$0010
C1/5A96:	8D E0 7B   	STA $7BE0
C1/5A99:	A9 0F 00   	LDA #$000F
C1/5A9C:	54 7E 7E   	MVN 7E 7E
C1/5A9F:	AE E2 7B   	LDX $7BE2
C1/5AA2:	AC E4 7B   	LDY $7BE4
C1/5AA5:	A9 0F 00   	LDA #$000F
C1/5AA8:	54 7E 7E   	MVN 7E 7E
C1/5AAB:	8E E2 7B   	STX $7BE2
C1/5AAE:	8C E4 7B   	STY $7BE4
C1/5AB1:	7B         	TDC
C1/5AB2:	E2 20      	SEP #$20           ; 8-bit A
C1/5AB4:	CE E6 7B   	DEC $7BE6
C1/5AB7:	D0 14      	BNE $5ACD
C1/5AB9:	9C DD 7B   	STZ $7BDD
C1/5ABC:	C2 20      	REP #$20
C1/5ABE:	A2 D5 55   	LDX #$55D5
C1/5AC1:	AC E7 7B   	LDY $7BE7
C1/5AC4:	AD EC 7B   	LDA $7BEC
C1/5AC7:	54 7E 7E   	MVN 7E 7E
C1/5ACA:	7B         	TDC
C1/5ACB:	E2 20      	SEP #$20           ; 8-bit A
C1/5ACD:	9C EE 7B   	STZ $7BEE
C1/5AD0:	60         	RTS

C1/5AD1:	AD DB 7B   	LDA $7BDB
C1/5AD4:	D0 1F      	BNE $5AF5
C1/5AD6:	AD D2 7B   	LDA $7BD2
C1/5AD9:	9D 75 47   	STA $4775,X
C1/5ADC:	9D 79 47   	STA $4779,X
C1/5ADF:	9D 7D 47   	STA $477D,X
C1/5AE2:	9D 81 47   	STA $4781,X
C1/5AE5:	AD D4 7B   	LDA $7BD4
C1/5AE8:	9D 77 47   	STA $4777,X
C1/5AEB:	9D 7B 47   	STA $477B,X
C1/5AEE:	9D 7F 47   	STA $477F,X
C1/5AF1:	9D 83 47   	STA $4783,X
C1/5AF4:	60         	RTS

C1/5AF5:	AD D2 7B   	LDA $7BD2
C1/5AF8:	9D F5 43   	STA $43F5,X
C1/5AFB:	9D F9 43   	STA $43F9,X
C1/5AFE:	9D FD 43   	STA $43FD,X
C1/5B01:	9D 01 44   	STA $4401,X
C1/5B04:	AD D4 7B   	LDA $7BD4
C1/5B07:	9D F7 43   	STA $43F7,X
C1/5B0A:	9D FB 43   	STA $43FB,X
C1/5B0D:	9D FF 43   	STA $43FF,X
C1/5B10:	9D 03 44   	STA $4403,X
C1/5B13:	60         	RTS

C1/5B14:	AD D1 7B   	LDA $7BD1
C1/5B17:	F0 32      	BEQ $5B4B
C1/5B19:	AD BB 7B   	LDA $7BBB
C1/5B1C:	D0 2D      	BNE $5B4B
C1/5B1E:	C2 20      	REP #$20
C1/5B20:	AE D7 7B   	LDX $7BD7
C1/5B23:	20 D1 5A   	JSR $5AD1
C1/5B26:	AE D9 7B   	LDX $7BD9
C1/5B29:	20 D1 5A   	JSR $5AD1
C1/5B2C:	AD D7 7B   	LDA $7BD7
C1/5B2F:	38         	SEC
C1/5B30:	E9 10 00   	SBC #$0010
C1/5B33:	8D D7 7B   	STA $7BD7
C1/5B36:	AD D9 7B   	LDA $7BD9
C1/5B39:	18         	CLC
C1/5B3A:	69 10 00   	ADC #$0010
C1/5B3D:	8D D9 7B   	STA $7BD9
C1/5B40:	7B         	TDC
C1/5B41:	E2 20      	SEP #$20           ; 8-bit A
C1/5B43:	CE D6 7B   	DEC $7BD6
C1/5B46:	D0 03      	BNE $5B4B
C1/5B48:	9C D1 7B   	STZ $7BD1
C1/5B4B:	60         	RTS

C1/5B4C:	AD AF 7B   	LDA $7BAF      ; item menu cursor frozen
C1/5B4F:	F0 11      	BEQ $5B62
C1/5B51:	AD A8 7B   	LDA $7BA8
C1/5B54:	C9 01      	CMP #$01
C1/5B56:	F0 0A      	BEQ $5B62
C1/5B58:	AE B1 7B   	LDX $7BB1      ; frozen cursor ypos
C1/5B5B:	CA         	DEX
C1/5B5C:	CA         	DEX
C1/5B5D:	CA         	DEX
C1/5B5E:	CA         	DEX            ; subtract 4
C1/5B5F:	8E B1 7B   	STX $7BB1      ; save cursor ypos
C1/5B62:	E2 10      	SEP #$10
C1/5B64:	7B         	TDC
C1/5B65:	AA         	TAX
C1/5B66:	C2 20      	REP #$20
C1/5B68:	A9 00 01   	LDA #$0100
C1/5B6B:	48         	PHA
C1/5B6C:	2B         	PLD
C1/5B6D:	B5 02      	LDA $02,X
C1/5B6F:	8D FE 7A   	STA $7AFE
C1/5B72:	B5 12      	LDA $12,X
C1/5B74:	18         	CLC
C1/5B75:	69 04 00   	ADC #$0004
C1/5B78:	95 02      	STA $02,X
C1/5B7A:	95 06      	STA $06,X
C1/5B7C:	95 0A      	STA $0A,X
C1/5B7E:	95 0E      	STA $0E,X
C1/5B80:	8A         	TXA
C1/5B81:	18         	CLC
C1/5B82:	69 10 00   	ADC #$0010
C1/5B85:	AA         	TAX
C1/5B86:	E0 F0      	CPX #$F0
C1/5B88:	D0 E8      	BNE $5B72
C1/5B8A:	AD FE 7A   	LDA $7AFE
C1/5B8D:	38         	SEC
C1/5B8E:	E9 3C 00   	SBC #$003C
C1/5B91:	4C 5C 5D   	JMP $5D5C

C1/5B94:	CE A8 7B   	DEC $7BA8
C1/5B97:	CE A8 7B   	DEC $7BA8
C1/5B9A:	CE A8 7B   	DEC $7BA8
C1/5B9D:	AD AF 7B   	LDA $7BAF      ; item menu cursor frozen
C1/5BA0:	F0 0C      	BEQ $5BAE      ; branch if not ^
C1/5BA2:	C2 20      	REP #$20       ; 16-bit A
C1/5BA4:	AD B1 7B   	LDA $7BB1      ; frozen cursor ypos
C1/5BA7:	18         	CLC
C1/5BA8:	69 08 00   	ADC #$0008     ; add 8
C1/5BAB:	8D B1 7B   	STA $7BB1      ; save ypos

C1/5BAE:	E2 10      	SEP #$10       ; 8-bit XY
C1/5BB0:	A2 90      	LDX #$90
C1/5BB2:	C2 20      	REP #$20       ; 16-bit A
C1/5BB4:	A9 00 01   	LDA #$0100
C1/5BB7:	48         	PHA
C1/5BB8:	2B         	PLD            ; direct page $7F00--
C1/5BB9:	B5 32      	LDA $32,X
C1/5BBB:	8D FE 7A   	STA $7AFE
C1/5BBE:	B5 02      	LDA $02,X
C1/5BC0:	38         	SEC
C1/5BC1:	E9 0C 00   	SBC #$000C
C1/5BC4:	95 5E      	STA $5E,X
C1/5BC6:	95 5A      	STA $5A,X
C1/5BC8:	95 56      	STA $56,X
C1/5BCA:	95 52      	STA $52,X
C1/5BCC:	95 4E      	STA $4E,X
C1/5BCE:	95 4A      	STA $4A,X
C1/5BD0:	95 46      	STA $46,X
C1/5BD2:	95 42      	STA $42,X
C1/5BD4:	95 3E      	STA $3E,X
C1/5BD6:	95 3A      	STA $3A,X
C1/5BD8:	95 36      	STA $36,X
C1/5BDA:	95 32      	STA $32,X
C1/5BDC:	8A         	TXA
C1/5BDD:	38         	SEC
C1/5BDE:	E9 30 00   	SBC #$0030
C1/5BE1:	AA         	TAX
C1/5BE2:	E0 D0      	CPX #$D0
C1/5BE4:	D0 D8      	BNE $5BBE
C1/5BE6:	A2 00      	LDX #$00
C1/5BE8:	AD FE 7A   	LDA $7AFE
C1/5BEB:	18         	CLC
C1/5BEC:	69 30 00   	ADC #$0030
C1/5BEF:	80 59      	BRA $5C4A
C1/5BF1:	CE A8 7B   	DEC $7BA8
C1/5BF4:	CE A8 7B   	DEC $7BA8
C1/5BF7:	CE A8 7B   	DEC $7BA8
C1/5BFA:	AD AF 7B   	LDA $7BAF      ; item menu cursor frozen
C1/5BFD:	F0 0C      	BEQ $5C0B
C1/5BFF:	C2 20      	REP #$20
C1/5C01:	AD B1 7B   	LDA $7BB1
C1/5C04:	38         	SEC
C1/5C05:	E9 08 00   	SBC #$0008
C1/5C08:	8D B1 7B   	STA $7BB1

C1/5C0B:	E2 10      	SEP #$10
C1/5C0D:	7B         	TDC
C1/5C0E:	AA         	TAX
C1/5C0F:	C2 20      	REP #$20
C1/5C11:	A9 00 01   	LDA #$0100
C1/5C14:	48         	PHA
C1/5C15:	2B         	PLD
C1/5C16:	B5 02      	LDA $02,X
C1/5C18:	8D FE 7A   	STA $7AFE
C1/5C1B:	B5 32      	LDA $32,X
C1/5C1D:	18         	CLC
C1/5C1E:	69 0C 00   	ADC #$000C
C1/5C21:	95 02      	STA $02,X
C1/5C23:	95 06      	STA $06,X
C1/5C25:	95 0A      	STA $0A,X
C1/5C27:	95 0E      	STA $0E,X
C1/5C29:	95 12      	STA $12,X
C1/5C2B:	95 16      	STA $16,X
C1/5C2D:	95 1A      	STA $1A,X
C1/5C2F:	95 1E      	STA $1E,X
C1/5C31:	95 22      	STA $22,X
C1/5C33:	95 26      	STA $26,X
C1/5C35:	95 2A      	STA $2A,X
C1/5C37:	95 2E      	STA $2E,X
C1/5C39:	8A         	TXA
C1/5C3A:	18         	CLC
C1/5C3B:	69 30 00   	ADC #$0030
C1/5C3E:	AA         	TAX
C1/5C3F:	E0 C0      	CPX #$C0
C1/5C41:	D0 D8      	BNE $5C1B
C1/5C43:	AD FE 7A   	LDA $7AFE
C1/5C46:	38         	SEC
C1/5C47:	E9 30 00   	SBC #$0030
C1/5C4A:	95 02      	STA $02,X
C1/5C4C:	95 06      	STA $06,X
C1/5C4E:	95 0A      	STA $0A,X
C1/5C50:	95 0E      	STA $0E,X
C1/5C52:	95 12      	STA $12,X
C1/5C54:	95 16      	STA $16,X
C1/5C56:	95 1A      	STA $1A,X
C1/5C58:	95 1E      	STA $1E,X
C1/5C5A:	95 22      	STA $22,X
C1/5C5C:	95 26      	STA $26,X
C1/5C5E:	95 2A      	STA $2A,X
C1/5C60:	95 2E      	STA $2E,X
C1/5C62:	A2 00      	LDX #$00
C1/5C64:	B5 02      	LDA $02,X
C1/5C66:	9D 83 4D   	STA $4D83,X
C1/5C69:	B5 06      	LDA $06,X
C1/5C6B:	9D 87 4D   	STA $4D87,X
C1/5C6E:	B5 0A      	LDA $0A,X
C1/5C70:	9D 8B 4D   	STA $4D8B,X
C1/5C73:	B5 0E      	LDA $0E,X
C1/5C75:	9D 8F 4D   	STA $4D8F,X
C1/5C78:	8A         	TXA
C1/5C79:	18         	CLC
C1/5C7A:	69 10 00   	ADC #$0010
C1/5C7D:	AA         	TAX
C1/5C7E:	E0 C0      	CPX #$C0
C1/5C80:	D0 E2      	BNE $5C64
C1/5C82:	A9 00 00   	LDA #$0000
C1/5C85:	48         	PHA
C1/5C86:	2B         	PLD
C1/5C87:	E2 20      	SEP #$20           ; 8-bit A
C1/5C89:	C2 10      	REP #$10
C1/5C8B:	20 4A 5A   	JSR $5A4A
C1/5C8E:	4C 24 55   	JMP $5524      ; do next action

C1/5C91:	A5 06      	LDA $06
C1/5C93:	29 10      	AND #$10
C1/5C95:	F0 18      	BEQ $5CAF
C1/5C97:	AD A8 7B   	LDA $7BA8
C1/5C9A:	C9 03      	CMP #$03
C1/5C9C:	D0 11      	BNE $5CAF
C1/5C9E:	A5 0B      	LDA $0B
C1/5CA0:	29 0F      	AND #$0F
C1/5CA2:	85 36      	STA $36
C1/5CA4:	A5 05      	LDA $05
C1/5CA6:	29 F0      	AND #$F0
C1/5CA8:	05 36      	ORA $36
C1/5CAA:	85 05      	STA $05
C1/5CAC:	4C F1 5B   	JMP $5BF1

C1/5CAF:	AD AF 7B   	LDA $7BAF      ; item menu cursor frozen
C1/5CB2:	F0 11      	BEQ $5CC5
C1/5CB4:	AD A8 7B   	LDA $7BA8
C1/5CB7:	C9 01      	CMP #$01
C1/5CB9:	F0 0A      	BEQ $5CC5
C1/5CBB:	AE B1 7B   	LDX $7BB1
C1/5CBE:	CA         	DEX
C1/5CBF:	CA         	DEX
C1/5CC0:	CA         	DEX
C1/5CC1:	CA         	DEX
C1/5CC2:	8E B1 7B   	STX $7BB1
C1/5CC5:	E2 10      	SEP #$10
C1/5CC7:	7B         	TDC
C1/5CC8:	AA         	TAX
C1/5CC9:	C2 20      	REP #$20
C1/5CCB:	A9 00 01   	LDA #$0100
C1/5CCE:	48         	PHA
C1/5CCF:	2B         	PLD
C1/5CD0:	B5 02      	LDA $02,X
C1/5CD2:	8D FE 7A   	STA $7AFE
C1/5CD5:	B5 12      	LDA $12,X
C1/5CD7:	18         	CLC
C1/5CD8:	69 04 00   	ADC #$0004
C1/5CDB:	95 02      	STA $02,X
C1/5CDD:	95 06      	STA $06,X
C1/5CDF:	95 0A      	STA $0A,X
C1/5CE1:	95 0E      	STA $0E,X
C1/5CE3:	8A         	TXA
C1/5CE4:	18         	CLC
C1/5CE5:	69 10 00   	ADC #$0010
C1/5CE8:	AA         	TAX
C1/5CE9:	E0 E0      	CPX #$E0
C1/5CEB:	D0 E8      	BNE $5CD5
C1/5CED:	AD FE 7A   	LDA $7AFE
C1/5CF0:	38         	SEC
C1/5CF1:	E9 38 00   	SBC #$0038
C1/5CF4:	4C 5C 5D   	JMP $5D5C

C1/5CF7:	A5 06      	LDA $06
C1/5CF9:	29 10      	AND #$10
C1/5CFB:	F0 18      	BEQ $5D15
C1/5CFD:	AD A8 7B   	LDA $7BA8
C1/5D00:	C9 03      	CMP #$03
C1/5D02:	D0 11      	BNE $5D15
C1/5D04:	A5 0B      	LDA $0B
C1/5D06:	29 0F      	AND #$0F
C1/5D08:	85 36      	STA $36
C1/5D0A:	A5 05      	LDA $05
C1/5D0C:	29 F0      	AND #$F0
C1/5D0E:	05 36      	ORA $36
C1/5D10:	85 05      	STA $05
C1/5D12:	4C 94 5B   	JMP $5B94

C1/5D15:	AD AF 7B   	LDA $7BAF      ; item menu cursor frozen
C1/5D18:	F0 11      	BEQ $5D2B
C1/5D1A:	AD A8 7B    LDA $7BA8
C1/5D1D:	C9 01       CMP #$01
C1/5D1F:	F0 0A       BEQ $5D2B
C1/5D21:	AE B1 7B    LDX $7BB1
C1/5D24:	E8          INX
C1/5D25:	E8          INX
C1/5D26:	E8          INX
C1/5D27:	E8          INX
C1/5D28:	8E B1 7B    STX $7BB1
C1/5D2B:	E2 10      	SEP #$10
C1/5D2D:	A2 DC      	LDX #$DC
C1/5D2F:	C2 20      	REP #$20
C1/5D31:	A9 00 01   	LDA #$0100
C1/5D34:	48         	PHA
C1/5D35:	2B         	PLD
C1/5D36:	B5 06      	LDA $06,X
C1/5D38:	8D FE 7A   	STA $7AFE
C1/5D3B:	B5 02      	LDA $02,X
C1/5D3D:	38         	SEC
C1/5D3E:	E9 04 00   	SBC #$0004
C1/5D41:	95 12      	STA $12,X
C1/5D43:	95 0E      	STA $0E,X
C1/5D45:	95 0A      	STA $0A,X
C1/5D47:	95 06      	STA $06,X
C1/5D49:	8A         	TXA
C1/5D4A:	38         	SEC
C1/5D4B:	E9 10 00   	SBC #$0010
C1/5D4E:	AA         	TAX
C1/5D4F:	E0 FC      	CPX #$FC
C1/5D51:	D0 E8      	BNE $5D3B
C1/5D53:	A2 00      	LDX #$00
C1/5D55:	AD FE 7A   	LDA $7AFE
C1/5D58:	18         	CLC
C1/5D59:	69 38 00   	ADC #$0038
C1/5D5C:	95 0E      	STA $0E,X
C1/5D5E:	95 0A      	STA $0A,X
C1/5D60:	95 06      	STA $06,X
C1/5D62:	95 02      	STA $02,X
C1/5D64:	A2 00      	LDX #$00
C1/5D66:	B5 02      	LDA $02,X
C1/5D68:	9D 83 4D   	STA $4D83,X
C1/5D6B:	B5 06      	LDA $06,X
C1/5D6D:	9D 87 4D   	STA $4D87,X
C1/5D70:	B5 0A      	LDA $0A,X
C1/5D72:	9D 8B 4D   	STA $4D8B,X
C1/5D75:	B5 0E      	LDA $0E,X
C1/5D77:	9D 8F 4D   	STA $4D8F,X
C1/5D7A:	8A         	TXA
C1/5D7B:	18         	CLC
C1/5D7C:	69 10 00   	ADC #$0010
C1/5D7F:	AA         	TAX
C1/5D80:	E0 C0      	CPX #$C0
C1/5D82:	D0 E2      	BNE $5D66
C1/5D84:	A9 00 00   	LDA #$0000
C1/5D87:	48         	PHA
C1/5D88:	2B         	PLD
C1/5D89:	E2 20      	SEP #$20           ; 8-bit A
C1/5D8B:	C2 10      	REP #$10
C1/5D8D:	CE A8 7B   	DEC $7BA8
C1/5D90:	D0 06      	BNE $5D98
C1/5D92:	20 4A 5A   	JSR $5A4A
C1/5D95:	4C 24 55   	JMP $5524      ; do next action

C1/5D98:	60         	RTS

C1/5D99:	AD A9 7B   	LDA $7BA9
C1/5D9C:	F0 13      	BEQ $5DB1
C1/5D9E:	A2 80 00   	LDX #$0080
C1/5DA1:	86 36      	STX $36
C1/5DA3:	AC AA 7B   	LDY $7BAA
C1/5DA6:	A2 4D 5E   	LDX #$5E4D
C1/5DA9:	A9 7E      	LDA #$7E
C1/5DAB:	20 2B 1A   	JSR $1A2B         ; execute VRAM DMA transfer
C1/5DAE:	9C A9 7B   	STZ $7BA9
C1/5DB1:	AD 85 62   	LDA $6285
C1/5DB4:	30 04      	BMI $5DBA
C1/5DB6:	22 8A AB C2	JSL $C2AB8A
C1/5DBA:	60         	RTS

C1/5DBB:	C2 20      	REP #$20
C1/5DBD:	7B         	TDC
C1/5DBE:	AA         	TAX
C1/5DBF:	9D 3F E3   	STA $E33F,X
C1/5DC2:	9D 3F E4   	STA $E43F,X
C1/5DC5:	9D 3F E5   	STA $E53F,X
C1/5DC8:	9D 3F E6   	STA $E63F,X
C1/5DCB:	E8         	INX
C1/5DCC:	E8         	INX
C1/5DCD:	E0 00 01   	CPX #$0100
C1/5DD0:	D0 ED      	BNE $5DBF
C1/5DD2:	E2 20      	SEP #$20           ; 8-bit A
C1/5DD4:	60         	RTS

; Process Battle Dialogue/Messages

C1/5DD5:	9C F5 E9   	STZ $E9F5
C1/5DD8:	64 7A      	STZ $7A
C1/5DDA:	AE D7 88   	LDX $88D7      ; pointer to battle dialogue [?]
C1/5DDD:	86 48      	STX $48
C1/5DDF:	AD D9 88   	LDA $88D9
C1/5DE2:	85 4A      	STA $4A
C1/5DE4:	64 4B      	STZ $4B
C1/5DE6:	A7 48      	LDA [$48]      ; dialogue byte [?]
C1/5DE8:	F0 14      	BEQ $5DFE      ; finish if 0x00
C1/5DEA:	C9 20      	CMP #$20       ; check for command op
C1/5DEC:	90 08      	BCC $5DF6      ; branch if ^
C1/5DEE:	20 11 61   	JSR $6111      ; else, draw tile [?]
C1/5DF1:	20 EC 66   	JSR $66EC      ; advance pointer
C1/5DF4:	80 F0      	BRA $5DE6      ; loop till done

C1/5DF6:	20 4F 5E   	JSR $5E4F      ; process command op
C1/5DF9:	20 EC 66   	JSR $66EC      ; advance pointer
C1/5DFC:	80 E8      	BRA $5DE6      ; loop till done

C1/5DFE:	20 02 5E   	JSR $5E02      ; display the dialogue
C1/5E01:	60         	RTS

; Display battle message

C1/5E02:	A6 48      	LDX $48        ; backup some RAM values
C1/5E04:	DA         	PHX
C1/5E05:	A6 4A      	LDX $4A
C1/5E07:	DA         	PHX
C1/5E08:	A5 7A      	LDA $7A
C1/5E0A:	48         	PHA
C1/5E0B:	7B         	TDC            ; zero A/B
C1/5E0C:	20 B6 9B   	JSR $9BB6      ; wait zero frames (NMI?)
C1/5E0F:	20 9B 63   	JSR $639B      ; display battle message
C1/5E12:	68         	PLA            ; restore some RAM values
C1/5E13:	85 7A      	STA $7A
C1/5E15:	FA         	PLX
C1/5E16:	86 4A      	STX $4A
C1/5E18:	FA         	PLX
C1/5E19:	86 48      	STX $48
C1/5E1B:	60         	RTS

; Wait a Frame

C1/5E1C:	A6 48      	LDX $48
C1/5E1E:	DA         	PHX
C1/5E1F:	A6 4A      	LDX $4A
C1/5E21:	DA         	PHX
C1/5E22:	A5 7A      	LDA $7A
C1/5E24:	48         	PHA
C1/5E25:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/5E28:	68         	PLA
C1/5E29:	85 7A      	STA $7A
C1/5E2B:	FA         	PLX
C1/5E2C:	86 4A      	STX $4A
C1/5E2E:	FA         	PLX
C1/5E2F:	86 48      	STX $48
C1/5E31:	60         	RTS

C1/5E32:	85 22      	STA $22
C1/5E34:	A6 48      	LDX $48
C1/5E36:	DA         	PHX
C1/5E37:	A6 4A      	LDX $4A
C1/5E39:	DA         	PHX
C1/5E3A:	A5 7A      	LDA $7A
C1/5E3C:	48         	PHA
C1/5E3D:	A5 22      	LDA $22
C1/5E3F:	20 B6 9B   	JSR $9BB6
C1/5E42:	20 9B 63   	JSR $639B
C1/5E45:	68         	PLA
C1/5E46:	85 7A      	STA $7A
C1/5E48:	FA         	PLX
C1/5E49:	86 4A      	STX $4A
C1/5E4B:	FA         	PLX
C1/5E4C:	86 48      	STX $48
C1/5E4E:	60         	RTS

; Command Ops for Battle Dialogue

C1/5E4F:	0A         	ASL A          ; get pointer
C1/5E50:	AA         	TAX            ; index it
C1/5E51:	7C 54 5E   	JMP ($5E54,X)  ; execute script command

C1/5E54:	4767    	; $00 - RTS
C1/5E56:	8C60      ; $01 - Line or Pause [?] ($608C)
C1/5E58:	AC5E      ; $02 - Draw Character {X}'s name ($5EAC)
C1/5E5A:	4767    	; $03 - RTS
C1/5E5C:	7B60      ; $04 - Toggle $4B flag [?] ($607B)
C1/5E5E:	A75E      ; $05 - Wait one second ($5EA7)
C1/5E60:	9F5E      ; $06 - Wait {X} frames ($5E9F)
C1/5E62:	945E      ; $07 - Wait for player to press "A" ($5E94)
C1/5E64:	4767    	; $08 - RTS
C1/5E66:	4767    	; $09 - RTS
C1/5E68:	4767    	; $0A - RTS
C1/5E6A:	4767    	; $0B - RTS
C1/5E6C:	0C5F      ; $0C - Display command {X} name ($5F0C)
C1/5E6E:	4767    	; $0D - RTS
C1/5E70:	4360      ; $0E - Draw item {X} name ($6043)
C1/5E72:	B35F      ; $0F - Draw attack {X} name ($5FB3)
C1/5E74:	755F      ; $10 - Draw variable info ($5F75)
C1/5E76:	7D5F      ; $11 - Draw variable info ($5F7D)
C1/5E78:	E65E      ; $12 - Draw associated name {X} ($5EE6)
C1/5E7A:	6D5F      ; $13 - Draw variable info ($5F6D)
C1/5E7C:	655F      ; $14 - Draw variable info ($5F65)
C1/5E7E:	4767    	; $15 - RTS
C1/5E80:	4767    	; $16 - RTS
C1/5E82:	4767    	; $17 - RTS
C1/5E84:	4767    	; $18 - RTS
C1/5E86:	4767    	; $19 - RTS
C1/5E88:	4767    	; $1A - RTS
C1/5E8A:	4767    	; $1B - RTS
C1/5E8C:	1161      ; $1C - Draw Tile $38
C1/5E8E:	1161      ; $1D - Draw Tile $3A
C1/5E90:	1161      ; $1E - Draw Tile $3C
C1/5E92:	1161      ; $1F - Draw Tile $3E

; Battle Dialogue Command $07 - Wait for A press

C1/5E94:	EE F5 E9   	INC $E9F5         ; set some flag
C1/5E97:	20 02 5E   	JSR $5E02         ; display message [?]
C1/5E9A:	A5 04      	LDA $04           ; pressing buttons
C1/5E9C:	10 F6      	BPL $5E94         ; branch if not pressing A
C1/5E9E:	60         	RTS

; Battle Dialogue Command $06 - Wait {X} frames

C1/5E9F:	20 EC 66   	JSR $66EC         ; advance pointer
C1/5EA2:	A7 48      	LDA [$48]         ; command arg
C1/5EA4:	4C 32 5E   	JMP $5E32         ; wait {X} frames

; Battle Dialogue Command $05 - Wait one second

C1/5EA7:	A9 3C      	LDA #$3C          ; #60
C1/5EA9:	4C 32 5E   	JMP $5E32         ; wait 1 second

; Draw character {X} name

C1/5EAC:	20 EC 66   	JSR $66EC         ; advance pointer
C1/5EAF:	A7 48      	LDA [$48]         ; command arg (character ID)
C1/5EB1:	85 22      	STA $22           ; save ^
C1/5EB3:	7B         	TDC               ; clear A/B
C1/5EB4:	AA         	TAX               ; zero index
C1/5EB5:	BF 00 16 00	LDA $001600,X     ; ID of this character
C1/5EB9:	C5 22      	CMP $22           ; match?
C1/5EBB:	F0 12      	BEQ $5ECF         ; branch if ^
C1/5EBD:	C2 20      	REP #$20          ; 16-bit A
C1/5EBF:	8A         	TXA               ; character block index
C1/5EC0:	18         	CLC               ; prep addition
C1/5EC1:	69 25 00   	ADC #$0025        ; add #37 (size of character data block)
C1/5EC4:	AA         	TAX               ; save next character index
C1/5EC5:	7B         	TDC               ; zero A/B
C1/5EC6:	E2 20      	SEP #$20          ; 8-bit A
C1/5EC8:	E0 50 02   	CPX #$0250        ; checked all blocks
C1/5ECB:	F0 18      	BEQ $5EE5         ; exit if ^
C1/5ECD:	80 E6      	BRA $5EB5         ; else, loop

C1/5ECF:	A9 06      	LDA #$06          ; iterator (name length)
C1/5ED1:	8D 6D 61   	STA $616D         ; save ^
C1/5ED4:	BF 02 16 00	LDA $001602,X     ; character name letter
C1/5ED8:	C9 FF      	CMP #$FF          ; null?
C1/5EDA:	F0 09      	BEQ $5EE5         ; exit if ^
C1/5EDC:	20 11 61   	JSR $6111         ; add tile to buffer
C1/5EDF:	E8         	INX               ; next letter index
C1/5EE0:	CE 6D 61   	DEC $616D         ; decrement iterator
C1/5EE3:	D0 EF      	BNE $5ED4         ; loop till done
C1/5EE5:	60         	RTS

; Battle Dialogue Command $12 - Draw Associated Name

C1/5EE6:	20 EC 66   	JSR $66EC         ; advance pointer
C1/5EE9:	A7 48      	LDA [$48]         ; command arg (which name)
C1/5EEB:	0A         	ASL A             ; x2
C1/5EEC:	AA         	TAX               ; index it
C1/5EED:	7C F0 5E   	JMP ($5EF0,X)     ; jump table

C1/5EF0:	405F      ; $00 - Draw Dialogue-Associated Character Name
C1/5EF2:	065F      ; $01 - Draw Dialogue-Associated Item Name
C1/5EF4:	005F      ; $02 - Draw Dialogue-Associated Attack Name
C1/5EF6:	135F      ; $03 - Draw Dialogue-Associated Command Name

C1/5EF8:	AE2E      ; pointer to slot 1 character data
C1/5EFA:	CE2E      ; pointer to slot 2 character data
C1/5EFC:	EE2E      ; pointer to slot 3 character data
C1/5EFE:	0E2F      ; pointer to slot 4 character data

; 

C1/5F00:	AD 35 2F    LDA $2F35        ; dialogue variable
C1/5F03:	4C B8 5F    JMP $5FB8        ; draw attack name

C1/5F06:	AD 35 2F   	LDA $2F35        ; dialogue variable
C1/5F09:	4C 48 60   	JMP $6048        ; draw item name

; Battle Dialogue Command $0C - Display command {X} name

C1/5F0C:	20 EC 66   	JSR $66EC        ; advance pointer
C1/5F0F:	A7 48      	LDA [$48]        ; command arg (command ID)
C1/5F11:	80 03      	BRA $5F16        ; branch

C1/5F13:	AD 35 2F   	LDA $2F35        ; command triggering dialogue [?]
C1/5F16:	C9 FF      	CMP #$FF         ; null?
C1/5F18:	D0 01      	BNE $5F1B        ; branch if not ^
C1/5F1A:	60         	RTS

; Display Command Name

C1/5F1B:	EB         	XBA              ; save it
C1/5F1C:	A9 07      	LDA #$07         ; #7
C1/5F1E:	8D 6D 61   	STA $616D        ; save iterator
C1/5F21:	20 CA 18   	JSR $18CA        ; multiply ID * 7
C1/5F24:	C2 20      	REP #$20         ; 16-bit A
C1/5F26:	AF 16 42 00	LDA $004216      ; product
C1/5F2A:	AA         	TAX              ; index it
C1/5F2B:	7B         	TDC              ; zero A/B
C1/5F2C:	E2 20      	SEP #$20         ; 8-bit A
C1/5F2E:	BF A0 CE D8	LDA $D8CEA0,X    ; battle command name
C1/5F32:	C9 FF      	CMP #$FF
C1/5F34:	F0 09      	BEQ $5F3F
C1/5F36:	20 11 61   	JSR $6111
C1/5F39:	E8         	INX
C1/5F3A:	CE 6D 61   	DEC $616D
C1/5F3D:	D0 EF      	BNE $5F2E
C1/5F3F:	60         	RTS

C1/5F40:	AD 38 2F   	LDA $2F38        ; dialogue variable 2 (character)
C1/5F43:	0A         	ASL A            ; x2
C1/5F44:	AA         	TAX              ; index it
C1/5F45:	C2 20      	REP #$20
C1/5F47:	BF F8 5E C1	LDA $C15EF8,X    ; pointer to character data
C1/5F4B:	AA         	TAX              ; index it
C1/5F4C:	7B         	TDC
C1/5F4D:	E2 20      	SEP #$20         ; 8-bit A
C1/5F4F:	A9 06      	LDA #$06         ; 6 letters (character name)
C1/5F51:	8D 6D 61   	STA $616D        ; iterator
C1/5F54:	BD 01 00   	LDA $0001,X      ; load value
C1/5F57:	C9 FF      	CMP #$FF         ; null?
C1/5F59:	F0 09      	BEQ $5F64        ; exit if ^
C1/5F5B:	20 11 61   	JSR $6111        ; draw tile
C1/5F5E:	E8         	INX              ; next index
C1/5F5F:	CE 6D 61   	DEC $616D        ; countdown
C1/5F62:	D0 F0      	BNE $5F54        ; loop till done
C1/5F64:	60         	RTS

; Battle Dialogue Command $14 - 

C1/5F65:	AE 3E 2F   	LDX $2F3E
C1/5F68:	AD 40 2F   	LDA $2F40
C1/5F6B:	80 16      	BRA $5F83

; Battle Dialogue Command $13 - 

C1/5F6D:	AE 3B 2F   	LDX $2F3B
C1/5F70:	AD 3D 2F   	LDA $2F3D
C1/5F73:	80 0E      	BRA $5F83

; Battle Dialogue Command $10 - 

C1/5F75:	AE 35 2F   	LDX $2F35        ; dialogue triggered-by command [?]
C1/5F78:	AD 37 2F   	LDA $2F37
C1/5F7B:	80 06      	BRA $5F83

; Battle Dialogue Command $11 - 

C1/5F7D:	AE 38 2F   	LDX $2F38
C1/5F80:	AD 3A 2F   	LDA $2F3A

C1/5F83:	86 10      	STX $10          ; save variable
C1/5F85:	85 12      	STA $12          ; save another variable
C1/5F87:	A9 B4      	LDA #$B4
C1/5F89:	85 68      	STA $68
C1/5F8B:	20 BF 1A   	JSR $1ABF
C1/5F8E:	7B         	TDC
C1/5F8F:	AA         	TAX
C1/5F90:	B5 69      	LDA $69,X
C1/5F92:	C9 B4      	CMP #$B4
C1/5F94:	D0 06      	BNE $5F9C
C1/5F96:	E8         	INX
C1/5F97:	E0 07 00   	CPX #$0007
C1/5F9A:	D0 F4      	BNE $5F90
C1/5F9C:	B5 69      	LDA $69,X
C1/5F9E:	20 11 61   	JSR $6111
C1/5FA1:	E8         	INX
C1/5FA2:	E0 08 00   	CPX #$0008
C1/5FA5:	D0 F5      	BNE $5F9C
C1/5FA7:	60         	RTS

; Draw {A} spaces

C1/5FA8:	48         	PHA            ; store iterator
C1/5FA9:	A9 FF      	LDA #$FF       ; space " " tile
C1/5FAB:	20 11 61   	JSR $6111      ; draw ^
C1/5FAE:	68         	PLA            ; restore iterator
C1/5FAF:	3A         	DEC A          ; decrement
C1/5FB0:	D0 F6      	BNE $5FA8      ; loop till zero
C1/5FB2:	60         	RTS

; Battle Dialogue Command $0F - Draw Attack Name

C1/5FB3:	20 EC 66   	JSR $66EC
C1/5FB6:	A7 48      	LDA [$48]
C1/5FB8:	C9 FF      	CMP #$FF
C1/5FBA:	D0 01      	BNE $5FBD
C1/5FBC:	60         	RTS

C1/5FBD:	C9 36      	CMP #$36
C1/5FBF:	90 58      	BCC $6019
C1/5FC1:	C9 51      	CMP #$51
C1/5FC3:	90 2A      	BCC $5FEF
C1/5FC5:	38         	SEC
C1/5FC6:	E9 51      	SBC #$51
C1/5FC8:	EB         	XBA
C1/5FC9:	A9 0A      	LDA #$0A
C1/5FCB:	85 10      	STA $10
C1/5FCD:	8D 6D 61   	STA $616D
C1/5FD0:	20 CA 18   	JSR $18CA
C1/5FD3:	C2 20      	REP #$20
C1/5FD5:	AF 16 42 00	LDA $004216
C1/5FD9:	AA         	TAX
C1/5FDA:	7B         	TDC
C1/5FDB:	E2 20      	SEP #$20           ; 8-bit A
C1/5FDD:	BF B9 F7 E6	LDA $E6F7B9,X
C1/5FE1:	C9 FF      	CMP #$FF
C1/5FE3:	F0 09      	BEQ $5FEE
C1/5FE5:	20 11 61   	JSR $6111
C1/5FE8:	E8         	INX
C1/5FE9:	CE 6D 61   	DEC $616D
C1/5FEC:	D0 EF      	BNE $5FDD
C1/5FEE:	60         	RTS

C1/5FEF:	38         	SEC
C1/5FF0:	E9 36      	SBC #$36
C1/5FF2:	EB         	XBA
C1/5FF3:	A9 08      	LDA #$08
C1/5FF5:	85 10      	STA $10
C1/5FF7:	8D 6D 61   	STA $616D
C1/5FFA:	20 CA 18   	JSR $18CA
C1/5FFD:	C2 20      	REP #$20
C1/5FFF:	AF 16 42 00	LDA $004216
C1/6003:	AA         	TAX
C1/6004:	7B         	TDC
C1/6005:	E2 20      	SEP #$20           ; 8-bit A
C1/6007:	BF E1 F6 E6	LDA $E6F6E1,X
C1/600B:	C9 FF      	CMP #$FF
C1/600D:	F0 09      	BEQ $6018
C1/600F:	20 11 61   	JSR $6111
C1/6012:	E8         	INX
C1/6013:	CE 6D 61   	DEC $616D
C1/6016:	D0 EF      	BNE $6007
C1/6018:	60         	RTS

C1/6019:	EB         	XBA
C1/601A:	A9 07      	LDA #$07
C1/601C:	85 10      	STA $10
C1/601E:	8D 6D 61   	STA $616D
C1/6021:	20 CA 18   	JSR $18CA
C1/6024:	C2 20      	REP #$20
C1/6026:	AF 16 42 00	LDA $004216
C1/602A:	AA         	TAX
C1/602B:	7B         	TDC
C1/602C:	E2 20      	SEP #$20           ; 8-bit A
C1/602E:	CE 6D 61   	DEC $616D
C1/6031:	BF 68 F5 E6	LDA $E6F568,X
C1/6035:	C9 FF      	CMP #$FF
C1/6037:	F0 09      	BEQ $6042
C1/6039:	20 11 61   	JSR $6111
C1/603C:	E8         	INX
C1/603D:	CE 6D 61   	DEC $616D
C1/6040:	D0 EF      	BNE $6031
C1/6042:	60         	RTS

; Battle Dialogue Command $0E - Draw Item {X} Name

C1/6043:	20 EC 66   	JSR $66EC         ; advance pointer
C1/6046:	A7 48      	LDA [$48]         ; commmand arg
C1/6048:	C9 FF      	CMP #$FF          ; null?
C1/604A:	D0 05      	BNE $6051         ; branch if not ^
C1/604C:	A9 0D      	LDA #$0D          ; #13
C1/604E:	4C A8 5F   	JMP $5FA8         ; draw 13 spaces (item name length)

; Draw Item Name (skip symbol)

C1/6051:	EB         	XBA
C1/6052:	A9 0D      	LDA #$0D
C1/6054:	85 10      	STA $10
C1/6056:	8D 6D 61   	STA $616D
C1/6059:	20 CA 18   	JSR $18CA
C1/605C:	C2 20      	REP #$20
C1/605E:	AF 16 42 00	LDA $004216
C1/6062:	AA         	TAX
C1/6063:	7B         	TDC
C1/6064:	E2 20      	SEP #$20           ; 8-bit A
C1/6066:	CE 6D 61   	DEC $616D
C1/6069:	BF 01 B3 D2	LDA $D2B301,X
C1/606D:	C9 FF      	CMP #$FF
C1/606F:	F0 09      	BEQ $607A
C1/6071:	20 11 61   	JSR $6111
C1/6074:	E8         	INX
C1/6075:	CE 6D 61   	DEC $616D
C1/6078:	D0 EF      	BNE $6069
C1/607A:	60         	RTS

; Battle Dialogue Command ($04) - Toggle some flag
C1/607B:	A5 4B      	LDA $4B            ; [?]
C1/607D:	49 01      	EOR #$01           ; toggle flag
C1/607F:	85 4B      	STA $4B            ; [?]
C1/6081:	60         	RTS

C1/6082:	005A
C1/6084:	005C
C1/6086:	005E
C1/6088:	0058
C1/608A:	0058

; Battle Dialogue Command ($01) - New Line [?]

C1/608C:	64 7A      	STZ $7A
C1/608E:	AD C3 E9   	LDA $E9C3
C1/6091:	10 45      	BPL $60D8
C1/6093:	20 BB 5D   	JSR $5DBB
C1/6096:	AD C1 E9   	LDA $E9C1
C1/6099:	C9 04      	CMP #$04
C1/609B:	D0 03      	BNE $60A0
C1/609D:	9C C1 E9   	STZ $E9C1
C1/60A0:	AD C1 E9   	LDA $E9C1
C1/60A3:	29 03      	AND #$03
C1/60A5:	0A         	ASL A
C1/60A6:	AA         	TAX
C1/60A7:	C2 20      	REP #$20
C1/60A9:	BF 82 60 C1	LDA $C16082,X    ; Data
C1/60AD:	8D BF E9   	STA $E9BF
C1/60B0:	7B         	TDC
C1/60B1:	E2 20      	SEP #$20           ; 8-bit A
C1/60B3:	EE C1 E9   	INC $E9C1
C1/60B6:	20 02 5E   	JSR $5E02
C1/60B9:	AD C2 E9   	LDA $E9C2
C1/60BC:	C9 02      	CMP #$02
C1/60BE:	D0 14      	BNE $60D4
C1/60C0:	A9 04      	LDA #$04
C1/60C2:	8D A8 7B   	STA $7BA8
C1/60C5:	A9 3E      	LDA #$3E          ; menu cursor state to set
C1/60C7:	8D C2 7B   	STA $7BC2         ; set menu cursor state

C1/60CA:	AD C2 7B   	LDA $7BC2         ; menu cursor state
C1/60CD:	F0 08      	BEQ $60D7         ; exit if 0x00 (off)
C1/60CF:	20 1C 5E   	JSR $5E1C         ; else, wait a frame
C1/60D2:	80 F6      	BRA $60CA         ; and check again

C1/60D4:	EE C2 E9   	INC $E9C2
C1/60D7:	60         	RTS

C1/60D8:	A9 10      	LDA #$10
C1/60DA:	48         	PHA
C1/60DB:	7B         	TDC
C1/60DC:	AA         	TAX
C1/60DD:	C2 20      	REP #$20
C1/60DF:	A9 20 00   	LDA #$0020
C1/60E2:	85 24      	STA $24
C1/60E4:	A9 0F 00   	LDA #$000F
C1/60E7:	85 22      	STA $22
C1/60E9:	BD 41 E3   	LDA $E341,X
C1/60EC:	9D 3F E3   	STA $E33F,X
C1/60EF:	E8         	INX
C1/60F0:	E8         	INX
C1/60F1:	C6 22      	DEC $22
C1/60F3:	D0 F4      	BNE $60E9
C1/60F5:	9E 3F E3   	STZ $E33F,X
C1/60F8:	E8         	INX
C1/60F9:	E8         	INX
C1/60FA:	C6 24      	DEC $24
C1/60FC:	D0 E6      	BNE $60E4
C1/60FE:	7B         	TDC
C1/60FF:	E2 20      	SEP #$20           ; 8-bit A
C1/6101:	20 02 5E   	JSR $5E02
C1/6104:	68         	PLA
C1/6105:	3A         	DEC A
C1/6106:	D0 D2      	BNE $60DA
C1/6108:	60         	RTS

C1/6109:	0400
C1/610B:	0300
C1/610D:	0200
C1/610F:	0100

; Send tile data to buffer

C1/6111:	8D F0 EC   	STA $ECF0
C1/6114:	38         	SEC
C1/6115:	E9 80      	SBC #$80
C1/6117:	5A         	PHY
C1/6118:	DA         	PHX
C1/6119:	85 22      	STA $22
C1/611B:	A9 16      	LDA #$16
C1/611D:	85 24      	STA $24
C1/611F:	20 D9 18   	JSR $18D9     ; Multiplication ($26 = $22 * $24)
C1/6122:	A5 4B      	LDA $4B
C1/6124:	F0 03      	BEQ $6129
C1/6126:	4C 56 62   	JMP $6256

C1/6129:	A5 7A      	LDA $7A
C1/612B:	29 F8      	AND #$F8
C1/612D:	C2 20      	REP #$20
C1/612F:	0A         	ASL A
C1/6130:	0A         	ASL A
C1/6131:	A8         	TAY
C1/6132:	A9 0B 00   	LDA #$000B
C1/6135:	85 1C      	STA $1C
C1/6137:	A5 7A      	LDA $7A
C1/6139:	29 04 00   	AND #$0004
C1/613C:	D0 03      	BNE $6141
C1/613E:	4C C4 61   	JMP $61C4

C1/6141:	A5 7A      	LDA $7A
C1/6143:	29 03 00   	AND #$0003
C1/6146:	85 1A      	STA $1A
C1/6148:	A6 26      	LDX $26
C1/614A:	64 12      	STZ $12
C1/614C:	A5 1A      	LDA $1A
C1/614E:	85 18      	STA $18
C1/6150:	D0 06      	BNE $6158
C1/6152:	BF C0 90 C4	LDA $C490C0,X
C1/6156:	80 0B      	BRA $6163
C1/6158:	BF C0 90 C4	LDA $C490C0,X
C1/615C:	4A         	LSR A
C1/615D:	66 12      	ROR $12
C1/615F:	C6 18      	DEC $18
C1/6161:	D0 F9      	BNE $615C
C1/6163:	85 22      	STA $22
C1/6165:	E2 20      	SEP #$20           ; 8-bit A
C1/6167:	19 67 E3   	ORA $E367,Y
C1/616A:	99 67 E3   	STA $E367,Y
C1/616D:	A5 22      	LDA $22
C1/616F:	19 68 E3   	ORA $E368,Y
C1/6172:	99 68 E3   	STA $E368,Y
C1/6175:	EB         	XBA
C1/6176:	19 47 E3   	ORA $E347,Y
C1/6179:	99 47 E3   	STA $E347,Y
C1/617C:	A5 23      	LDA $23
C1/617E:	19 48 E3   	ORA $E348,Y
C1/6181:	99 48 E3   	STA $E348,Y
C1/6184:	A5 13      	LDA $13
C1/6186:	19 87 E3   	ORA $E387,Y
C1/6189:	99 87 E3   	STA $E387,Y
C1/618C:	A5 13      	LDA $13
C1/618E:	19 88 E3   	ORA $E388,Y
C1/6191:	99 88 E3   	STA $E388,Y
C1/6194:	C2 20      	REP #$20
C1/6196:	A5 22      	LDA $22
C1/6198:	4A         	LSR A
C1/6199:	66 12      	ROR $12
C1/619B:	85 22      	STA $22
C1/619D:	E2 20      	SEP #$20           ; 8-bit A
C1/619F:	19 69 E3   	ORA $E369,Y
C1/61A2:	99 69 E3   	STA $E369,Y
C1/61A5:	EB         	XBA
C1/61A6:	19 49 E3   	ORA $E349,Y
C1/61A9:	99 49 E3   	STA $E349,Y
C1/61AC:	A5 13      	LDA $13
C1/61AE:	19 89 E3   	ORA $E389,Y
C1/61B1:	99 89 E3   	STA $E389,Y
C1/61B4:	C2 20      	REP #$20
C1/61B6:	C8         	INY
C1/61B7:	C8         	INY
C1/61B8:	E8         	INX
C1/61B9:	E8         	INX
C1/61BA:	C6 1C      	DEC $1C
C1/61BC:	F0 03      	BEQ $61C1
C1/61BE:	4C 4A 61   	JMP $614A

C1/61C1:	4C 2E 62   	JMP $622E

C1/61C4:	A5 7A      	LDA $7A
C1/61C6:	29 03 00   	AND #$0003
C1/61C9:	0A         	ASL A
C1/61CA:	AA         	TAX
C1/61CB:	BF 09 61 C1	LDA $C16109,X    ; Data
C1/61CF:	85 1A      	STA $1A
C1/61D1:	A6 26      	LDX $26
C1/61D3:	A5 1A      	LDA $1A
C1/61D5:	85 18      	STA $18
C1/61D7:	64 12      	STZ $12
C1/61D9:	BF C0 90 C4	LDA $C490C0,X
C1/61DD:	0A         	ASL A
C1/61DE:	C6 18      	DEC $18
C1/61E0:	D0 FB      	BNE $61DD
C1/61E2:	85 22      	STA $22
C1/61E4:	E2 20      	SEP #$20           ; 8-bit A
C1/61E6:	19 67 E3   	ORA $E367,Y
C1/61E9:	99 67 E3   	STA $E367,Y
C1/61EC:	A5 22      	LDA $22
C1/61EE:	19 68 E3   	ORA $E368,Y
C1/61F1:	99 68 E3   	STA $E368,Y
C1/61F4:	A5 23      	LDA $23
C1/61F6:	19 47 E3   	ORA $E347,Y
C1/61F9:	99 47 E3   	STA $E347,Y
C1/61FC:	A5 23      	LDA $23
C1/61FE:	19 48 E3   	ORA $E348,Y
C1/6201:	99 48 E3   	STA $E348,Y
C1/6204:	C2 20      	REP #$20
C1/6206:	A5 22      	LDA $22
C1/6208:	4A         	LSR A
C1/6209:	66 12      	ROR $12
C1/620B:	85 22      	STA $22
C1/620D:	E2 20      	SEP #$20           ; 8-bit A
C1/620F:	19 69 E3   	ORA $E369,Y
C1/6212:	99 69 E3   	STA $E369,Y
C1/6215:	EB         	XBA
C1/6216:	19 49 E3   	ORA $E349,Y
C1/6219:	99 49 E3   	STA $E349,Y
C1/621C:	A5 12      	LDA $12
C1/621E:	19 89 E3   	ORA $E389,Y
C1/6221:	99 89 E3   	STA $E389,Y
C1/6224:	C2 20      	REP #$20
C1/6226:	C8         	INY
C1/6227:	C8         	INY
C1/6228:	E8         	INX
C1/6229:	E8         	INX
C1/622A:	C6 1C      	DEC $1C
C1/622C:	D0 A5      	BNE $61D3
C1/622E:	7B         	TDC
C1/622F:	E2 20      	SEP #$20           ; 8-bit A
C1/6231:	DA         	PHX
C1/6232:	AD F0 EC   	LDA $ECF0
C1/6235:	38         	SEC
C1/6236:	E9 60      	SBC #$60
C1/6238:	AA         	TAX
C1/6239:	BF C0 8F C4	LDA $C48FC0,X
C1/623D:	FA         	PLX
C1/623E:	18         	CLC
C1/623F:	65 7A      	ADC $7A
C1/6241:	85 7A      	STA $7A
C1/6243:	AD AC 62   	LDA $62AC
C1/6246:	D0 03      	BNE $624B
C1/6248:	20 02 5E   	JSR $5E02
C1/624B:	FA         	PLX
C1/624C:	7A         	PLY
C1/624D:	60         	RTS

C1/624E:	00
C1/624F:	80
C1/6250:	C0
C1/6251:	E0
C1/6252:	F0
C1/6253:	F8
C1/6254:	FC
C1/6255:	FE

C1/6256:	A5 7A      	LDA $7A
C1/6258:	29 07      	AND #$07
C1/625A:	AA         	TAX
C1/625B:	BF 4E 62 C1	LDA $C1624E,X
C1/625F:	85 28      	STA $28
C1/6261:	A5 7A      	LDA $7A
C1/6263:	29 F8      	AND #$F8
C1/6265:	C2 20      	REP #$20
C1/6267:	0A         	ASL A
C1/6268:	0A         	ASL A
C1/6269:	A8         	TAY
C1/626A:	A9 0B 00   	LDA #$000B
C1/626D:	85 1C      	STA $1C
C1/626F:	A5 7A      	LDA $7A
C1/6271:	29 04 00   	AND #$0004
C1/6274:	D0 03      	BNE $6279
C1/6276:	4C 07 63   	JMP $6307

C1/6279:	A5 7A      	LDA $7A
C1/627B:	29 03 00   	AND #$0003
C1/627E:	85 1A      	STA $1A
C1/6280:	A6 26      	LDX $26
C1/6282:	64 12      	STZ $12
C1/6284:	A5 1A      	LDA $1A
C1/6286:	85 18      	STA $18
C1/6288:	D0 06      	BNE $6290
C1/628A:	BF C0 90 C4	LDA $C490C0,X
C1/628E:	80 0B      	BRA $629B
C1/6290:	BF C0 90 C4	LDA $C490C0,X
C1/6294:	4A         	LSR A
C1/6295:	66 12      	ROR $12
C1/6297:	C6 18      	DEC $18
C1/6299:	D0 F9      	BNE $6294
C1/629B:	85 22      	STA $22
C1/629D:	E2 20      	SEP #$20           ; 8-bit A
C1/629F:	19 68 E3   	ORA $E368,Y
C1/62A2:	99 68 E3   	STA $E368,Y
C1/62A5:	39 67 E3   	AND $E367,Y
C1/62A8:	49 FF      	EOR #$FF
C1/62AA:	39 67 E3   	AND $E367,Y
C1/62AD:	99 67 E3   	STA $E367,Y
C1/62B0:	EB         	XBA
C1/62B1:	19 48 E3   	ORA $E348,Y
C1/62B4:	99 48 E3   	STA $E348,Y
C1/62B7:	39 47 E3   	AND $E347,Y
C1/62BA:	49 FF      	EOR #$FF
C1/62BC:	05 28      	ORA $28
C1/62BE:	39 47 E3   	AND $E347,Y
C1/62C1:	99 47 E3   	STA $E347,Y
C1/62C4:	A5 13      	LDA $13
C1/62C6:	19 88 E3   	ORA $E388,Y
C1/62C9:	99 88 E3   	STA $E388,Y
C1/62CC:	39 87 E3   	AND $E387,Y
C1/62CF:	49 FF      	EOR #$FF
C1/62D1:	39 87 E3   	AND $E387,Y
C1/62D4:	99 87 E3   	STA $E387,Y
C1/62D7:	C2 20      	REP #$20
C1/62D9:	A5 22      	LDA $22
C1/62DB:	4A         	LSR A
C1/62DC:	66 12      	ROR $12
C1/62DE:	85 22      	STA $22
C1/62E0:	E2 20      	SEP #$20           ; 8-bit A
C1/62E2:	19 69 E3   	ORA $E369,Y
C1/62E5:	99 69 E3   	STA $E369,Y
C1/62E8:	EB         	XBA
C1/62E9:	19 49 E3   	ORA $E349,Y
C1/62EC:	99 49 E3   	STA $E349,Y
C1/62EF:	A5 13      	LDA $13
C1/62F1:	19 89 E3   	ORA $E389,Y
C1/62F4:	99 89 E3   	STA $E389,Y
C1/62F7:	C2 20      	REP #$20
C1/62F9:	C8         	INY
C1/62FA:	C8         	INY
C1/62FB:	E8         	INX
C1/62FC:	E8         	INX
C1/62FD:	C6 1C      	DEC $1C
C1/62FF:	F0 03      	BEQ $6304
C1/6301:	4C 82 62   	JMP $6282

C1/6304:	4C 7B 63   	JMP $637B

C1/6307:	A5 7A      	LDA $7A
C1/6309:	29 03 00   	AND #$0003
C1/630C:	0A         	ASL A
C1/630D:	AA         	TAX
C1/630E:	BF 09 61 C1	LDA $C16109,X
C1/6312:	85 1A      	STA $1A
C1/6314:	A6 26      	LDX $26
C1/6316:	A5 1A      	LDA $1A
C1/6318:	85 18      	STA $18
C1/631A:	64 12      	STZ $12
C1/631C:	BF C0 90 C4	LDA $C490C0,X
C1/6320:	0A         	ASL A
C1/6321:	C6 18      	DEC $18
C1/6323:	D0 FB      	BNE $6320
C1/6325:	85 22      	STA $22
C1/6327:	E2 20      	SEP #$20           ; 8-bit A
C1/6329:	19 68 E3   	ORA $E368,Y
C1/632C:	99 68 E3   	STA $E368,Y
C1/632F:	39 67 E3   	AND $E367,Y
C1/6332:	49 FF      	EOR #$FF
C1/6334:	39 67 E3   	AND $E367,Y
C1/6337:	99 67 E3   	STA $E367,Y
C1/633A:	EB         	XBA
C1/633B:	19 48 E3   	ORA $E348,Y
C1/633E:	99 48 E3   	STA $E348,Y
C1/6341:	39 47 E3   	AND $E347,Y
C1/6344:	49 FF      	EOR #$FF
C1/6346:	05 28      	ORA $28
C1/6348:	39 47 E3   	AND $E347,Y
C1/634B:	99 47 E3   	STA $E347,Y
C1/634E:	C2 20      	REP #$20
C1/6350:	A5 22      	LDA $22
C1/6352:	4A         	LSR A
C1/6353:	66 12      	ROR $12
C1/6355:	85 22      	STA $22
C1/6357:	E2 20      	SEP #$20           ; 8-bit A
C1/6359:	19 69 E3   	ORA $E369,Y
C1/635C:	99 69 E3   	STA $E369,Y
C1/635F:	EB         	XBA
C1/6360:	19 49 E3   	ORA $E349,Y
C1/6363:	99 49 E3   	STA $E349,Y
C1/6366:	A5 13      	LDA $13
C1/6368:	19 89 E3   	ORA $E389,Y
C1/636B:	99 89 E3   	STA $E389,Y
C1/636E:	C2 20      	REP #$20
C1/6370:	C8         	INY
C1/6371:	C8         	INY
C1/6372:	E8         	INX
C1/6373:	E8         	INX
C1/6374:	C6 1C      	DEC $1C
C1/6376:	F0 03      	BEQ $637B
C1/6378:	4C 16 63   	JMP $6316

C1/637B:	7B         	TDC
C1/637C:	E2 20      	SEP #$20           ; 8-bit A
C1/637E:	DA         	PHX
C1/637F:	AD F0 EC   	LDA $ECF0
C1/6382:	38         	SEC
C1/6383:	E9 60      	SBC #$60
C1/6385:	AA         	TAX
C1/6386:	BF C0 8F C4	LDA $C48FC0,X
C1/638A:	FA         	PLX
C1/638B:	18         	CLC
C1/638C:	65 7A      	ADC $7A
C1/638E:	85 7A      	STA $7A
C1/6390:	AD AC 62   	LDA $62AC
C1/6393:	D0 03      	BNE $6398
C1/6395:	20 02 5E   	JSR $5E02
C1/6398:	FA         	PLX
C1/6399:	7A         	PLY
C1/639A:	60         	RTS

; Display battle message

C1/639B:	A2 00 04   	LDX #$0400
C1/639E:	86 10      	STX $10
C1/63A0:	A2 3F E3   	LDX #$E33F
C1/63A3:	A9 7E      	LDA #$7E
C1/63A5:	AC BF E9   	LDY $E9BF
C1/63A8:	4C 8D 19   	JMP $198D         ; initialize VRAM DMA transfer

C1/63AB:	AD E2 88   	LDA $88E2
C1/63AE:	85 56      	STA $56
C1/63B0:	85 58      	STA $58
C1/63B2:	85 5A      	STA $5A
C1/63B4:	EB         	XBA
C1/63B5:	0E E1 88   	ASL $88E1
C1/63B8:	64 2D      	STZ $2D
C1/63BA:	AE DD 88   	LDX $88DD
C1/63BD:	86 4F      	STX $4F
C1/63BF:	AE DF 88   	LDX $88DF
C1/63C2:	86 51      	STX $51
C1/63C4:	A5 51      	LDA $51
C1/63C6:	18         	CLC
C1/63C7:	6D E1 88   	ADC $88E1
C1/63CA:	85 53      	STA $53
C1/63CC:	A5 52      	LDA $52
C1/63CE:	69 00      	ADC #$00
C1/63D0:	85 54      	STA $54
C1/63D2:	A4 00      	LDY $00
C1/63D4:	B2 4F      	LDA ($4F)
C1/63D6:	F0 1C      	BEQ $63F4
C1/63D8:	C9 20      	CMP #$20
C1/63DA:	90 0C      	BCC $63E8
C1/63DC:	20 FE 63   	JSR $63FE
C1/63DF:	E6 4F      	INC $4F
C1/63E1:	D0 F1      	BNE $63D4
C1/63E3:	E6 50      	INC $50
C1/63E5:	4C D4 63   	JMP $63D4

C1/63E8:	20 0B 64   	JSR $640B
C1/63EB:	E6 4F      	INC $4F
C1/63ED:	D0 E5      	BNE $63D4
C1/63EF:	E6 50      	INC $50
C1/63F1:	4C D4 63   	JMP $63D4

C1/63F4:	7B         	TDC
C1/63F5:	EB         	XBA
C1/63F6:	60         	RTS

C1/63F7:	E6 4F      	INC $4F
C1/63F9:	D0 02      	BNE $63FD
C1/63FB:	E6 50      	INC $50
C1/63FD:	60         	RTS

C1/63FE:	C2 20      	REP #$20
C1/6400:	91 53      	STA ($53),Y
C1/6402:	A5 55      	LDA $55
C1/6404:	91 51      	STA ($51),Y
C1/6406:	E2 20      	SEP #$20           ; 8-bit A
C1/6408:	C8         	INY
C1/6409:	C8         	INY
C1/640A:	60         	RTS

C1/640B:	85 2C      	STA $2C
C1/640D:	06 2C      	ASL $2C
C1/640F:	A6 2C      	LDX $2C
C1/6411:	7C 14 64   	JMP ($6414,X)  ; Jump table

C1/6414:	4767    	; RTS
C1/6416:	4867
C1/6418:	9464
C1/641A:	C964
C1/641C:	D164
C1/641E:	DE64
C1/6420:	EF64      ; $64EF - Something with item name
C1/6422:	4767    	; RTS
C1/6424:	4767    	; RTS
C1/6426:	4767    	; RTS
C1/6428:	4767    	; RTS
C1/642A:	4767    	; RTS
C1/642C:	4767    	; RTS
C1/642E:	4767    	; RTS
C1/6430:	5865
C1/6432:	9865
C1/6434:	4767    	; RTS
C1/6436:	8565
C1/6438:	1765
C1/643A:	4767    	; RTS
C1/643C:	4767    	; RTS
C1/643E:	4767    	; RTS
C1/6440:	4A64
C1/6442:	0066
C1/6444:	2866
C1/6446:	5566
C1/6448:	7D66

C1/644A:	20 F7 63    JSR $63F7
C1/644D:	64 40       STZ $40
C1/644F:	64 41       STZ $41
C1/6451:	B2 4F       LDA ($4F)
C1/6453:	38          SEC
C1/6454:	E9 64       SBC #$64
C1/6456:	90 04       BCC $645C
C1/6458:	E6 40       INC $40
C1/645A:	80 F7       BRA $6453
C1/645C:	18          CLC
C1/645D:	69 64       ADC #$64
C1/645F:	38          SEC
C1/6460:	E9 0A       SBC #$0A
C1/6462:	90 04       BCC $6468
C1/6464:	E6 41       INC $41
C1/6466:	80 F7       BRA $645F
C1/6468:	18          CLC
C1/6469:	69 0A       ADC #$0A
C1/646B:	48          PHA
C1/646C:	A5 40       LDA $40
C1/646E:	D0 02       BNE $6472
C1/6470:	A9 4B       LDA #$4B
C1/6472:	18          CLC
C1/6473:	69 B4       ADC #$B4
C1/6475:	20 FE 63    JSR $63FE
C1/6478:	A5 41       LDA $41
C1/647A:	05 40       ORA $40
C1/647C:	D0 07       BNE $6485
C1/647E:	A9 FF       LDA #$FF
C1/6480:	20 FE 63    JSR $63FE
C1/6483:	80 08       BRA $648D
C1/6485:	A5 41       LDA $41
C1/6487:	18          CLC
C1/6488:	69 B4       ADC #$B4
C1/648A:	20 FE 63    JSR $63FE
C1/648D:	68          PLA
C1/648E:	18          CLC
C1/648F:	69 B4       ADC #$B4
C1/6491:	4C FE 63    JMP $63FE

C1/6494:	20 F7 63   	JSR $63F7
C1/6497:	64 40      	STZ $40
C1/6499:	B2 4F      	LDA ($4F)
C1/649B:	38         	SEC
C1/649C:	E9 0A      	SBC #$0A
C1/649E:	90 05      	BCC $64A5
C1/64A0:	E6 40      	INC $40
C1/64A2:	4C 9B 64   	JMP $649B

C1/64A5:	18         	CLC
C1/64A6:	69 0A      	ADC #$0A
C1/64A8:	85 41      	STA $41
C1/64AA:	A5 40      	LDA $40
C1/64AC:	D0 02      	BNE $64B0
C1/64AE:	A9 4B      	LDA #$4B
C1/64B0:	18         	CLC
C1/64B1:	69 B4      	ADC #$B4
C1/64B3:	20 FE 63   	JSR $63FE
C1/64B6:	A5 41      	LDA $41
C1/64B8:	05 40      	ORA $40
C1/64BA:	D0 05      	BNE $64C1
C1/64BC:	A9 FF      	LDA #$FF
C1/64BE:	4C FE 63   	JMP $63FE

C1/64C1:	A5 41      	LDA $41
C1/64C3:	18         	CLC
C1/64C4:	69 B4      	ADC #$B4
C1/64C6:	4C FE 63   	JMP $63FE

C1/64C9:	20 F7 63   	JSR $63F7
C1/64CC:	B2 4F      	LDA ($4F)
C1/64CE:	4C FE 63   	JMP $63FE

C1/64D1:	20 F7 63   	JSR $63F7
C1/64D4:	B2 4F      	LDA ($4F)
C1/64D6:	85 56      	STA $56
C1/64D8:	85 58      	STA $58
C1/64DA:	85 5A      	STA $5A
C1/64DC:	EB         	XBA
C1/64DD:	60         	RTS

C1/64DE:	20 F7 63   	JSR $63F7
C1/64E1:	B2 4F      	LDA ($4F)
C1/64E3:	85 40      	STA $40
C1/64E5:	A9 FF      	LDA #$FF
C1/64E7:	20 FE 63   	JSR $63FE
C1/64EA:	C6 40      	DEC $40
C1/64EC:	D0 F7      	BNE $64E5
C1/64EE:	60         	RTS

C1/64EF:	20 F7 63   	JSR $63F7
C1/64F2:	B2 4F      	LDA ($4F)        ; spell index [?]
C1/64F4:	C9 FF      	CMP #$FF         ; null
C1/64F6:	D0 05      	BNE $64FD        ; continue if not null
C1/64F8:	A9 0A      	LDA #$0A
C1/64FA:	4C A5 66   	JMP $66A5

; Magitek Menu Spell Names [?]
C1/64FD:	85 2C      	STA $2C          ; save index
C1/64FF:	A9 0A      	LDA #$0A         ; 10
C1/6501:	85 2E      	STA $2E          ; save bitmask [?]
C1/6503:	85 40      	STA $40          ; and here [?]
C1/6505:	20 B0 18   	JSR $18B0
C1/6508:	A6 30      	LDX $30
C1/650A:	BF AD F9 E6	LDA $E6F9AD,X    ; X should be zero [??]
C1/650E:	20 FE 63   	JSR $63FE
C1/6511:	E8         	INX
C1/6512:	C6 40      	DEC $40
C1/6514:	D0 F4      	BNE $650A
C1/6516:	60         	RTS

C1/6517:	20 F7 63   	JSR $63F7
C1/651A:	B2 4F      	LDA ($4F)
C1/651C:	C9 FF      	CMP #$FF
C1/651E:	D0 05      	BNE $6525
C1/6520:	A9 07      	LDA #$07
C1/6522:	4C A5 66   	JMP $66A5

C1/6525:	85 2C      	STA $2C
C1/6527:	A9 0D      	LDA #$0D
C1/6529:	85 2E      	STA $2E
C1/652B:	20 B0 18   	JSR $18B0
C1/652E:	A6 30      	LDX $30
C1/6530:	BF 00 B3 D2	LDA $D2B300,X
C1/6534:	C9 FF      	CMP #$FF
C1/6536:	F0 E8      	BEQ $6520
C1/6538:	38         	SEC
C1/6539:	E9 D8      	SBC #$D8
C1/653B:	85 2C      	STA $2C
C1/653D:	A9 07      	LDA #$07
C1/653F:	85 2E      	STA $2E
C1/6541:	85 40      	STA $40
C1/6543:	20 B0 18   	JSR $18B0
C1/6546:	A6 30      	LDX $30
C1/6548:	A5 56      	LDA $56
C1/654A:	EB         	XBA
C1/654B:	BF 00 6F D2	LDA $D26F00,X
C1/654F:	20 FE 63   	JSR $63FE
C1/6552:	E8         	INX
C1/6553:	C6 40      	DEC $40
C1/6555:	D0 F4      	BNE $654B
C1/6557:	60         	RTS

C1/6558:	20 F7 63   	JSR $63F7
C1/655B:	B2 4F      	LDA ($4F)
C1/655D:	C9 FF      	CMP #$FF
C1/655F:	D0 05      	BNE $6566
C1/6561:	A9 0D      	LDA #$0D
C1/6563:	4C A5 66   	JMP $66A5

C1/6566:	85 2C      	STA $2C
C1/6568:	A9 0D      	LDA #$0D
C1/656A:	85 2E      	STA $2E
C1/656C:	20 B0 18   	JSR $18B0
C1/656F:	A6 30      	LDX $30
C1/6571:	A5 56      	LDA $56
C1/6573:	EB         	XBA
C1/6574:	A9 0D      	LDA #$0D
C1/6576:	85 40      	STA $40
C1/6578:	BF 00 B3 D2	LDA $D2B300,X
C1/657C:	20 FE 63   	JSR $63FE
C1/657F:	E8         	INX
C1/6580:	C6 40      	DEC $40
C1/6582:	D0 F4      	BNE $6578
C1/6584:	60         	RTS

C1/6585:	20 98 65   	JSR $6598
C1/6588:	B2 4F      	LDA ($4F)
C1/658A:	C9 FF      	CMP #$FF
C1/658C:	F0 05      	BEQ $6593
C1/658E:	C9 36      	CMP #$36
C1/6590:	90 01      	BCC $6593
C1/6592:	60         	RTS

C1/6593:	A9 03      	LDA #$03
C1/6595:	4C A5 66   	JMP $66A5

C1/6598:	20 F7 63   	JSR $63F7
C1/659B:	B2 4F      	LDA ($4F)
C1/659D:	85 2C      	STA $2C
C1/659F:	C9 FF      	CMP #$FF
C1/65A1:	D0 05      	BNE $65A8
C1/65A3:	A9 07      	LDA #$07
C1/65A5:	4C A5 66   	JMP $66A5

;
C1/65A8:	C9 36      	CMP #$36
C1/65AA:	90 3C      	BCC $65E8
C1/65AC:	C9 51      	CMP #$51
C1/65AE:	90 1C      	BCC $65CC
C1/65B0:	38         	SEC
C1/65B1:	E9 51      	SBC #$51
C1/65B3:	EB         	XBA
C1/65B4:	A9 0A      	LDA #$0A
C1/65B6:	85 2E      	STA $2E
C1/65B8:	85 40      	STA $40
C1/65BA:	20 B0 18   	JSR $18B0
C1/65BD:	A6 30      	LDX $30
C1/65BF:	BF B9 F7 E6	LDA $E6F7B9,X
C1/65C3:	20 FE 63   	JSR $63FE
C1/65C6:	E8         	INX
C1/65C7:	C6 40      	DEC $40
C1/65C9:	D0 F4      	BNE $65BF
C1/65CB:	60         	RTS

;
C1/65CC:	38         	SEC
C1/65CD:	E9 36      	SBC #$36
C1/65CF:	EB         	XBA
C1/65D0:	A9 08      	LDA #$08
C1/65D2:	85 2E      	STA $2E
C1/65D4:	85 40      	STA $40
C1/65D6:	20 B0 18   	JSR $18B0
C1/65D9:	A6 30      	LDX $30
C1/65DB:	BF E1 F6 E6	LDA $E6F6E1,X
C1/65DF:	20 FE 63   	JSR $63FE
C1/65E2:	E8         	INX
C1/65E3:	C6 40      	DEC $40
C1/65E5:	D0 F4      	BNE $65DB
C1/65E7:	60         	RTS

;
C1/65E8:	A9 07      	LDA #$07
C1/65EA:	85 2E      	STA $2E
C1/65EC:	85 40      	STA $40
C1/65EE:	20 B0 18   	JSR $18B0
C1/65F1:	A6 30      	LDX $30
C1/65F3:	BF 67 F5 E6	LDA $E6F567,X
C1/65F7:	20 FE 63   	JSR $63FE
C1/65FA:	E8         	INX
C1/65FB:	C6 40      	DEC $40
C1/65FD:	D0 F4      	BNE $65F3
C1/65FF:	60         	RTS

C1/6600:	20 F7 63   	JSR $63F7
C1/6603:	B2 4F      	LDA ($4F)
C1/6605:	85 2C      	STA $2C
C1/6607:	C9 FF      	CMP #$FF
C1/6609:	D0 05      	BNE $6610
C1/660B:	A9 0C      	LDA #$0C
C1/660D:	4C A5 66   	JMP $66A5

;
C1/6610:	A9 0C      	LDA #$0C
C1/6612:	85 2E      	STA $2E
C1/6614:	85 40      	STA $40
C1/6616:	20 B0 18   	JSR $18B0
C1/6619:	A6 30      	LDX $30
C1/661B:	BF 9D FF E6	LDA $E6FF9D,X
C1/661F:	20 FE 63   	JSR $63FE
C1/6622:	E8         	INX
C1/6623:	C6 40      	DEC $40
C1/6625:	D0 F4      	BNE $661B
C1/6627:	60         	RTS

C1/6628:	20 F7 63   	JSR $63F7
C1/662B:	B2 4F      	LDA ($4F)
C1/662D:	85 2C      	STA $2C
C1/662F:	C9 FF      	CMP #$FF
C1/6631:	D0 05      	BNE $6638
C1/6633:	A9 0B      	LDA #$0B
C1/6635:	4C A5 66   	JMP $66A5

; Draw monster name

C1/6638:	A9 0A      	LDA #$0A        ; length of monster name
C1/663A:	85 2E      	STA $2E
C1/663C:	85 40      	STA $40
C1/663E:	20 B0 18   	JSR $18B0
C1/6641:	A6 30      	LDX $30         ; offset to monster name
C1/6643:	BF 50 C0 CF	LDA $CFC050,X   ; monster name character
C1/6647:	20 FE 63   	JSR $63FE       ; draw tile
C1/664A:	E8         	INX
C1/664B:	C6 40      	DEC $40
C1/664D:	D0 F4      	BNE $6643
C1/664F:	A9 FF      	LDA #$FF
C1/6651:	20 FE 63   	JSR $63FE
C1/6654:	60         	RTS

C1/6655:	20 F7 63   	JSR $63F7
C1/6658:	B2 4F      	LDA ($4F)
C1/665A:	85 2C      	STA $2C
C1/665C:	C9 FF      	CMP #$FF
C1/665E:	D0 05      	BNE $6665
C1/6660:	A9 0A      	LDA #$0A
C1/6662:	4C A5 66   	JMP $66A5

;
C1/6665:	A9 0A      	LDA #$0A
C1/6667:	85 2E      	STA $2E
C1/6669:	85 40      	STA $40
C1/666B:	20 B0 18   	JSR $18B0
C1/666E:	A6 30      	LDX $30
C1/6670:	BF FD F9 E6	LDA $E6F9FD,X
C1/6674:	20 FE 63   	JSR $63FE
C1/6677:	E8         	INX
C1/6678:	C6 40      	DEC $40
C1/667A:	D0 F4      	BNE $6670
C1/667C:	60         	RTS

C1/667D:	20 F7 63   	JSR $63F7
C1/6680:	B2 4F      	LDA ($4F)
C1/6682:	85 2C      	STA $2C
C1/6684:	C9 FF      	CMP #$FF
C1/6686:	D0 05      	BNE $668D
C1/6688:	A9 08      	LDA #$08
C1/668A:	4C A5 66   	JMP $66A5

;
C1/668D:	A9 08      	LDA #$08
C1/668F:	85 2E      	STA $2E
C1/6691:	85 40      	STA $40
C1/6693:	20 B0 18   	JSR $18B0
C1/6696:	A6 30      	LDX $30
C1/6698:	BF E1 F6 E6	LDA $E6F6E1,X
C1/669C:	20 FE 63   	JSR $63FE
C1/669F:	E8         	INX
C1/66A0:	C6 40      	DEC $40
C1/66A2:	D0 F4      	BNE $6698
C1/66A4:	60         	RTS

C1/66A5:	85 40      	STA $40
C1/66A7:	A9 FF      	LDA #$FF
C1/66A9:	20 FE 63   	JSR $63FE
C1/66AC:	C6 40      	DEC $40
C1/66AE:	D0 F7      	BNE $66A7
C1/66B0:	60         	RTS

; Buffer tiles for drawing battle menus [?]

C1/66B1:	AD DC 88   	LDA $88DC      ; tile flags (palette)
C1/66B4:	85 4E      	STA $4E        ; save it
C1/66B6:	0E DB 88   	ASL $88DB      ; double byte (number of data words?)
C1/66B9:	AE D7 88   	LDX $88D7      ; pointer to battle dialog script
C1/66BC:	86 48      	STX $48        ; pointer to current position in text?
C1/66BE:	AE D9 88   	LDX $88D9      ; another pointer to something
C1/66C1:	86 4A      	STX $4A        ; store this one, too
C1/66C3:	A5 4A      	LDA $4A        ; get just low byte of it
C1/66C5:	18         	CLC
C1/66C6:	6D DB 88   	ADC $88DB      ; add data length (*2)
C1/66C9:	85 4C      	STA $4C        ; save it here
C1/66CB:	A5 4B      	LDA $4B        ; get high byte of previous pointer
C1/66CD:	69 00      	ADC #$00       ; why is this here?
C1/66CF:	85 4D      	STA $4D        ; store it, too
C1/66D1:	A4 00      	LDY $00        ; Y = 0000
C1/66D3:	B2 48      	LDA ($48)      ; A = value at dialog pointer (read 64 bytes?)
C1/66D5:	F0 14      	BEQ $66EB      ; exit (finish) if 00
C1/66D7:	C9 20      	CMP #$20
C1/66D9:	90 08      	BCC $66E3      ; branch if < $20 (special codes)
C1/66DB:	20 F3 66   	JSR $66F3      ; else, store character, increment Y
C1/66DE:	20 EC 66   	JSR $66EC      ; advance pointer
C1/66E1:	80 F0      	BRA $66D3      ; keep looping

; Battle Dialogue special codes
C1/66E3:	20 02 67   	JSR $6702      ; draw text based on subroutine (eg name)
C1/66E6:	20 EC 66   	JSR $66EC      ; advance pointer
C1/66E9:	80 E8      	BRA $66D3      ; keep looping
C1/66EB:	60         	RTS

; Increment battle dialog pointer
C1/66EC:	E6 48      	INC $48        ; advance pointer to look at next byte
C1/66EE:	D0 02      	BNE $66F2
C1/66F0:	E6 49      	INC $49        ; if overflow, increment hi byte
C1/66F2:	60         	RTS

; If dialog value >= $20 (Draw a Tile) [?]
C1/66F3:	91 4C      	STA ($4C),Y    ; some pointer + data length * 2 + Y
C1/66F5:	A9 FF      	LDA #$FF
C1/66F7:	91 4A      	STA ($4A),Y    ; store at some pointer + Y
C1/66F9:	C8         	INY
C1/66FA:	A5 4E      	LDA $4E        ; palette (and other flags)
C1/66FC:	91 4C      	STA ($4C),Y
C1/66FE:	91 4A      	STA ($4A),Y    ; store as high-byte for dialog value
C1/6700:	C8         	INY            ; get next
C1/6701:	60         	RTS

; If dialog value < $20
C1/6702:	0A         	ASL A          ; lower values point to commands
C1/6703:	AA         	TAX
C1/6704:	7C 07 67   	JMP ($6707,X)  ; Jump table

; Battle text functions [??]
C1/6707:	4767      ; (00) - RTS
C1/6709:	4867      ; (01) - line break [?]
C1/670B:	5F67      ; (02) - display 2 digit number {X}
C1/670D:	9467      ; (03) - display tile {X} [for tiles < 0x20?]
C1/670F:	9C67      ; (04) - update tile bank to {X}
C1/6711:	A467      ; (05) - draw {X} spaces
C1/6713:	4767      ; (06) - RTS
C1/6715:	B567      ; (07) - display party member 1's info
C1/6717:	B867      ; (08) - display party member 2's info
C1/6719:	BC67      ; (09) - display party member 3's info
C1/671B:	C067      ; (0A) - display party member 4's info
C1/671D:	9369      ; (0B) - display name of monster in slot {X}
C1/671F:	DA69      ; (0C) - skip character [?]
C1/6721:	DE69      ; (0D) - display the battle command {X} name
C1/6723:	826A      ; (0E) - display item {X} name
C1/6725:	C26A      ; (0F) - display spell/attack name
C1/6727:	0B6A      ; (10) - display the status texts
C1/6729:	AF6A      ; (11) - display spell/attack name with pad at end
C1/672B:	386A      ; (12) - display the item type name (eg "Armor") [?]
C1/672D:	4767      ; (13) - RTS
C1/672F:	4767      ; (14) - RTS
C1/6731:	4767      ; (15) - RTS
C1/6733:	4767      ; (16) - RTS
C1/6735:	4767      ; (17) - RTS
C1/6737:	4767      ; (18) - RTS
C1/6739:	4767      ; (19) - RTS
C1/673B:	4767      ; (1A) - RTS
C1/673D:	4767      ; (1B) - RTS
C1/673F:	4767      ; (1C) - RTS
C1/6741:	4767      ; (1D) - RTS
C1/6743:	4767      ; (1E) - RTS
C1/6745:	4767      ; (1F) - RTS

C1/6747:	60         	RTS

C1/6748:	AD DB 88   	LDA $88DB
C1/674B:	C2 20      	REP #$20
C1/674D:	48         	PHA
C1/674E:	0A         	ASL A
C1/674F:	18         	CLC
C1/6750:	65 4A      	ADC $4A
C1/6752:	85 4A      	STA $4A
C1/6754:	68         	PLA
C1/6755:	18         	CLC
C1/6756:	65 4A      	ADC $4A
C1/6758:	85 4C      	STA $4C
C1/675A:	7B         	TDC
C1/675B:	A8         	TAY
C1/675C:	E2 20      	SEP #$20           ; 8-bit A
C1/675E:	60         	RTS

C1/675F:	20 EC 66   	JSR $66EC      ; advance pointer (get param for instruction)
C1/6762:	64 10      	STZ $10        ; zero interator
C1/6764:	B2 48      	LDA ($48)      ; A = param
C1/6766:	38         	SEC
C1/6767:	E9 0A      	SBC #$0A       ; A = param - 10
C1/6769:	90 05      	BCC $6770      ; branch if no more tens
C1/676B:	E6 10      	INC $10        ; advance tens digit
C1/676D:	4C 66 67   	JMP $6766      ; loop until remainder

C1/6770:	18         	CLC
C1/6771:	69 0A      	ADC #$0A       ; add last 10 back to get remainder
C1/6773:	85 11      	STA $11        ; remainder
C1/6775:	A5 10      	LDA $10        ; A = tens digit
C1/6777:	D0 02      	BNE $677B      ; branch if not 0
C1/6779:	A9 4B      	LDA #$4B       ; if zero, load complement of #FF
C1/677B:	18         	CLC
C1/677C:	69 B4      	ADC #$B4       ; advance value to digit tile lookup
C1/677E:	20 F3 66   	JSR $66F3      ; draw the tens digit (or space)
C1/6781:	A5 11      	LDA $11
C1/6783:	05 10      	ORA $10
C1/6785:	D0 05      	BNE $678C      ; if number wasn't null, branch
C1/6787:	A9 FF      	LDA #$FF       ; else draw a space (not a "0")
C1/6789:	4C F3 66   	JMP $66F3

C1/678C:	A5 11      	LDA $11
C1/678E:	18         	CLC
C1/678F:	69 B4      	ADC #$B4       ; add offset to remainder for tile lookup
C1/6791:	4C F3 66   	JMP $66F3      ; draw the 1's digit

C1/6794:	20 EC 66   	JSR $66EC      ; look at next byte
C1/6797:	B2 48      	LDA ($48)      ; next byte value
C1/6799:	4C F3 66   	JMP $66F3      ; draw this byte

C1/679C:	20 EC 66   	JSR $66EC      ; look at next byte
C1/679F:	B2 48      	LDA ($48)      ; next byte value
C1/67A1:	85 4E      	STA $4E        ; update tile bank
C1/67A3:	60         	RTS

C1/67A4:	20 EC 66   	JSR $66EC      ; advance pointer
C1/67A7:	B2 48      	LDA ($48)      ; next byte value (arg)
C1/67A9:	85 10      	STA $10        ; save iterator
C1/67AB:	A9 FF      	LDA #$FF
C1/67AD:	20 F3 66   	JSR $66F3      ; draw space " "
C1/67B0:	C6 10      	DEC $10
C1/67B2:	D0 F7      	BNE $67AB      ; loop till done
C1/67B4:	60         	RTS

; Display info for party member 0 [?]
C1/67B5:	7B         	TDC
C1/67B6:	80 0A      	BRA $67C2

; Display info for party member 1 [?]
C1/67B8:	A9 01      	LDA #$01
C1/67BA:	80 06      	BRA $67C2

; Display info for party member 2 [?]
C1/67BC:	A9 02      	LDA #$02
C1/67BE:	80 02      	BRA $67C2

; Display info for party member 3 [?]
C1/67C0:	A9 03      	LDA #$03
C1/67C2:	AA         	TAX
C1/67C3:	BD D6 64   	LDA $64D6,X     ; A = character index (0-3)
C1/67C6:	C9 FF      	CMP #$FF
C1/67C8:	F0 05      	BEQ $67CF       ; branch if no character
C1/67CA:	0A         	ASL A
C1/67CB:	AA         	TAX
C1/67CC:	7C E3 67   	JMP ($67E3,X)   ; draw character info based on index [?]

; Draw spaces based on next byte value
C1/67CF:	20 EC 66   	JSR $66EC       ; advance pointer to look at next byte
C1/67D2:	B2 48      	LDA ($48)       ; A = next byte value
C1/67D4:	AA         	TAX             ; use it as index
C1/67D5:	BF DC 67 C1	LDA $C167DC,X
C1/67D9:	4C 25 68   	JMP $6825       ; draw spaces for full width

C1/67DC:	06                          ; max length of name
C1/67DD:	04                          ; max length of curr HP
C1/67DE:	06                          ; max length of gauge or max HP
C1/67DF:	03                          ; width of current MP
C1/67E0:	03                          ; width of max MP
C1/67E1:	06
C1/67E2:	06

; Pointers to character text info
C1/67E3:	EB67
C1/67E5:	F267
C1/67E7:	F967
C1/67E9:	0068

C1/67EB:	A2 AE 2E   	LDX #$2EAE      ; pointer to character 0's info
C1/67EE:	A9 00      	LDA #$00
C1/67F0:	80 13      	BRA $6805

C1/67F2:	A2 CE 2E   	LDX #$2ECE      ; pointer to character 1's info
C1/67F5:	A9 01      	LDA #$01
C1/67F7:	80 0C      	BRA $6805

C1/67F9:	A2 EE 2E   	LDX #$2EEE      ; pointer to character 2's info
C1/67FC:	A9 02      	LDA #$02
C1/67FE:	80 05      	BRA $6805

C1/6800:	A2 0E 2F   	LDX #$2F0E      ; pointer to character 3's info
C1/6803:	A9 03      	LDA #$03

C1/6805:	85 18      	STA $18         ; store character index
C1/6807:	86 10      	STX $10         ; store pointer to character name
C1/6809:	A9 7E      	LDA #$7E
C1/680B:	85 12      	STA $12         ; set bank to look in
C1/680D:	20 EC 66   	JSR $66EC       ; advance pointer
C1/6810:	B2 48      	LDA ($48)       ; get next byte
C1/6812:	0A         	ASL A
C1/6813:	AA         	TAX             ; use as index to pointer
C1/6814:	7C 17 68   	JMP ($6817,X)   ; Jump table

; Pointers
C1/6817:	2F68        ; 00 - name
C1/6819:	4168        ; 01 - current HP
C1/681B:	7268        ; 02 - ATB gauge or max HP, depending on gauge settings
C1/681D:	A768        ; 03 - current MP
C1/681F:	2C69        ; 04 - max MP
C1/6821:	4E68        ; 05 - morph gauge value [?]
C1/6823:	4668        ; 06 - condemned countdown [?]

; Draw <A> space tiles
C1/6825:	AA         	TAX             ; X = how many spaces to draw (6,4,3)?
C1/6826:	A9 FF      	LDA #$FF
C1/6828:	20 F3 66   	JSR $66F3       ; draw a #FF tile (space?)
C1/682B:	CA         	DEX
C1/682C:	D0 F8      	BNE $6826       ; loop X times
C1/682E:	60         	RTS

; Draw character's name
C1/682F:	A6 10      	LDX $10         ; address of character data
C1/6831:	A9 06      	LDA #$06
C1/6833:	85 14      	STA $14         ; 6 letters to write
C1/6835:	BD 01 00   	LDA $0001,X     ; load character name
C1/6838:	20 F3 66   	JSR $66F3       ; draw a tile
C1/683B:	E8         	INX
C1/683C:	C6 14      	DEC $14         ; decrement letters to do
C1/683E:	D0 F5      	BNE $6835       ; branch if haven't done all 6
C1/6840:	60         	RTS

; Draw character's current HP
C1/6841:	A9 07      	LDA #$07
C1/6843:	4C 75 69   	JMP $6975

C1/6846:	A5 18      	LDA $18
C1/6848:	AA         	TAX
C1/6849:	BD A6 61   	LDA $61A6,X      ; condemned number value
C1/684C:	80 06      	BRA $6854

C1/684E:	A5 18      	LDA $18
C1/6850:	AA         	TAX
C1/6851:	BD A2 61   	LDA $61A2,X      ; morph gauge value

C1/6854:	4A         	LSR A
C1/6855:	29 FC      	AND #$FC
C1/6857:	AA         	TAX
C1/6858:	A9 F9      	LDA #$F9
C1/685A:	20 F3 66   	JSR $66F3        ; draw a tile
C1/685D:	A9 04      	LDA #$04
C1/685F:	85 1A      	STA $1A
C1/6861:	BF AC 68 C1	LDA $C168AC,X    ; Data
C1/6865:	20 F3 66   	JSR $66F3        ; draw a tile
C1/6868:	E8         	INX
C1/6869:	C6 1A      	DEC $1A
C1/686B:	D0 F4      	BNE $6861
C1/686D:	A9 FA      	LDA #$FA
C1/686F:	4C F3 66   	JMP $66F3        ; draw a tile

; Character subcommand $02 (draw Max HP or ATB gauge)
C1/6872:	AD 21 20   	LDA $2021        ; ATB gauge setting
C1/6875:	29 01      	AND #$01         ; Gauge enabled?
C1/6877:	F0 1F      	BEQ $6898        ; Branch if disabled
C1/6879:	A5 4E      	LDA $4E          ; Text color
C1/687B:	48         	PHA              ; Save it
C1/687C:	A5 18      	LDA $18          ; Which character is it
C1/687E:	AA         	TAX              ; Index it
C1/687F:	BD 9E 61   	LDA $619E,X      ; Character's ATB gauge value
C1/6882:	C9 FF      	CMP #$FF         ; Is it fully charged?
C1/6884:	D0 04      	BNE $688A        ; Branch if not fully charged
C1/6886:	A9 29      	LDA #$29         ; Set yellow palette for full
C1/6888:	80 02      	BRA $688C        ; Store palette
C1/688A:	A9 35      	LDA #$35         ; Set white palette for charging
C1/688C:	85 4E      	STA $4E          ; Store palette
C1/688E:	BD 9E 61   	LDA $619E,X      ; ATB gauge value
C1/6891:	20 54 68   	JSR $6854        ; Draw the gauge
C1/6894:	68         	PLA              ; Get saved text color
C1/6895:	85 4E      	STA $4E          ; Store text color
C1/6897:	60         	RTS

; Draw MaxHP
C1/6898:	A9 CE      	LDA #$CE
C1/689A:	20 F3 66   	JSR $66F3
C1/689D:	A9 09      	LDA #$09
C1/689F:	20 75 69   	JSR $6975
C1/68A2:	A9 FF      	LDA #$FF
C1/68A4:	4C F3 66   	JMP $66F3

C1/68A7:	A9 0B      	LDA #$0B
C1/68A9:	4C 84 69   	JMP $6984

C1/68AC:	F1F0F0F0
C1/68B0:	F2F0F0F0
C1/68B4:	F3F0F0F0
C1/68B8:	F4F0F0F0
C1/68BC:	F5F0F0F0
C1/68C0:	F6F0F0F0
C1/68C4:	F7F0F0F0
C1/68C8:	F8F0F0F0
C1/68CC:	F8F1F0F0
C1/68D0:	F8F2F0F0
C1/68D4:	F8F3F0F0
C1/68D8:	F8F4F0F0
C1/68DC:	F8F5F0F0
C1/68E0:	F8F6F0F0
C1/68E4:	F8F7F0F0
C1/68E8:	F8F8F0F0
C1/68EC:	F8F8F1F0
C1/68F0:	F8F8F2F0
C1/68F4:	F8F8F3F0
C1/68F8:	F8F8F4F0
C1/68FC:	F8F8F5F0
C1/6900:	F8F8F6F0
C1/6904:	F8F8F7F0
C1/6908:	F8F8F8F0
C1/690C:	F8F8F8F1
C1/6910:	F8F8F8F2
C1/6914:	F8F8F8F3
C1/6918:	F8F8F8F4
C1/691C:	F8F8F8F5
C1/6920:	F8F8F8F6
C1/6924:	F8F8F8F7
C1/6928:	F8F8F8F8

C1/692C:	A9 0D      	LDA #$0D
C1/692E:	4C 84 69   	JMP $6984

C1/6931:	5A         	PHY
C1/6932:	A8         	TAY
C1/6933:	C2 20      	REP #$20
C1/6935:	B7 10      	LDA [$10],Y
C1/6937:	AA         	TAX
C1/6938:	7B         	TDC
C1/6939:	E2 20      	SEP #$20           ; 8-bit A
C1/693B:	A9 B4      	LDA #$B4
C1/693D:	85 68      	STA $68
C1/693F:	20 2B 1B   	JSR $1B2B
C1/6942:	20 8F 1A   	JSR $1A8F
C1/6945:	A6 00      	LDX $00
C1/6947:	7A         	PLY
C1/6948:	60         	RTS

C1/6949:	5A         	PHY
C1/694A:	A8         	TAY
C1/694B:	C2 20      	REP #$20
C1/694D:	B7 10      	LDA [$10],Y
C1/694F:	AA         	TAX
C1/6950:	7B         	TDC
C1/6951:	E2 20      	SEP #$20           ; 8-bit A
C1/6953:	A9 B4      	LDA #$B4
C1/6955:	85 68      	STA $68
C1/6957:	20 2B 1B   	JSR $1B2B
C1/695A:	20 61 69   	JSR $6961
C1/695D:	A6 00      	LDX $00
C1/695F:	7A         	PLY
C1/6960:	60         	RTS

C1/6961:	A6 00      	LDX $00
C1/6963:	B5 69      	LDA $69,X
C1/6965:	38         	SEC
C1/6966:	E5 68      	SBC $68
C1/6968:	D0 0A      	BNE $6974
C1/696A:	A9 C8      	LDA #$C8
C1/696C:	95 69      	STA $69,X
C1/696E:	E8         	INX
C1/696F:	E0 03 00   	CPX #$0003
C1/6972:	D0 EF      	BNE $6963
C1/6974:	60         	RTS

C1/6975:	20 31 69   	JSR $6931
C1/6978:	B5 69      	LDA $69,X
C1/697A:	20 F3 66   	JSR $66F3
C1/697D:	E8         	INX
C1/697E:	E0 04 00   	CPX #$0004
C1/6981:	D0 F5      	BNE $6978
C1/6983:	60         	RTS

C1/6984:	20 49 69   	JSR $6949
C1/6987:	B5 6A      	LDA $6A,X
C1/6989:	20 F3 66   	JSR $66F3
C1/698C:	E8         	INX
C1/698D:	E0 03 00   	CPX #$0003
C1/6990:	D0 F5      	BNE $6987
C1/6992:	60         	RTS

C1/6993:	20 EC 66   	JSR $66EC       ; advance pointer
C1/6996:	A9 0A      	LDA #$0A        ; #10 (monster name length)
C1/6998:	85 10      	STA $10         ; set iterator
C1/699A:	B2 48      	LDA ($48)       ; arg1 (monster slot)
C1/699C:	0A         	ASL A           ; x2
C1/699D:	AA         	TAX             ; index it
C1/699E:	C2 20      	REP #$20        ; 16-bit A
C1/69A0:	BD 0D 20   	LDA $200D,X     ; monster in slot
C1/69A3:	C9 FF FF   	CMP #$FFFF      ; null
C1/69A6:	D0 10      	BNE $69B8       ; branch if not null

C1/69A8:	7B         	TDC             ; zero A/B
C1/69A9:	E2 20      	SEP #$20        ; 8-bit A
C1/69AB:	E6 10      	INC $10         ; increment iterator
C1/69AD:	A9 FF      	LDA #$FF        ; space " " tile
C1/69AF:	20 F3 66   	JSR $66F3       ; draw one space
C1/69B2:	E8         	INX             ; increment arg [?]
C1/69B3:	C6 10      	DEC $10         ; decrement iterator
C1/69B5:	D0 F6      	BNE $69AD       ; loop till done
C1/69B7:	60         	RTS

C1/69B8:	C2 20      	REP #$20        ; 16-bit A
C1/69BA:	85 24      	STA $24         ; monster ID
C1/69BC:	A9 0A 00   	LDA #$000A      ; length of monster name
C1/69BF:	85 22      	STA $22         ; set ^
C1/69C1:	20 F4 18   	JSR $18F4       ; multiplication [?]
C1/69C4:	7B         	TDC             ; zero A/B
C1/69C5:	E2 20      	SEP #$20        ; 8-bit A
C1/69C7:	A6 26      	LDX $26         ; offset to monster name
C1/69C9:	BF 50 C0 CF	LDA $CFC050,X   ; monster name character
C1/69CD:	20 F3 66   	JSR $66F3       ; draw one tile
C1/69D0:	E8         	INX             ; next character index
C1/69D1:	C6 10      	DEC $10         ; decrement iterator
C1/69D3:	D0 F4      	BNE $69C9       ; loop till all characters drawn
C1/69D5:	A9 FF      	LDA #$FF        ; " " tile
C1/69D7:	4C F3 66   	JMP $66F3       ; draw one space

C1/69DA:	20 EC 66   	JSR $66EC
C1/69DD:	60         	RTS

C1/69DE:	20 EC 66   	JSR $66EC       ; advance pointer
C1/69E1:	B2 48      	LDA ($48)       ; arg1
C1/69E3:	C9 FF      	CMP #$FF        ; null?
C1/69E5:	D0 05      	BNE $69EC       ; branch if not ^
C1/69E7:	A9 07      	LDA #$07        ; length of command name
C1/69E9:	4C 3B 6B   	JMP $6B3B       ; buffer 7 spaces

C1/69EC:	EB         	XBA             ; save command ID
C1/69ED:	A9 07      	LDA #$07        ; length of command name
C1/69EF:	85 10      	STA $10         ; save ^
C1/69F1:	20 CA 18   	JSR $18CA       ; multiply A * B
C1/69F4:	C2 20      	REP #$20        ; 16-bit A
C1/69F6:	AF 16 42 00	LDA $004216     ; product
C1/69FA:	AA         	TAX             ; index it
C1/69FB:	7B         	TDC             ; zero A/B
C1/69FC:	E2 20      	SEP #$20        ; 8-bit A
C1/69FE:	BF A0 CE D8	LDA $D8CEA0,X   ; battle command name tile
C1/6A02:	20 F3 66   	JSR $66F3       ; buffer it
C1/6A05:	E8         	INX             ; next name tile index
C1/6A06:	C6 10      	DEC $10         ; reduce counter
C1/6A08:	D0 F4      	BNE $69FE       ; loop for all 7 tiles
C1/6A0A:	60         	RTS

C1/6A0B:	20 EC 66   	JSR $66EC
C1/6A0E:	B2 48      	LDA ($48)
C1/6A10:	C9 FF      	CMP #$FF
C1/6A12:	D0 05      	BNE $6A19
C1/6A14:	A9 0A      	LDA #$0A
C1/6A16:	4C 3B 6B   	JMP $6B3B

C1/6A19:	EB         	XBA
C1/6A1A:	A9 0A      	LDA #$0A
C1/6A1C:	85 10      	STA $10
C1/6A1E:	20 CA 18   	JSR $18CA
C1/6A21:	C2 20      	REP #$20
C1/6A23:	AF 16 42 00	LDA $004216
C1/6A27:	AA         	TAX
C1/6A28:	7B         	TDC
C1/6A29:	E2 20      	SEP #$20           ; 8-bit A
C1/6A2B:	BF E1 AD C2	LDA $C2ADE1,X
C1/6A2F:	20 F3 66   	JSR $66F3
C1/6A32:	E8         	INX
C1/6A33:	C6 10      	DEC $10
C1/6A35:	D0 F4      	BNE $6A2B
C1/6A37:	60         	RTS

; Display Item Type Name

C1/6A38:	20 EC 66   	JSR $66EC        ; advance pointer
C1/6A3B:	B2 48      	LDA ($48)        ; arg
C1/6A3D:	C9 FF      	CMP #$FF         ; null?
C1/6A3F:	D0 05      	BNE $6A46        ; branch if not ^
C1/6A41:	A9 07      	LDA #$07         ; #7
C1/6A43:	4C 3B 6B   	JMP $6B3B        ; buffer 7 spaces

C1/6A46:	EB         	XBA              ; save item ID
C1/6A47:	A9 0D      	LDA #$0D         ; length of item name
C1/6A49:	85 10      	STA $10          ; save iterator
C1/6A4B:	20 CA 18   	JSR $18CA        ; multiply
C1/6A4E:	C2 20      	REP #$20         ; 16-bit A
C1/6A50:	AF 16 42 00	LDA $004216      ; product
C1/6A54:	AA         	TAX              ; index it
C1/6A55:	7B         	TDC              ; zero A/B
C1/6A56:	E2 20      	SEP #$20         ; 8-bit A
C1/6A58:	BF 00 B3 D2	LDA $D2B300,X    ; item name tile
C1/6A5C:	C9 FF      	CMP #$FF         ; space? (no item type?)
C1/6A5E:	F0 E1      	BEQ $6A41        ; finish with 7 spaces if ^
C1/6A60:	38         	SEC              ; set carry
C1/6A61:	E9 D8      	SBC #$D8         ; get item type index (from symbol)
C1/6A63:	EB         	XBA              ; store it
C1/6A64:	A9 07      	LDA #$07         ; #7
C1/6A66:	85 10      	STA $10          ; iterator
C1/6A68:	20 CA 18   	JSR $18CA        ; multiply
C1/6A6B:	C2 20      	REP #$20         ; 16-bit A
C1/6A6D:	AF 16 42 00	LDA $004216      ; product
C1/6A71:	AA         	TAX              ; index it
C1/6A72:	7B         	TDC              ; zero A/B
C1/6A73:	E2 20      	SEP #$20         ; 8-bit A
C1/6A75:	BF 00 6F D2	LDA $D26F00,X    ; item type tile
C1/6A79:	20 F3 66   	JSR $66F3        ; buffer it
C1/6A7C:	E8         	INX              ; next source index
C1/6A7D:	C6 10      	DEC $10          ; countdown
C1/6A7F:	D0 F4      	BNE $6A75        ; buffer all 7 tiles
C1/6A81:	60         	RTS

; Buffer Item Name

C1/6A82:	20 EC 66   	JSR $66EC        ; advance pointer
C1/6A85:	B2 48      	LDA ($48)        ; get arg (item id)
C1/6A87:	C9 FF      	CMP #$FF         ; null?
C1/6A89:	D0 05      	BNE $6A90        ; branch if not ^
C1/6A8B:	A9 0D      	LDA #$0D         ; #13
C1/6A8D:	4C 3B 6B   	JMP $6B3B        ; buffer 13 spaces

C1/6A90:	EB         	XBA              ; save item ID
C1/6A91:	A9 0D      	LDA #$0D         ; length of item name
C1/6A93:	85 10      	STA $10          ; save iterator
C1/6A95:	20 CA 18   	JSR $18CA        ; multiply
C1/6A98:	C2 20      	REP #$20         ; 16-bit A
C1/6A9A:	AF 16 42 00	LDA $004216      ; pointer to name
C1/6A9E:	AA         	TAX              ; index it
C1/6A9F:	7B         	TDC              ; zero A/B
C1/6AA0:	E2 20      	SEP #$20         ; 8-bit A
C1/6AA2:	BF 00 B3 D2	LDA $D2B300,X    ; item name tile
C1/6AA6:	20 F3 66   	JSR $66F3        ; buffer one tile
C1/6AA9:	E8         	INX              ; next source index
C1/6AAA:	C6 10      	DEC $10          ; count down
C1/6AAC:	D0 F4      	BNE $6AA2        ; loop for all 13 tiles
C1/6AAE:	60         	RTS

; Buffer Spell/Esper/Attack Name w/ Padding at End [?]
C1/6AAF:	20 C2 6A   	JSR $6AC2        ; buffer spell/esper/attack name
C1/6AB2:	B2 48      	LDA ($48)        ; get attack/spell ID
C1/6AB4:	C9 FF      	CMP #$FF         ; null?
C1/6AB6:	F0 05      	BEQ $6ABD        ; branch if ^
C1/6AB8:	C9 36      	CMP #$36         ; in magic spell range
C1/6ABA:	90 01      	BCC $6ABD        ; branch if ^
C1/6ABC:	60         	RTS

C1/6ABD:	A9 03      	LDA #$03         ; #3
C1/6ABF:	4C 3B 6B   	JMP $6B3B        ; buffer 3 spaces (padEnd [?])

; Buffer Spell/Esper/Attack Name
C1/6AC2:	20 EC 66   	JSR $66EC        ; advance pointer
C1/6AC5:	B2 48      	LDA ($48)        ; get attack/spell ID
C1/6AC7:	C9 FF      	CMP #$FF         ; null?
C1/6AC9:	D0 05      	BNE $6AD0        ; branch if not ^
C1/6ACB:	A9 07      	LDA #$07         ; #7
C1/6ACD:	4C 3B 6B   	JMP $6B3B        ; buffer 7 spaces

C1/6AD0:	C9 36      	CMP #$36         ; in "Magic" range
C1/6AD2:	90 48      	BCC $6B1C        ; branch if ^
C1/6AD4:	C9 51      	CMP #$51         ; in "Esper" range
C1/6AD6:	90 22      	BCC $6AFA        ; branch if ^
C1/6AD8:	38         	SEC              ; prep subtraction
C1/6AD9:	E9 51      	SBC #$51         ; get "Enemy Skill" index

; Buffer Enemy Attack Name [?]
C1/6ADB:	EB         	XBA              ; save it
C1/6ADC:	A9 0A      	LDA #$0A         ; length of enemy skill names
C1/6ADE:	85 10      	STA $10          ; save iterator
C1/6AE0:	20 CA 18   	JSR $18CA        ; multiply
C1/6AE3:	C2 20      	REP #$20
C1/6AE5:	AF 16 42 00	LDA $004216
C1/6AE9:	AA         	TAX
C1/6AEA:	7B         	TDC
C1/6AEB:	E2 20      	SEP #$20           ; 8-bit A
C1/6AED:	BF B9 F7 E6	LDA $E6F7B9,X 
C1/6AF1:	20 F3 66   	JSR $66F3
C1/6AF4:	E8         	INX
C1/6AF5:	C6 10      	DEC $10
C1/6AF7:	D0 F4      	BNE $6AED
C1/6AF9:	60         	RTS

; Buffer Esper Name
C1/6AFA:	38         	SEC              ; prep subtraction
C1/6AFB:	E9 36      	SBC #$36         ; get esper index
C1/6AFD:	EB         	XBA              ; save it
C1/6AFE:	A9 08      	LDA #$08         ; length of esper name
C1/6B00:	85 10      	STA $10          ; save iterator
C1/6B02:	20 CA 18   	JSR $18CA        ; multiply
C1/6B05:	C2 20      	REP #$20
C1/6B07:	AF 16 42 00	LDA $004216
C1/6B0B:	AA         	TAX
C1/6B0C:	7B         	TDC
C1/6B0D:	E2 20      	SEP #$20         ; 8-bit A
C1/6B0F:	BF 75 F6 E6	LDA $E6F675,X    ; esper name tile
C1/6B13:	20 F3 66   	JSR $66F3        ; buffer it
C1/6B16:	E8         	INX
C1/6B17:	C6 10      	DEC $10
C1/6B19:	D0 F4      	BNE $6B0F
C1/6B1B:	60         	RTS

; Buffer Magic Spell Name
C1/6B1C:	EB         	XBA            ; save spell ID
C1/6B1D:	A9 07      	LDA #$07       ; length of spell names
C1/6B1F:	85 10      	STA $10        ; save iterator
C1/6B21:	20 CA 18   	JSR $18CA      ; multiply
C1/6B24:	C2 20      	REP #$20       ; 16-bit A
C1/6B26:	AF 16 42 00	LDA $004216    ; product
C1/6B2A:	AA         	TAX            ; index to spell name
C1/6B2B:	7B         	TDC            ; zero A/B
C1/6B2C:	E2 20      	SEP #$20       ; 8-bit A
C1/6B2E:	BF 67 F5 E6	LDA $E6F567,X  ; spell name tile
C1/6B32:	20 F3 66   	JSR $66F3      ; buffer it
C1/6B35:	E8         	INX            ; next tile index
C1/6B36:	C6 10      	DEC $10        ; countdown
C1/6B38:	D0 F4      	BNE $6B2E      ; buffer 7 tiles
C1/6B3A:	60         	RTS

; Add {A} space tiles to buffer
C1/6B3B:	85 1A      	STA $1A        ; save length
C1/6B3D:	A9 FF      	LDA #$FF       ; space tile " "
C1/6B3F:	20 F3 66   	JSR $66F3      ; add to buffer ^
C1/6B42:	C6 1A      	DEC $1A        ; reduce count
C1/6B44:	D0 F7      	BNE $6B3D      ; loop till done
C1/6B46:	60         	RTS

C1/6B47:	A4 00      	LDY $00
C1/6B49:	7B         	TDC
C1/6B4A:	99 6D 5F   	STA $5F6D,Y
C1/6B4D:	99 8D 5F   	STA $5F8D,Y
C1/6B50:	99 9D 5F   	STA $5F9D,Y
C1/6B53:	A9 40      	LDA #$40
C1/6B55:	99 7D 5F   	STA $5F7D,Y
C1/6B58:	C8         	INY
C1/6B59:	C0 10 00   	CPY #$0010
C1/6B5C:	D0 EB      	BNE $6B49
C1/6B5E:	60         	RTS

C1/6B5F:	48         	PHA
C1/6B60:	18         	CLC
C1/6B61:	79 6D 5F   	ADC $5F6D,Y
C1/6B64:	99 6D 5F   	STA $5F6D,Y
C1/6B67:	68         	PLA
C1/6B68:	18         	CLC
C1/6B69:	79 7D 5F   	ADC $5F7D,Y
C1/6B6C:	99 7D 5F   	STA $5F7D,Y
C1/6B6F:	60         	RTS

C1/6B70:	48         	PHA
C1/6B71:	18         	CLC
C1/6B72:	79 8D 5F   	ADC $5F8D,Y
C1/6B75:	99 8D 5F   	STA $5F8D,Y
C1/6B78:	68         	PLA
C1/6B79:	18         	CLC
C1/6B7A:	79 9D 5F   	ADC $5F9D,Y
C1/6B7D:	99 9D 5F   	STA $5F9D,Y
C1/6B80:	60         	RTS

C1/6B81:	B9 8D 5F   	LDA $5F8D,Y
C1/6B84:	0A         	ASL A
C1/6B85:	85 24      	STA $24
C1/6B87:	B9 6D 5F   	LDA $5F6D,Y
C1/6B8A:	4C 99 6B   	JMP $6B99

C1/6B8D:	B9 9D 5F   	LDA $5F9D,Y
C1/6B90:	0A         	ASL A
C1/6B91:	85 24      	STA $24
C1/6B93:	B9 7D 5F   	LDA $5F7D,Y
C1/6B96:	4C 99 6B   	JMP $6B99

; Some angle math

C1/6B99:	AA         	TAX                ; index angle
C1/6B9A:	BF 6D FE C2	LDA $C2FE6D,X      ; sine/cosine table
C1/6B9E:	10 1A      	BPL $6BBA          ; 
C1/6BA0:	49 FF      	EOR #$FF           ; (A * -1) - 1
C1/6BA2:	8F 02 42 00	STA $004202        ; multiplicand 1
C1/6BA6:	A5 24      	LDA $24            ; 
C1/6BA8:	8F 03 42 00	STA $004203        ; multiplicand 2
C1/6BAC:	A9 FF      	LDA #$FF           
C1/6BAE:	85 67      	STA $67
C1/6BB0:	85 67      	STA $67            ; wait cycles?
C1/6BB2:	AF 17 42 00	LDA $004217        ; product / 256
C1/6BB6:	49 FF      	EOR #$FF           ; * -1
C1/6BB8:	1A         	INC A
C1/6BB9:	60         	RTS

C1/6BBA:	8F 02 42 00	STA $004202
C1/6BBE:	A5 24      	LDA $24
C1/6BC0:	8F 03 42 00	STA $004203
C1/6BC4:	A9 00      	LDA #$00
C1/6BC6:	85 67      	STA $67
C1/6BC8:	85 67      	STA $67
C1/6BCA:	AF 17 42 00	LDA $004217
C1/6BCE:	60         	RTS

C1/6BCF:	E2 30      	SEP #$30
C1/6BD1:	8B         	PHB
C1/6BD2:	A9 00      	LDA #$00
C1/6BD4:	48         	PHA
C1/6BD5:	AB         	PLB
C1/6BD6:	A6 24      	LDX $24
C1/6BD8:	8E 02 42   	STX $4202
C1/6BDB:	A5 22      	LDA $22
C1/6BDD:	8D 03 42   	STA $4203
C1/6BE0:	C2 20      	REP #$20
C1/6BE2:	A4 23      	LDY $23
C1/6BE4:	EA         	NOP
C1/6BE5:	AD 16 42   	LDA $4216
C1/6BE8:	8E 02 42   	STX $4202
C1/6BEB:	8C 03 42   	STY $4203
C1/6BEE:	85 26      	STA $26
C1/6BF0:	64 28      	STZ $28
C1/6BF2:	C2 10      	REP #$10
C1/6BF4:	AD 16 42   	LDA $4216
C1/6BF7:	18         	CLC
C1/6BF8:	65 27      	ADC $27
C1/6BFA:	85 27      	STA $27
C1/6BFC:	06 26      	ASL $26
C1/6BFE:	26 28      	ROL $28
C1/6C00:	AB         	PLB
C1/6C01:	60         	RTS

; Read from Sine/Cosine Tables [?]

C1/6C02:	C2 10      	REP #$10         ; 16-bit XY
C1/6C04:	A5 16      	LDA $16          ; sin/cos index, 8 or 16 byte increments
C1/6C06:	29 FF 01   	AND #$01FF       ; limit max offset
C1/6C09:	AA         	TAX              ; index it
C1/6C0A:	BF 6D FC C2	LDA $C2FC6D,X    ; sin/cos value
C1/6C0E:	10 2F      	BPL $6C3F        ; branch if positive value

; Negative value
C1/6C10:	E2 10      	SEP #$10         ; 8-bit XY
C1/6C12:	49 FF FF   	EOR #$FFFF       ; convert to positive [?]
C1/6C15:	A6 24      	LDX $24          ; curve slope [?]
C1/6C17:	8E 02 42   	STX $4202        ; multiplicand 1
C1/6C1A:	AA         	TAX              ; sine/cosine low-byte
C1/6C1B:	8E 03 42   	STX $4203        ; multiplicand 2
C1/6C1E:	85 22      	STA $22          ; save sine/cosine (full value)
C1/6C20:	EB         	XBA              ; get high-byte
C1/6C21:	AA         	TAX              ; transfer to X
C1/6C22:	AD 16 42   	LDA $4216        ; product (sine/cosine-lowbyte * slope)
C1/6C25:	8E 03 42   	STX $4203        ; multiplicand 2 (hibyte)
C1/6C28:	85 26      	STA $26          ; store original product
C1/6C2A:	64 28      	STZ $28          ; zero highest byte [?]
C1/6C2C:	18         	CLC              ; clear carry
C1/6C2D:	AD 16 42   	LDA $4216        ; product (sin/cos-hibyte * slope)
C1/6C30:	65 27      	ADC $27          ; add to hi-byte of original product
C1/6C32:	85 27      	STA $27          ; store high bytes
C1/6C34:	06 26      	ASL $26          ; multiply by 2
C1/6C36:	26 28      	ROL $28
C1/6C38:	A5 28      	LDA $28          ; get high bytes
C1/6C3A:	49 FF FF   	EOR #$FFFF       ; convert to negative number [?]
C1/6C3D:	1A         	INC A            ; +1
C1/6C3E:	60         	RTS

; Positive value
C1/6C3F:	E2 10      	SEP #$10         ; 8-bit A
C1/6C41:	A6 24      	LDX $24
C1/6C43:	8E 02 42   	STX $4202        ; multiplicand 1
C1/6C46:	AA         	TAX
C1/6C47:	8E 03 42   	STX $4203        ; multiplicand 2
C1/6C4A:	85 22      	STA $22
C1/6C4C:	EB         	XBA
C1/6C4D:	AA         	TAX
C1/6C4E:	AD 16 42   	LDA $4216        ; product
C1/6C51:	8E 03 42   	STX $4203
C1/6C54:	85 26      	STA $26
C1/6C56:	64 28      	STZ $28
C1/6C58:	18         	CLC
C1/6C59:	AD 16 42   	LDA $4216
C1/6C5C:	65 27      	ADC $27
C1/6C5E:	85 27      	STA $27
C1/6C60:	06 26      	ASL $26
C1/6C62:	26 28      	ROL $28
C1/6C64:	A5 28      	LDA $28
C1/6C66:	60         	RTS

C1/6C67:	C2 20      	REP #$20
C1/6C69:	29 FF 00   	AND #$00FF
C1/6C6C:	0A         	ASL A
C1/6C6D:	AA         	TAX
C1/6C6E:	BF 6D FC C2	LDA $C2FC6D,X
C1/6C72:	10 14      	BPL $6C88
C1/6C74:	49 FF FF   	EOR #$FFFF
C1/6C77:	85 22      	STA $22
C1/6C79:	20 CF 6B   	JSR $6BCF
C1/6C7C:	A5 28      	LDA $28
C1/6C7E:	49 FF FF   	EOR #$FFFF
C1/6C81:	1A         	INC A
C1/6C82:	85 28      	STA $28
C1/6C84:	7B         	TDC
C1/6C85:	E2 20      	SEP #$20           ; 8-bit A
C1/6C87:	60         	RTS

C1/6C88:	85 22      	STA $22
C1/6C8A:	20 CF 6B   	JSR $6BCF
C1/6C8D:	7B         	TDC
C1/6C8E:	E2 20      	SEP #$20           ; 8-bit A
C1/6C90:	60         	RTS

C1/6C91:	A5 7D      	LDA $7D
C1/6C93:	38         	SEC
C1/6C94:	E5 7F      	SBC $7F
C1/6C96:	85 81      	STA $81
C1/6C98:	A9 00      	LDA #$00
C1/6C9A:	E9 00      	SBC #$00
C1/6C9C:	85 82      	STA $82
C1/6C9E:	A5 7E      	LDA $7E
C1/6CA0:	38         	SEC
C1/6CA1:	E5 80      	SBC $80
C1/6CA3:	85 83      	STA $83
C1/6CA5:	A9 00      	LDA #$00
C1/6CA7:	E9 00      	SBC #$00
C1/6CA9:	85 84      	STA $84
C1/6CAB:	A5 81      	LDA $81
C1/6CAD:	45 82      	EOR $82
C1/6CAF:	38         	SEC
C1/6CB0:	E5 82      	SBC $82
C1/6CB2:	85 88      	STA $88
C1/6CB4:	64 89      	STZ $89
C1/6CB6:	A5 83      	LDA $83
C1/6CB8:	45 84      	EOR $84
C1/6CBA:	38         	SEC
C1/6CBB:	E5 84      	SBC $84
C1/6CBD:	85 8A      	STA $8A
C1/6CBF:	64 8B      	STZ $8B
C1/6CC1:	C2 20      	REP #$20
C1/6CC3:	A5 88      	LDA $88
C1/6CC5:	4A         	LSR A
C1/6CC6:	4A         	LSR A
C1/6CC7:	4A         	LSR A
C1/6CC8:	85 86      	STA $86
C1/6CCA:	A5 8A      	LDA $8A
C1/6CCC:	29 F8 FF   	AND #$FFF8
C1/6CCF:	0A         	ASL A
C1/6CD0:	0A         	ASL A
C1/6CD1:	18         	CLC
C1/6CD2:	65 86      	ADC $86
C1/6CD4:	85 8C      	STA $8C
C1/6CD6:	0A         	ASL A
C1/6CD7:	AA         	TAX
C1/6CD8:	BD 00 F8   	LDA $F800,X
C1/6CDB:	85 86      	STA $86
C1/6CDD:	7B         	TDC
C1/6CDE:	E2 20      	SEP #$20           ; 8-bit A
C1/6CE0:	A6 8C      	LDX $8C
C1/6CE2:	BF 45 C9 C2	LDA $C2C945,X
C1/6CE6:	85 85      	STA $85
C1/6CE8:	A5 82      	LDA $82
C1/6CEA:	30 14      	BMI $6D00
C1/6CEC:	A5 84      	LDA $84
C1/6CEE:	30 08      	BMI $6CF8
C1/6CF0:	A9 80      	LDA #$80
C1/6CF2:	18         	CLC
C1/6CF3:	65 85      	ADC $85
C1/6CF5:	85 85      	STA $85
C1/6CF7:	60         	RTS

C1/6CF8:	A9 80      	LDA #$80
C1/6CFA:	38         	SEC
C1/6CFB:	E5 85      	SBC $85
C1/6CFD:	85 85      	STA $85
C1/6CFF:	60         	RTS

C1/6D00:	A5 84      	LDA $84
C1/6D02:	30 07      	BMI $6D0B
C1/6D04:	A9 00      	LDA #$00
C1/6D06:	38         	SEC
C1/6D07:	E5 85      	SBC $85
C1/6D09:	85 85      	STA $85
C1/6D0B:	60         	RTS

C1/6D0C:	A2 45 CD   	LDX #$CD45
C1/6D0F:	86 F3      	STX $F3
C1/6D11:	A9 C2      	LDA #$C2
C1/6D13:	85 F5      	STA $F5
C1/6D15:	A2 00 A4   	LDX #$A400
C1/6D18:	86 F6      	STX $F6
C1/6D1A:	A9 7F      	LDA #$7F
C1/6D1C:	85 F8      	STA $F8
C1/6D1E:	22 6D FF C2	JSL $C2FF6D
C1/6D22:	A2 00 F8   	LDX #$F800
C1/6D25:	86 10      	STX $10
C1/6D27:	C2 20      	REP #$20
C1/6D29:	7B         	TDC
C1/6D2A:	AA         	TAX
C1/6D2B:	7B         	TDC
C1/6D2C:	85 12      	STA $12
C1/6D2E:	A8         	TAY
C1/6D2F:	BF 00 A4 7F	LDA $7FA400,X
C1/6D33:	29 FF 00   	AND #$00FF
C1/6D36:	18         	CLC
C1/6D37:	65 12      	ADC $12
C1/6D39:	85 12      	STA $12
C1/6D3B:	91 10      	STA ($10),Y
C1/6D3D:	C8         	INY
C1/6D3E:	C8         	INY
C1/6D3F:	E8         	INX
C1/6D40:	C0 40 00   	CPY #$0040
C1/6D43:	D0 EA      	BNE $6D2F
C1/6D45:	A5 10      	LDA $10
C1/6D47:	18         	CLC
C1/6D48:	69 40 00   	ADC #$0040
C1/6D4B:	85 10      	STA $10
C1/6D4D:	E0 00 04   	CPX #$0400
C1/6D50:	D0 D9      	BNE $6D2B
C1/6D52:	7B         	TDC
C1/6D53:	E2 20      	SEP #$20           ; 8-bit A
C1/6D55:	60         	RTS

; Get active battle menu data index in Y
C1/6D56:	AD 80 7B   	LDA $7B80      ; active battle menu slot [?]
C1/6D59:	29 03      	AND #$03       ; enforce 0-3 range
C1/6D5B:	0A         	ASL A          ; x2
C1/6D5C:	0A         	ASL A          ; x4
C1/6D5D:	0A         	ASL A          ; x8
C1/6D5E:	A8         	TAY            ; set in Y
C1/6D5F:	60         	RTS

C1/6D60:	0100
C1/6D62:	FFFF
C1/6D64:	FF00
C1/6D66:	01FF
C1/6D68:	0100
C1/6D6A:	01FF
C1/6D6C:	FF00
C1/6D6E:	0100

C1/6D70:	29 03      	AND #$03
C1/6D72:	48         	PHA
C1/6D73:	AA         	TAX
C1/6D74:	29 01      	AND #$01
C1/6D76:	F0 0E      	BEQ $6D86
C1/6D78:	AD 1D 20   	LDA $201D
C1/6D7B:	2D AC 61   	AND $61AC
C1/6D7E:	2D AD 61   	AND $61AD
C1/6D81:	2D 93 61   	AND $6193
C1/6D84:	80 02      	BRA $6D88
C1/6D86:	A5 92      	LDA $92
C1/6D88:	F0 03      	BEQ $6D8D
C1/6D8A:	68         	PLA
C1/6D8B:	38         	SEC
C1/6D8C:	60         	RTS

C1/6D8D:	68         	PLA
C1/6D8E:	18         	CLC
C1/6D8F:	60         	RTS

; Sustain targeting cursor(s)

C1/6D90:	AD CB 7B   	LDA $7BCB
C1/6D93:	F0 03      	BEQ $6D98
C1/6D95:	4C 57 6F   	JMP $6F57

C1/6D98:	AD 84 7A   	LDA $7A84
C1/6D9B:	29 10      	AND #$10
C1/6D9D:	F0 03      	BEQ $6DA2
C1/6D9F:	4C 25 6F    JMP $6F25

C1/6DA2:	AD 1D 20   	LDA $201D
C1/6DA5:	2D AC 61   	AND $61AC
C1/6DA8:	2D AD 61   	AND $61AD
C1/6DAB:	2D 93 61   	AND $6193
C1/6DAE:	2D 7D 7B   	AND $7B7D
C1/6DB1:	D0 0A      	BNE $6DBD
C1/6DB3:	A5 92      	LDA $92
C1/6DB5:	2D 7E 7B   	AND $7B7E
C1/6DB8:	D0 03      	BNE $6DBD
C1/6DBA:	4C 57 6F   	JMP $6F57

C1/6DBD:	AD 84 7A   	LDA $7A84
C1/6DC0:	85 36      	STA $36
C1/6DC2:	10 0D      	BPL $6DD1
C1/6DC4:	AD B4 62   	LDA $62B4
C1/6DC7:	F0 0B      	BEQ $6DD4
C1/6DC9:	CE B2 62   	DEC $62B2
C1/6DCC:	D0 6F      	BNE $6E3D
C1/6DCE:	4C 25 6F   	JMP $6F25

C1/6DD1:	4C 40 6E   	JMP $6E40

C1/6DD4:	AD B1 62    LDA $62B1
C1/6DD7:	F0 1D       BEQ $6DF6
C1/6DD9:	A5 0E       LDA $0E
C1/6DDB:	29 07       AND #$07
C1/6DDD:	D0 5E       BNE $6E3D
C1/6DDF:	CE B2 62    DEC $62B2
C1/6DE2:	D0 18       BNE $6DFC
C1/6DE4:	A9 01       LDA #$01
C1/6DE6:	8D B4 62    STA $62B4
C1/6DE9:	A9 20       LDA #$20
C1/6DEB:	8D B2 62    STA $62B2
C1/6DEE:	A9 01       LDA #$01
C1/6DF0:	8D 7F 7B    STA $7B7F
C1/6DF3:	4C 69 6F    JMP $6F69

C1/6DF6:	A5 0E       LDA $0E
C1/6DF8:	29 03       AND #$03
C1/6DFA:	D0 41       BNE $6E3D
C1/6DFC:	E6 94       INC $94        ; sound: cursor
C1/6DFE:	EE B3 62    INC $62B3
C1/6E01:	AD B3 62    LDA $62B3
C1/6E04:	29 08       AND #$08
C1/6E06:	F0 21       BEQ $6E29
C1/6E08:	AD B3 62    LDA $62B3
C1/6E0B:	29 07       AND #$07
C1/6E0D:	AA          TAX
C1/6E0E:	AD 1D 20    LDA $201D
C1/6E11:	2D AC 61    AND $61AC
C1/6E14:	2D AD 61    AND $61AD
C1/6E17:	2D 93 61    AND $6193
C1/6E1A:	3F 01 1A C1 AND $C11A01,X
C1/6E1E:	F0 DC       BEQ $6DFC
C1/6E20:	8D 7D 7B    STA $7B7D
C1/6E23:	9C 7E 7B    STZ $7B7E
C1/6E26:	4C 05 6F    JMP $6F05
C1/6E29:	AD B3 62    LDA $62B3
C1/6E2C:	29 07       AND #$07
C1/6E2E:	AA          TAX
C1/6E2F:	BF 01 1A C1 LDA $C11A01,X
C1/6E33:	25 92       AND $92
C1/6E35:	F0 C5       BEQ $6DFC
C1/6E37:	8D 7E 7B    STA $7B7E
C1/6E3A:	9C 7D 7B    STZ $7B7D
C1/6E3D:	4C 05 6F    JMP $6F05

C1/6E40:	A5 36      	LDA $36
C1/6E42:	29 0D      	AND #$0D
C1/6E44:	C9 08      	CMP #$08
C1/6E46:	D0 3A      	BNE $6E82
C1/6E48:	A5 05       LDA $05
C1/6E4A:	29 03       AND #$03
C1/6E4C:	F0 34       BEQ $6E82
C1/6E4E:	E6 94       INC $94        ; sound: cursor
C1/6E50:	A5 05       LDA $05
C1/6E52:	29 02       AND #$02
C1/6E54:	D0 16       BNE $6E6C
C1/6E56:	AD CE 7A    LDA $7ACE
C1/6E59:	29 02       AND #$02
C1/6E5B:	D0 25       BNE $6E82
C1/6E5D:	AD CE 7A    LDA $7ACE
C1/6E60:	1A          INC A
C1/6E61:	1A          INC A
C1/6E62:	20 70 6D    JSR $6D70
C1/6E65:	90 1B       BCC $6E82
C1/6E67:	8D CE 7A    STA $7ACE
C1/6E6A:	80 2E       BRA $6E9A
C1/6E6C:	AD CE 7A    LDA $7ACE
C1/6E6F:	29 02       AND #$02
C1/6E71:	F0 0F       BEQ $6E82
C1/6E73:	AD CE 7A    LDA $7ACE
C1/6E76:	3A          DEC A
C1/6E77:	3A          DEC A
C1/6E78:	20 70 6D    JSR $6D70
C1/6E7B:	90 05       BCC $6E82
C1/6E7D:	8D CE 7A    STA $7ACE
C1/6E80:	80 18       BRA $6E9A
C1/6E82:	A5 36      	LDA $36
C1/6E84:	29 01      	AND #$01
C1/6E86:	F0 7D      	BEQ $6F05
C1/6E88:	A5 04      	LDA $04
C1/6E8A:	29 30      	AND #$30
C1/6E8C:	F0 45      	BEQ $6ED3
C1/6E8E:	C9 30      	CMP #$30
C1/6E90:	F0 41      	BEQ $6ED3
C1/6E92:	E6 94      	INC $94        ; sound: cursor
C1/6E94:	A5 36      	LDA $36
C1/6E96:	29 20      	AND #$20
C1/6E98:	F0 39      	BEQ $6ED3
C1/6E9A:	AD CE 7A   	LDA $7ACE
C1/6E9D:	29 01      	AND #$01
C1/6E9F:	F0 1E      	BEQ $6EBF
C1/6EA1:	AD CE 7A   	LDA $7ACE
C1/6EA4:	AA         	TAX
C1/6EA5:	AD 1D 20   	LDA $201D
C1/6EA8:	2D AC 61   	AND $61AC
C1/6EAB:	2D AD 61   	AND $61AD
C1/6EAE:	2D 93 61   	AND $6193
C1/6EB1:	3D 79 7B   	AND $7B79,X
C1/6EB4:	8D 7D 7B   	STA $7B7D
C1/6EB7:	A9 01      	LDA #$01
C1/6EB9:	8D 7F 7B   	STA $7B7F
C1/6EBC:	4C 05 6F   	JMP $6F05

C1/6EBF:	AD CE 7A   	LDA $7ACE
C1/6EC2:	AA         	TAX
C1/6EC3:	A5 92      	LDA $92
C1/6EC5:	3D 79 7B   	AND $7B79,X
C1/6EC8:	8D 7E 7B   	STA $7B7E
C1/6ECB:	A9 01      	LDA #$01
C1/6ECD:	8D 7F 7B   	STA $7B7F
C1/6ED0:	4C 05 6F   	JMP $6F05

C1/6ED3:	A5 05      	LDA $05
C1/6ED5:	29 0F      	AND #$0F
C1/6ED7:	F0 02      	BEQ $6EDB
C1/6ED9:	E6 94      	INC $94        ; sound: cursor
C1/6EDB:	A5 05      	LDA $05
C1/6EDD:	C9 08      	CMP #$08
C1/6EDF:	D0 06      	BNE $6EE7
C1/6EE1:	20 84 73   	JSR $7384
C1/6EE4:	4C 05 6F   	JMP $6F05

C1/6EE7:	C9 04      	CMP #$04
C1/6EE9:	D0 06      	BNE $6EF1
C1/6EEB:	20 D6 73   	JSR $73D6
C1/6EEE:	4C 05 6F   	JMP $6F05

C1/6EF1:	C9 02      	CMP #$02
C1/6EF3:	D0 06      	BNE $6EFB
C1/6EF5:	20 33 77   	JSR $7733
C1/6EF8:	4C 05 6F   	JMP $6F05

C1/6EFB:	C9 01      	CMP #$01
C1/6EFD:	D0 06      	BNE $6F05
C1/6EFF:	20 4A 77   	JSR $774A
C1/6F02:	4C 05 6F   	JMP $6F05

; Handle A (target select)
C1/6F05:	A5 04      	LDA $04
C1/6F07:	10 43      	BPL $6F4C     ; branch if not pushing A
C1/6F09:	E6 96      	INC $96       ; sound: select
C1/6F0B:	AD 84 7A   	LDA $7A84
C1/6F0E:	10 15      	BPL $6F25
C1/6F10:	AD B1 62    LDA $62B1
C1/6F13:	D0 37       BNE $6F4C
C1/6F15:	EE B1 62    INC $62B1
C1/6F18:	20 5B 18    JSR $185B     ; random number
C1/6F1B:	29 07       AND #$07
C1/6F1D:	18          CLC
C1/6F1E:	69 08       ADC #$08
C1/6F20:	8D B2 62    STA $62B2
C1/6F23:	80 27       BRA $6F4C
C1/6F25:	20 96 70   	JSR $7096
C1/6F28:	9C 7D 7B   	STZ $7B7D
C1/6F2B:	9C 7E 7B   	STZ $7B7E
C1/6F2E:	9C 7F 7B   	STZ $7B7F
C1/6F31:	AD 83 7A   	LDA $7A83
C1/6F34:	8D C2 7B   	STA $7BC2
C1/6F37:	AD E8 7A   	LDA $7AE8
C1/6F3A:	F0 09      	BEQ $6F45
C1/6F3C:	AD E9 7A   	LDA $7AE9
C1/6F3F:	D0 04      	BNE $6F45
C1/6F41:	EE E9 7A   	INC $7AE9
C1/6F44:	60         	RTS

C1/6F45:	EE CB 7B   	INC $7BCB
C1/6F48:	EE 80 7B   	INC $7B80
C1/6F4B:	60         	RTS

; Handle B
C1/6F4C:	A5 09      	LDA $09
C1/6F4E:	10 19      	BPL $6F69     ; exit if not pushing B
C1/6F50:	AD B1 62   	LDA $62B1
C1/6F53:	D0 14      	BNE $6F69
C1/6F55:	E6 96      	INC $96       ; sound: select
C1/6F57:	9C 7D 7B   	STZ $7B7D
C1/6F5A:	9C 7E 7B   	STZ $7B7E
C1/6F5D:	9C 7F 7B   	STZ $7B7F
C1/6F60:	AD 83 7A   	LDA $7A83
C1/6F63:	8D C2 7B   	STA $7BC2
C1/6F66:	9C E9 7A   	STZ $7AE9
C1/6F69:	60         	RTS

C1/6F6A:	FFFF
C1/6F6C:	8000
C1/6F6E:	0080
C1/6F70:	4000
C1/6F72:	0040
C1/6F74:	2000
C1/6F76:	1000
C1/6F78:	0006
C1/6F7A:	0004
C1/6F7C:	0005
C1/6F7E:	0001
C1/6F80:	0009
C1/6F82:	0008
C1/6F84:	000A
C1/6F86:	0002

C1/6F88:	00
C1/6F89:	0C
C1/6F8A:	18
C1/6F8B:	24
C1/6F8C:	30
C1/6F8D:	3C
C1/6F8E:	48
C1/6F8F:	54

C1/6F90:	64 36       STZ $36
C1/6F92:	A5 36       LDA $36
C1/6F94:	AA          TAX
C1/6F95:	BF 88 6F C1 LDA $C16F88,X
C1/6F99:	AA          TAX
C1/6F9A:	BF 4B 7A C4 LDA $C47A4B,X
C1/6F9E:	3A          DEC A
C1/6F9F:	3A          DEC A
C1/6FA0:	C2 20       REP #$20
C1/6FA2:	85 38       STA $38
C1/6FA4:	7B          TDC
C1/6FA5:	A8          TAY
C1/6FA6:	BF 40 7A C4 LDA $C47A40,X
C1/6FAA:	29 FF 00    AND #$00FF
C1/6FAD:	0A          ASL A
C1/6FAE:	DA          PHX
C1/6FAF:	AA          TAX
C1/6FB0:	BF 6A 6F C1 LDA $C16F6A,X
C1/6FB4:	99 1E EA    STA $EA1E,Y
C1/6FB7:	FA          PLX
C1/6FB8:	C8          INY
C1/6FB9:	C8          INY
C1/6FBA:	E8          INX
C1/6FBB:	C0 14 00    CPY #$0014
C1/6FBE:	D0 E6       BNE $6FA6
C1/6FC0:	7B          TDC
C1/6FC1:	A8          TAY
C1/6FC2:	B9 1E EA    LDA $EA1E,Y
C1/6FC5:	85 2C       STA $2C
C1/6FC7:	B9 FE E9    LDA $E9FE,Y
C1/6FCA:	25 2C       AND $2C
C1/6FCC:	F0 1C       BEQ $6FEA
C1/6FCE:	C8          INY
C1/6FCF:	C8          INY
C1/6FD0:	C4 38       CPY $38
C1/6FD2:	D0 EE       BNE $6FC2
C1/6FD4:	B9 FC E9    LDA $E9FC,Y
C1/6FD7:	29 80 00    AND #$0080
C1/6FDA:	D0 08       BNE $6FE4
C1/6FDC:	B9 FE E9    LDA $E9FE,Y
C1/6FDF:	29 80 00    AND #$0080
C1/6FE2:	F0 06       BEQ $6FEA
C1/6FE4:	7B          TDC
C1/6FE5:	E2 20       SEP #$20           ; 8-bit A
C1/6FE7:	A5 36       LDA $36
C1/6FE9:	60          RTS

C1/6FEA:	7B         	TDC
C1/6FEB:	E2 20      	SEP #$20           ; 8-bit A
C1/6FED:	E6 36      	INC $36
C1/6FEF:	A5 36      	LDA $36
C1/6FF1:	C9 08      	CMP #$08
C1/6FF3:	D0 9D      	BNE $6F92
C1/6FF5:	A9 FF      	LDA #$FF
C1/6FF7:	60         	RTS

C1/6FF8:	AD CB 7B   	LDA $7BCB
C1/6FFB:	F0 03      	BEQ $7000
C1/6FFD:	4C 83 70   	JMP $7083

C1/7000:	A6 0A      	LDX $0A
C1/7002:	F0 28      	BEQ $702C
C1/7004:	A6 0A      	LDX $0A
C1/7006:	EC E2 E9   	CPX $E9E2
C1/7009:	F0 29      	BEQ $7034
C1/700B:	A9 40      	LDA #$40
C1/700D:	8D E4 E9   	STA $E9E4
C1/7010:	AD E1 E9   	LDA $E9E1
C1/7013:	29 0F      	AND #$0F
C1/7015:	0A         	ASL A
C1/7016:	AA         	TAX
C1/7017:	EE E1 E9   	INC $E9E1
C1/701A:	C2 20      	REP #$20
C1/701C:	A5 0A      	LDA $0A
C1/701E:	8D E2 E9   	STA $E9E2
C1/7021:	1D FE E9   	ORA $E9FE,X
C1/7024:	9D FE E9   	STA $E9FE,X
C1/7027:	7B         	TDC
C1/7028:	E2 20      	SEP #$20           ; 8-bit A
C1/702A:	80 08      	BRA $7034
C1/702C:	8E E2 E9   	STX $E9E2
C1/702F:	A9 01      	LDA #$01
C1/7031:	8D E5 E9   	STA $E9E5
C1/7034:	CE E4 E9   	DEC $E9E4
C1/7037:	D0 05      	BNE $703E
C1/7039:	7B         	TDC
C1/703A:	AA         	TAX
C1/703B:	8E FE E9   	STX $E9FE
C1/703E:	AD 68 62   	LDA $6268
C1/7041:	10 39      	BPL $707C
C1/7043:	E6 96      	INC $96       ; sound: select
C1/7045:	20 90 6F   	JSR $6F90
C1/7048:	8D 68 61   	STA $6168
C1/704B:	20 56 6D   	JSR $6D56
C1/704E:	AD 68 61   	LDA $6168
C1/7051:	99 B0 2B   	STA $2BB0,Y
C1/7054:	AD 7D 7B   	LDA $7B7D
C1/7057:	99 B1 2B   	STA $2BB1,Y
C1/705A:	AD 7E 7B   	LDA $7B7E
C1/705D:	99 B2 2B   	STA $2BB2,Y
C1/7060:	AD CA 62   	LDA $62CA
C1/7063:	99 AE 2B   	STA $2BAE,Y
C1/7066:	9C 7D 7B   	STZ $7B7D
C1/7069:	9C 7E 7B   	STZ $7B7E
C1/706C:	9C 7F 7B   	STZ $7B7F
C1/706F:	AD 83 7A   	LDA $7A83
C1/7072:	8D C2 7B   	STA $7BC2
C1/7075:	EE CB 7B   	INC $7BCB
C1/7078:	EE 80 7B   	INC $7B80
C1/707B:	60         	RTS

C1/707C:	AD 69 62   	LDA $6269
C1/707F:	10 14      	BPL $7095
C1/7081:	E6 96      	INC $96       ; sound: select
C1/7083:	9C 7D 7B   	STZ $7B7D
C1/7086:	9C 7E 7B   	STZ $7B7E
C1/7089:	9C 7F 7B   	STZ $7B7F
C1/708C:	AD 83 7A   	LDA $7A83
C1/708F:	8D C2 7B   	STA $7BC2
C1/7092:	9C E9 7A   	STZ $7AE9
C1/7095:	60         	RTS

C1/7096:	20 56 6D   	JSR $6D56
C1/7099:	AD E9 7A   	LDA $7AE9
C1/709C:	F0 35      	BEQ $70D3
C1/709E:	AD 85 7A   	LDA $7A85
C1/70A1:	99 B3 2B   	STA $2BB3,Y
C1/70A4:	AD 47 2F   	LDA $2F47
C1/70A7:	F0 17      	BEQ $70C0
C1/70A9:	AD 7E 7B   	LDA $7B7E
C1/70AC:	29 20      	AND #$20
C1/70AE:	F0 03      	BEQ $70B3
C1/70B0:	AD 47 2F   	LDA $2F47
C1/70B3:	0D 7D 7B   	ORA $7B7D
C1/70B6:	99 B4 2B   	STA $2BB4,Y
C1/70B9:	AD 7E 7B   	LDA $7B7E
C1/70BC:	29 1F      	AND #$1F
C1/70BE:	80 09      	BRA $70C9
C1/70C0:	AD 7D 7B   	LDA $7B7D
C1/70C3:	99 B4 2B   	STA $2BB4,Y
C1/70C6:	AD 7E 7B   	LDA $7B7E
C1/70C9:	99 B5 2B   	STA $2BB5,Y
C1/70CC:	AD CA 62   	LDA $62CA
C1/70CF:	99 AE 2B   	STA $2BAE,Y
C1/70D2:	60         	RTS

C1/70D3:	AD 85 7A   	LDA $7A85
C1/70D6:	99 B0 2B   	STA $2BB0,Y
C1/70D9:	AD 47 2F   	LDA $2F47
C1/70DC:	F0 17      	BEQ $70F5
C1/70DE:	AD 7E 7B   	LDA $7B7E
C1/70E1:	29 20      	AND #$20
C1/70E3:	F0 03      	BEQ $70E8
C1/70E5:	AD 47 2F   	LDA $2F47
C1/70E8:	0D 7D 7B   	ORA $7B7D
C1/70EB:	99 B1 2B   	STA $2BB1,Y
C1/70EE:	AD 7E 7B   	LDA $7B7E
C1/70F1:	29 1F      	AND #$1F
C1/70F3:	80 09      	BRA $70FE
C1/70F5:	AD 7D 7B   	LDA $7B7D
C1/70F8:	99 B1 2B   	STA $2BB1,Y
C1/70FB:	AD 7E 7B   	LDA $7B7E
C1/70FE:	99 B2 2B   	STA $2BB2,Y
C1/7101:	AD E8 7A   	LDA $7AE8
C1/7104:	D0 06      	BNE $710C
C1/7106:	AD CA 62   	LDA $62CA
C1/7109:	99 AE 2B   	STA $2BAE,Y
C1/710C:	B9 AF 2B   	LDA $2BAF,Y
C1/710F:	C9 08      	CMP #$08
C1/7111:	F0 04      	BEQ $7117
C1/7113:	C9 01      	CMP #$01
C1/7115:	D0 1C      	BNE $7133
C1/7117:	AD 1E 7A   	LDA $7A1E
C1/711A:	F0 4B      	BEQ $7167
C1/711C:	20 48 8E   	JSR $8E48       ; X = character equip data index
C1/711F:	AC CA 62   	LDY $62CA       ; character index
C1/7122:	B9 4B 89   	LDA $894B,Y     ; cursor column position
C1/7125:	29 01      	AND #$01        ; is it set?
C1/7127:	F0 1F      	BEQ $7148       ; branch if left column
C1/7129:	BD 9D 2B   	LDA $2B9D,X     ; left-hand quantity
C1/712C:	C9 02      	CMP #$02        ; less than 2?
C1/712E:	90 04      	BCC $7134       ; branch if only one
C1/7130:	DE 9D 2B   	DEC $2B9D,X     ; decrement quantity (never runs [?])
C1/7133:	60         	RTS

; Remove left-hand equipment
C1/7134:	A9 FF      	LDA #$FF
C1/7136:	9D 9A 2B   	STA $2B9A,X     ; clear left-hand equip
C1/7139:	A9 80      	LDA #$80
C1/713B:	9D 9B 2B   	STA $2B9B,X     ; set unusable in battle
C1/713E:	9E 9C 2B   	STZ $2B9C,X     ; zero quantity
C1/7141:	9E 9D 2B   	STZ $2B9D,X     ; zero targeting
C1/7144:	9E 9E 2B   	STZ $2B9E,X     ; zero equip blacklist
C1/7147:	60         	RTS

; Reduce right-hand equipment
C1/7148:	BD 89 2B   	LDA $2B89,X     ; right-hand quantity
C1/714B:	C9 02      	CMP #$02        ; less than 2?
C1/714D:	90 04      	BCC $7153       ; branch if only one
C1/714F:	DE 89 2B   	DEC $2B89,X     ; decrement quantity (never runs [?])
C1/7152:	60         	RTS

; Remove right-hand equipment
C1/7153:	A9 FF      	LDA #$FF
C1/7155:	9D 86 2B   	STA $2B86,X     ; clear right-hand equip
C1/7158:	A9 80      	LDA #$80
C1/715A:	9D 87 2B   	STA $2B87,X     ; set unusable in battle
C1/715D:	9E 88 2B   	STZ $2B88,X     ; zero quantity
C1/7160:	9E 89 2B   	STZ $2B89,X     ; zero targeting
C1/7163:	9E 8A 2B   	STZ $2B8A,X     ; zero equip blacklist
C1/7166:	60         	RTS

C1/7167:	7B          TDC             ; A = 0000
C1/7168:	AA          TAX             ; X = 0000
C1/7169:	B9 B0 2B    LDA $2BB0,Y     ; using item
C1/716C:	DD 86 26    CMP $2686,X     ; check battle inventory slot
C1/716F:	F0 0B       BEQ $717C       ; branch if match
C1/7171:	E8          INX
C1/7172:	E8          INX
C1/7173:	E8          INX
C1/7174:	E8          INX
C1/7175:	E8          INX             ; increment to next 5-byte block
C1/7176:	E0 00 05    CPX #$0500      ; 255 slots
C1/7179:	D0 F1       BNE $716C       ; loop through all slots
C1/717B:	60          RTS

; Item match found
C1/717C:	BD 89 26    LDA $2689,X     ; item quantity
C1/717F:	C9 02       CMP #$02
C1/7181:	90 04       BCC $7187       ; branch if only 1 left
C1/7183:	DE 89 26    DEC $2689,X     ; else decrement quantity
C1/7186:	60          RTS

; Use last of item quantity
C1/7187:	A9 FF      	LDA #$FF
C1/7189:	9D 86 26   	STA $2686,X     ; clear item slot
C1/718C:	A9 80      	LDA #$80
C1/718E:	9D 87 26   	STA $2687,X     ; set "not usable in battle"
C1/7191:	9E 88 26   	STZ $2688,X     ; zero targeting flags
C1/7194:	9E 89 26   	STZ $2689,X     ; zero quantity
C1/7197:	9E 8A 26   	STZ $268A,X     ; zero equip blacklist
C1/719A:	60         	RTS

C1/719B:	A9 FF      	LDA #$FF
C1/719D:	85 73      	STA $73
C1/719F:	85 74      	STA $74
C1/71A1:	85 75      	STA $75
C1/71A3:	20 72 73   	JSR $7372
C1/71A6:	0A         	ASL A
C1/71A7:	AA         	TAX
C1/71A8:	C2 20      	REP #$20
C1/71AA:	BD 0F 80   	LDA $800F,X
C1/71AD:	4A         	LSR A
C1/71AE:	4A         	LSR A
C1/71AF:	4A         	LSR A
C1/71B0:	85 36      	STA $36
C1/71B2:	BD 1B 80   	LDA $801B,X
C1/71B5:	4A         	LSR A
C1/71B6:	4A         	LSR A
C1/71B7:	4A         	LSR A
C1/71B8:	85 38      	STA $38
C1/71BA:	7B         	TDC
C1/71BB:	E2 20      	SEP #$20           ; 8-bit A
C1/71BD:	60         	RTS

C1/71BE:	AD CE 7A   	LDA $7ACE
C1/71C1:	AA         	TAX
C1/71C2:	BD 79 7B   	LDA $7B79,X
C1/71C5:	48         	PHA
C1/71C6:	98         	TYA
C1/71C7:	18         	CLC
C1/71C8:	7F 67 77 C1	ADC $C17767,X
C1/71CC:	AA         	TAX
C1/71CD:	BD 86 7A   	LDA $7A86,X
C1/71D0:	AA         	TAX
C1/71D1:	68         	PLA
C1/71D2:	25 92      	AND $92
C1/71D4:	3F 61 77 C1	AND $C17761,X
C1/71D8:	F0 10      	BEQ $71EA
C1/71DA:	AD CE 7A   	LDA $7ACE
C1/71DD:	AA         	TAX
C1/71DE:	98         	TYA
C1/71DF:	18         	CLC
C1/71E0:	7F 67 77 C1	ADC $C17767,X
C1/71E4:	AA         	TAX
C1/71E5:	BD 86 7A   	LDA $7A86,X
C1/71E8:	10 02      	BPL $71EC

C1/71EA:	18         	CLC
C1/71EB:	60         	RTS

C1/71EC:	0A         	ASL A
C1/71ED:	AA         	TAX
C1/71EE:	C2 20      	REP #$20
C1/71F0:	BD 0F 80   	LDA $800F,X
C1/71F3:	4A         	LSR A
C1/71F4:	4A         	LSR A
C1/71F5:	4A         	LSR A
C1/71F6:	85 3A      	STA $3A
C1/71F8:	BD 1B 80   	LDA $801B,X
C1/71FB:	4A         	LSR A
C1/71FC:	4A         	LSR A
C1/71FD:	4A         	LSR A
C1/71FE:	85 3C      	STA $3C
C1/7200:	A5 3A      	LDA $3A
C1/7202:	38         	SEC
C1/7203:	E5 36      	SBC $36
C1/7205:	85 3E      	STA $3E
C1/7207:	A5 3C      	LDA $3C
C1/7209:	38         	SEC
C1/720A:	E5 38      	SBC $38
C1/720C:	85 40      	STA $40
C1/720E:	7B         	TDC
C1/720F:	E2 20      	SEP #$20           ; 8-bit A
C1/7211:	38         	SEC
C1/7212:	60         	RTS

C1/7213:	C2 20      	REP #$20
C1/7215:	A5 3E      	LDA $3E
C1/7217:	10 06      	BPL $721F
C1/7219:	49 FF FF   	EOR #$FFFF
C1/721C:	1A         	INC A
C1/721D:	85 3E      	STA $3E
C1/721F:	A5 40      	LDA $40
C1/7221:	10 06      	BPL $7229
C1/7223:	49 FF FF   	EOR #$FFFF
C1/7226:	1A         	INC A
C1/7227:	85 40      	STA $40
C1/7229:	7B         	TDC
C1/722A:	E2 20      	SEP #$20           ; 8-bit A
C1/722C:	A5 3E      	LDA $3E
C1/722E:	85 2C      	STA $2C
C1/7230:	85 2E      	STA $2E
C1/7232:	20 B0 18   	JSR $18B0
C1/7235:	A6 30      	LDX $30
C1/7237:	DA         	PHX
C1/7238:	A5 40      	LDA $40
C1/723A:	85 2C      	STA $2C
C1/723C:	85 2E      	STA $2E
C1/723E:	20 B0 18   	JSR $18B0
C1/7241:	C2 20      	REP #$20
C1/7243:	68         	PLA
C1/7244:	18         	CLC
C1/7245:	65 30      	ADC $30
C1/7247:	C5 73      	CMP $73
C1/7249:	B0 09      	BCS $7254
C1/724B:	85 73      	STA $73
C1/724D:	7B         	TDC
C1/724E:	E2 20      	SEP #$20           ; 8-bit A
C1/7250:	98         	TYA
C1/7251:	85 75      	STA $75
C1/7253:	60         	RTS

C1/7254:	7B         	TDC
C1/7255:	E2 20      	SEP #$20           ; 8-bit A
C1/7257:	60         	RTS

C1/7258:	20 9B 71    JSR $719B
C1/725B:	7B          TDC
C1/725C:	A8          TAY
C1/725D:	20 BE 71    JSR $71BE
C1/7260:	B0 0A       BCS $726C
C1/7262:	7B          TDC
C1/7263:	E2 20       SEP #$20           ; 8-bit A
C1/7265:	C8          INY
C1/7266:	C0 06 00    CPY #$0006
C1/7269:	D0 F2       BNE $725D
C1/726B:	60          RTS

C1/726C:	C2 20       REP #$20
C1/726E:	A5 40       LDA $40
C1/7270:	10 F0       BPL $7262
C1/7272:	A5 3E       LDA $3E
C1/7274:	10 0A       BPL $7280
C1/7276:	A5 40       LDA $40
C1/7278:	C5 3E       CMP $3E
C1/727A:	F0 0D       BEQ $7289
C1/727C:	90 0B       BCC $7289
C1/727E:	80 E2       BRA $7262
C1/7280:	A5 40       LDA $40
C1/7282:	18          CLC
C1/7283:	65 3E       ADC $3E
C1/7285:	F0 02       BEQ $7289
C1/7287:	10 D9       BPL $7262
C1/7289:	7B          TDC
C1/728A:	E2 20       SEP #$20           ; 8-bit A
C1/728C:	20 13 72    JSR $7213
C1/728F:	4C 62 72    JMP $7262

C1/7292:	20 9B 71   	JSR $719B
C1/7295:	7B         	TDC
C1/7296:	A8         	TAY
C1/7297:	20 BE 71   	JSR $71BE
C1/729A:	B0 0A      	BCS $72A6
C1/729C:	7B         	TDC
C1/729D:	E2 20      	SEP #$20           ; 8-bit A
C1/729F:	C8         	INY
C1/72A0:	C0 06 00   	CPY #$0006
C1/72A3:	D0 F2      	BNE $7297
C1/72A5:	60         	RTS

C1/72A6:	C2 20      	REP #$20
C1/72A8:	A5 40      	LDA $40
C1/72AA:	F0 F0      	BEQ $729C
C1/72AC:	30 EE      	BMI $729C
C1/72AE:	A5 3E      	LDA $3E
C1/72B0:	30 0A      	BMI $72BC
C1/72B2:	A5 3E      	LDA $3E
C1/72B4:	C5 40      	CMP $40
C1/72B6:	90 0D      	BCC $72C5
C1/72B8:	F0 0B      	BEQ $72C5
C1/72BA:	80 E0      	BRA $729C
C1/72BC:	A5 40      	LDA $40
C1/72BE:	18         	CLC
C1/72BF:	65 3E      	ADC $3E
C1/72C1:	F0 02      	BEQ $72C5
C1/72C3:	30 D7      	BMI $729C
C1/72C5:	7B         	TDC
C1/72C6:	E2 20      	SEP #$20           ; 8-bit A
C1/72C8:	20 13 72   	JSR $7213
C1/72CB:	4C 9C 72   	JMP $729C

C1/72CE:	20 9B 71   	JSR $719B
C1/72D1:	7B         	TDC
C1/72D2:	A8         	TAY
C1/72D3:	20 BE 71   	JSR $71BE
C1/72D6:	B0 0A      	BCS $72E2
C1/72D8:	7B         	TDC
C1/72D9:	E2 20      	SEP #$20           ; 8-bit A
C1/72DB:	C8         	INY
C1/72DC:	C0 06 00   	CPY #$0006
C1/72DF:	D0 F2      	BNE $72D3
C1/72E1:	60         	RTS

C1/72E2:	C2 20      	REP #$20
C1/72E4:	A5 3E      	LDA $3E
C1/72E6:	10 F0      	BPL $72D8
C1/72E8:	A5 40      	LDA $40
C1/72EA:	10 0A      	BPL $72F6
C1/72EC:	A5 3E      	LDA $3E
C1/72EE:	C5 40      	CMP $40
C1/72F0:	90 0D      	BCC $72FF
C1/72F2:	F0 0B      	BEQ $72FF
C1/72F4:	80 E2      	BRA $72D8
C1/72F6:	A5 40      	LDA $40
C1/72F8:	18         	CLC
C1/72F9:	65 3E      	ADC $3E
C1/72FB:	F0 02      	BEQ $72FF
C1/72FD:	10 D9      	BPL $72D8
C1/72FF:	7B         	TDC
C1/7300:	E2 20      	SEP #$20           ; 8-bit A
C1/7302:	20 13 72   	JSR $7213
C1/7305:	4C D8 72   	JMP $72D8

C1/7308:	20 9B 71   	JSR $719B
C1/730B:	7B         	TDC
C1/730C:	A8         	TAY
C1/730D:	20 BE 71   	JSR $71BE
C1/7310:	B0 0A      	BCS $731C
C1/7312:	7B         	TDC
C1/7313:	E2 20      	SEP #$20           ; 8-bit A
C1/7315:	C8         	INY
C1/7316:	C0 06 00   	CPY #$0006
C1/7319:	D0 F2      	BNE $730D
C1/731B:	60         	RTS

C1/731C:	C2 20      	REP #$20
C1/731E:	A5 3E      	LDA $3E
C1/7320:	F0 F0      	BEQ $7312
C1/7322:	30 EE      	BMI $7312
C1/7324:	A5 40      	LDA $40
C1/7326:	30 0A      	BMI $7332
C1/7328:	A5 40      	LDA $40
C1/732A:	C5 3E      	CMP $3E
C1/732C:	F0 0D      	BEQ $733B
C1/732E:	90 0B      	BCC $733B
C1/7330:	80 E0      	BRA $7312
C1/7332:	A5 40      	LDA $40
C1/7334:	18         	CLC
C1/7335:	65 3E      	ADC $3E
C1/7337:	F0 02      	BEQ $733B
C1/7339:	30 D7      	BMI $7312
C1/733B:	7B         	TDC
C1/733C:	E2 20      	SEP #$20           ; 8-bit A
C1/733E:	20 13 72   	JSR $7213
C1/7341:	4C 12 73   	JMP $7312

C1/7344:	AD CF 7A   	LDA $7ACF
C1/7347:	1A         	INC A
C1/7348:	29 03      	AND #$03
C1/734A:	8D CF 7A   	STA $7ACF
C1/734D:	D0 0A      	BNE $7359
C1/734F:	AD CE 7A   	LDA $7ACE
C1/7352:	1A         	INC A
C1/7353:	1A         	INC A
C1/7354:	29 03      	AND #$03
C1/7356:	8D CE 7A   	STA $7ACE
C1/7359:	60         	RTS

C1/735A:	AD CF 7A   	LDA $7ACF
C1/735D:	3A         	DEC A
C1/735E:	29 03      	AND #$03
C1/7360:	8D CF 7A   	STA $7ACF
C1/7363:	C9 03      	CMP #$03
C1/7365:	D0 0A      	BNE $7371
C1/7367:	AD CE 7A   	LDA $7ACE
C1/736A:	3A         	DEC A
C1/736B:	3A         	DEC A
C1/736C:	29 03      	AND #$03
C1/736E:	8D CE 7A   	STA $7ACE
C1/7371:	60         	RTS

C1/7372:	AD CE 7A   	LDA $7ACE
C1/7375:	A8         	TAY
C1/7376:	AA         	TAX
C1/7377:	BF 67 77 C1	LDA $C17767,X    ; Data
C1/737B:	18         	CLC
C1/737C:	6D CF 7A   	ADC $7ACF
C1/737F:	AA         	TAX
C1/7380:	BD 86 7A   	LDA $7A86,X
C1/7383:	60         	RTS

C1/7384:	AD CE 7A   	LDA $7ACE
C1/7387:	29 01      	AND #$01
C1/7389:	F0 28      	BEQ $73B3
C1/738B:	20 5A 73   	JSR $735A
C1/738E:	20 72 73   	JSR $7372
C1/7391:	30 F8      	BMI $738B
C1/7393:	AA         	TAX
C1/7394:	B9 79 7B   	LDA $7B79,Y
C1/7397:	3F 61 77 C1	AND $C17761,X
C1/739B:	2D 1D 20   	AND $201D
C1/739E:	2D AC 61   	AND $61AC
C1/73A1:	2D AD 61   	AND $61AD
C1/73A4:	2D 93 61   	AND $6193
C1/73A7:	F0 E2      	BEQ $738B
C1/73A9:	8D 7D 7B   	STA $7B7D
C1/73AC:	9C 7E 7B   	STZ $7B7E
C1/73AF:	9C 7F 7B   	STZ $7B7F
C1/73B2:	60         	RTS

C1/73B3:	20 58 72   	JSR $7258
C1/73B6:	A5 75      	LDA $75
C1/73B8:	C9 FF      	CMP #$FF
C1/73BA:	F0 19      	BEQ $73D5
C1/73BC:	8D CF 7A   	STA $7ACF
C1/73BF:	20 72 73   	JSR $7372
C1/73C2:	AA         	TAX
C1/73C3:	B9 79 7B   	LDA $7B79,Y
C1/73C6:	25 92      	AND $92
C1/73C8:	3F 61 77 C1	AND $C17761,X
C1/73CC:	8D 7E 7B   	STA $7B7E
C1/73CF:	9C 7D 7B   	STZ $7B7D
C1/73D2:	9C 7F 7B   	STZ $7B7F
C1/73D5:	60         	RTS

C1/73D6:	AD CE 7A   	LDA $7ACE
C1/73D9:	29 01      	AND #$01
C1/73DB:	F0 28      	BEQ $7405
C1/73DD:	20 44 73   	JSR $7344
C1/73E0:	20 72 73   	JSR $7372
C1/73E3:	30 F8      	BMI $73DD
C1/73E5:	AA         	TAX
C1/73E6:	B9 79 7B   	LDA $7B79,Y
C1/73E9:	3F 61 77 C1	AND $C17761,X
C1/73ED:	2D 1D 20   	AND $201D
C1/73F0:	2D AC 61   	AND $61AC
C1/73F3:	2D AD 61   	AND $61AD
C1/73F6:	2D 93 61   	AND $6193
C1/73F9:	F0 E2      	BEQ $73DD
C1/73FB:	8D 7D 7B   	STA $7B7D
C1/73FE:	9C 7E 7B   	STZ $7B7E
C1/7401:	9C 7F 7B   	STZ $7B7F
C1/7404:	60         	RTS

C1/7405:	20 92 72   	JSR $7292
C1/7408:	A5 75      	LDA $75
C1/740A:	C9 FF      	CMP #$FF
C1/740C:	F0 19      	BEQ $7427
C1/740E:	8D CF 7A   	STA $7ACF
C1/7411:	20 72 73   	JSR $7372
C1/7414:	AA         	TAX
C1/7415:	B9 79 7B   	LDA $7B79,Y
C1/7418:	25 92      	AND $92
C1/741A:	3F 61 77 C1	AND $C17761,X
C1/741E:	8D 7E 7B   	STA $7B7E
C1/7421:	9C 7D 7B   	STZ $7B7D
C1/7424:	9C 7F 7B   	STZ $7B7F
C1/7427:	60         	RTS

C1/7428:	BF74
C1/742A:	E974        ; RTS
C1/742C:	BF74
C1/742E:	EA74

C1/7430:	3874        ; RTS ...
C1/7432:	3974
C1/7434:	3974
C1/7436:	6374

C1/7438:	60          RTS

C1/7439:	AD 84 7A   	LDA $7A84
C1/743C:	29 02      	AND #$02
C1/743E:	D0 1D      	BNE $745D
C1/7440:	AD 7B 7B   	LDA $7B7B
C1/7443:	25 92      	AND $92
C1/7445:	F0 16      	BEQ $745D
C1/7447:	EE CE 7A   	INC $7ACE
C1/744A:	20 34 79   	JSR $7934
C1/744D:	90 0E      	BCC $745D
C1/744F:	8D 7E 7B   	STA $7B7E
C1/7452:	9C 7D 7B   	STZ $7B7D
C1/7455:	9C 7F 7B   	STZ $7B7F
C1/7458:	8A         	TXA
C1/7459:	8D CF 7A   	STA $7ACF
C1/745C:	60         	RTS

C1/745D:	A9 01      	LDA #$01
C1/745F:	8D CE 7A   	STA $7ACE
C1/7462:	60         	RTS

C1/7463:	AD CE 7A   	LDA $7ACE
C1/7466:	C9 03      	CMP #$03
C1/7468:	F0 54      	BEQ $74BE
C1/746A:	AD 84 7A   	LDA $7A84
C1/746D:	29 02      	AND #$02
C1/746F:	D0 1F      	BNE $7490
C1/7471:	AD 7B 7B   	LDA $7B7B
C1/7474:	25 92      	AND $92
C1/7476:	F0 18      	BEQ $7490
C1/7478:	A9 02      	LDA #$02
C1/747A:	8D CE 7A   	STA $7ACE
C1/747D:	20 34 79   	JSR $7934
C1/7480:	90 37      	BCC $74B9
C1/7482:	8D 7E 7B   	STA $7B7E
C1/7485:	9C 7D 7B   	STZ $7B7D
C1/7488:	9C 7F 7B   	STZ $7B7F
C1/748B:	8A         	TXA
C1/748C:	8D CF 7A   	STA $7ACF
C1/748F:	60         	RTS

C1/7490:	AD 7C 7B   	LDA $7B7C
C1/7493:	2D 1D 20   	AND $201D
C1/7496:	2D AC 61   	AND $61AC
C1/7499:	2D AD 61   	AND $61AD
C1/749C:	2D 93 61   	AND $6193
C1/749F:	F0 18      	BEQ $74B9
C1/74A1:	A9 03      	LDA #$03
C1/74A3:	8D CE 7A   	STA $7ACE
C1/74A6:	20 58 79   	JSR $7958
C1/74A9:	90 0E      	BCC $74B9
C1/74AB:	8D 7D 7B   	STA $7B7D
C1/74AE:	9C 7E 7B   	STZ $7B7E
C1/74B1:	9C 7F 7B   	STZ $7B7F
C1/74B4:	8A         	TXA
C1/74B5:	8D CF 7A   	STA $7ACF
C1/74B8:	60         	RTS

C1/74B9:	A9 01      	LDA #$01
C1/74BB:	8D CE 7A   	STA $7ACE
C1/74BE:	60         	RTS

C1/74BF:	AD 84 7A   	LDA $7A84
C1/74C2:	29 02      	AND #$02
C1/74C4:	D0 1D      	BNE $74E3
C1/74C6:	AD 79 7B   	LDA $7B79
C1/74C9:	25 92      	AND $92
C1/74CB:	F0 16      	BEQ $74E3
C1/74CD:	CE CE 7A   	DEC $7ACE
C1/74D0:	20 22 79   	JSR $7922
C1/74D3:	90 0E      	BCC $74E3
C1/74D5:	8D 7E 7B   	STA $7B7E
C1/74D8:	9C 7D 7B   	STZ $7B7D
C1/74DB:	9C 7F 7B   	STZ $7B7F
C1/74DE:	8A         	TXA
C1/74DF:	8D CF 7A   	STA $7ACF
C1/74E2:	60         	RTS

C1/74E3:	A9 01      	LDA #$01
C1/74E5:	8D CE 7A   	STA $7ACE
C1/74E8:	60         	RTS

C1/74E9:	60         	RTS

C1/74EA:	AD CE 7A   	LDA $7ACE
C1/74ED:	C9 01      	CMP #$01
C1/74EF:	F0 52      	BEQ $7543
C1/74F1:	AD 84 7A   	LDA $7A84
C1/74F4:	29 02      	AND #$02
C1/74F6:	D0 1D      	BNE $7515
C1/74F8:	AD 7B 7B   	LDA $7B7B
C1/74FB:	25 92      	AND $92
C1/74FD:	F0 16      	BEQ $7515
C1/74FF:	CE CE 7A   	DEC $7ACE
C1/7502:	20 3A 79   	JSR $793A
C1/7505:	90 37      	BCC $753E
C1/7507:	8D 7E 7B   	STA $7B7E
C1/750A:	9C 7D 7B   	STZ $7B7D
C1/750D:	9C 7F 7B   	STZ $7B7F
C1/7510:	8A         	TXA
C1/7511:	8D CF 7A   	STA $7ACF
C1/7514:	60         	RTS

C1/7515:	AD 7A 7B   	LDA $7B7A
C1/7518:	2D 1D 20   	AND $201D
C1/751B:	2D AC 61   	AND $61AC
C1/751E:	2D AD 61   	AND $61AD
C1/7521:	2D 93 61   	AND $6193
C1/7524:	F0 18      	BEQ $753E
C1/7526:	A9 01      	LDA #$01
C1/7528:	8D CE 7A   	STA $7ACE
C1/752B:	20 40 79   	JSR $7940
C1/752E:	90 0E      	BCC $753E
C1/7530:	8D 7D 7B   	STA $7B7D
C1/7533:	9C 7E 7B   	STZ $7B7E
C1/7536:	9C 7F 7B   	STZ $7B7F
C1/7539:	8A         	TXA
C1/753A:	8D CF 7A   	STA $7ACF
C1/753D:	60         	RTS

C1/753E:	A9 03      	LDA #$03
C1/7540:	8D CE 7A   	STA $7ACE
C1/7543:	60         	RTS

C1/7544:	6676    	; JMP $757A ...
C1/7546:	6976
C1/7548:	A776
C1/754A:	FE76

C1/754C:	A375
C1/754E:	A075    	; JMP $7554 ...
C1/7550:	D875
C1/7552:	3176

C1/7554:	20 08 73   	JSR $7308
C1/7557:	A5 75      	LDA $75
C1/7559:	C9 FF      	CMP #$FF
C1/755B:	F0 1B      	BEQ $7578
C1/755D:	8D CF 7A   	STA $7ACF
C1/7560:	20 72 73   	JSR $7372
C1/7563:	AA         	TAX
C1/7564:	B9 79 7B   	LDA $7B79,Y
C1/7567:	3F 61 77 C1	AND $C17761,X
C1/756B:	25 92      	AND $92
C1/756D:	8D 7E 7B   	STA $7B7E
C1/7570:	9C 7D 7B   	STZ $7B7D
C1/7573:	9C 7F 7B   	STZ $7B7F
C1/7576:	38         	SEC
C1/7577:	60         	RTS

C1/7578:	18         	CLC
C1/7579:	60         	RTS

C1/757A:	20 CE 72   	JSR $72CE
C1/757D:	A5 75      	LDA $75
C1/757F:	C9 FF      	CMP #$FF
C1/7581:	F0 1B      	BEQ $759E
C1/7583:	8D CF 7A   	STA $7ACF
C1/7586:	20 72 73   	JSR $7372
C1/7589:	AA         	TAX
C1/758A:	B9 79 7B   	LDA $7B79,Y
C1/758D:	3F 61 77 C1	AND $C17761,X
C1/7591:	25 92      	AND $92
C1/7593:	8D 7E 7B   	STA $7B7E
C1/7596:	9C 7D 7B   	STZ $7B7D
C1/7599:	9C 7F 7B   	STZ $7B7F
C1/759C:	38         	SEC
C1/759D:	60         	RTS

C1/759E:	18         	CLC
C1/759F:	60         	RTS

C1/75A0:	4C 54 75   	JMP $7554

C1/75A3:	20 54 75   	JSR $7554
C1/75A6:	B0 2F      	BCS $75D7
C1/75A8:	AD 84 7A   	LDA $7A84
C1/75AB:	29 02      	AND #$02
C1/75AD:	D0 28      	BNE $75D7
C1/75AF:	AD 7A 7B   	LDA $7B7A
C1/75B2:	2D 1D 20   	AND $201D
C1/75B5:	2D AC 61   	AND $61AC
C1/75B8:	2D AD 61   	AND $61AD
C1/75BB:	2D 93 61   	AND $6193
C1/75BE:	F0 17      	BEQ $75D7
C1/75C0:	20 40 79   	JSR $7940
C1/75C3:	90 12      	BCC $75D7
C1/75C5:	8D 7D 7B   	STA $7B7D
C1/75C8:	9C 7E 7B   	STZ $7B7E
C1/75CB:	9C 7F 7B   	STZ $7B7F
C1/75CE:	A9 01      	LDA #$01
C1/75D0:	8D CE 7A   	STA $7ACE
C1/75D3:	8A         	TXA
C1/75D4:	8D CF 7A   	STA $7ACF
C1/75D7:	60         	RTS

C1/75D8:	20 54 75   	JSR $7554
C1/75DB:	B0 53      	BCS $7630
C1/75DD:	AD CE 7A   	LDA $7ACE
C1/75E0:	D0 4E      	BNE $7630
C1/75E2:	AD 84 7A   	LDA $7A84
C1/75E5:	29 02      	AND #$02
C1/75E7:	D0 29      	BNE $7612
C1/75E9:	AD 7A 7B   	LDA $7B7A
C1/75EC:	2D 1D 20   	AND $201D
C1/75EF:	2D AC 61   	AND $61AC
C1/75F2:	2D AD 61   	AND $61AD
C1/75F5:	2D 93 61   	AND $6193
C1/75F8:	F0 18      	BEQ $7612
C1/75FA:	20 40 79   	JSR $7940
C1/75FD:	90 13      	BCC $7612
C1/75FF:	8D 7D 7B   	STA $7B7D
C1/7602:	9C 7E 7B   	STZ $7B7E
C1/7605:	9C 7F 7B   	STZ $7B7F
C1/7608:	A9 01      	LDA #$01
C1/760A:	8D CE 7A   	STA $7ACE
C1/760D:	8A         	TXA
C1/760E:	8D CF 7A   	STA $7ACF
C1/7611:	60         	RTS

C1/7612:	AD 7B 7B   	LDA $7B7B
C1/7615:	25 92      	AND $92
C1/7617:	F0 17      	BEQ $7630
C1/7619:	20 34 79   	JSR $7934
C1/761C:	90 12      	BCC $7630
C1/761E:	8D 7E 7B   	STA $7B7E
C1/7621:	9C 7D 7B   	STZ $7B7D
C1/7624:	9C 7F 7B   	STZ $7B7F
C1/7627:	8A         	TXA
C1/7628:	8D CF 7A   	STA $7ACF
C1/762B:	A9 02      	LDA #$02
C1/762D:	8D CE 7A   	STA $7ACE
C1/7630:	60         	RTS

C1/7631:	20 54 75   	JSR $7554
C1/7634:	B0 2F      	BCS $7665
C1/7636:	AD 84 7A   	LDA $7A84
C1/7639:	29 02      	AND #$02
C1/763B:	D0 28      	BNE $7665
C1/763D:	AD 7C 7B   	LDA $7B7C
C1/7640:	2D 1D 20   	AND $201D
C1/7643:	2D AC 61   	AND $61AC
C1/7646:	2D AD 61   	AND $61AD
C1/7649:	2D 93 61   	AND $6193
C1/764C:	F0 17      	BEQ $7665
C1/764E:	20 58 79   	JSR $7958
C1/7651:	90 12      	BCC $7665
C1/7653:	8D 7D 7B   	STA $7B7D
C1/7656:	9C 7E 7B   	STZ $7B7E
C1/7659:	9C 7F 7B   	STZ $7B7F
C1/765C:	A9 03      	LDA #$03
C1/765E:	8D CE 7A   	STA $7ACE
C1/7661:	8A         	TXA
C1/7662:	8D CF 7A   	STA $7ACF
C1/7665:	60         	RTS

C1/7666:	4C 7A 75   	JMP $757A

C1/7669:	20 7A 75   	JSR $757A
C1/766C:	B0 33      	BCS $76A1
C1/766E:	AD 84 7A   	LDA $7A84
C1/7671:	29 02      	AND #$02
C1/7673:	D0 2C      	BNE $76A1
C1/7675:	AD 7A 7B   	LDA $7B7A
C1/7678:	2D 1D 20   	AND $201D
C1/767B:	2D AC 61   	AND $61AC
C1/767E:	2D AD 61   	AND $61AD
C1/7681:	2D 93 61   	AND $6193
C1/7684:	F0 1B      	BEQ $76A1
C1/7686:	CE CE 7A   	DEC $7ACE
C1/7689:	20 40 79   	JSR $7940
C1/768C:	90 13      	BCC $76A1
C1/768E:	8D 7D 7B   	STA $7B7D
C1/7691:	9C 7E 7B   	STZ $7B7E
C1/7694:	9C 7F 7B   	STZ $7B7F
C1/7697:	A9 01      	LDA #$01
C1/7699:	8D CE 7A   	STA $7ACE
C1/769C:	8A         	TXA
C1/769D:	8D CF 7A   	STA $7ACF
C1/76A0:	60         	RTS

C1/76A1:	A9 02      	LDA #$02
C1/76A3:	8D CE 7A   	STA $7ACE
C1/76A6:	60         	RTS

C1/76A7:	20 7A 75   	JSR $757A
C1/76AA:	B0 51      	BCS $76FD
C1/76AC:	AD CE 7A   	LDA $7ACE
C1/76AF:	F0 4C      	BEQ $76FD
C1/76B1:	AD 84 7A   	LDA $7A84
C1/76B4:	29 02      	AND #$02
C1/76B6:	D0 29      	BNE $76E1
C1/76B8:	AD 7A 7B   	LDA $7B7A
C1/76BB:	2D 1D 20   	AND $201D
C1/76BE:	2D AC 61   	AND $61AC
C1/76C1:	2D AD 61   	AND $61AD
C1/76C4:	2D 93 61   	AND $6193
C1/76C7:	F0 18      	BEQ $76E1
C1/76C9:	20 40 79   	JSR $7940
C1/76CC:	90 13      	BCC $76E1
C1/76CE:	8D 7D 7B   	STA $7B7D
C1/76D1:	9C 7E 7B   	STZ $7B7E
C1/76D4:	9C 7F 7B   	STZ $7B7F
C1/76D7:	A9 01      	LDA #$01
C1/76D9:	8D CE 7A   	STA $7ACE
C1/76DC:	8A         	TXA
C1/76DD:	8D CF 7A   	STA $7ACF
C1/76E0:	60         	RTS

C1/76E1:	AD 79 7B   	LDA $7B79
C1/76E4:	25 92      	AND $92
C1/76E6:	F0 15      	BEQ $76FD
C1/76E8:	20 22 79   	JSR $7922
C1/76EB:	90 10      	BCC $76FD
C1/76ED:	8D 7E 7B   	STA $7B7E
C1/76F0:	9C 7D 7B   	STZ $7B7D
C1/76F3:	9C 7F 7B   	STZ $7B7F
C1/76F6:	9C CE 7A   	STZ $7ACE
C1/76F9:	8A         	TXA
C1/76FA:	8D CF 7A   	STA $7ACF
C1/76FD:	60         	RTS

C1/76FE:	20 7A 75   	JSR $757A
C1/7701:	B0 2F      	BCS $7732
C1/7703:	AD 84 7A   	LDA $7A84
C1/7706:	29 02      	AND #$02
C1/7708:	D0 28      	BNE $7732
C1/770A:	AD 7A 7B   	LDA $7B7A
C1/770D:	2D 1D 20   	AND $201D
C1/7710:	2D AC 61   	AND $61AC
C1/7713:	2D AD 61   	AND $61AD
C1/7716:	2D 93 61   	AND $6193
C1/7719:	F0 17      	BEQ $7732
C1/771B:	20 40 79   	JSR $7940
C1/771E:	90 12      	BCC $7732
C1/7720:	8D 7D 7B   	STA $7B7D
C1/7723:	9C 7E 7B   	STZ $7B7E
C1/7726:	9C 7F 7B   	STZ $7B7F
C1/7729:	A9 01      	LDA #$01
C1/772B:	8D CE 7A   	STA $7ACE
C1/772E:	8A         	TXA
C1/772F:	8D CF 7A   	STA $7ACF
C1/7732:	60         	RTS

C1/7733:	AD CE 7A   	LDA $7ACE
C1/7736:	29 01      	AND #$01
C1/7738:	F0 08      	BEQ $7742
C1/773A:	AD 1F 20   	LDA $201F
C1/773D:	0A         	ASL A
C1/773E:	AA         	TAX
C1/773F:	7C 28 74   	JMP ($7428,X)  ; Jump table

C1/7742:	AD 1F 20   	LDA $201F
C1/7745:	0A         	ASL A
C1/7746:	AA         	TAX
C1/7747:	7C 44 75   	JMP ($7544,X)  ; Jump table

C1/774A:	AD CE 7A   	LDA $7ACE
C1/774D:	29 01      	AND #$01
C1/774F:	F0 08      	BEQ $7759
C1/7751:	AD 1F 20   	LDA $201F
C1/7754:	0A         	ASL A
C1/7755:	AA         	TAX
C1/7756:	7C 30 74   	JMP ($7430,X)  ; Jump table

C1/7759:	AD 1F 20   	LDA $201F
C1/775C:	0A         	ASL A
C1/775D:	AA         	TAX
C1/775E:	7C 4C 75   	JMP ($754C,X)  ; Jump table

C1/7761:	01
C1/7762:	02
C1/7763:	04
C1/7764:	08
C1/7765:	10
C1/7766:	20

C1/7767:	00
C1/7768:	06
C1/7769:	0C
C1/776A:	12

C1/776B:	A6 0A       LDX $0A
C1/776D:	8E E2 E9    STX $E9E2
C1/7770:	A9 FF       LDA #$FF
C1/7772:	8D E4 E9    STA $E9E4
C1/7775:	9C E5 E9    STZ $E9E5
C1/7778:	7B          TDC
C1/7779:	AA          TAX
C1/777A:	9E FE E9    STZ $E9FE,X
C1/777D:	E8          INX
C1/777E:	E0 20 00    CPX #$0020
C1/7781:	D0 F7       BNE $777A
C1/7783:	9C E1 E9    STZ $E9E1
C1/7786:	9C 68 61    STZ $6168
C1/7789:	A9 02       LDA #$02
C1/778B:	8D 84 7A    STA $7A84
C1/778E:	A9 3D       LDA #$3D
C1/7790:	80 05       BRA $7797
C1/7792:	9C 41 2F   	STZ $2F41

; Target enemies
C1/7795:	A9 38      	LDA #$38
C1/7797:	48         	PHA
C1/7798:	EE 6B 7B   	INC $7B6B        ;
C1/779B:	AD C2 7B   	LDA $7BC2        ; current menu cursor state
C1/779E:	8D 83 7A   	STA $7A83
C1/77A1:	9C 7D 7B   	STZ $7B7D        ; clear characters with cursors shown
C1/77A4:	9C 7E 7B   	STZ $7B7E        ; clear monsters with cursors shown
C1/77A7:	9C 7F 7B   	STZ $7B7F        ; clear cursors on chars + monsters
C1/77AA:	9C CE 7A   	STZ $7ACE
C1/77AD:	9C CF 7A   	STZ $7ACF
C1/77B0:	9C B1 62   	STZ $62B1
C1/77B3:	9C B2 62   	STZ $62B2
C1/77B6:	9C B4 62   	STZ $62B4
C1/77B9:	AD 84 7A   	LDA $7A84        ; targeting byte for attack
C1/77BC:	30 06      	BMI $77C4        ; branch if no targeting byte (still menu)
C1/77BE:	85 36      	STA $36          ; save targeting byte
C1/77C0:	C9 02      	CMP #$02         ; is it "target self only"
C1/77C2:	D0 0D      	BNE $77D1        ; branch if not
C1/77C4:	AE CA 62   	LDX $62CA        ; active character menu
C1/77C7:	BF 61 77 C1	LDA $C17761,X    ; indexed bitmasks
C1/77CB:	8D 7D 7B   	STA $7B7D        ; set self as cursor target
C1/77CE:	4C 01 79   	JMP $7901

C1/77D1:	A5 36      	LDA $36
C1/77D3:	29 0C      	AND #$0C
C1/77D5:	C9 0C      	CMP #$0C
C1/77D7:	D0 26      	BNE $77FF
C1/77D9:	A5 36      	LDA $36
C1/77DB:	29 40      	AND #$40
C1/77DD:	F0 0B      	BEQ $77EA
C1/77DF:	A5 92      	LDA $92
C1/77E1:	8D 7E 7B   	STA $7B7E
C1/77E4:	EE 7F 7B   	INC $7B7F
C1/77E7:	4C 01 79   	JMP $7901

C1/77EA:	AD 1D 20   	LDA $201D
C1/77ED:	2D AC 61   	AND $61AC
C1/77F0:	2D AD 61   	AND $61AD
C1/77F3:	2D 93 61   	AND $6193
C1/77F6:	8D 7D 7B   	STA $7B7D
C1/77F9:	EE 7F 7B   	INC $7B7F
C1/77FC:	4C 01 79   	JMP $7901

C1/77FF:	C9 04      	CMP #$04
C1/7801:	D0 1A      	BNE $781D
C1/7803:	AD 1D 20   	LDA $201D
C1/7806:	2D AC 61   	AND $61AC
C1/7809:	2D AD 61   	AND $61AD
C1/780C:	2D 93 61   	AND $6193
C1/780F:	8D 7D 7B   	STA $7B7D
C1/7812:	A5 92      	LDA $92
C1/7814:	8D 7E 7B   	STA $7B7E
C1/7817:	EE 7F 7B   	INC $7B7F
C1/781A:	4C 01 79   	JMP $7901

C1/781D:	A5 36      	LDA $36
C1/781F:	29 0C      	AND #$0C
C1/7821:	C9 08      	CMP #$08
C1/7823:	D0 76      	BNE $789B

C1/7825:	A5 36       LDA $36
C1/7827:	29 40       AND #$40
C1/7829:	D0 4A       BNE $7875
C1/782B:	7B          TDC
C1/782C:	AA          TAX
C1/782D:	AD CA 62    LDA $62CA
C1/7830:	DD 8C 7A    CMP $7A8C,X
C1/7833:	F0 23       BEQ $7858
C1/7835:	E8          INX
C1/7836:	E0 04 00    CPX #$0004
C1/7839:	D0 F5       BNE $7830
C1/783B:	AD 1D 20    LDA $201D
C1/783E:	2D AC 61    AND $61AC
C1/7841:	2D AD 61    AND $61AD
C1/7844:	2D 93 61    AND $6193
C1/7847:	2D 7C 7B    AND $7B7C
C1/784A:	8D 7D 7B    STA $7B7D
C1/784D:	EE 7F 7B    INC $7B7F
C1/7850:	A9 03       LDA #$03
C1/7852:	8D CE 7A    STA $7ACE
C1/7855:	4C 01 79    JMP $7901
C1/7858:	AD 1D 20    LDA $201D
C1/785B:	2D AC 61    AND $61AC
C1/785E:	2D AD 61    AND $61AD
C1/7861:	2D 93 61    AND $6193
C1/7864:	2D 7A 7B    AND $7B7A
C1/7867:	8D 7D 7B    STA $7B7D
C1/786A:	EE 7F 7B    INC $7B7F
C1/786D:	A9 01       LDA #$01
C1/786F:	8D CE 7A    STA $7ACE
C1/7872:	4C 01 79    JMP $7901
C1/7875:	A5 92       LDA $92
C1/7877:	2D 79 7B    AND $7B79
C1/787A:	F0 0C       BEQ $7888
C1/787C:	8D 7E 7B    STA $7B7E
C1/787F:	EE 7F 7B    INC $7B7F
C1/7882:	9C CE 7A    STZ $7ACE
C1/7885:	4C 01 79    JMP $7901
C1/7888:	A5 92       LDA $92
C1/788A:	2D 7B 7B    AND $7B7B
C1/788D:	8D 7E 7B    STA $7B7E
C1/7890:	EE 7F 7B    INC $7B7F
C1/7893:	A9 02       LDA #$02
C1/7895:	8D CE 7A    STA $7ACE
C1/7898:	4C 01 79    JMP $7901

C1/789B:	A5 36      	LDA $36
C1/789D:	29 40      	AND #$40
C1/789F:	D0 3C      	BNE $78DD
C1/78A1:	7B          TDC
C1/78A2:	AA          TAX
C1/78A3:	AD CA 62    LDA $62CA
C1/78A6:	DD 8C 7A    CMP $7A8C,X
C1/78A9:	F0 1C       BEQ $78C7
C1/78AB:	E8          INX
C1/78AC:	E0 04 00    CPX #$0004
C1/78AF:	D0 F5       BNE $78A6
C1/78B1:	AE CA 62    LDX $62CA
C1/78B4:	BF 61 77 C1 LDA $C17761,X
C1/78B8:	8D 7D 7B    STA $7B7D
C1/78BB:	A9 03       LDA #$03
C1/78BD:	8D CE 7A    STA $7ACE
C1/78C0:	8A          TXA
C1/78C1:	8D CF 7A    STA $7ACF
C1/78C4:	4C 01 79    JMP $7901

C1/78C7:	AE CA 62    LDX $62CA
C1/78CA:	BF 61 77 C1 LDA $C17761,X
C1/78CE:	8D 7D 7B    STA $7B7D
C1/78D1:	A9 01       LDA #$01
C1/78D3:	8D CE 7A    STA $7ACE
C1/78D6:	8A          TXA
C1/78D7:	8D CF 7A    STA $7ACF
C1/78DA:	4C 01 79    JMP $7901

C1/78DD:	20 22 79   	JSR $7922
C1/78E0:	B0 12      	BCS $78F4
C1/78E2:	20 34 79   	JSR $7934
C1/78E5:	8D 7E 7B   	STA $7B7E
C1/78E8:	A9 02      	LDA #$02
C1/78EA:	8D CE 7A   	STA $7ACE
C1/78ED:	8A         	TXA
C1/78EE:	8D CF 7A   	STA $7ACF
C1/78F1:	4C 01 79   	JMP $7901

C1/78F4:	8D 7E 7B   	STA $7B7E
C1/78F7:	9C CE 7A   	STZ $7ACE
C1/78FA:	8A         	TXA
C1/78FB:	8D CF 7A   	STA $7ACF
C1/78FE:	4C 01 79   	JMP $7901

C1/7901:	AD 84 7A   	LDA $7A84
C1/7904:	29 10      	AND #$10
C1/7906:	F0 03      	BEQ $790B
C1/7908:	9C 7F 7B   	STZ $7B7F
C1/790B:	68         	PLA
C1/790C:	8D C2 7B   	STA $7BC2
C1/790F:	60         	RTS

C1/7910:	A2 AA 7A   	LDX #$7AAA
C1/7913:	4C 70 79   	JMP $7970

C1/7916:	A2 B0 7A   	LDX #$7AB0
C1/7919:	4C 70 79   	JMP $7970

C1/791C:	A2 9E 7A   	LDX #$7A9E
C1/791F:	4C 70 79   	JMP $7970

C1/7922:	A2 A4 7A   	LDX #$7AA4
C1/7925:	4C 70 79   	JMP $7970

C1/7928:	A2 AA 7A   	LDX #$7AAA
C1/792B:	4C 9C 79   	JMP $799C

C1/792E:	A2 B0 7A   	LDX #$7AB0
C1/7931:	4C 9C 79   	JMP $799C

C1/7934:	A2 9E 7A   	LDX #$7A9E
C1/7937:	4C 9C 79   	JMP $799C

C1/793A:	A2 A4 7A   	LDX #$7AA4
C1/793D:	4C 9C 79   	JMP $799C

C1/7940:	A2 C2 7A   	LDX #$7AC2
C1/7943:	4C C8 79   	JMP $79C8

C1/7946:	A2 C8 7A   	LDX #$7AC8
C1/7949:	4C C8 79   	JMP $79C8

C1/794C:	A2 B6 7A   	LDX #$7AB6
C1/794F:	4C C8 79   	JMP $79C8

C1/7952:	A2 B6 7A   	LDX #$7AB6
C1/7955:	4C C8 79   	JMP $79C8

C1/7958:	A2 C2 7A   	LDX #$7AC2
C1/795B:	4C 00 7A   	JMP $7A00

C1/795E:	A2 C8 7A   	LDX #$7AC8
C1/7961:	4C 00 7A   	JMP $7A00

C1/7964:	A2 B6 7A   	LDX #$7AB6
C1/7967:	4C 00 7A   	JMP $7A00

C1/796A:	A2 B6 7A   	LDX #$7AB6
C1/796D:	4C 00 7A   	JMP $7A00

C1/7970:	86 3A      	STX $3A
C1/7972:	7B         	TDC
C1/7973:	A8         	TAY
C1/7974:	7B         	TDC
C1/7975:	AA         	TAX
C1/7976:	B1 3A      	LDA ($3A),Y
C1/7978:	30 0B      	BMI $7985
C1/797A:	DD 86 7A   	CMP $7A86,X
C1/797D:	F0 0E      	BEQ $798D
C1/797F:	E8         	INX
C1/7980:	E0 06 00   	CPX #$0006
C1/7983:	D0 F5      	BNE $797A
C1/7985:	C8         	INY
C1/7986:	C0 06 00   	CPY #$0006
C1/7989:	D0 E9      	BNE $7974
C1/798B:	18         	CLC
C1/798C:	60         	RTS

C1/798D:	86 36      	STX $36
C1/798F:	AA         	TAX
C1/7990:	A5 92      	LDA $92
C1/7992:	3F 61 77 C1	AND $C17761,X
C1/7996:	F0 E7      	BEQ $797F
C1/7998:	A6 36      	LDX $36
C1/799A:	38         	SEC
C1/799B:	60         	RTS

C1/799C:	86 3A      	STX $3A
C1/799E:	7B         	TDC
C1/799F:	A8         	TAY
C1/79A0:	7B         	TDC
C1/79A1:	AA         	TAX
C1/79A2:	B1 3A      	LDA ($3A),Y
C1/79A4:	30 0B      	BMI $79B1
C1/79A6:	DD 92 7A   	CMP $7A92,X
C1/79A9:	F0 0E      	BEQ $79B9
C1/79AB:	E8         	INX
C1/79AC:	E0 06 00   	CPX #$0006
C1/79AF:	D0 F5      	BNE $79A6
C1/79B1:	C8         	INY
C1/79B2:	C0 06 00   	CPY #$0006
C1/79B5:	D0 E9      	BNE $79A0
C1/79B7:	18         	CLC
C1/79B8:	60         	RTS

C1/79B9:	86 36      	STX $36
C1/79BB:	AA         	TAX
C1/79BC:	A5 92      	LDA $92
C1/79BE:	3F 61 77 C1	AND $C17761,X
C1/79C2:	F0 E7      	BEQ $79AB
C1/79C4:	A6 36      	LDX $36
C1/79C6:	38         	SEC
C1/79C7:	60         	RTS

C1/79C8:	86 3A      	STX $3A
C1/79CA:	7B         	TDC
C1/79CB:	A8         	TAY
C1/79CC:	7B         	TDC
C1/79CD:	AA         	TAX
C1/79CE:	B1 3A      	LDA ($3A),Y
C1/79D0:	30 0D      	BMI $79DF
C1/79D2:	DD 8C 7A   	CMP $7A8C,X
C1/79D5:	F0 10      	BEQ $79E7
C1/79D7:	06 38       ASL $38
C1/79D9:	E8          INX
C1/79DA:	E0 06 00    CPX #$0006
C1/79DD:	D0 F3       BNE $79D2
C1/79DF:	C8          INY
C1/79E0:	C0 06 00    CPY #$0006
C1/79E3:	D0 E7       BNE $79CC
C1/79E5:	18          CLC
C1/79E6:	60          RTS

C1/79E7:	86 36      	STX $36
C1/79E9:	AA         	TAX
C1/79EA:	AD 1D 20   	LDA $201D
C1/79ED:	2D AC 61   	AND $61AC
C1/79F0:	2D AD 61   	AND $61AD
C1/79F3:	2D 93 61   	AND $6193
C1/79F6:	3F 61 77 C1	AND $C17761,X
C1/79FA:	F0 DB      	BEQ $79D7
C1/79FC:	A6 36      	LDX $36
C1/79FE:	38         	SEC
C1/79FF:	60         	RTS

C1/7A00:	86 3A      	STX $3A
C1/7A02:	7B         	TDC
C1/7A03:	A8         	TAY
C1/7A04:	7B         	TDC
C1/7A05:	AA         	TAX
C1/7A06:	B1 3A      	LDA ($3A),Y
C1/7A08:	30 0B      	BMI $7A15
C1/7A0A:	DD 98 7A   	CMP $7A98,X
C1/7A0D:	F0 0E      	BEQ $7A1D
C1/7A0F:	E8         	INX
C1/7A10:	E0 06 00   	CPX #$0006
C1/7A13:	D0 F5      	BNE $7A0A
C1/7A15:	C8         	INY
C1/7A16:	C0 06 00   	CPY #$0006
C1/7A19:	D0 E9      	BNE $7A04
C1/7A1B:	18         	CLC
C1/7A1C:	60         	RTS

C1/7A1D:	86 36      	STX $36
C1/7A1F:	AA         	TAX
C1/7A20:	AD 1D 20   	LDA $201D
C1/7A23:	2D AC 61   	AND $61AC
C1/7A26:	2D AD 61   	AND $61AD
C1/7A29:	2D 93 61   	AND $6193
C1/7A2C:	3F 61 77 C1	AND $C17761,X
C1/7A30:	F0 DD      	BEQ $7A0F
C1/7A32:	A6 36      	LDX $36
C1/7A34:	38         	SEC
C1/7A35:	60         	RTS

C1/7A36:	08A0
C1/7A38:	08AC
C1/7A3A:	08B8
C1/7A3C:	08C4

C1/7A3E:	10
C1/7A3F:	A0
C1/7A40:	10
C1/7A41:	AC
C1/7A42:	10
C1/7A43:	B8
C1/7A44:	10
C1/7A45:	C4
C1/7A46:	30
C1/7A47:	A0
C1/7A48:	10
C1/7A49:	AC
C1/7A4A:	58
C1/7A4B:	AC
C1/7A4C:	30
C1/7A4D:	B8

C1/7A4E:	DA         	PHX
C1/7A4F:	BD 0F 89   	LDA $890F,X
C1/7A52:	29 03      	AND #$03
C1/7A54:	9D 0F 89   	STA $890F,X
C1/7A57:	85 2C      	STA $2C
C1/7A59:	A9 03      	LDA #$03
C1/7A5B:	85 2E      	STA $2E
C1/7A5D:	20 B0 18   	JSR $18B0
C1/7A60:	98         	TYA
C1/7A61:	18         	CLC
C1/7A62:	65 30      	ADC $30
C1/7A64:	AA         	TAX
C1/7A65:	BD 2F 20   	LDA $202F,X
C1/7A68:	30 03      	BMI $7A6D
C1/7A6A:	FA         	PLX
C1/7A6B:	18         	CLC
C1/7A6C:	60         	RTS

C1/7A6D:	FA         	PLX
C1/7A6E:	38         	SEC
C1/7A6F:	60         	RTS

C1/7A70:	DA         	PHX
C1/7A71:	BD 0F 89   	LDA $890F,X
C1/7A74:	29 03      	AND #$03
C1/7A76:	9D 0F 89   	STA $890F,X
C1/7A79:	85 2C      	STA $2C
C1/7A7B:	A9 03      	LDA #$03
C1/7A7D:	85 2E      	STA $2E
C1/7A7F:	20 B0 18   	JSR $18B0
C1/7A82:	98         	TYA
C1/7A83:	18         	CLC
C1/7A84:	65 30      	ADC $30
C1/7A86:	AA         	TAX
C1/7A87:	BD 5F 20   	LDA $205F,X
C1/7A8A:	30 03      	BMI $7A8F
C1/7A8C:	FA         	PLX
C1/7A8D:	18         	CLC
C1/7A8E:	60         	RTS

C1/7A8F:	FA         	PLX
C1/7A90:	38         	SEC
C1/7A91:	60         	RTS

; Cursor State $05
; Sustain Command Menu [?]
C1/7A92:	9C 41 2F   	STZ $2F41
C1/7A95:	9C E3 88   	STZ $88E3
C1/7A98:	AD CB 7B   	LDA $7BCB
C1/7A9B:	F0 06      	BEQ $7AA3
C1/7A9D:	A9 0F      	LDA #$0F
C1/7A9F:	8D C2 7B   	STA $7BC2      ; update cursor state
C1/7AA2:	60         	RTS

C1/7AA3:	9C E8 7A   	STZ $7AE8
C1/7AA6:	9C E9 7A   	STZ $7AE9
C1/7AA9:	A5 04      	LDA $04
C1/7AAB:	C9 40      	CMP #$40
C1/7AAD:	D0 0B      	BNE $7ABA
C1/7AAF:	E6 94      	INC $94        ; sound: cursor
C1/7AB1:	EE CB 7B   	INC $7BCB
C1/7AB4:	A9 01      	LDA #$01
C1/7AB6:	8D CC 7B   	STA $7BCC
C1/7AB9:	60         	RTS

C1/7ABA:	A5 05      	LDA $05
C1/7ABC:	C9 40      	CMP #$40
C1/7ABE:	D0 0B      	BNE $7ACB
C1/7AC0:	E6 94      	INC $94        ; sound: cursor
C1/7AC2:	EE CB 7B   	INC $7BCB
C1/7AC5:	A9 02      	LDA #$02
C1/7AC7:	8D CC 7B   	STA $7BCC
C1/7ACA:	60         	RTS

C1/7ACB:	AD CA 62   	LDA $62CA
C1/7ACE:	AA         	TAX
C1/7ACF:	BD CC 62   	LDA $62CC,X
C1/7AD2:	D0 0B      	BNE $7ADF
C1/7AD4:	AD 2E 2F   	LDA $2F2E     ; command menu mode (short/window)
C1/7AD7:	F0 03      	BEQ $7ADC
C1/7AD9:	4C E2 7A   	JMP $7AE2

C1/7ADC:	4C CE 7B   	JMP $7BCE

C1/7ADF:	4C 3F 7C   	JMP $7C3F

C1/7AE2:	AE CA 62   	LDX $62CA
C1/7AE5:	BF 5B 4B C1	LDA $C14B5B,X
C1/7AE9:	A8         	TAY
C1/7AEA:	20 4E 7A   	JSR $7A4E
C1/7AED:	90 08      	BCC $7AF7
C1/7AEF:	FE 0F 89   	INC $890F,X
C1/7AF2:	20 4E 7A   	JSR $7A4E
C1/7AF5:	B0 F8      	BCS $7AEF
C1/7AF7:	A5 05      	LDA $05
C1/7AF9:	29 08      	AND #$08
C1/7AFB:	F0 1E      	BEQ $7B1B
C1/7AFD:	BD 0F 89   	LDA $890F,X
C1/7B00:	85 36      	STA $36
C1/7B02:	7B         	TDC
C1/7B03:	9D 0F 89   	STA $890F,X
C1/7B06:	20 4E 7A   	JSR $7A4E
C1/7B09:	90 07      	BCC $7B12
C1/7B0B:	A5 36      	LDA $36
C1/7B0D:	9D 0F 89   	STA $890F,X
C1/7B10:	80 09      	BRA $7B1B
C1/7B12:	BD 0F 89   	LDA $890F,X
C1/7B15:	C5 36      	CMP $36
C1/7B17:	F0 02      	BEQ $7B1B
C1/7B19:	E6 94      	INC $94        ; sound: cursor
C1/7B1B:	A5 05      	LDA $05
C1/7B1D:	29 04      	AND #$04
C1/7B1F:	F0 1F      	BEQ $7B40
C1/7B21:	BD 0F 89   	LDA $890F,X
C1/7B24:	85 36      	STA $36
C1/7B26:	A9 03      	LDA #$03
C1/7B28:	9D 0F 89   	STA $890F,X
C1/7B2B:	20 4E 7A   	JSR $7A4E
C1/7B2E:	90 07      	BCC $7B37
C1/7B30:	A5 36      	LDA $36
C1/7B32:	9D 0F 89   	STA $890F,X
C1/7B35:	80 09      	BRA $7B40
C1/7B37:	BD 0F 89   	LDA $890F,X
C1/7B3A:	C5 36      	CMP $36
C1/7B3C:	F0 02      	BEQ $7B40
C1/7B3E:	E6 94      	INC $94        ; sound: cursor
C1/7B40:	A5 05      	LDA $05
C1/7B42:	29 02      	AND #$02
C1/7B44:	F0 1F      	BEQ $7B65
C1/7B46:	BD 0F 89   	LDA $890F,X
C1/7B49:	85 36      	STA $36
C1/7B4B:	A9 01      	LDA #$01
C1/7B4D:	9D 0F 89   	STA $890F,X
C1/7B50:	20 4E 7A   	JSR $7A4E
C1/7B53:	90 07      	BCC $7B5C
C1/7B55:	A5 36      	LDA $36
C1/7B57:	9D 0F 89   	STA $890F,X
C1/7B5A:	80 09      	BRA $7B65
C1/7B5C:	BD 0F 89   	LDA $890F,X
C1/7B5F:	C5 36      	CMP $36
C1/7B61:	F0 02      	BEQ $7B65
C1/7B63:	E6 94      	INC $94        ; sound: cursor
C1/7B65:	A5 05      	LDA $05
C1/7B67:	29 01      	AND #$01
C1/7B69:	F0 1F      	BEQ $7B8A
C1/7B6B:	BD 0F 89   	LDA $890F,X
C1/7B6E:	85 36      	STA $36
C1/7B70:	A9 02      	LDA #$02
C1/7B72:	9D 0F 89   	STA $890F,X
C1/7B75:	20 4E 7A   	JSR $7A4E
C1/7B78:	90 07      	BCC $7B81
C1/7B7A:	A5 36      	LDA $36
C1/7B7C:	9D 0F 89   	STA $890F,X
C1/7B7F:	80 09      	BRA $7B8A
C1/7B81:	BD 0F 89   	LDA $890F,X
C1/7B84:	C5 36      	CMP $36
C1/7B86:	F0 02      	BEQ $7B8A
C1/7B88:	E6 94      	INC $94        ; sound: cursor
C1/7B8A:	A5 04      	LDA $04
C1/7B8C:	29 30      	AND #$30
C1/7B8E:	C9 20      	CMP #$20
C1/7B90:	D0 08      	BNE $7B9A
C1/7B92:	E6 94      	INC $94        ; sound: cursor
C1/7B94:	20 A9 7C   	JSR $7CA9
C1/7B97:	4C 31 56   	JMP $5631

C1/7B9A:	C9 10      	CMP #$10
C1/7B9C:	D0 08      	BNE $7BA6
C1/7B9E:	E6 94      	INC $94        ; sound: cursor
C1/7BA0:	20 A9 7C   	JSR $7CA9
C1/7BA3:	4C 3B 56   	JMP $563B

; Handle A
C1/7BA6:	A5 04      	LDA $04
C1/7BA8:	10 08      	BPL $7BB2      ; branch if not pressing A
C1/7BAA:	E6 96      	INC $96        ; sound: select
C1/7BAC:	EE 41 2F   	INC $2F41
C1/7BAF:	4C C8 7C   	JMP $7CC8

C1/7BB2:	AE CA 62   	LDX $62CA
C1/7BB5:	BD 0F 89   	LDA $890F,X
C1/7BB8:	0A         	ASL A
C1/7BB9:	AA         	TAX
C1/7BBA:	BF 46 7A C1	LDA $C17A46,X
C1/7BBE:	8D E4 88   	STA $88E4      ; main cursor X position
C1/7BC1:	BF 47 7A C1	LDA $C17A47,X
C1/7BC5:	8D E5 88   	STA $88E5
C1/7BC8:	A9 01      	LDA #$01
C1/7BCA:	8D E3 88   	STA $88E3
C1/7BCD:	60         	RTS

C1/7BCE:	AE CA 62   	LDX $62CA
C1/7BD1:	BF 5B 4B C1	LDA $C14B5B,X    ; Data
C1/7BD5:	A8         	TAY
C1/7BD6:	20 4E 7A   	JSR $7A4E
C1/7BD9:	B0 18      	BCS $7BF3
C1/7BDB:	A5 05      	LDA $05
C1/7BDD:	29 0C      	AND #$0C
C1/7BDF:	F0 1A      	BEQ $7BFB
C1/7BE1:	E6 94      	INC $94        ; sound: cursor
C1/7BE3:	A5 05      	LDA $05
C1/7BE5:	29 08      	AND #$08
C1/7BE7:	F0 0A      	BEQ $7BF3
C1/7BE9:	DE 0F 89   	DEC $890F,X
C1/7BEC:	20 4E 7A   	JSR $7A4E
C1/7BEF:	B0 F8      	BCS $7BE9
C1/7BF1:	80 08      	BRA $7BFB
C1/7BF3:	FE 0F 89   	INC $890F,X
C1/7BF6:	20 4E 7A   	JSR $7A4E
C1/7BF9:	B0 F8      	BCS $7BF3
C1/7BFB:	A5 04      	LDA $04
C1/7BFD:	10 08      	BPL $7C07
C1/7BFF:	E6 96      	INC $96       ; sound: select
C1/7C01:	EE 41 2F   	INC $2F41
C1/7C04:	4C C8 7C   	JMP $7CC8

C1/7C07:	A5 05      	LDA $05
C1/7C09:	29 0F      	AND #$0F
C1/7C0B:	C9 02      	CMP #$02
C1/7C0D:	D0 08      	BNE $7C17
C1/7C0F:	E6 94      	INC $94        ; sound: cursor
C1/7C11:	20 A9 7C   	JSR $7CA9
C1/7C14:	4C 31 56   	JMP $5631

C1/7C17:	C9 01      	CMP #$01
C1/7C19:	D0 08      	BNE $7C23
C1/7C1B:	E6 94      	INC $94        ; sound: cursor
C1/7C1D:	20 A9 7C   	JSR $7CA9
C1/7C20:	4C 3B 56   	JMP $563B

C1/7C23:	AE CA 62   	LDX $62CA
C1/7C26:	BD 0F 89   	LDA $890F,X
C1/7C29:	0A         	ASL A
C1/7C2A:	AA         	TAX
C1/7C2B:	BF 3E 7A C1	LDA $C17A3E,X    ; Data
C1/7C2F:	8D E4 88   	STA $88E4      ; main cursor X position
C1/7C32:	BF 3F 7A C1	LDA $C17A3F,X    ; Data
C1/7C36:	8D E5 88   	STA $88E5
C1/7C39:	A9 01      	LDA #$01
C1/7C3B:	8D E3 88   	STA $88E3
C1/7C3E:	60         	RTS

C1/7C3F:	AE CA 62   	LDX $62CA
C1/7C42:	BF 5B 4B C1	LDA $C14B5B,X
C1/7C46:	A8         	TAY
C1/7C47:	20 70 7A   	JSR $7A70
C1/7C4A:	B0 18      	BCS $7C64
C1/7C4C:	A5 05      	LDA $05
C1/7C4E:	29 0C      	AND #$0C
C1/7C50:	F0 1A      	BEQ $7C6C
C1/7C52:	E6 94      	INC $94        ; sound: cursor
C1/7C54:	A5 05      	LDA $05
C1/7C56:	29 08      	AND #$08
C1/7C58:	F0 0A      	BEQ $7C64
C1/7C5A:	DE 0F 89   	DEC $890F,X
C1/7C5D:	20 70 7A   	JSR $7A70
C1/7C60:	B0 F8      	BCS $7C5A
C1/7C62:	80 08      	BRA $7C6C
C1/7C64:	FE 0F 89   	INC $890F,X
C1/7C67:	20 70 7A   	JSR $7A70
C1/7C6A:	B0 F8      	BCS $7C64
C1/7C6C:	A5 04      	LDA $04
C1/7C6E:	10 1C      	BPL $7C8C
C1/7C70:	E6 96      	INC $96       ; sound: select
C1/7C72:	20 AB 84   	JSR $84AB
C1/7C75:	20 A9 7C   	JSR $7CA9
C1/7C78:	BD 60 20   	LDA $2060,X
C1/7C7B:	8D 84 7A   	STA $7A84
C1/7C7E:	A9 0E      	LDA #$0E
C1/7C80:	99 AF 2B   	STA $2BAF,Y
C1/7C83:	BD 5E 20   	LDA $205E,X
C1/7C86:	8D 85 7A   	STA $7A85
C1/7C89:	4C 95 77   	JMP $7795

C1/7C8C:	AE CA 62   	LDX $62CA
C1/7C8F:	BD 0F 89   	LDA $890F,X
C1/7C92:	0A         	ASL A
C1/7C93:	AA         	TAX
C1/7C94:	BF 36 7A C1	LDA $C17A36,X
C1/7C98:	8D E4 88   	STA $88E4      ; main cursor X position
C1/7C9B:	BF 37 7A C1	LDA $C17A37,X
C1/7C9F:	8D E5 88   	STA $88E5
C1/7CA2:	A9 01      	LDA #$01
C1/7CA4:	8D E3 88   	STA $88E3
C1/7CA7:	60         	RTS

C1/7CA8:	60         	RTS

C1/7CA9:	20 56 6D   	JSR $6D56
C1/7CAC:	A9 FF      	LDA #$FF
C1/7CAE:	8D 85 7A   	STA $7A85
C1/7CB1:	99 AF 2B   	STA $2BAF,Y
C1/7CB4:	99 B0 2B   	STA $2BB0,Y
C1/7CB7:	99 B3 2B   	STA $2BB3,Y
C1/7CBA:	7B         	TDC
C1/7CBB:	99 B1 2B   	STA $2BB1,Y
C1/7CBE:	99 B2 2B   	STA $2BB2,Y
C1/7CC1:	99 B4 2B   	STA $2BB4,Y
C1/7CC4:	99 B5 2B   	STA $2BB5,Y
C1/7CC7:	60         	RTS

C1/7CC8:	20 AB 84   	JSR $84AB
C1/7CCB:	20 A9 7C   	JSR $7CA9
C1/7CCE:	BD 30 20   	LDA $2030,X    ; slot's targeting type
C1/7CD1:	8D 84 7A   	STA $7A84      ; set targeting byte
C1/7CD4:	BD 2E 20   	LDA $202E,X    ; slot's command number
C1/7CD7:	99 AF 2B   	STA $2BAF,Y    ; pending user action
C1/7CDA:	29 7F      	AND #$7F       ; mask top bit [?]
C1/7CDC:	0A         	ASL A          ; x2
C1/7CDD:	AA         	TAX            ; index it
C1/7CDE:	7C E9 7C   	JMP ($7CE9,X)  ; Jump table

C1/7CE1:	A9 01      	LDA #$01
C1/7CE3:	8D E8 7A   	STA $7AE8
C1/7CE6:	4C A0 57   	JMP $57A0

; Battle Menu Command Selection

C1/7CE9:	9277 ; $00 ($7792) - Fight
C1/7CEB:	6957 ; $01 ($5769) - Item
C1/7CED:	A057 ; $02 ($57A0) - Magic
C1/7CEF:	9577 ; $03 ($7795) - Morph
C1/7CF1:	9577 ; $04 ($7795) - Revert
C1/7CF3:	9577 ; $05 ($7795) - Steal
C1/7CF5:	9577 ; $06 ($7795) - Capture
C1/7CF7:	1B56 ; $07 ($561B) - SwdTech
C1/7CF9:	7558 ; $08 ($5875) - Throw
C1/7CFB:	B158 ; $09
C1/7CFD:	6B77 ; $0A
C1/7CFF:	9577 ; $0B
C1/7D01:	ED58 ; $0C
C1/7D03:	9577 ; $0D
C1/7D05:	9577 ; $0E
C1/7D07:	AE59 ; $0F ($59AE) - Slot
C1/7D09:	2759 ; $10 ($5927) - Rage
C1/7D0B:	9577 ; $11 ($7795) - Leap
C1/7D0D:	9577
C1/7D0F:	5859
C1/7D11:	3156
C1/7D13:	3B56
C1/7D15:	9577
C1/7D17:	E17C
C1/7D19:	9577
C1/7D1B:	9577
C1/7D1D:	9577
C1/7D1F:	9577
C1/7D21:	9577
C1/7D23:	8359

C1/7D25:	9C 41 2F   	STZ $2F41
C1/7D28:	9C E3 88   	STZ $88E3
C1/7D2B:	AD CB 7B   	LDA $7BCB
C1/7D2E:	F0 05      	BEQ $7D35
C1/7D30:	A9 36      	LDA #$36
C1/7D32:	8D C2 7B   	STA $7BC2
C1/7D35:	A5 04      	LDA $04
C1/7D37:	10 1D      	BPL $7D56
C1/7D39:	E6 96      	INC $96       ; sound: select
C1/7D3B:	20 56 6D   	JSR $6D56
C1/7D3E:	AD 82 7B   	LDA $7B82
C1/7D41:	4A         	LSR A
C1/7D42:	4A         	LSR A
C1/7D43:	4A         	LSR A
C1/7D44:	4A         	LSR A
C1/7D45:	4A         	LSR A
C1/7D46:	99 B0 2B   	STA $2BB0,Y
C1/7D49:	AD CA 62   	LDA $62CA
C1/7D4C:	99 AE 2B   	STA $2BAE,Y
C1/7D4F:	EE 80 7B   	INC $7B80
C1/7D52:	EE CB 7B   	INC $7BCB
C1/7D55:	60         	RTS

C1/7D56:	A5 09      	LDA $09
C1/7D58:	10 05      	BPL $7D5F
C1/7D5A:	E6 96      	INC $96       ; sound: select
C1/7D5C:	4C 28 56   	JMP $5628

C1/7D5F:	AE CA 62    LDX $62CA
C1/7D62:	DA          PHX
C1/7D63:	A9 07       LDA #$07
C1/7D65:	38          SEC
C1/7D66:	ED 20 20    SBC $2020
C1/7D69:	AA          TAX
C1/7D6A:	7B          TDC
C1/7D6B:	A8          TAY
C1/7D6C:	BF 60 A8 C2 LDA $C2A860,X
C1/7D70:	99 DA 5D    STA $5DDA,Y
C1/7D73:	E8          INX
C1/7D74:	C8          INY
C1/7D75:	C8          INY
C1/7D76:	C0 10 00    CPY #$0010
C1/7D79:	D0 F1       BNE $7D6C
C1/7D7B:	FA          PLX
C1/7D7C:	7B          TDC
C1/7D7D:	A8          TAY
C1/7D7E:	AD 20 20    LDA $2020
C1/7D81:	1A          INC A
C1/7D82:	85 36       STA $36
C1/7D84:	A5 0E       LDA $0E
C1/7D86:	29 03       AND #$03
C1/7D88:	D0 03       BNE $7D8D
C1/7D8A:	EE 82 7B    INC $7B82
C1/7D8D:	AD 82 7B    LDA $7B82
C1/7D90:	4A          LSR A
C1/7D91:	4A          LSR A
C1/7D92:	4A          LSR A
C1/7D93:	4A          LSR A
C1/7D94:	4A          LSR A
C1/7D95:	C5 36       CMP $36
C1/7D97:	D0 04       BNE $7D9D
C1/7D99:	7B          TDC
C1/7D9A:	8D 82 7B    STA $7B82
C1/7D9D:	1A          INC A
C1/7D9E:	85 36       STA $36
C1/7DA0:	7B          TDC
C1/7DA1:	AA          TAX
C1/7DA2:	A9 29       LDA #$29
C1/7DA4:	9D DA 5D    STA $5DDA,X
C1/7DA7:	E8          INX
C1/7DA8:	E8          INX
C1/7DA9:	C6 36       DEC $36
C1/7DAB:	D0 F7       BNE $7DA4
C1/7DAD:	AD 82 7B    LDA $7B82
C1/7DB0:	10 0D       BPL $7DBF
C1/7DB2:	A9 F8       LDA #$F8
C1/7DB4:	20 ED 7D    JSR $7DED
C1/7DB7:	AD 82 7B    LDA $7B82
C1/7DBA:	20 CE 7D    JSR $7DCE
C1/7DBD:	80 0B       BRA $7DCA
C1/7DBF:	AD 82 7B    LDA $7B82
C1/7DC2:	20 CE 7D    JSR $7DCE
C1/7DC5:	A9 F0       LDA #$F0
C1/7DC7:	20 ED 7D    JSR $7DED
C1/7DCA:	EE 81 7B    INC $7B81
C1/7DCD:	60          RTS

C1/7DCE:	29 7F      	AND #$7F
C1/7DD0:	4A         	LSR A
C1/7DD1:	4A         	LSR A
C1/7DD2:	0A         	ASL A
C1/7DD3:	0A         	ASL A
C1/7DD4:	AA         	TAX
C1/7DD5:	A9 04      	LDA #$04
C1/7DD7:	85 36      	STA $36
C1/7DD9:	BF AC 68 C1	LDA $C168AC,X
C1/7DDD:	99 73 7A   	STA $7A73,Y
C1/7DE0:	A9 35      	LDA #$35
C1/7DE2:	99 74 7A   	STA $7A74,Y
C1/7DE5:	E8         	INX
C1/7DE6:	C8         	INY
C1/7DE7:	C8         	INY
C1/7DE8:	C6 36      	DEC $36
C1/7DEA:	D0 ED      	BNE $7DD9
C1/7DEC:	60         	RTS

C1/7DED:	85 36      	STA $36
C1/7DEF:	A9 04      	LDA #$04
C1/7DF1:	85 38      	STA $38
C1/7DF3:	A5 36      	LDA $36
C1/7DF5:	99 73 7A   	STA $7A73,Y    ; set swdtech bar graphics data
C1/7DF8:	A9 35      	LDA #$35
C1/7DFA:	99 74 7A   	STA $7A74,Y    ; set swdtech bar graphics data
C1/7DFD:	E8         	INX
C1/7DFE:	C8         	INY
C1/7DFF:	C8         	INY
C1/7E00:	C6 38      	DEC $38
C1/7E02:	D0 EF      	BNE $7DF3
C1/7E04:	60         	RTS

C1/7E05:	9C E3 88   	STZ $88E3
C1/7E08:	AD CB 7B   	LDA $7BCB      ; window closing
C1/7E0B:	F0 06      	BEQ $7E13      ; branch if not

C1/7E0D:	A9 26      	LDA #$26
C1/7E0F:	8D C2 7B   	STA $7BC2      ; update cursor state
C1/7E12:	60         	RTS

; Execute "Defend" command
; Handle A
C1/7E13:	A5 04      	LDA $04        ; pressed buttons
C1/7E15:	10 17      	BPL $7E2E      ; branch if not pushing A
C1/7E17:	E6 94      	INC $94        ; sound: cursor
C1/7E19:	20 56 6D   	JSR $6D56
C1/7E1C:	A9 15      	LDA #$15
C1/7E1E:	99 AF 2B   	STA $2BAF,Y
C1/7E21:	AD CA 62   	LDA $62CA
C1/7E24:	99 AE 2B   	STA $2BAE,Y
C1/7E27:	EE 80 7B   	INC $7B80
C1/7E2A:	EE CB 7B   	INC $7BCB
C1/7E2D:	60         	RTS

C1/7E2E:	AD 2E 2F   	LDA $2F2E      ; command config
C1/7E31:	F0 0A      	BEQ $7E3D      ; branch if window mode
C1/7E33:	A5 06      	LDA $06
C1/7E35:	29 30      	AND #$30
C1/7E37:	C9 10      	CMP #$10
C1/7E39:	D0 06      	BNE $7E41
C1/7E3B:	80 0D      	BRA $7E4A

C1/7E3D:	A5 09      	LDA $09
C1/7E3F:	10 05      	BPL $7E46
C1/7E41:	E6 94      	INC $94        ; sound: cursor
C1/7E43:	4C 73 56   	JMP $5673

C1/7E46:	C9 02      	CMP #$02
C1/7E48:	F0 F7      	BEQ $7E41
C1/7E4A:	AE CA 62   	LDX $62CA
C1/7E4D:	BD 0F 89   	LDA $890F,X
C1/7E50:	0A         	ASL A
C1/7E51:	AA         	TAX
C1/7E52:	AD 2E 2F   	LDA $2F2E     ; command menu mode (short/window)
C1/7E55:	F0 0C      	BEQ $7E63
C1/7E57:	A9 70      	LDA #$70
C1/7E59:	8D E4 88   	STA $88E4      ; main cursor X position
C1/7E5C:	A9 A0      	LDA #$A0
C1/7E5E:	8D E5 88   	STA $88E5
C1/7E61:	80 0C      	BRA $7E6F
C1/7E63:	A9 38      	LDA #$38
C1/7E65:	8D E4 88   	STA $88E4      ; main cursor X position
C1/7E68:	BF 3F 7A C1	LDA $C17A3F,X    ; Data
C1/7E6C:	8D E5 88   	STA $88E5
C1/7E6F:	EE E3 88   	INC $88E3
C1/7E72:	60         	RTS

C1/7E73:	9C E3 88   	STZ $88E3      ; hide main cursor
C1/7E76:	AD CB 7B   	LDA $7BCB      ; menu closing
C1/7E79:	F0 06      	BEQ $7E81      ; branch if not
C1/7E7B:	A9 23      	LDA #$23
C1/7E7D:	8D C2 7B   	STA $7BC2      ; update cursor state
C1/7E80:	60         	RTS

; Execute "Row" command
; Handle A
C1/7E81:	A5 04      	LDA $04        ; pressed buttons
C1/7E83:	10 17      	BPL $7E9C      ; branch if not pressing A
C1/7E85:	E6 94      	INC $94        ; sound: cursor
C1/7E87:	20 56 6D   	JSR $6D56      ; Y = battle menu data index
C1/7E8A:	A9 14      	LDA #$14       ; "Row" command id
C1/7E8C:	99 AF 2B   	STA $2BAF,Y    ; set character command
C1/7E8F:	AD CA 62   	LDA $62CA      ; active character slot
C1/7E92:	99 AE 2B   	STA $2BAE,Y    ; set character executing command
C1/7E95:	EE 80 7B   	INC $7B80      ; switch to open next battle menu
C1/7E98:	EE CB 7B   	INC $7BCB      ; flag menu closing
C1/7E9B:	60         	RTS

C1/7E9C:	AD 2E 2F   	LDA $2F2E      ; window config mode
C1/7E9F:	F0 0A      	BEQ $7EAB      ; branch if "window" mode
C1/7EA1:	A5 06      	LDA $06
C1/7EA3:	29 30      	AND #$30
C1/7EA5:	C9 20      	CMP #$20
C1/7EA7:	D0 06      	BNE $7EAF
C1/7EA9:	80 0D      	BRA $7EB8
C1/7EAB:	A5 09      	LDA $09
C1/7EAD:	10 05      	BPL $7EB4
C1/7EAF:	E6 94      	INC $94        ; sound: cursor
C1/7EB1:	4C 7C 56   	JMP $567C

C1/7EB4:	C9 01      	CMP #$01
C1/7EB6:	F0 F7      	BEQ $7EAF
C1/7EB8:	AE CA 62   	LDX $62CA
C1/7EBB:	BD 0F 89   	LDA $890F,X
C1/7EBE:	0A         	ASL A
C1/7EBF:	AA         	TAX
C1/7EC0:	AD 2E 2F   	LDA $2F2E     ; command menu mode (short/window)
C1/7EC3:	F0 0C      	BEQ $7ED1
C1/7EC5:	A9 10      	LDA #$10
C1/7EC7:	8D E4 88   	STA $88E4      ; main cursor X position
C1/7ECA:	A9 A0      	LDA #$A0
C1/7ECC:	8D E5 88   	STA $88E5
C1/7ECF:	80 0C      	BRA $7EDD
C1/7ED1:	A9 08      	LDA #$08
C1/7ED3:	8D E4 88   	STA $88E4      ; main cursor X position
C1/7ED6:	BF 3F 7A C1	LDA $C17A3F,X
C1/7EDA:	8D E5 88   	STA $88E5
C1/7EDD:	EE E3 88   	INC $88E3
C1/7EE0:	60         	RTS

C1/7EE1:	1F
C1/7EE2:	03
C1/7EE3:	01
C1/7EE4:	01
C1/7EE5:	00
C1/7EE6:	00

; Slot Machine Scroll Position to Slot Converters

C1/7EE7:	4A         	LSR A
C1/7EE8:	4A         	LSR A
C1/7EE9:	4A         	LSR A
C1/7EEA:	4A         	LSR A          ; scroll position / 16
C1/7EEB:	0A         	ASL A          ; * 2
C1/7EEC:	AA         	TAX            ; index it
C1/7EED:	BF 00 A8 C2	LDA $C2A800,X  ; get slot based on scroll position
C1/7EF1:	60         	RTS

C1/7EF2:	4A         	LSR A
C1/7EF3:	4A         	LSR A
C1/7EF4:	4A         	LSR A
C1/7EF5:	4A         	LSR A
C1/7EF6:	0A         	ASL A
C1/7EF7:	AA         	TAX
C1/7EF8:	BF 20 A8 C2	LDA $C2A820,X
C1/7EFC:	60         	RTS

C1/7EFD:	4A         	LSR A
C1/7EFE:	4A         	LSR A
C1/7EFF:	4A         	LSR A
C1/7F00:	4A         	LSR A
C1/7F01:	0A         	ASL A
C1/7F02:	AA         	TAX
C1/7F03:	BF 40 A8 C2	LDA $C2A840,X
C1/7F07:	60         	RTS

; Sustain Slot Machine
C1/7F08:	9C E3 88   	STZ $88E3     ; clear cursor [?]
C1/7F0B:	AD CB 7B   	LDA $7BCB     ; closing slot machine
C1/7F0E:	F0 06      	BEQ $7F16     ; branch if no ^
C1/7F10:	A9 07      	LDA #$07      ; menu state: "Close Slot Machine"
C1/7F12:	8D C2 7B   	STA $7BC2     ; set menu state
C1/7F15:	60         	RTS

C1/7F16:	A5 04      	LDA $04       ; pressing buttons
C1/7F18:	10 53      	BPL $7F6D     ; branch if not pressing A
C1/7F1A:	E6 96      	INC $96       ; sound: select
C1/7F1C:	AD 92 7B   	LDA $7B92     ; 1st slot is stopped/stopping
C1/7F1F:	D0 19      	BNE $7F3A     ; branch if already ^
C1/7F21:	AD 49 2F   	LDA $2F49     ; battle flags
C1/7F24:	29 04      	AND #$04      ; "Disable Joker Doom"
C1/7F26:	F0 07      	BEQ $7F2F     ; branch if not disabled
C1/7F28:	20 5B 18   	JSR $185B     ; else, get random number
C1/7F2B:	09 3C      	ORA #$3C      ; always set #60 (to disable JokerDoom?)
C1/7F2D:	80 03      	BRA $7F32     ; branch

C1/7F2F:	20 5B 18   	JSR $185B     ; random number
C1/7F32:	8D 79 61   	STA $6179     ; save slot 1 randomness
C1/7F35:	EE 92 7B   	INC $7B92     ; 1st slot is stopping
C1/7F38:	80 33      	BRA $7F6D     ; continue (ignore "A" press)

C1/7F3A:	AD 93 7B   	LDA $7B93     ; 2nd slot is stopped/stopping
C1/7F3D:	D0 30      	BNE $7F6F     ; branch if already ^
C1/7F3F:	AD 8F 7B   	LDA $7B8F     ; 1st slot stopped
C1/7F42:	D0 03      	BNE $7F47     ; branch if ^
C1/7F44:	4C EC 7F   	JMP $7FEC     ; else, ignore "A" press

C1/7F47:	AD 8C 7B   	LDA $7B8C     ; 1st slot scroll position
C1/7F4A:	20 E7 7E   	JSR $7EE7     ; get slot based on scroll
C1/7F4D:	8D 7B 61   	STA $617B     ; save 2nd slot randomness [??]
C1/7F50:	AA         	TAX
C1/7F51:	BF E1 7E C1	LDA $C17EE1,X
C1/7F55:	85 36      	STA $36
C1/7F57:	AD 79 61   	LDA $6179
C1/7F5A:	25 36      	AND $36
C1/7F5C:	D0 07      	BNE $7F65
C1/7F5E:	A9 04      	LDA #$04
C1/7F60:	8D 7D 61   	STA $617D
C1/7F63:	80 05      	BRA $7F6A
C1/7F65:	A9 FF      	LDA #$FF
C1/7F67:	8D 7B 61   	STA $617B
C1/7F6A:	EE 93 7B   	INC $7B93

C1/7F6D:	80 7D      	BRA $7FEC

C1/7F6F:	AD 94 7B   	LDA $7B94     ; 3rd slot is stopped/stopping
C1/7F72:	D0 42      	BNE $7FB6     ; branch if already ^
C1/7F74:	AD 90 7B   	LDA $7B90
C1/7F77:	F0 73      	BEQ $7FEC
C1/7F79:	AD 8C 7B   	LDA $7B8C
C1/7F7C:	20 E7 7E   	JSR $7EE7
C1/7F7F:	85 38      	STA $38
C1/7F81:	AD 8D 7B   	LDA $7B8D
C1/7F84:	20 F2 7E   	JSR $7EF2
C1/7F87:	85 3A      	STA $3A
C1/7F89:	C5 38      	CMP $38
C1/7F8B:	D0 1F      	BNE $7FAC
C1/7F8D:	A5 38      	LDA $38
C1/7F8F:	AA         	TAX
C1/7F90:	BF E1 7E C1	LDA $C17EE1,X
C1/7F94:	85 36      	STA $36
C1/7F96:	AD 79 61   	LDA $6179
C1/7F99:	25 36      	AND $36
C1/7F9B:	D0 09      	BNE $7FA6
C1/7F9D:	A9 04      	LDA #$04
C1/7F9F:	8D 7D 61   	STA $617D
C1/7FA2:	A5 3A      	LDA $3A
C1/7FA4:	80 08      	BRA $7FAE
C1/7FA6:	A5 3A      	LDA $3A
C1/7FA8:	09 80      	ORA #$80
C1/7FAA:	80 02      	BRA $7FAE
C1/7FAC:	A9 FF      	LDA #$FF
C1/7FAE:	8D 7C 61   	STA $617C
C1/7FB1:	EE 94 7B   	INC $7B94
C1/7FB4:	80 36      	BRA $7FEC

; Slot Machine -- Press A after all slots stopped
C1/7FB6:	AD 91 7B   	LDA $7B91     ; successful spin [?]
C1/7FB9:	F0 31      	BEQ $7FEC     ; branch if ^
C1/7FBB:	AD 8C 7B   	LDA $7B8C
C1/7FBE:	20 E7 7E   	JSR $7EE7
C1/7FC1:	85 36      	STA $36
C1/7FC3:	AD 8D 7B   	LDA $7B8D
C1/7FC6:	20 F2 7E   	JSR $7EF2
C1/7FC9:	85 37      	STA $37
C1/7FCB:	AD 8E 7B   	LDA $7B8E
C1/7FCE:	20 FD 7E   	JSR $7EFD
C1/7FD1:	85 38      	STA $38
C1/7FD3:	22 A3 B4 C2	JSR $C2B4A3   ; get selected slot action id
C1/7FD7:	48         	PHA
C1/7FD8:	20 56 6D   	JSR $6D56
C1/7FDB:	68         	PLA
C1/7FDC:	99 B0 2B   	STA $2BB0,Y   ; set subcommand ID (slot action ID)
C1/7FDF:	AD CA 62   	LDA $62CA     ; active character index
C1/7FE2:	99 AE 2B   	STA $2BAE,Y   ; set attacker index
C1/7FE5:	EE 80 7B   	INC $7B80
C1/7FE8:	EE CB 7B   	INC $7BCB
C1/7FEB:	60         	RTS

; Slot Machine -- Not pressing A [?]
C1/7FEC:	A5 09      	LDA $09       ; non-auto-fire buttons [?]
C1/7FEE:	10 10      	BPL $8000     ; branch if not pushing B
C1/7FF0:	AD 92 7B   	LDA $7B92     ; slot 1 is stopped/stopping
C1/7FF3:	0D 93 7B   	ORA $7B93     ; slot 2 is stopped/stopping
C1/7FF6:	0D 94 7B   	ORA $7B94     ; slot 3 is stopped/stopping
C1/7FF9:	D0 05      	BNE $8000     ; branch if any ^
C1/7FFB:	E6 96      	INC $96       ; sound: select
C1/7FFD:	4C A0 56   	JMP $56A0     ; else, close slot machine

; Slot Machine -- Continue [?]
C1/8000:	AD 8C 7B   	LDA $7B8C     ; 1st slot scroll position
C1/8003:	18         	CLC           ; clear carry
C1/8004:	69 4C      	ADC #$4C      ; add offset
C1/8006:	8D FD 5F   	STA $5FFD
C1/8009:	8D FF 5F   	STA $5FFF
C1/800C:	8D 01 60   	STA $6001
C1/800F:	8D 03 60   	STA $6003     ; set variables for slot images
C1/8012:	AD 8D 7B   	LDA $7B8D     ; 2nd slot scroll position
C1/8015:	18         	CLC
C1/8016:	69 4C      	ADC #$4C
C1/8018:	8D 07 60   	STA $6007
C1/801B:	8D 09 60   	STA $6009
C1/801E:	8D 0B 60   	STA $600B
C1/8021:	8D 0D 60   	STA $600D
C1/8024:	AD 8E 7B   	LDA $7B8E
C1/8027:	18         	CLC
C1/8028:	69 4C      	ADC #$4C
C1/802A:	8D 11 60   	STA $6011
C1/802D:	8D 13 60   	STA $6013
C1/8030:	8D 15 60   	STA $6015
C1/8033:	8D 17 60   	STA $6017
C1/8036:	AD 8F 7B   	LDA $7B8F     ; 1st slot totally stopped
C1/8039:	D0 18      	BNE $8053     ; branch if ^
C1/803B:	AD 8C 7B   	LDA $7B8C     ; 1st slot scroll position
C1/803E:	38         	SEC           ; set carry
C1/803F:	E9 04      	SBC #$04      ; scroll up 4
C1/8041:	8D 8C 7B   	STA $7B8C     ; update 1st slot scroll position
C1/8044:	AD 92 7B   	LDA $7B92     ; 1st slot is stopped/stopping
C1/8047:	F0 0A      	BEQ $8053     ; branch if not ^
C1/8049:	AD 8C 7B   	LDA $7B8C     ; 1st slot scroll position
C1/804C:	29 0F      	AND #$0F      ; snapping into place still [?]
C1/804E:	D0 03      	BNE $8053     ; branch if ^
C1/8050:	EE 8F 7B   	INC $7B8F     ; 1st slot totally stopped

C1/8053:	AD 90 7B   	LDA $7B90
C1/8056:	D0 34      	BNE $808C
C1/8058:	AD 8D 7B   	LDA $7B8D
C1/805B:	38         	SEC
C1/805C:	E9 04      	SBC #$04
C1/805E:	8D 8D 7B   	STA $7B8D
C1/8061:	AD 93 7B   	LDA $7B93     ; 2nd slot is stopped/stopping
C1/8064:	F0 26      	BEQ $808C     ; branch if not ^
C1/8066:	AD 8D 7B   	LDA $7B8D
C1/8069:	29 0F      	AND #$0F
C1/806B:	D0 1F      	BNE $808C
C1/806D:	AD 7B 61   	LDA $617B
C1/8070:	C9 FF      	CMP #$FF
C1/8072:	F0 15      	BEQ $8089
C1/8074:	AD 8D 7B   	LDA $7B8D
C1/8077:	20 F2 7E   	JSR $7EF2
C1/807A:	CD 7B 61   	CMP $617B
C1/807D:	F0 0A      	BEQ $8089
C1/807F:	AD 7D 61   	LDA $617D
C1/8082:	F0 05      	BEQ $8089
C1/8084:	CE 7D 61   	DEC $617D
C1/8087:	80 03      	BRA $808C
C1/8089:	EE 90 7B   	INC $7B90

C1/808C:	AD 91 7B   	LDA $7B91
C1/808F:	D0 49      	BNE $80DA
C1/8091:	AD 8E 7B   	LDA $7B8E
C1/8094:	38         	SEC
C1/8095:	E9 04      	SBC #$04
C1/8097:	8D 8E 7B   	STA $7B8E
C1/809A:	AD 94 7B   	LDA $7B94     ; 3rd slot is stopped/stopping
C1/809D:	F0 3B      	BEQ $80DA     ; branch (exit) if not ^
C1/809F:	AD 8E 7B   	LDA $7B8E
C1/80A2:	29 0F      	AND #$0F
C1/80A4:	D0 34      	BNE $80DA
C1/80A6:	AD 7C 61   	LDA $617C
C1/80A9:	C9 FF      	CMP #$FF
C1/80AB:	F0 2A      	BEQ $80D7
C1/80AD:	29 80      	AND #$80
C1/80AF:	D0 15      	BNE $80C6
C1/80B1:	AD 8E 7B   	LDA $7B8E
C1/80B4:	20 FD 7E   	JSR $7EFD
C1/80B7:	CD 7C 61   	CMP $617C
C1/80BA:	F0 1B      	BEQ $80D7
C1/80BC:	AD 7D 61   	LDA $617D
C1/80BF:	F0 16      	BEQ $80D7
C1/80C1:	CE 7D 61   	DEC $617D
C1/80C4:	80 14      	BRA $80DA
C1/80C6:	AD 8E 7B   	LDA $7B8E
C1/80C9:	20 FD 7E   	JSR $7EFD
C1/80CC:	85 36      	STA $36
C1/80CE:	AD 7C 61   	LDA $617C
C1/80D1:	29 7F      	AND #$7F
C1/80D3:	C5 36      	CMP $36
C1/80D5:	F0 03      	BEQ $80DA
C1/80D7:	EE 91 7B   	INC $7B91
C1/80DA:	60         	RTS

; Cursor d-pad handling
C1/80DB:	A6 36      	LDX $36        ; cursor column position
C1/80DD:	86 3A      	STX $3A        ; copy
C1/80DF:	64 3C      	STZ $3C        ; return value flag [?]
C1/80E1:	A5 05      	LDA $05        ; pressed buttons byte [?]
C1/80E3:	29 0F      	AND #$0F       ; pressing d-pad
C1/80E5:	F0 5D      	BEQ $8144      ; exit if not ^

; Handle up
C1/80E7:	C9 08      	CMP #$08       ; pressing up
C1/80E9:	D0 09      	BNE $80F4      ; branch if not pressing up
C1/80EB:	A5 37      	LDA $37        ; cursor row position
C1/80ED:	F0 4F      	BEQ $813E      ; exit if already at top
C1/80EF:	E6 94      	INC $94        ; sound: cursor
C1/80F1:	C6 37      	DEC $37        ; move cursor row position up
C1/80F3:	60         	RTS

; Handle down
C1/80F4:	C9 04      	CMP #$04       ; pressing down
C1/80F6:	D0 0B      	BNE $8103      ; branch if not pressing down
C1/80F8:	A5 37      	LDA $37        ; cursor row position
C1/80FA:	C9 03      	CMP #$03       ; lowest row position
C1/80FC:	F0 43      	BEQ $8141      ; exit if already at bottom
C1/80FE:	E6 94      	INC $94        ; sound: cursor
C1/8100:	E6 37      	INC $37        ; move cursor row position down
C1/8102:	60         	RTS

; Handle left
C1/8103:	C9 02      	CMP #$02       ; pressing left
C1/8105:	D0 16      	BNE $811D      ; branch if not ^
C1/8107:	A5 36      	LDA $36        ; cursor column position
C1/8109:	D0 0D      	BNE $8118      ; branch if cursor on right
C1/810B:	A5 39      	LDA $39        ; right-most column
C1/810D:	85 36      	STA $36        ; wrap cursor to rightmost column
C1/810F:	A5 37      	LDA $37        ; cursor row position
C1/8111:	F0 26      	BEQ $8139      ; exit if already at top
C1/8113:	E6 94      	INC $94        ; sound: cursor
C1/8115:	C6 37      	DEC $37        ; move cursor row position up
C1/8117:	60         	RTS

C1/8118:	E6 94      	INC $94        ; sound: cursor
C1/811A:	C6 36      	DEC $36        ; set cursor column: left
C1/811C:	60         	RTS

; Handle right
C1/811D:	C9 01      	CMP #$01       ; pressing right
C1/811F:	D0 23      	BNE $8144      ; exit if not ^
C1/8121:	A5 36      	LDA $36        ; cursor column position
C1/8123:	C5 39      	CMP $39        ; compare to max column
C1/8125:	D0 0D      	BNE $8134      ; branch if not at max
C1/8127:	64 36      	STZ $36        ; wrap cursor to leftmost column
C1/8129:	A5 37      	LDA $37        ; cursor row position
C1/812B:	C9 03      	CMP #$03       ; compare to max row
C1/812D:	F0 12      	BEQ $8141      ; exit if cannot move downward
C1/812F:	E6 94      	INC $94        ; sound: cursor
C1/8131:	E6 37      	INC $37        ; move cursor row downward
C1/8133:	60         	RTS

C1/8134:	E6 94      	INC $94        ; sound: cursor
C1/8136:	E6 36      	INC $36        ; move cursor column to right
C1/8138:	60         	RTS

C1/8139:	A9 BF      	LDA #$BF       ; flag left press at top row
C1/813B:	85 3C      	STA $3C
C1/813D:	60         	RTS

C1/813E:	C6 3C      	DEC $3C        ; flag scroll up
C1/8140:	60         	RTS

C1/8141:	E6 3C      	INC $3C        ; flag scroll down
C1/8143:	60         	RTS

C1/8144:	60         	RTS

; Sustain Magic Menu

C1/8145:	9C EF 88   	STZ $88EF
C1/8148:	9C E3 88   	STZ $88E3
C1/814B:	AD CB 7B   	LDA $7BCB
C1/814E:	F0 06      	BEQ $8156
C1/8150:	A9 14      	LDA #$14
C1/8152:	8D C2 7B   	STA $7BC2
C1/8155:	60         	RTS

C1/8156:	AC CA 62   	LDY $62CA
C1/8159:	B9 17 89   	LDA $8917,Y
C1/815C:	85 36      	STA $36
C1/815E:	B9 1B 89   	LDA $891B,Y
C1/8161:	85 37      	STA $37
C1/8163:	B9 13 89   	LDA $8913,Y
C1/8166:	85 38      	STA $38
C1/8168:	A9 01      	LDA #$01
C1/816A:	85 39      	STA $39
C1/816C:	20 DB 80   	JSR $80DB      ; cursor d-pad handling
C1/816F:	A5 3C      	LDA $3C
C1/8171:	F0 31      	BEQ $81A4
C1/8173:	30 12      	BMI $8187
C1/8175:	B9 13 89   	LDA $8913,Y
C1/8178:	C9 17      	CMP #$17
C1/817A:	F0 32      	BEQ $81AE
C1/817C:	1A         	INC A
C1/817D:	99 13 89   	STA $8913,Y
C1/8180:	E6 94      	INC $94        ; sound: cursor
C1/8182:	20 28 82   	JSR $8228
C1/8185:	80 1D      	BRA $81A4
C1/8187:	B9 13 89   	LDA $8913,Y
C1/818A:	D0 0F      	BNE $819B
C1/818C:	E6 94      	INC $94        ; sound: cursor
C1/818E:	AD E8 7A   	LDA $7AE8
C1/8191:	D0 11      	BNE $81A4
C1/8193:	20 9B 82   	JSR $829B
C1/8196:	B0 0C      	BCS $81A4
C1/8198:	4C 01 5A   	JMP $5A01

C1/819B:	3A         	DEC A
C1/819C:	99 13 89   	STA $8913,Y
C1/819F:	E6 94      	INC $94        ; sound: cursor
C1/81A1:	20 46 82   	JSR $8246
C1/81A4:	A5 36      	LDA $36
C1/81A6:	99 17 89   	STA $8917,Y
C1/81A9:	A5 37      	LDA $37
C1/81AB:	99 1B 89   	STA $891B,Y

C1/81AE:	A5 04      	LDA $04        ; buttons pressed
C1/81B0:	10 3B      	BPL $81ED      ; branch if not pressing A

; Selecting Magic Spell
C1/81B2:	20 14 84   	JSR $8414     ; get offset to spell list data
C1/81B5:	BD 93 20   	LDA $2093,X   ; spell flags
C1/81B8:	30 31      	BMI $81EB     ; branch if "Disabled"
C1/81BA:	E6 96      	INC $96       ; sound: select
C1/81BC:	20 56 6D   	JSR $6D56     ; get active battle menu index in Y
C1/81BF:	AD E8 7A   	LDA $7AE8     ; "X-Magic" enabled
C1/81C2:	F0 04      	BEQ $81C8     ; branch if not ^
C1/81C4:	A9 17      	LDA #$17      ; "X-Magic" command ID
C1/81C6:	80 02      	BRA $81CA     ; branch
C1/81C8:	A9 02      	LDA #$02      ; "Magic" command ID

C1/81CA:	99 AF 2B   	STA $2BAF,Y   ; set pending action command ID
C1/81CD:	20 14 84   	JSR $8414     ; get offset to spell list data
C1/81D0:	BD 92 20   	LDA $2092,X   ; spell index
C1/81D3:	8D 85 7A   	STA $7A85     ; save ^
C1/81D6:	A9 01      	LDA #$01      ; "Magic" mode
C1/81D8:	8D BA EC   	STA $ECBA     ; set "Curative Menu" mode
C1/81DB:	BD 94 20   	LDA $2094,X   ; spell targeting data
C1/81DE:	8D 84 7A   	STA $7A84     ; save ^
C1/81E1:	29 40      	AND #$40      ; "Enemy Selected by Default"
C1/81E3:	D0 03      	BNE $81E8     ; branch if ^
C1/81E5:	4C B0 55   	JMP $55B0     ; target allies (open menu)
C1/81E8:	4C 95 77   	JMP $7795     ; else, load cursor (skip allies window)

C1/81EB:	E6 95      	INC $95       ; sound: buzzer

C1/81ED:	A5 09      	LDA $09
C1/81EF:	10 05      	BPL $81F6
C1/81F1:	E6 96      	INC $96       ; sound: select
C1/81F3:	4C E9 56   	JMP $56E9

C1/81F6:	20 14 84   	JSR $8414
C1/81F9:	BD 95 20   	LDA $2095,X
C1/81FC:	8D 78 61   	STA $6178
C1/81FF:	A9 17      	LDA #$17
C1/8201:	85 36      	STA $36
C1/8203:	A2 90 01   	LDX #$0190
C1/8206:	86 2E      	STX $2E
C1/8208:	B9 13 89   	LDA $8913,Y
C1/820B:	20 8F 89   	JSR $898F
C1/820E:	B9 17 89   	LDA $8917,Y
C1/8211:	AA         	TAX
C1/8212:	BF 80 82 C1	LDA $C18280,X    ; Data
C1/8216:	8D E4 88   	STA $88E4      ; main cursor X position
C1/8219:	B9 1B 89   	LDA $891B,Y
C1/821C:	AA         	TAX
C1/821D:	BF 8D 82 C1	LDA $C1828D,X    ; Data
C1/8221:	8D E5 88   	STA $88E5
C1/8224:	EE E3 88   	INC $88E3
C1/8227:	60         	RTS

C1/8228:	18         	CLC
C1/8229:	69 03      	ADC #$03
C1/822B:	20 B5 4D   	JSR $4DB5
C1/822E:	A9 17      	LDA #$17
C1/8230:	8D C2 7B   	STA $7BC2
C1/8233:	20 69 82   	JSR $8269
C1/8236:	AD FD 7A   	LDA $7AFD
C1/8239:	C9 04      	CMP #$04
C1/823B:	F0 03      	BEQ $8240
C1/823D:	1A         	INC A
C1/823E:	80 01      	BRA $8241
C1/8240:	7B         	TDC
C1/8241:	8D FD 7A   	STA $7AFD
C1/8244:	80 18      	BRA $825E
C1/8246:	20 B5 4D   	JSR $4DB5
C1/8249:	A9 18      	LDA #$18
C1/824B:	8D C2 7B   	STA $7BC2
C1/824E:	20 69 82   	JSR $8269
C1/8251:	AD FD 7A   	LDA $7AFD
C1/8254:	F0 03      	BEQ $8259
C1/8256:	3A         	DEC A
C1/8257:	80 02      	BRA $825B
C1/8259:	A9 04      	LDA #$04
C1/825B:	8D FD 7A   	STA $7AFD
C1/825E:	A9 03      	LDA #$03
C1/8260:	8D A8 7B   	STA $7BA8
C1/8263:	A9 0E      	LDA #$0E
C1/8265:	8D C3 7B   	STA $7BC3
C1/8268:	60         	RTS

C1/8269:	AD FD 7A   	LDA $7AFD
C1/826C:	0A         	ASL A
C1/826D:	AA         	TAX
C1/826E:	BF 91 82 C1	LDA $C18291,X    ; Data
C1/8272:	8D AA 7B   	STA $7BAA
C1/8275:	BF 92 82 C1	LDA $C18292,X    ; Data
C1/8279:	8D AB 7B   	STA $7BAB
C1/827C:	EE A9 7B   	INC $7BA9
C1/827F:	60         	RTS

C1/8280:	08
C1/8281:	50
C1/8282:	70

; Xpos offset for equip menu columns
C1/8283:	00
C1/8284:	78

C1/8285:	00
C1/8286:	78

; Xpos offset for item menu columns
C1/8287:	10
C1/8288:	80

C1/8289:	10
C1/828A:	78
C1/828B:	08
C1/828C:	58

; Ypos offset for visible slots
C1/828D:	A4
C1/828E:	B0
C1/828F:	BC
C1/8290:	C8

C1/8291:	007C
C1/8293:	407C
C1/8295:	807C
C1/8297:	C07C
C1/8299:	007D

; Determine if "Esper" is disabled [?]

C1/829B:	AD CA 62   	LDA $62CA        ; active character
C1/829E:	0A         	ASL A            ; x2
C1/829F:	AA         	TAX              ; index it
C1/82A0:	C2 20      	REP #$20         ; 16-bit A
C1/82A2:	BF 5F 4B C1	LDA $C14B5F,X    ; offset to esper data by character slot
C1/82A6:	AA         	TAX              ; index it
C1/82A7:	7B         	TDC              ; zero A/B
C1/82A8:	E2 20      	SEP #$20         ; 8-bit A
C1/82AA:	BD 8F 20   	LDA $208F,X      ; esper is disabled
C1/82AD:	30 02      	BMI $82B1        ; branch if ^
C1/82AF:	18         	CLC              ; clear carry (valid)
C1/82B0:	60         	RTS
C1/82B1:	38         	SEC
C1/82B2:	60         	RTS

; Sustain Esper Menu

C1/82B3:	9C E3 88   	STZ $88E3
C1/82B6:	AD CB 7B   	LDA $7BCB
C1/82B9:	F0 06      	BEQ $82C1
C1/82BB:	A9 15      	LDA #$15
C1/82BD:	8D C2 7B   	STA $7BC2
C1/82C0:	60         	RTS

C1/82C1:	A5 05      	LDA $05
C1/82C3:	29 05      	AND #$05
C1/82C5:	F0 0F      	BEQ $82D6
C1/82C7:	E6 94      	INC $94        ; sound: cursor
C1/82C9:	29 01      	AND #$01
C1/82CB:	F0 06      	BEQ $82D3
C1/82CD:	AE CA 62   	LDX $62CA
C1/82D0:	9E 17 89   	STZ $8917,X
C1/82D3:	4C 1F 57   	JMP $571F

C1/82D6:	A5 04      	LDA $04         ; buttons pressed
C1/82D8:	10 20      	BPL $82FA       ; branch if not pressing "A"

; Selecting Esper Spell

C1/82DA:	20 9B 82   	JSR $829B       ; determine if esper is disabled [?]
C1/82DD:	B0 19      	BCS $82F8       ; branch if disabled
C1/82DF:	E6 96      	INC $96         ; sound: select
C1/82E1:	20 56 6D   	JSR $6D56       ; get active battle menu index
C1/82E4:	A9 19      	LDA #$19        ; "Esper" command ID
C1/82E6:	99 AF 2B   	STA $2BAF,Y     ; set pending action command ID
C1/82E9:	BD 8E 20   	LDA $208E,X     ; esper ID
C1/82EC:	8D 85 7A   	STA $7A85       ; save ^
C1/82EF:	BD 90 20   	LDA $2090,X     ; selected esper targeting byte
C1/82F2:	8D 84 7A   	STA $7A84       ; save ^
C1/82F5:	4C 95 77   	JMP $7795       ; load cursor

C1/82F8:	E6 95      	INC $95       ; sound: buzzer
C1/82FA:	A9 38      	LDA #$38
C1/82FC:	8D E4 88   	STA $88E4      ; main cursor X position
C1/82FF:	A9 A8      	LDA #$A8
C1/8301:	8D E5 88   	STA $88E5
C1/8304:	EE E3 88   	INC $88E3
C1/8307:	60         	RTS

; Sustain Lore Menu

C1/8308:	9C E3 88   	STZ $88E3
C1/830B:	9C EF 88   	STZ $88EF
C1/830E:	AD CB 7B   	LDA $7BCB
C1/8311:	F0 06      	BEQ $8319
C1/8313:	A9 1A      	LDA #$1A
C1/8315:	8D C2 7B   	STA $7BC2
C1/8318:	60         	RTS

C1/8319:	AC CA 62   	LDY $62CA
C1/831C:	64 36      	STZ $36
C1/831E:	B9 27 89   	LDA $8927,Y
C1/8321:	85 37      	STA $37
C1/8323:	B9 1F 89   	LDA $891F,Y
C1/8326:	85 38      	STA $38        ; topmost cursor row
C1/8328:	64 39      	STZ $39        ; rightmost cursor column: 0
C1/832A:	20 DB 80   	JSR $80DB      ; cursor d-pad handling
C1/832D:	A5 3C      	LDA $3C
C1/832F:	F0 22      	BEQ $8353
C1/8331:	30 12      	BMI $8345
C1/8333:	B9 1F 89   	LDA $891F,Y
C1/8336:	C9 14      	CMP #$14
C1/8338:	F0 23      	BEQ $835D
C1/833A:	1A         	INC A
C1/833B:	99 1F 89   	STA $891F,Y
C1/833E:	E6 94      	INC $94        ; sound: cursor
C1/8340:	20 B6 83   	JSR $83B6
C1/8343:	80 0E      	BRA $8353
C1/8345:	B9 1F 89   	LDA $891F,Y
C1/8348:	F0 13      	BEQ $835D
C1/834A:	3A         	DEC A
C1/834B:	99 1F 89   	STA $891F,Y
C1/834E:	E6 94      	INC $94        ; sound: cursor
C1/8350:	20 D4 83   	JSR $83D4
C1/8353:	A5 36      	LDA $36
C1/8355:	99 23 89   	STA $8923,Y
C1/8358:	A5 37      	LDA $37
C1/835A:	99 27 89   	STA $8927,Y

C1/835D:	A5 04      	LDA $04        ; buttons pressed
C1/835F:	10 1B      	BPL $837C      ; branch if not pressing "A"
C1/8361:	20 F7 83   	JSR $83F7      ; get chosen spell offset
C1/8364:	BD 6B 21   	LDA $216B,X    ; spell flags
C1/8367:	30 11      	BMI $837A      ; branch if disabled (low MP)
C1/8369:	E6 94      	INC $94        ; sound: cursor
C1/836B:	BD 6A 21   	LDA $216A,X    ; spell ID
C1/836E:	8D 85 7A   	STA $7A85      ; save ^
C1/8371:	BD 6C 21   	LDA $216C,X    ; spell targeting
C1/8374:	8D 84 7A   	STA $7A84      ; save ^
C1/8377:	4C 95 77   	JMP $7795      ; load cursor (skip healing window)

C1/837A:	E6 95      	INC $95       ; sound: buzzer

C1/837C:	A5 09      	LDA $09
C1/837E:	10 06      	BPL $8386
C1/8380:	E6 96      	INC $96       ; sound: select
C1/8382:	20 FB 56   	JSR $56FB
C1/8385:	60         	RTS

C1/8386:	20 F7 83    JSR $83F7
C1/8389:	BD 6D 21    LDA $216D,X
C1/838C:	8D 78 61    STA $6178
C1/838F:	A9 08       LDA #$08
C1/8391:	85 36       STA $36
C1/8393:	A2 CD 01    LDX #$01CD
C1/8396:	86 2E       STX $2E
C1/8398:	B9 1F 89    LDA $891F,Y
C1/839B:	20 8F 89    JSR $898F
C1/839E:	7B          TDC
C1/839F:	AA          TAX
C1/83A0:	BF 8B 82 C1 LDA $C1828B,X
C1/83A4:	8D E4 88    STA $88E4      ; main cursor X position
C1/83A7:	B9 27 89    LDA $8927,Y
C1/83AA:	AA          TAX
C1/83AB:	BF 8D 82 C1 LDA $C1828D,X
C1/83AF:	8D E5 88    STA $88E5
C1/83B2:	EE E3 88    INC $88E3
C1/83B5:	60          RTS

C1/83B6:	18         	CLC
C1/83B7:	69 03      	ADC #$03
C1/83B9:	20 76 4D   	JSR $4D76
C1/83BC:	A9 17      	LDA #$17
C1/83BE:	8D C2 7B   	STA $7BC2
C1/83C1:	20 69 82   	JSR $8269
C1/83C4:	AD FD 7A   	LDA $7AFD
C1/83C7:	C9 04      	CMP #$04
C1/83C9:	F0 03      	BEQ $83CE
C1/83CB:	1A         	INC A
C1/83CC:	80 01      	BRA $83CF
C1/83CE:	7B         	TDC
C1/83CF:	8D FD 7A   	STA $7AFD
C1/83D2:	80 18      	BRA $83EC
C1/83D4:	20 76 4D   	JSR $4D76
C1/83D7:	A9 18      	LDA #$18
C1/83D9:	8D C2 7B   	STA $7BC2
C1/83DC:	20 69 82   	JSR $8269
C1/83DF:	AD FD 7A   	LDA $7AFD
C1/83E2:	F0 03      	BEQ $83E7
C1/83E4:	3A         	DEC A
C1/83E5:	80 02      	BRA $83E9
C1/83E7:	A9 04      	LDA #$04
C1/83E9:	8D FD 7A   	STA $7AFD
C1/83EC:	A9 03      	LDA #$03
C1/83EE:	8D A8 7B   	STA $7BA8
C1/83F1:	A9 1B      	LDA #$1B
C1/83F3:	8D C3 7B   	STA $7BC3
C1/83F6:	60         	RTS

; Get spell entry data offset in X
C1/83F7:	5A         	PHY               ; store Y
C1/83F8:	AD CA 62   	LDA $62CA         ; active character
C1/83FB:	A8         	TAY               ; index it
C1/83FC:	0A         	ASL A             ; x2
C1/83FD:	AA         	TAX               ; index it
C1/83FE:	B9 1F 89   	LDA $891F,Y
C1/8401:	18         	CLC
C1/8402:	79 27 89   	ADC $8927,Y
C1/8405:	C2 20      	REP #$20          ; 16-bit A
C1/8407:	0A         	ASL A             ; x2
C1/8408:	0A         	ASL A             ; x4
C1/8409:	18         	CLC               ; clear carry
C1/840A:	7F 5F 4B C1	ADC $C14B5F,X     ; beginning of character spell list data
C1/840E:	AA         	TAX               ; index offset to this spell data
C1/840F:	7B         	TDC               ; zero A/B
C1/8410:	E2 20      	SEP #$20          ; 8-bit A
C1/8412:	7A         	PLY               ; restore Y
C1/8413:	60         	RTS

C1/8414:	5A         	PHY
C1/8415:	AD CA 62   	LDA $62CA
C1/8418:	A8         	TAY
C1/8419:	0A         	ASL A
C1/841A:	AA         	TAX
C1/841B:	B9 13 89   	LDA $8913,Y
C1/841E:	18         	CLC
C1/841F:	79 1B 89   	ADC $891B,Y
C1/8422:	85 40      	STA $40
C1/8424:	0A         	ASL A
C1/8425:	18         	CLC
C1/8426:	79 17 89   	ADC $8917,Y
C1/8429:	C2 20      	REP #$20
C1/842B:	0A         	ASL A
C1/842C:	0A         	ASL A
C1/842D:	18         	CLC
C1/842E:	7F 5F 4B C1	ADC $C14B5F,X
C1/8432:	AA         	TAX
C1/8433:	7B         	TDC
C1/8434:	E2 20      	SEP #$20           ; 8-bit A
C1/8436:	7A         	PLY
C1/8437:	60         	RTS

C1/8438:	AE CA 62   	LDX $62CA
C1/843B:	BD 2F 89   	LDA $892F,X
C1/843E:	85 40      	STA $40
C1/8440:	64 41      	STZ $41
C1/8442:	BD 2B 89   	LDA $892B,X
C1/8445:	18         	CLC
C1/8446:	7D 33 89   	ADC $8933,X
C1/8449:	C2 20      	REP #$20
C1/844B:	0A         	ASL A
C1/844C:	18         	CLC
C1/844D:	65 40      	ADC $40
C1/844F:	AA         	TAX
C1/8450:	7B         	TDC
C1/8451:	E2 20      	SEP #$20           ; 8-bit A
C1/8453:	60         	RTS

C1/8454:	5A         	PHY
C1/8455:	AD CA 62   	LDA $62CA
C1/8458:	A8         	TAY
C1/8459:	0A         	ASL A
C1/845A:	AA         	TAX
C1/845B:	B9 53 89   	LDA $8953,Y
C1/845E:	18         	CLC
C1/845F:	79 5B 89   	ADC $895B,Y
C1/8462:	C2 20      	REP #$20
C1/8464:	85 40      	STA $40
C1/8466:	0A         	ASL A
C1/8467:	18         	CLC
C1/8468:	65 40      	ADC $40
C1/846A:	AA         	TAX
C1/846B:	7B         	TDC
C1/846C:	E2 20      	SEP #$20           ; 8-bit A
C1/846E:	7A         	PLY
C1/846F:	60         	RTS

C1/8470:	5A         	PHY
C1/8471:	AD CA 62   	LDA $62CA
C1/8474:	A8         	TAY
C1/8475:	0A         	ASL A
C1/8476:	AA         	TAX
C1/8477:	B9 5F 89   	LDA $895F,Y
C1/847A:	18         	CLC
C1/847B:	79 67 89   	ADC $8967,Y
C1/847E:	0A         	ASL A
C1/847F:	18         	CLC
C1/8480:	79 63 89   	ADC $8963,Y
C1/8483:	C2 20      	REP #$20
C1/8485:	85 40      	STA $40
C1/8487:	0A         	ASL A
C1/8488:	18         	CLC
C1/8489:	65 40      	ADC $40
C1/848B:	AA         	TAX
C1/848C:	7B         	TDC
C1/848D:	E2 20      	SEP #$20           ; 8-bit A
C1/848F:	7A         	PLY
C1/8490:	60         	RTS

C1/8491:	AE CA 62   	LDX $62CA
C1/8494:	BD 43 89   	LDA $8943,X
C1/8497:	0A         	ASL A
C1/8498:	18         	CLC
C1/8499:	7D 3F 89   	ADC $893F,X
C1/849C:	AA         	TAX
C1/849D:	60         	RTS

C1/849E:	AE CA 62   	LDX $62CA
C1/84A1:	BD 3B 89   	LDA $893B,X
C1/84A4:	0A         	ASL A
C1/84A5:	18         	CLC
C1/84A6:	7D 37 89   	ADC $8937,X
C1/84A9:	AA         	TAX
C1/84AA:	60         	RTS

C1/84AB:	AE CA 62   	LDX $62CA
C1/84AE:	BD 0F 89   	LDA $890F,X
C1/84B1:	85 2C      	STA $2C
C1/84B3:	A9 03      	LDA #$03
C1/84B5:	85 2E      	STA $2E
C1/84B7:	20 B0 18   	JSR $18B0
C1/84BA:	AE CA 62   	LDX $62CA
C1/84BD:	BF 5B 4B C1	LDA $C14B5B,X    ; Data
C1/84C1:	18         	CLC
C1/84C2:	65 30      	ADC $30
C1/84C4:	AA         	TAX
C1/84C5:	60         	RTS

C1/84C6:	9C E3 88   	STZ $88E3
C1/84C9:	9C EF 88   	STZ $88EF
C1/84CC:	AD CB 7B   	LDA $7BCB
C1/84CF:	F0 06      	BEQ $84D7
C1/84D1:	A9 1D      	LDA #$1D
C1/84D3:	8D C2 7B   	STA $7BC2
C1/84D6:	60         	RTS

C1/84D7:	AC CA 62   	LDY $62CA
C1/84DA:	B9 2F 89   	LDA $892F,Y
C1/84DD:	85 36      	STA $36
C1/84DF:	B9 33 89   	LDA $8933,Y
C1/84E2:	85 37      	STA $37
C1/84E4:	B9 2B 89   	LDA $892B,Y
C1/84E7:	85 38      	STA $38
C1/84E9:	A9 01      	LDA #$01
C1/84EB:	85 39      	STA $39
C1/84ED:	20 DB 80   	JSR $80DB      ; cursor d-pad handling
C1/84F0:	A5 3C      	LDA $3C
C1/84F2:	F0 22      	BEQ $8516
C1/84F4:	30 12      	BMI $8508
C1/84F6:	B9 2B 89   	LDA $892B,Y
C1/84F9:	C9 7C      	CMP #$7C
C1/84FB:	F0 23      	BEQ $8520
C1/84FD:	1A         	INC A
C1/84FE:	99 2B 89   	STA $892B,Y
C1/8501:	E6 94      	INC $94        ; sound: cursor
C1/8503:	20 73 85   	JSR $8573
C1/8506:	80 0E      	BRA $8516
C1/8508:	B9 2B 89   	LDA $892B,Y
C1/850B:	F0 13      	BEQ $8520
C1/850D:	3A         	DEC A
C1/850E:	99 2B 89   	STA $892B,Y
C1/8511:	E6 94      	INC $94        ; sound: cursor
C1/8513:	20 91 85   	JSR $8591
C1/8516:	A5 36      	LDA $36
C1/8518:	99 2F 89   	STA $892F,Y
C1/851B:	A5 37      	LDA $37
C1/851D:	99 33 89   	STA $8933,Y
C1/8520:	A5 09      	LDA $09
C1/8522:	10 06      	BPL $852A
C1/8524:	E6 96      	INC $96       ; sound: select
C1/8526:	20 04 57   	JSR $5704
C1/8529:	60         	RTS

C1/852A:	A5 04      	LDA $04
C1/852C:	10 1C      	BPL $854A
C1/852E:	20 38 84   	JSR $8438
C1/8531:	BD 7E 25   	LDA $257E,X
C1/8534:	C9 FF      	CMP #$FF
C1/8536:	F0 10      	BEQ $8548
C1/8538:	E6 96      	INC $96       ; sound: select
C1/853A:	BD 7E 25   	LDA $257E,X
C1/853D:	8D 85 7A   	STA $7A85
C1/8540:	A9 02      	LDA #$02
C1/8542:	8D 84 7A   	STA $7A84
C1/8545:	4C 95 77   	JMP $7795

C1/8548:	E6 95      	INC $95       ; sound: buzzer
C1/854A:	A9 7C      	LDA #$7C
C1/854C:	85 36      	STA $36
C1/854E:	A2 4B 00   	LDX #$004B
C1/8551:	86 2E      	STX $2E
C1/8553:	B9 2B 89   	LDA $892B,Y
C1/8556:	20 8F 89   	JSR $898F
C1/8559:	B9 2F 89   	LDA $892F,Y
C1/855C:	AA         	TAX
C1/855D:	BF 89 82 C1	LDA $C18289,X    ; Data
C1/8561:	8D E4 88   	STA $88E4      ; main cursor X position
C1/8564:	B9 33 89   	LDA $8933,Y
C1/8567:	AA         	TAX
C1/8568:	BF 8D 82 C1	LDA $C1828D,X    ; Data
C1/856C:	8D E5 88   	STA $88E5
C1/856F:	EE E3 88   	INC $88E3
C1/8572:	60         	RTS

C1/8573:	18         	CLC
C1/8574:	69 03      	ADC #$03
C1/8576:	20 E2 4C   	JSR $4CE2
C1/8579:	A9 17      	LDA #$17
C1/857B:	8D C2 7B   	STA $7BC2
C1/857E:	20 69 82   	JSR $8269
C1/8581:	AD FD 7A   	LDA $7AFD
C1/8584:	C9 04      	CMP #$04
C1/8586:	F0 03      	BEQ $858B
C1/8588:	1A         	INC A
C1/8589:	80 01      	BRA $858C
C1/858B:	7B         	TDC
C1/858C:	8D FD 7A   	STA $7AFD
C1/858F:	80 18      	BRA $85A9
C1/8591:	20 E2 4C   	JSR $4CE2
C1/8594:	A9 18      	LDA #$18
C1/8596:	8D C2 7B   	STA $7BC2
C1/8599:	20 69 82   	JSR $8269
C1/859C:	AD FD 7A   	LDA $7AFD
C1/859F:	F0 03      	BEQ $85A4
C1/85A1:	3A         	DEC A
C1/85A2:	80 02      	BRA $85A6
C1/85A4:	A9 04      	LDA #$04
C1/85A6:	8D FD 7A   	STA $7AFD
C1/85A9:	A9 03      	LDA #$03
C1/85AB:	8D A8 7B   	STA $7BA8
C1/85AE:	A9 1E      	LDA #$1E
C1/85B0:	8D C3 7B   	STA $7BC3
C1/85B3:	60         	RTS

C1/85B4:	9C E3 88   	STZ $88E3
C1/85B7:	AD CB 7B   	LDA $7BCB
C1/85BA:	F0 06      	BEQ $85C2
C1/85BC:	A9 20      	LDA #$20
C1/85BE:	8D C2 7B   	STA $7BC2
C1/85C1:	60         	RTS

C1/85C2:	AC CA 62   	LDY $62CA
C1/85C5:	B9 37 89   	LDA $8937,Y
C1/85C8:	85 36      	STA $36
C1/85CA:	B9 3B 89   	LDA $893B,Y
C1/85CD:	85 37      	STA $37
C1/85CF:	64 38      	STZ $38
C1/85D1:	A9 01      	LDA #$01
C1/85D3:	85 39      	STA $39
C1/85D5:	20 DB 80   	JSR $80DB      ; cursor d-pad handling
C1/85D8:	A5 3C      	LDA $3C
C1/85DA:	D0 0A      	BNE $85E6
C1/85DC:	A5 36      	LDA $36
C1/85DE:	99 37 89   	STA $8937,Y
C1/85E1:	A5 37      	LDA $37
C1/85E3:	99 3B 89   	STA $893B,Y
C1/85E6:	A5 09      	LDA $09
C1/85E8:	10 06      	BPL $85F0
C1/85EA:	E6 96      	INC $96       ; sound: select
C1/85EC:	20 0D 57   	JSR $570D
C1/85EF:	60         	RTS

C1/85F0:	A5 04      	LDA $04
C1/85F2:	10 17      	BPL $860B
C1/85F4:	20 9E 84   	JSR $849E
C1/85F7:	BD 7E 26   	LDA $267E,X
C1/85FA:	30 0D      	BMI $8609
C1/85FC:	E6 96      	INC $96       ; sound: select
C1/85FE:	8D 85 7A   	STA $7A85
C1/8601:	A9 02      	LDA #$02
C1/8603:	8D 84 7A   	STA $7A84
C1/8606:	4C 95 77   	JMP $7795

C1/8609:	E6 95      	INC $95       ; sound: buzzer
C1/860B:	B9 37 89   	LDA $8937,Y
C1/860E:	AA         	TAX
C1/860F:	BF 87 82 C1	LDA $C18287,X
C1/8613:	8D E4 88   	STA $88E4      ; main cursor X position
C1/8616:	B9 3B 89   	LDA $893B,Y
C1/8619:	AA         	TAX
C1/861A:	BF 8D 82 C1	LDA $C1828D,X
C1/861E:	8D E5 88   	STA $88E5
C1/8621:	EE E3 88   	INC $88E3
C1/8624:	60         	RTS

; Magitek Menu Sustain

C1/8625:	9C E3 88   	STZ $88E3
C1/8628:	AD CB 7B   	LDA $7BCB
C1/862B:	F0 06      	BEQ $8633
C1/862D:	A9 29      	LDA #$29
C1/862F:	8D C2 7B   	STA $7BC2
C1/8632:	60         	RTS

C1/8633:	AC CA 62   	LDY $62CA
C1/8636:	B9 3F 89   	LDA $893F,Y
C1/8639:	85 36      	STA $36
C1/863B:	B9 43 89   	LDA $8943,Y
C1/863E:	85 37      	STA $37
C1/8640:	64 38      	STZ $38
C1/8642:	A9 01      	LDA #$01
C1/8644:	85 39      	STA $39
C1/8646:	20 DB 80   	JSR $80DB      ; cursor d-pad handling
C1/8649:	A5 3C      	LDA $3C
C1/864B:	D0 0A      	BNE $8657
C1/864D:	A5 36      	LDA $36
C1/864F:	99 3F 89   	STA $893F,Y
C1/8652:	A5 37      	LDA $37
C1/8654:	99 43 89   	STA $8943,Y
C1/8657:	A5 09      	LDA $09
C1/8659:	10 06      	BPL $8661
C1/865B:	E6 96      	INC $96       ; sound: select
C1/865D:	20 16 57   	JSR $5716
C1/8660:	60         	RTS

C1/8661:	84 36      	STY $36
C1/8663:	A5 04      	LDA $04
C1/8665:	10 32      	BPL $8699
C1/8667:	20 91 84   	JSR $8491
C1/866A:	AD CA 62   	LDA $62CA
C1/866D:	0A         	ASL A
C1/866E:	0A         	ASL A
C1/866F:	0A         	ASL A
C1/8670:	0A         	ASL A
C1/8671:	0A         	ASL A
C1/8672:	A8         	TAY
C1/8673:	B9 AE 2E   	LDA $2EAE,Y      ; character graphics index
C1/8676:	D0 08      	BNE $8680        ; branch if not Terra
C1/8678:	BF 0C 91 C1	LDA $C1910C,X    ; terra's magitek spell in slot X
C1/867C:	30 19      	BMI $8697        ; branch if null
C1/867E:	80 06      	BRA $8686        ; else, select
C1/8680:	BF 14 91 C1	LDA $C19114,X    ; magitek spell in slot X
C1/8684:	30 11      	BMI $8697        ; branch if null

C1/8686:	E6 96      	INC $96          ; sound: select
C1/8688:	8D 85 7A   	STA $7A85        ; selected index
C1/868B:	A4 36      	LDY $36
C1/868D:	BF 04 91 C1	LDA $C19104,X    ; Data
C1/8691:	8D 84 7A   	STA $7A84
C1/8694:	4C 95 77   	JMP $7795

C1/8697:	E6 95      	INC $95       ; sound: buzzer
C1/8699:	A4 36      	LDY $36
C1/869B:	B9 3F 89   	LDA $893F,Y
C1/869E:	AA         	TAX
C1/869F:	BF 89 82 C1	LDA $C18289,X    ; Data
C1/86A3:	8D E4 88   	STA $88E4      ; main cursor X position
C1/86A6:	B9 43 89   	LDA $8943,Y
C1/86A9:	AA         	TAX
C1/86AA:	BF 8D 82 C1	LDA $C1828D,X    ; Data
C1/86AE:	8D E5 88   	STA $88E5
C1/86B1:	EE E3 88   	INC $88E3
C1/86B4:	60         	RTS

C1/86B5:	9C E3 88   	STZ $88E3
C1/86B8:	9C EF 88   	STZ $88EF
C1/86BB:	AD CB 7B   	LDA $7BCB
C1/86BE:	F0 06      	BEQ $86C6
C1/86C0:	A9 2C      	LDA #$2C
C1/86C2:	8D C2 7B   	STA $7BC2
C1/86C5:	60         	RTS

C1/86C6:	AC CA 62   	LDY $62CA
C1/86C9:	64 36      	STZ $36
C1/86CB:	B9 5B 89   	LDA $895B,Y
C1/86CE:	85 37      	STA $37
C1/86D0:	B9 53 89   	LDA $8953,Y
C1/86D3:	85 38      	STA $38
C1/86D5:	7B         	TDC
C1/86D6:	85 39      	STA $39
C1/86D8:	20 DB 80   	JSR $80DB      ; cursor d-pad handling
C1/86DB:	A5 3C      	LDA $3C
C1/86DD:	F0 22      	BEQ $8701
C1/86DF:	30 12      	BMI $86F3
C1/86E1:	B9 53 89   	LDA $8953,Y
C1/86E4:	C9 FB      	CMP #$FB
C1/86E6:	F0 23      	BEQ $870B
C1/86E8:	1A         	INC A
C1/86E9:	99 53 89   	STA $8953,Y
C1/86EC:	E6 94      	INC $94        ; sound: cursor
C1/86EE:	20 5C 87   	JSR $875C
C1/86F1:	80 0E      	BRA $8701
C1/86F3:	B9 53 89   	LDA $8953,Y
C1/86F6:	F0 13      	BEQ $870B
C1/86F8:	3A         	DEC A
C1/86F9:	99 53 89   	STA $8953,Y
C1/86FC:	E6 94      	INC $94        ; sound: cursor
C1/86FE:	20 7A 87   	JSR $877A
C1/8701:	A5 36      	LDA $36
C1/8703:	99 57 89   	STA $8957,Y
C1/8706:	A5 37      	LDA $37
C1/8708:	99 5B 89   	STA $895B,Y
C1/870B:	A5 04      	LDA $04
C1/870D:	10 1C      	BPL $872B
C1/870F:	E6 96      	INC $96       ; sound: select
C1/8711:	20 54 84   	JSR $8454
C1/8714:	BD 05 40   	LDA $4005,X
C1/8717:	C9 FF      	CMP #$FF
C1/8719:	D0 04      	BNE $871F
C1/871B:	E6 95      	INC $95       ; sound: buzzer
C1/871D:	80 0C      	BRA $872B
C1/871F:	8D 85 7A   	STA $7A85
C1/8722:	BD 07 40   	LDA $4007,X
C1/8725:	8D 84 7A   	STA $7A84
C1/8728:	4C 95 77   	JMP $7795

C1/872B:	A5 09      	LDA $09
C1/872D:	10 06      	BPL $8735
C1/872F:	E6 96      	INC $96       ; sound: select
C1/8731:	20 E0 56   	JSR $56E0
C1/8734:	60         	RTS

C1/8735:	A9 FB       LDA #$FB
C1/8737:	85 36       STA $36
C1/8739:	A2 25 00    LDX #$0025
C1/873C:	86 2E       STX $2E
C1/873E:	B9 53 89    LDA $8953,Y
C1/8741:	20 8F 89    JSR $898F
C1/8744:	7B          TDC
C1/8745:	AA          TAX
C1/8746:	BF 87 82 C1 LDA $C18287,X    ; Data
C1/874A:	8D E4 88    STA $88E4      ; main cursor X position
C1/874D:	B9 5B 89    LDA $895B,Y
C1/8750:	AA          TAX
C1/8751:	BF 8D 82 C1 LDA $C1828D,X    ; Data
C1/8755:	8D E5 88    STA $88E5
C1/8758:	EE E3 88    INC $88E3
C1/875B:	60          RTS

C1/875C:	18         	CLC
C1/875D:	69 03      	ADC #$03
C1/875F:	20 27 4C   	JSR $4C27
C1/8762:	A9 17      	LDA #$17
C1/8764:	8D C2 7B   	STA $7BC2
C1/8767:	20 69 82   	JSR $8269
C1/876A:	AD FD 7A   	LDA $7AFD
C1/876D:	C9 04      	CMP #$04
C1/876F:	F0 03      	BEQ $8774
C1/8771:	1A         	INC A
C1/8772:	80 01      	BRA $8775
C1/8774:	7B         	TDC
C1/8775:	8D FD 7A   	STA $7AFD
C1/8778:	80 18      	BRA $8792
C1/877A:	20 27 4C   	JSR $4C27
C1/877D:	A9 18      	LDA #$18
C1/877F:	8D C2 7B   	STA $7BC2
C1/8782:	20 69 82   	JSR $8269
C1/8785:	AD FD 7A   	LDA $7AFD
C1/8788:	F0 03      	BEQ $878D
C1/878A:	3A         	DEC A
C1/878B:	80 02      	BRA $878F
C1/878D:	A9 04      	LDA #$04
C1/878F:	8D FD 7A   	STA $7AFD
C1/8792:	A9 03      	LDA #$03
C1/8794:	8D A8 7B   	STA $7BA8
C1/8797:	A9 2D      	LDA #$2D
C1/8799:	8D C3 7B   	STA $7BC3
C1/879C:	60         	RTS

C1/879D:	9C E3 88   	STZ $88E3
C1/87A0:	9C EF 88   	STZ $88EF
C1/87A3:	AD CB 7B   	LDA $7BCB
C1/87A6:	F0 06      	BEQ $87AE
C1/87A8:	A9 2F      	LDA #$2F
C1/87AA:	8D C2 7B   	STA $7BC2
C1/87AD:	60         	RTS

C1/87AE:	AC CA 62   	LDY $62CA
C1/87B1:	B9 63 89   	LDA $8963,Y
C1/87B4:	85 36      	STA $36
C1/87B6:	B9 67 89   	LDA $8967,Y
C1/87B9:	85 37      	STA $37
C1/87BB:	B9 5F 89   	LDA $895F,Y
C1/87BE:	85 38      	STA $38
C1/87C0:	A9 01      	LDA #$01
C1/87C2:	85 39      	STA $39
C1/87C4:	20 DB 80   	JSR $80DB      ; cursor d-pad handling
C1/87C7:	A5 3C      	LDA $3C
C1/87C9:	F0 20      	BEQ $87EB
C1/87CB:	30 10      	BMI $87DD
C1/87CD:	B9 5F 89   	LDA $895F,Y
C1/87D0:	F0 23      	BEQ $87F5
C1/87D2:	1A         	INC A
C1/87D3:	99 5F 89   	STA $895F,Y
C1/87D6:	E6 94      	INC $94        ; sound: cursor
C1/87D8:	20 3C 88   	JSR $883C
C1/87DB:	80 0E      	BRA $87EB
C1/87DD:	B9 5F 89   	LDA $895F,Y
C1/87E0:	F0 13      	BEQ $87F5
C1/87E2:	3A         	DEC A
C1/87E3:	99 5F 89   	STA $895F,Y
C1/87E6:	E6 94      	INC $94        ; sound: cursor
C1/87E8:	20 5A 88   	JSR $885A
C1/87EB:	A5 36      	LDA $36
C1/87ED:	99 63 89   	STA $8963,Y
C1/87F0:	A5 37      	LDA $37
C1/87F2:	99 67 89   	STA $8967,Y
C1/87F5:	A5 04      	LDA $04
C1/87F7:	10 1F      	BPL $8818
C1/87F9:	E6 96      	INC $96       ; sound: select
C1/87FB:	20 70 84   	JSR $8470
C1/87FE:	BD 05 40   	LDA $4005,X
C1/8801:	C9 FF      	CMP #$FF
C1/8803:	D0 04      	BNE $8809
C1/8805:	E6 95      	INC $95       ; sound: buzzer
C1/8807:	80 0F      	BRA $8818
C1/8809:	BD 05 40   	LDA $4005,X
C1/880C:	8D 85 7A   	STA $7A85
C1/880F:	BD 07 40   	LDA $4007,X
C1/8812:	8D 84 7A   	STA $7A84
C1/8815:	4C 95 77   	JMP $7795

C1/8818:	A5 09      	LDA $09
C1/881A:	10 06      	BPL $8822
C1/881C:	E6 96      	INC $96       ; sound: select
C1/881E:	20 97 56   	JSR $5697
C1/8821:	60         	RTS

C1/8822:	B9 63 89   	LDA $8963,Y
C1/8825:	AA         	TAX
C1/8826:	BF 85 82 C1	LDA $C18285,X
C1/882A:	8D E4 88   	STA $88E4      ; main cursor X position
C1/882D:	B9 67 89   	LDA $8967,Y
C1/8830:	AA         	TAX
C1/8831:	BF 8D 82 C1	LDA $C1828D,X
C1/8835:	8D E5 88   	STA $88E5
C1/8838:	EE E3 88   	INC $88E3
C1/883B:	60         	RTS

C1/883C:	18         	CLC
C1/883D:	69 03      	ADC #$03
C1/883F:	20 F7 4B   	JSR $4BF7
C1/8842:	A9 17      	LDA #$17
C1/8844:	8D C2 7B   	STA $7BC2
C1/8847:	20 69 82   	JSR $8269
C1/884A:	AD FD 7A   	LDA $7AFD
C1/884D:	C9 04      	CMP #$04
C1/884F:	F0 03      	BEQ $8854
C1/8851:	1A         	INC A
C1/8852:	80 01      	BRA $8855
C1/8854:	7B         	TDC
C1/8855:	8D FD 7A   	STA $7AFD
C1/8858:	80 18      	BRA $8872
C1/885A:	20 F7 4B   	JSR $4BF7
C1/885D:	A9 18      	LDA #$18
C1/885F:	8D C2 7B   	STA $7BC2
C1/8862:	20 69 82   	JSR $8269
C1/8865:	AD FD 7A   	LDA $7AFD
C1/8868:	F0 03      	BEQ $886D
C1/886A:	3A         	DEC A
C1/886B:	80 02      	BRA $886F
C1/886D:	A9 04      	LDA #$04
C1/886F:	8D FD 7A   	STA $7AFD
C1/8872:	A9 03      	LDA #$03
C1/8874:	8D A8 7B   	STA $7BA8
C1/8877:	A9 30      	LDA #$30
C1/8879:	8D C3 7B   	STA $7BC3
C1/887C:	60         	RTS

; Sustain item menu (initialize, too [?])
; (cursor state 0A)
C1/887D:	9C E3 88   	STZ $88E3
C1/8880:	9C EF 88   	STZ $88EF
C1/8883:	AD CB 7B   	LDA $7BCB      ; closing menu [?]
C1/8886:	F0 0F      	BEQ $8897      ; branch if not closing menu [?]
C1/8888:	9C AF 7B   	STZ $7BAF      ; item menu cursor frozen
C1/888B:	9C B5 7B   	STZ $7BB5      ; equip menu cursor frozen
C1/888E:	9C 02 7B   	STZ $7B02      ; unset item swapping flag
C1/8891:	A9 12      	LDA #$12
C1/8893:	8D C2 7B   	STA $7BC2
C1/8896:	60         	RTS

C1/8897:	A2 A4 00    LDX #$00A4
C1/889A:	8E B3 7B    STX $7BB3
C1/889D:	AC CA 62    LDY $62CA      ; character index
C1/88A0:	7B          TDC            ; A = 0000
C1/88A1:	99 4B 89    STA $894B,Y    ; cursor column position: left
C1/88A4:	85 36       STA $36        ; save
C1/88A6:	B9 4F 89    LDA $894F,Y    ; cursor row position
C1/88A9:	85 37       STA $37        ; save
C1/88AB:	B9 47 89    LDA $8947,Y    ; menu vertical scroll position
C1/88AE:	85 38       STA $38        ; topmost cursor row
C1/88B0:	64 39       STZ $39        ; rightmost cursor column: 0
C1/88B2:	20 DB 80    JSR $80DB      ; cursor d-pad handling
C1/88B5:	A5 3C       LDA $3C        ; result of ^
C1/88B7:	F0 42       BEQ $88FB      ; branch to simple cursor update
C1/88B9:	30 12       BMI $88CD      ; branch if need to scroll up
C1/88BB:	B9 47 89    LDA $8947,Y    ; menu vertical scroll position
C1/88BE:	C9 FB       CMP #$FB       ; compare to max value
C1/88C0:	F0 43       BEQ $8905      ; branch if cannot scroll down
C1/88C2:	1A          INC A          ; scroll menu down one slot
C1/88C3:	99 47 89    STA $8947,Y    ; menu vertical scroll position
C1/88C6:	E6 94       INC $94        ; sound: cursor
C1/88C8:	20 E9 8C    JSR $8CE9      ; draw scrolling menu down [?]
C1/88CB:	80 2E       BRA $88FB      ; branch to simple cursor update

; Try scrolling menu up
C1/88CD:	B9 47 89    LDA $8947,Y    ; menu vertical scroll position
C1/88D0:	D0 20       BNE $88F2      ; branch if can scroll up
C1/88D2:	A5 3C       LDA $3C        ; d-pad result
C1/88D4:	29 40       AND #$40       ; pressed up (not left)
C1/88D6:	D0 04       BNE $88DC      ; skip cursor column position
C1/88D8:	7B          TDC            ; A = 0000
C1/88D9:	99 4B 89    STA $894B,Y    ; cursor column position: left

C1/88DC:	AD 02 7B    LDA $7B02      ; item swapping flag
C1/88DF:	F0 05       BEQ $88E6      ; branch if not item swapping
C1/88E1:	AD 00 7B    LDA $7B00      ; selected item location type
C1/88E4:	F0 1F       BEQ $8905      ; branch if regular inventory item

; Open equipment menu
; Checks above prevent opening equipment
; while item swapping, unless pending
; swap item is in the equipment menu
C1/88E6:	A2 C8 00    LDX #$00C8
C1/88E9:	8E B3 7B    STX $7BB3
C1/88EC:	E6 94       INC $94        ; sound: cursor
C1/88EE:	20 45 56    JSR $5645      ; open equipped items menu
C1/88F1:	60          RTS

; Scroll menu up
C1/88F2:	3A         	DEC A          ; scroll menu up one slot
C1/88F3:	99 47 89   	STA $8947,Y    ; menu vertical scroll position
C1/88F6:	E6 94      	INC $94        ; sound: cursor
C1/88F8:	20 11 8D   	JSR $8D11      ; draw scrolling up [?]

C1/88FB:	A5 36      	LDA $36        ; temp column position
C1/88FD:	99 4B 89   	STA $894B,Y    ; cursor column position
C1/8900:	A5 37      	LDA $37        ; temp row position
C1/8902:	99 4F 89   	STA $894F,Y    ; cursor row position

C1/8905:	AD A8 7B   	LDA $7BA8      ; [?]
C1/8908:	D0 59      	BNE $8963      ; skip A/B check if flag set [?]

; Handle A
C1/890A:	A5 04      	LDA $04        ; button pressed byte
C1/890C:	10 2D      	BPL $893B      ; branch if not pressing A
C1/890E:	20 24 8A   	JSR $8A24      ; handle swap or initial selection
C1/8911:	90 50      	BCC $8963      ; branch if not using item

; Use selected item
C1/8913:	9C AF 7B   	STZ $7BAF      ; item menu cursor frozen
C1/8916:	9C B5 7B   	STZ $7BB5      ; equip menu cursor frozen
C1/8919:	9C 02 7B   	STZ $7B02      ; unset item swapping flag
C1/891C:	20 BE 89   	JSR $89BE      ; X = selected item data index
C1/891F:	BD 86 26   	LDA $2686,X    ; item id
C1/8922:	8D 85 7A   	STA $7A85      ; save
C1/8925:	BD 88 26   	LDA $2688,X    ; item targeting
C1/8928:	8D 84 7A   	STA $7A84      ; save
C1/892B:	9C 1E 7A   	STZ $7A1E
C1/892E:	9C BA EC   	STZ $ECBA      ; set "Curative Menu" mode to 0x00 (Item)
C1/8931:	29 40      	AND #$40       ; enemy selected by default
C1/8933:	D0 03      	BNE $8938      ; branch if targets enemies
C1/8935:	4C B0 55   	JMP $55B0      ; target allies
C1/8938:	4C 95 77   	JMP $7795      ; load cursor (skip allies window)

; Handle B
C1/893B:	A5 09      	LDA $09        ; button pressed byte
C1/893D:	10 24      	BPL $8963      ; branch if not pressing B
C1/893F:	E6 96      	INC $96        ; sound: select
C1/8941:	9C AF 7B   	STZ $7BAF      ; item menu cursor frozen
C1/8944:	9C B5 7B   	STZ $7BB5      ; equip menu cursor frozen
C1/8947:	AD 02 7B   	LDA $7B02      ; item swapping flag
C1/894A:	D0 09      	BNE $8955      ; branch if swap pending
C1/894C:	9C AF 7B   	STZ $7BAF      ; item menu cursor frozen
C1/894F:	9C B5 7B   	STZ $7BB5      ; equip menu cursor frozen
C1/8952:	4C F2 56   	JMP $56F2

C1/8955:	9C 02 7B    STZ $7B02      ; unset item swapping flag
C1/8958:	9C 0C 89    STZ $890C      ; reset equipment swap mode
C1/895B:	A9 0A       LDA #$0A
C1/895D:	8D C3 7B    STA $7BC3
C1/8960:	20 76 8D    JSR $8D76

; Finish up [?]
C1/8963:	AC CA 62    LDY $62CA
C1/8966:	A9 FB       LDA #$FB
C1/8968:	85 36       STA $36
C1/896A:	A2 25 00    LDX #$0025
C1/896D:	86 2E       STX $2E
C1/896F:	B9 47 89    LDA $8947,Y    ; menu vertical scroll position
C1/8972:	20 8F 89    JSR $898F
C1/8975:	B9 4B 89    LDA $894B,Y    ; cursor column position
C1/8978:	AA          TAX
C1/8979:	BF 87 82 C1 LDA $C18287,X
C1/897D:	8D E4 88    STA $88E4      ; main cursor X position
C1/8980:	B9 4F 89    LDA $894F,Y    ; cursor row position
C1/8983:	AA          TAX
C1/8984:	BF 8D 82 C1 LDA $C1828D,X
C1/8988:	8D E5 88    STA $88E5
C1/898B:	EE E3 88    INC $88E3
C1/898E:	60          RTS

C1/898F:	85 2C      	STA $2C
C1/8991:	D0 04      	BNE $8997
C1/8993:	A9 01      	LDA #$01
C1/8995:	80 09      	BRA $89A0

C1/8997:	C5 36      	CMP $36
C1/8999:	D0 04      	BNE $899F
C1/899B:	A9 02      	LDA #$02
C1/899D:	80 01      	BRA $89A0
C1/899F:	7B         	TDC
C1/89A0:	8D F2 88   	STA $88F2
C1/89A3:	64 2D      	STZ $2D
C1/89A5:	C2 20      	REP #$20
C1/89A7:	20 67 18   	JSR $1867
C1/89AA:	7B         	TDC
C1/89AB:	E2 20      	SEP #$20           ; 8-bit A
C1/89AD:	A5 31      	LDA $31
C1/89AF:	18         	CLC
C1/89B0:	69 A1      	ADC #$A1
C1/89B2:	8D F1 88   	STA $88F1
C1/89B5:	A9 F0      	LDA #$F0
C1/89B7:	8D F0 88   	STA $88F0
C1/89BA:	EE EF 88   	INC $88EF
C1/89BD:	60         	RTS

; Set active slot's item index in X
C1/89BE:	5A         	PHY           ; store active character index (why?)
C1/89BF:	B9 47 89   	LDA $8947,Y   ; menu vertical scroll position
C1/89C2:	18         	CLC
C1/89C3:	79 4F 89   	ADC $894F,Y   ; cursor row position
C1/89C6:	C2 20      	REP #$20      ; 16-bit A
C1/89C8:	85 40      	STA $40       ; store full item slot number
C1/89CA:	0A         	ASL A
C1/89CB:	0A         	ASL A
C1/89CC:	18         	CLC
C1/89CD:	65 40      	ADC $40       ; A * 5
C1/89CF:	AA         	TAX           ; X = inventory data index [?]
C1/89D0:	7B         	TDC           ; A = 0000
C1/89D1:	E2 20      	SEP #$20      ; 8-bit A
C1/89D3:	7A         	PLY           ; restore active character index
C1/89D4:	60         	RTS

; Validate equip<->inventory swap
; If valid, flag equip stat update
C1/89D5:	AD 39 7B   	LDA $7B39     ; swap-in item index
C1/89D8:	C9 FF      	CMP #$FF      ; empty?
C1/89DA:	F0 30      	BEQ $8A0C     ; branch if removing equipment (valid)
C1/89DC:	AD 3B 7B   	LDA $7B3B     ; still equipped item index
C1/89DF:	C9 FF      	CMP #$FF      ; empty?
C1/89E1:	F0 29      	BEQ $8A0C     ; branch if other hand is empty (valid)
C1/89E3:	DA         	PHX           ; store selected item index
C1/89E4:	AE CA 62   	LDX $62CA     ; character index
C1/89E7:	BD 6E 2E   	LDA $2E6E,X   ; has dual wield
C1/89EA:	F0 11      	BEQ $89FD     ; branch if cannot dual wield

; Can dual wield
C1/89EC:	FA         	PLX           ; restore selected item index
C1/89ED:	AD 3A 7B   	LDA $7B3A     ; swap-in item flags
C1/89F0:	29 08      	AND #$08      ; is shield
C1/89F2:	F0 18      	BEQ $8A0C     ; branch if not a shield (valid)
C1/89F4:	AD 3C 7B   	LDA $7B3C     ; still-equipped item flags
C1/89F7:	29 08      	AND #$08      ; is shield
C1/89F9:	F0 11      	BEQ $8A0C     ; branch if not a shield (valid)
C1/89FB:	80 0D      	BRA $8A0A

; Cannot dual wield
C1/89FD:	FA         	PLX
C1/89FE:	AD 3A 7B   	LDA $7B3A     ; swap-in item flags
C1/8A01:	0D 3C 7B   	ORA $7B3C     ; still-equipped item flags
C1/8A04:	29 18      	AND #$18
C1/8A06:	C9 18      	CMP #$18      ; one weapon, one shield
C1/8A08:	F0 02      	BEQ $8A0C     ; branch if valid setup

; Invalid equipment setup
C1/8A0A:	38         	SEC           ; set carry to indicate invalid equipment
C1/8A0B:	60         	RTS

; Valid equipment setup
C1/8A0C:	DA         	PHX           ; store selected item index
C1/8A0D:	AE CA 62   	LDX $62CA     ; X = character index
C1/8A10:	A9 01      	LDA #$01
C1/8A12:	9D 30 2F   	STA $2F30,X   ; flag character for status update
C1/8A15:	FA         	PLX           ; restore selected item index
C1/8A16:	18         	CLC           ; clear carry to indicate valid equipment
C1/8A17:	60         	RTS

; Store character bitmask in $2C
C1/8A18:	DA         	PHX            ; store X
C1/8A19:	AE CA 62   	LDX $62CA      ; character index
C1/8A1C:	BF 01 1A C1	LDA $C11A01,X  ; character bitmask
C1/8A20:	85 2C      	STA $2C        ; save it
C1/8A22:	FA         	PLX            ; restore X
C1/8A23:	60         	RTS

; Select item slot
C1/8A24:	E6 96      	INC $96        ; sound: select
C1/8A26:	20 BE 89   	JSR $89BE      ; X = item data index for selected slot
C1/8A29:	AD 02 7B   	LDA $7B02      ; item swapping flag
C1/8A2C:	D0 03      	BNE $8A31      ; branch if mid-swap
C1/8A2E:	4C 23 8B   	JMP $8B23      ; handle initial item select

; Handle second item select
C1/8A31:	8E 05 7B   	STX $7B05      ; set swap-in item index
C1/8A34:	AD 00 7B   	LDA $7B00      ; swap-out item location type
C1/8A37:	F0 64      	BEQ $8A9D      ; branch if swapping inventory slot
C1/8A39:	BD 86 26   	LDA $2686,X    ; swap-in item index
C1/8A3C:	C9 FF      	CMP #$FF       ; empty?
C1/8A3E:	F0 11      	BEQ $8A51      ; branch if destination slot is empty
C1/8A40:	20 18 8A   	JSR $8A18      ; store character bitmask in $2C
C1/8A43:	BD 87 26   	LDA $2687,X    ; swap-in item flags
C1/8A46:	29 18      	AND #$18       ; weapon or shield
C1/8A48:	F0 3F      	BEQ $8A89      ; branch if not weapon or shield
C1/8A4A:	BD 8A 26   	LDA $268A,X    ; swap-in item equip blacklist
C1/8A4D:	25 2C      	AND $2C        ; check unique character bit
C1/8A4F:	D0 38      	BNE $8A89      ; branch if unequippable

C1/8A51:	AD 00 7B   	LDA $7B00      ; selected item location type
C1/8A54:	C9 01      	CMP #$01       ; righthand slot (left column)
C1/8A56:	F0 11      	BEQ $8A69      ; branch if swapping righthand

C1/8A58:	AC 03 7B   	LDY $7B03      ; index of swap-out equipment data
C1/8A5B:	B9 86 2B   	LDA $2B86,Y    ; righthand (static) item index
C1/8A5E:	8D 3B 7B   	STA $7B3B      ; save
C1/8A61:	B9 87 2B   	LDA $2B87,Y    ; righthand (static) item flags
C1/8A64:	8D 3C 7B   	STA $7B3C      ; save
C1/8A67:	80 0F      	BRA $8A78      ; skip lefthand handling

C1/8A69:	AC 03 7B   	LDY $7B03      ; index of swap-out equipment data
C1/8A6C:	B9 9A 2B   	LDA $2B9A,Y    ; lefthand (static) item index
C1/8A6F:	8D 3B 7B   	STA $7B3B      ; save
C1/8A72:	B9 9B 2B   	LDA $2B9B,Y    ; lefthand (static) item flags
C1/8A75:	8D 3C 7B   	STA $7B3C      ; save

C1/8A78:	BD 86 26   	LDA $2686,X    ; swap-in item index
C1/8A7B:	8D 39 7B   	STA $7B39      ; save
C1/8A7E:	BD 87 26   	LDA $2687,X    ; swap-in item flags
C1/8A81:	8D 3A 7B   	STA $7B3A      ; save
C1/8A84:	20 D5 89   	JSR $89D5      ; validate equip swap and flag stat update
C1/8A87:	90 07      	BCC $8A90      ; branch if valid equipment setup

; Invalid equipment swap
C1/8A89:	E6 95      	INC $95        ; sound: buzzer
C1/8A8B:	64 96      	STZ $96        ; cancel select sound
C1/8A8D:	4C 0A 8B   	JMP $8B0A

; Valid equipment setup
C1/8A90:	AD 00 7B   	LDA $7B00      ; selected item location type
C1/8A93:	C9 01      	CMP #$01       ; righthand slot (left column)
C1/8A95:	F0 03      	BEQ $8A9A      ; branch if swapping righthand
C1/8A97:	4C 02 8C   	JMP $8C02      ; handle lefthand swap
C1/8A9A:	4C 4D 8B   	JMP $8B4D      ; handle righthand swap

; Swapping inventory items
C1/8A9D:	EC 03 7B   	CPX $7B03      ; index of swap-in item data
C1/8AA0:	D0 2C      	BNE $8ACE      ; branch if different items
C1/8AA2:	9C AF 7B   	STZ $7BAF      ; item menu cursor frozen
C1/8AA5:	9C B5 7B   	STZ $7BB5      ; equip menu cursor frozen
C1/8AA8:	BD 86 26   	LDA $2686,X    ; item index
C1/8AAB:	C9 FF      	CMP #$FF       ; empty?
C1/8AAD:	F0 05      	BEQ $8AB4      ; branch if empty slot
C1/8AAF:	BD 87 26   	LDA $2687,X    ; item flags
C1/8AB2:	10 12      	BPL $8AC6      ; branch if usable in battle

; Fail to use item
C1/8AB4:	E6 95      	INC $95        ; sound: buzzer
C1/8AB6:	64 96      	STZ $96        ; cancel select sound
C1/8AB8:	9C 0C 89   	STZ $890C      ; reset equipment swap mode
C1/8ABB:	9C 02 7B   	STZ $7B02      ; unset item swapping flag
C1/8ABE:	9C AF 7B   	STZ $7BAF      ; item menu cursor frozen
C1/8AC1:	9C B5 7B   	STZ $7BB5      ; equip menu cursor frozen
C1/8AC4:	18         	CLC
C1/8AC5:	60         	RTS

; Use item
C1/8AC6:	BD 87 26   	LDA $2687,X    ; these flags aren't used after this [?]
C1/8AC9:	9C 0C 89   	STZ $890C      ; reset equipment swap mode
C1/8ACC:	38         	SEC            ; set carry to indicate item used [?]
C1/8ACD:	60         	RTS

; Swap two battle inventory items
C1/8ACE:	5A          PHY
C1/8ACF:	7B          TDC
C1/8AD0:	A8          TAY
C1/8AD1:	BD 86 26    LDA $2686,X
C1/8AD4:	99 07 7B    STA $7B07,Y
C1/8AD7:	E8          INX
C1/8AD8:	C8          INY
C1/8AD9:	C0 05 00    CPY #$0005
C1/8ADC:	D0 F3       BNE $8AD1
C1/8ADE:	AC 05 7B    LDY $7B05      ; index of swap-out item data
C1/8AE1:	AE 03 7B    LDX $7B03      ; index of swap-in item data
C1/8AE4:	A9 05       LDA #$05
C1/8AE6:	85 40       STA $40
C1/8AE8:	BD 86 26    LDA $2686,X
C1/8AEB:	99 86 26    STA $2686,Y
C1/8AEE:	E8          INX
C1/8AEF:	C8          INY
C1/8AF0:	C6 40       DEC $40
C1/8AF2:	D0 F4       BNE $8AE8
C1/8AF4:	7B          TDC
C1/8AF5:	AA          TAX
C1/8AF6:	AC 03 7B    LDY $7B03      ; index of swap-in item data
C1/8AF9:	BD 07 7B    LDA $7B07,X
C1/8AFC:	99 86 26    STA $2686,Y
C1/8AFF:	E8          INX
C1/8B00:	C8          INY
C1/8B01:	E0 05 00    CPX #$0005
C1/8B04:	D0 F3       BNE $8AF9
C1/8B06:	9C 02 7B    STZ $7B02      ; unset item swapping flag
C1/8B09:	7A          PLY

C1/8B0A:	9C 0C 89    STZ $890C      ; reset equipment swap mode
C1/8B0D:	A9 0A       LDA #$0A
C1/8B0F:	8D C3 7B    STA $7BC3
C1/8B12:	20 76 8D    JSR $8D76
C1/8B15:	9C 00 7B    STZ $7B00      ; selected item location type
C1/8B18:	9C 02 7B    STZ $7B02      ; unset item swapping flag
C1/8B1B:	9C AF 7B    STZ $7BAF      ; item menu cursor frozen
C1/8B1E:	9C B5 7B    STZ $7BB5      ; equip menu cursor frozen
C1/8B21:	18          CLC
C1/8B22:	60          RTS

; Handle initial item select
C1/8B23:	9C 00 7B   	STZ $7B00      ; selected item location type
C1/8B26:	8E 03 7B   	STX $7B03      ; index of swap-out item data
C1/8B29:	EE 02 7B   	INC $7B02      ; set item swapping flag
C1/8B2C:	B9 4B 89   	LDA $894B,Y    ; cursor column position
C1/8B2F:	AA         	TAX            ; left: 0, right: 1
C1/8B30:	BF 87 82 C1	LDA $C18287,X  ; column xpos
C1/8B34:	18         	CLC
C1/8B35:	69 03      	ADC #$03       ; add 3 to xpos
C1/8B37:	8D B0 7B   	STA $7BB0      ; save cursor xpos
C1/8B3A:	B9 4F 89   	LDA $894F,Y    ; cursor row position
C1/8B3D:	AA         	TAX            ; top (0) - bottom (3)
C1/8B3E:	BF 8D 82 C1	LDA $C1828D,X  ; row ypos
C1/8B42:	AA         	TAX            ; move to X register (why [?])
C1/8B43:	8E B1 7B   	STX $7BB1      ; save frozen cursor ypos
C1/8B46:	A9 01      	LDA #$01
C1/8B48:	8D AF 7B   	STA $7BAF      ; item menu cursor frozen
C1/8B4B:	18         	CLC
C1/8B4C:	60         	RTS

; Handle righthand swap
C1/8B4D:	5A          PHY            ; store Y (equipment data index)
C1/8B4E:	7B          TDC            ; A = 0000
C1/8B4F:	AA          TAX            ; X = 0000
C1/8B50:	AC 03 7B    LDY $7B03      ; index of swap-out equip data
C1/8B53:	B9 86 2B    LDA $2B86,Y    ; righthand item byte
C1/8B56:	9D 07 7B    STA $7B07,X    ; save in temporary buffer
C1/8B59:	E8          INX            ; get next buffer index
C1/8B5A:	C8          INY            ; get next equip data index
C1/8B5B:	E0 05 00    CPX #$0005     ; move 5 bytes
C1/8B5E:	D0 F3       BNE $8B53      ; loop till all bytes moved
C1/8B60:	AE 05 7B    LDX $7B05      ; index of swap-in item data
C1/8B63:	AC 03 7B    LDY $7B03      ; index of swap-out equip data
C1/8B66:	B9 86 2B    LDA $2B86,Y    ; righthand equip item id
C1/8B69:	DD 86 26    CMP $2686,X    ; swap-in item id
C1/8B6C:	D0 17       BNE $8B85      ; branch if different
C1/8B6E:	A9 FF       LDA #$FF       ; if same, remove righthand
C1/8B70:	99 86 2B    STA $2B86,Y    ; null righthand equip id
C1/8B73:	A9 80       LDA #$80
C1/8B75:	99 87 2B    STA $2B87,Y    ; righthand equip unusable in battle
C1/8B78:	7B          TDC            ; A = 0000
C1/8B79:	99 88 2B    STA $2B88,Y    ; zero quantity
C1/8B7C:	99 89 2B    STA $2B89,Y    ; zero targeting
C1/8B7F:	99 8A 2B    STA $2B8A,Y    ; zero equip blacklist
C1/8B82:	4C E1 8B    JMP $8BE1

; Swap righthand <-> item
C1/8B85:	BD 86 26    LDA $2686,X    ; item id
C1/8B88:	99 86 2B    STA $2B86,Y    ; move to righthand id
C1/8B8B:	BD 87 26    LDA $2687,X    ; item flags
C1/8B8E:	99 87 2B    STA $2B87,Y    ; move to righthand flags
C1/8B91:	BD 88 26    LDA $2688,X    ; item targeting
C1/8B94:	99 88 2B    STA $2B88,Y    ; move to righthand targeting
C1/8B97:	BD 8A 26    LDA $268A,X    ; item equippability
C1/8B9A:	99 8A 2B    STA $2B8A,Y    ; move to righthand equippability
C1/8B9D:	A9 01       LDA #$01
C1/8B9F:	99 89 2B    STA $2B89,Y    ; set righthand quantity to 1
C1/8BA2:	BD 89 26    LDA $2689,X    ; item quantity
C1/8BA5:	C9 02       CMP #$02       ; less than 2?
C1/8BA7:	90 05       BCC $8BAE      ; branch to remove item from slot
C1/8BA9:	DE 89 26    DEC $2689,X    ; else, subtract one
C1/8BAC:	80 13       BRA $8BC1

; Clear swap-in item slot
C1/8BAE:	A9 FF       LDA #$FF
C1/8BB0:	9D 86 26    STA $2686,X    ; clear item slot
C1/8BB3:	A9 80       LDA #$80
C1/8BB5:	9D 87 26    STA $2687,X    ; set unusable in battle
C1/8BB8:	9E 88 26    STZ $2688,X    ; zero targeting
C1/8BBB:	9E 89 26    STZ $2689,X    ; zero quantity
C1/8BBE:	9E 8A 26    STZ $268A,X    ; zero equip blacklist

; Move old righthand item to inventory
; Duplicates code: $C18C76
C1/8BC1:	AD 07 7B    LDA $7B07      ; old-righthand id
C1/8BC4:	85 40       STA $40        ; save it (for JSR below)
C1/8BC6:	20 B7 8C    JSR $8CB7      ; find inventory index of match
C1/8BC9:	90 16       BCC $8BE1      ; branch if match found
C1/8BCB:	20 D2 8C    JSR $8CD2      ; get empty item slot index in X
C1/8BCE:	B0 1B       BCS $8BEB      ; branch if no empty slots
C1/8BD0:	7B          TDC            ; A = 0000
C1/8BD1:	A8          TAY            ; Y = 0000
C1/8BD2:	B9 07 7B    LDA $7B07,Y    ; old lefthand data byte
C1/8BD5:	9D 86 26    STA $2686,X    ; move to destination item byte
C1/8BD8:	E8          INX            ; get next destination index
C1/8BD9:	C8          INY            ; get next lefthand index
C1/8BDA:	C0 05 00    CPY #$0005     ; move 5 bytes total
C1/8BDD:	D0 F3       BNE $8BD2      ; loop till done
C1/8BDF:	80 0A       BRA $8BEB

; Increment item quantity
C1/8BE1:	BD 89 26    LDA $2689,X    ; destination item quantity
C1/8BE4:	C9 63       CMP #$63       ; less than 99?
C1/8BE6:	B0 03       BCS $8BEB      ; branch if already full
C1/8BE8:	FE 89 26    INC $2689,X    ; increment item quantity

; Finish swapping
C1/8BEB:	9C 0C 89    STZ $890C      ; reset equipment swap mode
C1/8BEE:	A9 0A       LDA #$0A       ; cursor state: sustain item menu
C1/8BF0:	8D C3 7B    STA $7BC3      ; add to cursor state queue
C1/8BF3:	20 76 8D    JSR $8D76
C1/8BF6:	9C AF 7B    STZ $7BAF      ; item menu cursor frozen
C1/8BF9:	9C B5 7B    STZ $7BB5      ; equip menu cursor frozen
C1/8BFC:	9C 02 7B    STZ $7B02      ; unset item swapping flag
C1/8BFF:	7A          PLY
C1/8C00:	18          CLC
C1/8C01:	60          RTS

; Handle lefthand swap
C1/8C02:	5A          PHY
C1/8C03:	7B          TDC            ; A = 0000
C1/8C04:	AA          TAX            ; X = 0000
C1/8C05:	AC 03 7B    LDY $7B03      ; index of swap-out equip data
C1/8C08:	B9 9A 2B    LDA $2B9A,Y    ; left-hand item data
C1/8C0B:	9D 07 7B    STA $7B07,X    ; copy to temporary buffer
C1/8C0E:	E8          INX            ; get next destination index
C1/8C0F:	C8          INY            ; get next source index
C1/8C10:	E0 05 00    CPX #$0005     ; move 5 bytes
C1/8C13:	D0 F3       BNE $8C08      ; loop till done
C1/8C15:	AE 05 7B    LDX $7B05      ; index of swap-in item data
C1/8C18:	AC 03 7B    LDY $7B03      ; index of swap-out equip data
C1/8C1B:	B9 9A 2B    LDA $2B9A,Y    ; left-hand item id
C1/8C1E:	DD 86 26    CMP $2686,X    ; compare with swap-in item id
C1/8C21:	D0 17       BNE $8C3A      ; branch if not the same

; Remove left-hand equip
C1/8C23:	A9 FF       LDA #$FF
C1/8C25:	99 9A 2B    STA $2B9A,Y    ; null left-hand item id
C1/8C28:	A9 80       LDA #$80
C1/8C2A:	99 9B 2B    STA $2B9B,Y    ; set unusable in battle
C1/8C2D:	7B          TDC            ; A = 0000
C1/8C2E:	99 9C 2B    STA $2B9C,Y    ; zero targeting
C1/8C31:	99 9D 2B    STA $2B9D,Y    ; zero quantity
C1/8C34:	99 9E 2B    STA $2B9E,Y    ; zero equip blacklist
C1/8C37:	4C 96 8C    JMP $8C96

; Swap left-hand with item
C1/8C3A:	BD 86 26    LDA $2686,X    ; item id
C1/8C3D:	99 9A 2B    STA $2B9A,Y    ; move to left-hand id
C1/8C40:	BD 87 26    LDA $2687,X    ; item flags
C1/8C43:	99 9B 2B    STA $2B9B,Y    ; move to left-hand flags
C1/8C46:	BD 88 26    LDA $2688,X    ; item targeting
C1/8C49:	99 9C 2B    STA $2B9C,Y    ; move to left-hand targeting
C1/8C4C:	BD 8A 26    LDA $268A,X    ; item equip blacklist
C1/8C4F:	99 9E 2B    STA $2B9E,Y    ; move to left-hand equip byte
C1/8C52:	A9 01       LDA #$01
C1/8C54:	99 9D 2B    STA $2B9D,Y    ; set left-hand quantity to 1
C1/8C57:	BD 89 26    LDA $2689,X    ; item quantity
C1/8C5A:	C9 02       CMP #$02       ; less than 2?
C1/8C5C:	90 05       BCC $8C63      ; branch if ^
C1/8C5E:	DE 89 26    DEC $2689,X    ; otherwise decrement quantity
C1/8C61:	80 13       BRA $8C76

; Remove swapped item from inventory
C1/8C63:	A9 FF       LDA #$FF
C1/8C65:	9D 86 26    STA $2686,X    ; clear item slot
C1/8C68:	A9 80       LDA #$80
C1/8C6A:	9D 87 26    STA $2687,X    ; set unusable in battle
C1/8C6D:	9E 88 26    STZ $2688,X    ; zero targeting
C1/8C70:	9E 89 26    STZ $2689,X    ; zero quantity
C1/8C73:	9E 8A 26    STZ $268A,X    ; zero equip blacklist

; Move old-lefthand to inventory
; Duplicates code: $C18BC1
C1/8C76:	AD 07 7B    LDA $7B07      ; old left-hand id
C1/8C79:	85 40       STA $40        ; save it
C1/8C7B:	20 B7 8C    JSR $8CB7      ; find inventory index of match
C1/8C7E:	90 16       BCC $8C96      ; branch if match found
C1/8C80:	20 D2 8C    JSR $8CD2      ; get empty item slot index in X
C1/8C83:	B0 1B       BCS $8CA0      ; branch if no empty slots
C1/8C85:	7B          TDC            ; A = 0000
C1/8C86:	A8          TAY            ; Y = 0000
C1/8C87:	B9 07 7B    LDA $7B07,Y    ; old left-hand data
C1/8C8A:	9D 86 26    STA $2686,X    ; move to item data
C1/8C8D:	E8          INX            ; next destination index
C1/8C8E:	C8          INY            ; next source index
C1/8C8F:	C0 05 00    CPY #$0005     ; move 5 bytes
C1/8C92:	D0 F3       BNE $8C87      ; loop till all moved
C1/8C94:	80 0A       BRA $8CA0      ; finish

; Add left-hand equip to existing item stack
C1/8C96:	BD 89 26    LDA $2689,X    ; destination item quantity
C1/8C99:	C9 63       CMP #$63       ; less than 99?
C1/8C9B:	B0 03       BCS $8CA0      ; branch if 99 or greater
C1/8C9D:	FE 89 26    INC $2689,X    ; increment item quantity

; Finish swapping
C1/8CA0:	9C 0C 89    STZ $890C      ; reset equipment swap mode
C1/8CA3:	A9 0A       LDA #$0A       ; cursor state: sustain item menu
C1/8CA5:	8D C3 7B    STA $7BC3      ; add to cursor state queue
C1/8CA8:	20 76 8D    JSR $8D76
C1/8CAB:	9C AF 7B    STZ $7BAF      ; item menu cursor frozen
C1/8CAE:	9C B5 7B    STZ $7BB5      ; equip menu cursor frozen
C1/8CB1:	9C 02 7B    STZ $7B02      ; unset item swapping flag
C1/8CB4:	7A          PLY
C1/8CB5:	18          CLC
C1/8CB6:	60          RTS

; Find inventory data index of item in $40
; Carry is set if no match found
C1/8CB7:	7B          TDC            ; A = 0000
C1/8CB8:	AA          TAX            ; X = 0000
C1/8CB9:	A5 40       LDA $40        ; item id
C1/8CBB:	C9 FF       CMP #$FF       ; empty?
C1/8CBD:	F0 0F       BEQ $8CCE      ; exit with carry if so
C1/8CBF:	DD 86 26    CMP $2686,X    ; compare inventory item id
C1/8CC2:	F0 0C       BEQ $8CD0      ; exit w/o carry if matched
C1/8CC4:	E8          INX
C1/8CC5:	E8          INX
C1/8CC6:	E8          INX
C1/8CC7:	E8          INX
C1/8CC8:	E8          INX            ; get next inventory item index
C1/8CC9:	E0 00 05    CPX #$0500     ; check all 255 slots
C1/8CCC:	D0 F1       BNE $8CBF      ; loop till all checked
C1/8CCE:	38          SEC            ; exit with carry set
C1/8CCF:	60          RTS

C1/8CD0:	18         	CLC            ; exit with carry clear
C1/8CD1:	60         	RTS


; Fetch X index of first empty item slot
; If no empty slots, return with Carry set
C1/8CD2:	7B         	TDC               ; A = 0000
C1/8CD3:	AA         	TAX               ; X = 0000
C1/8CD4:	A9 FF      	LDA #$FF          ; A = 00FF
C1/8CD6:	DD 86 26   	CMP $2686,X
C1/8CD9:	F0 0C      	BEQ $8CE7         ; exit with clear carry if null slot
C1/8CDB:	E8         	INX
C1/8CDC:	E8         	INX
C1/8CDD:	E8         	INX
C1/8CDE:	E8         	INX
C1/8CDF:	E8         	INX
C1/8CE0:	E0 00 05   	CPX #$0500        ; loop through all 256 slots
C1/8CE3:	D0 F1      	BNE $8CD6
C1/8CE5:	38         	SEC               ; if no null slots, exit with carry set
C1/8CE6:	60         	RTS

C1/8CE7:	18         	CLC
C1/8CE8:	60         	RTS

; Update menu for scrolling down
C1/8CE9:	18         	CLC
C1/8CEA:	69 03      	ADC #$03
C1/8CEC:	20 6B 4C   	JSR $4C6B         ; draw item menu slot
C1/8CEF:	AE B1 7B   	LDX $7BB1
C1/8CF2:	CA         	DEX
C1/8CF3:	CA         	DEX
C1/8CF4:	CA         	DEX
C1/8CF5:	CA         	DEX
C1/8CF6:	8E B1 7B   	STX $7BB1
C1/8CF9:	A9 17      	LDA #$17
C1/8CFB:	8D C2 7B   	STA $7BC2
C1/8CFE:	20 69 82   	JSR $8269
C1/8D01:	AD FD 7A   	LDA $7AFD
C1/8D04:	C9 04      	CMP #$04
C1/8D06:	F0 03      	BEQ $8D0B
C1/8D08:	1A         	INC A
C1/8D09:	80 01      	BRA $8D0C
C1/8D0B:	7B         	TDC
C1/8D0C:	8D FD 7A   	STA $7AFD
C1/8D0F:	80 22      	BRA $8D33

; Update menu for scrolling up
C1/8D11:	20 6B 4C   	JSR $4C6B         ; draw item menu slot
C1/8D14:	AE B1 7B   	LDX $7BB1
C1/8D17:	E8         	INX
C1/8D18:	E8         	INX
C1/8D19:	E8         	INX
C1/8D1A:	E8         	INX
C1/8D1B:	8E B1 7B   	STX $7BB1
C1/8D1E:	A9 18      	LDA #$18
C1/8D20:	8D C2 7B   	STA $7BC2
C1/8D23:	20 69 82   	JSR $8269
C1/8D26:	AD FD 7A   	LDA $7AFD
C1/8D29:	F0 03      	BEQ $8D2E
C1/8D2B:	3A         	DEC A
C1/8D2C:	80 02      	BRA $8D30
C1/8D2E:	A9 04      	LDA #$04
C1/8D30:	8D FD 7A   	STA $7AFD

C1/8D33:	A9 03      	LDA #$03
C1/8D35:	8D A8 7B   	STA $7BA8
C1/8D38:	A9 0A      	LDA #$0A
C1/8D3A:	8D C3 7B   	STA $7BC3
C1/8D3D:	60         	RTS

; Initialize item menu [?]
; Cursor state $31
C1/8D3E:	AD A7 7B   	LDA $7BA7        ; topmost visible slot number
C1/8D41:	20 6B 4C   	JSR $4C6B        ; draw item menu slot
C1/8D44:	AD A6 7B   	LDA $7BA6
C1/8D47:	0A         	ASL A
C1/8D48:	AA         	TAX
C1/8D49:	BF 91 82 C1	LDA $C18291,X    ; Data
C1/8D4D:	8D AA 7B   	STA $7BAA
C1/8D50:	BF 92 82 C1	LDA $C18292,X    ; Data
C1/8D54:	8D AB 7B   	STA $7BAB
C1/8D57:	EE A9 7B   	INC $7BA9
C1/8D5A:	EE A7 7B   	INC $7BA7
C1/8D5D:	AD A6 7B   	LDA $7BA6
C1/8D60:	C9 04      	CMP #$04
C1/8D62:	F0 03      	BEQ $8D67
C1/8D64:	1A         	INC A
C1/8D65:	80 01      	BRA $8D68
C1/8D67:	7B         	TDC
C1/8D68:	8D A6 7B   	STA $7BA6
C1/8D6B:	CE A5 7B   	DEC $7BA5
C1/8D6E:	D0 05      	BNE $8D75
C1/8D70:	A9 02      	LDA #$02
C1/8D72:	8D C2 7B   	STA $7BC2
C1/8D75:	60         	RTS

; [?]
C1/8D76:	AC CA 62   	LDY $62CA      ; active character index
C1/8D79:	AD FD 7A   	LDA $7AFD      ; some counter from 0-4 [?]
C1/8D7C:	C9 04      	CMP #$04       ; at max value
C1/8D7E:	D0 03      	BNE $8D83      ; branch if not
C1/8D80:	7B         	TDC            ; else, reset to zero
C1/8D81:	80 01      	BRA $8D84      ; and skip increment
C1/8D83:	1A         	INC A          ; increment counter
C1/8D84:	8D A6 7B   	STA $7BA6      ; save next counter value [?]
C1/8D87:	B9 47 89   	LDA $8947,Y    ; menu vertical scroll position
C1/8D8A:	8D A7 7B   	STA $7BA7      ; save item menu slot offset
C1/8D8D:	A9 04      	LDA #$04
C1/8D8F:	8D A5 7B   	STA $7BA5
C1/8D92:	A9 31      	LDA #$31
C1/8D94:	8D C2 7B   	STA $7BC2      ; update current menu cursor state
C1/8D97:	60         	RTS

; Sustain battle inventory (cursor state 0C)
C1/8D98:	AD 02 7B   	LDA $7B02      ; item swapping flag
C1/8D9B:	F0 06      	BEQ $8DA3      ; branch if not already swapping
C1/8D9D:	AD 00 7B   	LDA $7B00      ; selected item location type
C1/8DA0:	8D B5 7B   	STA $7BB5      ; equip menu cursor frozen

; Select item in current slot
C1/8DA3:	9C E3 88   	STZ $88E3      ; set main cursor inactive
C1/8DA6:	AD CB 7B   	LDA $7BCB      ; close menu flag [?]
C1/8DA9:	F0 06      	BEQ $8DB1      ; branch if not closing menu [?]

; Close battle inventory [?]
C1/8DAB:	A9 13      	LDA #$13
C1/8DAD:	8D C2 7B   	STA $7BC2      ; change menu cursor state
C1/8DB0:	60         	RTS

; Equipment menu open
C1/8DB1:	AE CA 62   	LDX $62CA      ; X = active character index
C1/8DB4:	A5 05      	LDA $05
C1/8DB6:	C9 01      	CMP #$01
C1/8DB8:	D0 13      	BNE $8DCD
C1/8DBA:	E6 94      	INC $94        ; sound: cursor
C1/8DBC:	BD 4B 89   	LDA $894B,X    ; cursor column position
C1/8DBF:	C9 01      	CMP #$01
C1/8DC1:	D0 05      	BNE $8DC8
C1/8DC3:	9E 4B 89   	STZ $894B,X    ; cursor column position: left
C1/8DC6:	80 19      	BRA $8DE1

C1/8DC8:	FE 4B 89   	INC $894B,X    ; cursor column position: right
C1/8DCB:	80 1F      	BRA $8DEC
C1/8DCD:	C9 02      	CMP #$02
C1/8DCF:	D0 0C      	BNE $8DDD
C1/8DD1:	BD 4B 89   	LDA $894B,X    ; cursor column position
C1/8DD4:	F0 16      	BEQ $8DEC
C1/8DD6:	E6 94      	INC $94        ; sound: cursor
C1/8DD8:	DE 4B 89   	DEC $894B,X    ; cursor column position: left
C1/8DDB:	80 0F      	BRA $8DEC
C1/8DDD:	C9 04      	CMP #$04
C1/8DDF:	D0 0B      	BNE $8DEC

C1/8DE1:	9E 4B 89   	STZ $894B,X    ; cursor column position: left
C1/8DE4:	9C B5 7B   	STZ $7BB5      ; equip menu cursor frozen
C1/8DE7:	E6 94      	INC $94        ; sound: cursor
C1/8DE9:	4C 69 56   	JMP $5669

; Handle A
C1/8DEC:	A5 04      	LDA $04
C1/8DEE:	10 18      	BPL $8E08      ; branch if not pressing A
C1/8DF0:	AE CA 62   	LDX $62CA      ; active character index
C1/8DF3:	BD 86 62   	LDA $6286,X    ; character can't swap equipment
C1/8DF6:	F0 04      	BEQ $8DFC      ; branch if equip swap allowed
C1/8DF8:	E6 95      	INC $95        ; sound: buzzer
C1/8DFA:	80 0C      	BRA $8E08      ; branch to B button check

; Select equipped item
C1/8DFC:	A9 01      	LDA #$01
C1/8DFE:	9D 30 2F   	STA $2F30,X    ; flag character for status update
C1/8E01:	E6 96      	INC $96        ; sound: select
C1/8E03:	20 51 8E   	JSR $8E51      ; handle equip selection
C1/8E06:	90 00      	BCC $8E08      ; useless branch (why?)

; Handle B
C1/8E08:	A5 09      	LDA $09
C1/8E0A:	10 11      	BPL $8E1D      ; branch if not pressing B
C1/8E0C:	E6 96      	INC $96        ; sound: select (why again [?])
C1/8E0E:	9C 0C 89   	STZ $890C      ; reset equipment swap mode
C1/8E11:	20 34 8E   	JSR $8E34
C1/8E14:	9C AF 7B   	STZ $7BAF      ; item menu cursor frozen
C1/8E17:	9C B5 7B   	STZ $7BB5      ; equip menu cursor frozen
C1/8E1A:	9C 02 7B   	STZ $7B02      ; unset item swapping flag

; Finish up [?]
C1/8E1D:	AE CA 62   	LDX $62CA
C1/8E20:	BD 4B 89   	LDA $894B,X    ; cursor column position
C1/8E23:	AA         	TAX
C1/8E24:	BF 83 82 C1	LDA $C18283,X
C1/8E28:	8D E4 88   	STA $88E4      ; main cursor X position
C1/8E2B:	A9 B4      	LDA #$B4
C1/8E2D:	8D E5 88   	STA $88E5
C1/8E30:	EE E3 88   	INC $88E3
C1/8E33:	60         	RTS

C1/8E34:	20 BA 4B    JSR $4BBA      ; draw equipped items (menu)
C1/8E37:	A2 40 7E    LDX #$7E40
C1/8E3A:	8E AA 7B    STX $7BAA
C1/8E3D:	EE A9 7B    INC $7BA9

; Update cursor state [?]
C1/8E40:	A9 0C       LDA #$0C
C1/8E42:	8D C3 7B    STA $7BC3      ; queue next menu cursor state [?]
C1/8E45:	4C 76 8D    JMP $8D76      ; update current cursor state [?]

; Set character data index in X
C1/8E48:	AE CA 62   	LDX $62CA      ; X = active character index
C1/8E4B:	BF 67 4B C1	LDA $C14B67,X  ; active character id * 5 (0,5,10,15)
C1/8E4F:	AA         	TAX            ; set index to character data
C1/8E50:	60         	RTS

; Handle equipment selection
C1/8E51:	20 48 8E   	JSR $8E48      ; X = active character data index
C1/8E54:	AC CA 62   	LDY $62CA      ; Y = active character index
C1/8E57:	AD 02 7B   	LDA $7B02      ; item swapping flag
C1/8E5A:	D0 03      	BNE $8E5F      ; branch if already swapping
C1/8E5C:	4C 28 8F   	JMP $8F28      ; enter equipment swap mode

; Finish/confirm equipment swap
C1/8E5F:	8E 05 7B   	STX $7B05      ; set index for character equip data
C1/8E62:	AD 00 7B   	LDA $7B00      ; selected item location type
C1/8E65:	D0 03      	BNE $8E6A      ; branch if swapping/using current equips
C1/8E67:	4C FE 8E   	JMP $8EFE      ; swap equipment with inventory

; Swap hands or use equipped item
C1/8E6A:	B9 4B 89    LDA $894B,Y    ; cursor column position
C1/8E6D:	1A          INC A
C1/8E6E:	CD 00 7B    CMP $7B00      ; selected item location type
C1/8E71:	F0 56       BEQ $8EC9      ; branch if using equipment as item

; Swap left and right hand equips
C1/8E73:	7B          TDC            ; A = 0000
C1/8E74:	A8          TAY            ; Y = 0000
C1/8E75:	BD 86 2B    LDA $2B86,X    ; character righthand data byte
C1/8E78:	99 07 7B    STA $7B07,Y    ; move to temporary buffer
C1/8E7B:	E8          INX            ; advance source index
C1/8E7C:	C8          INY            ; advance buffer index
C1/8E7D:	C0 05 00    CPY #$0005     ; 5 byte block
C1/8E80:	D0 F3       BNE $8E75      ; copy full righthand data block
C1/8E82:	84 40       STY $40        ; store buffer index
C1/8E84:	AE 05 7B    LDX $7B05      ; index of character equip data
C1/8E87:	BD 9A 2B    LDA $2B9A,X    ; character lefthand data byte
C1/8E8A:	9D 86 2B    STA $2B86,X    ; move to righthand data
C1/8E8D:	E8          INX            ; advance index
C1/8E8E:	C6 40       DEC $40        ; decrement buffer index
C1/8E90:	D0 F5       BNE $8E87      ; loop until full data block copied
C1/8E92:	AE 05 7B    LDX $7B05      ; index of character equip data
C1/8E95:	7B          TDC            ; A = 0000
C1/8E96:	A8          TAY            ; Y = 0000
C1/8E97:	B9 07 7B    LDA $7B07,Y    ; old righthand data byte
C1/8E9A:	9D 9A 2B    STA $2B9A,X    ; move to lefthand data
C1/8E9D:	E8          INX            ; advance destination index
C1/8E9E:	C8          INY            ; advance source index
C1/8E9F:	C0 05 00    CPY #$0005     ; 5-byte block
C1/8EA2:	D0 F3       BNE $8E97      ; loop until 5 bytes moved
C1/8EA4:	9C 0C 89    STZ $890C      ; reset equipment swap mode
C1/8EA7:	20 BA 4B    JSR $4BBA      ; draw new equipped items (menu)
C1/8EAA:	A2 40 7E    LDX #$7E40     ; index to menu window color palette [?]
C1/8EAD:	8E AA 7B    STX $7BAA      ; set VRAM destination [?]
C1/8EB0:	EE A9 7B    INC $7BA9      ; pending VRAM [?]
C1/8EB3:	9C 02 7B    STZ $7B02      ; unset item swapping flag
C1/8EB6:	9C AF 7B    STZ $7BAF      ; item menu cursor frozen
C1/8EB9:	9C B5 7B    STZ $7BB5      ; equip menu cursor frozen
C1/8EBC:	20 40 8E    JSR $8E40      ; update cursor state [?]
C1/8EBF:	AE CA 62    LDX $62CA      ; active character index
C1/8EC2:	A9 01       LDA #$01
C1/8EC4:	9D 30 2F    STA $2F30,X    ; flag character for status update
C1/8EC7:	18          CLC            ; clear carry to indicate success [?]
C1/8EC8:	60          RTS

; Attempt to use equipment as item (eg Rod)
C1/8EC9:	9C 02 7B   	STZ $7B02      ; unset item swapping flag
C1/8ECC:	9C AF 7B   	STZ $7BAF      ; item menu cursor frozen
C1/8ECF:	9C B5 7B   	STZ $7BB5      ; equip menu cursor frozen
C1/8ED2:	9C 0C 89   	STZ $890C      ; reset equipment swap mode
C1/8ED5:	B9 4B 89   	LDA $894B,Y    ; cursor column position
C1/8ED8:	F0 0E      	BEQ $8EE8
C1/8EDA:	BD 9A 2B   	LDA $2B9A,X
C1/8EDD:	C9 FF      	CMP #$FF
C1/8EDF:	F0 18      	BEQ $8EF9
C1/8EE1:	BD 9B 2B   	LDA $2B9B,X
C1/8EE4:	10 0E      	BPL $8EF4      ; branch if usable in battle
C1/8EE6:	80 11      	BRA $8EF9
C1/8EE8:	BD 86 2B   	LDA $2B86,X
C1/8EEB:	C9 FF      	CMP #$FF
C1/8EED:	F0 0A      	BEQ $8EF9
C1/8EEF:	BD 87 2B   	LDA $2B87,X
C1/8EF2:	30 05      	BMI $8EF9      ; branch if unusable in battle
C1/8EF4:	20 40 8E   	JSR $8E40
C1/8EF7:	38         	SEC
C1/8EF8:	60         	RTS

C1/8EF9:	20 40 8E   	JSR $8E40
C1/8EFC:	18         	CLC
C1/8EFD:	60         	RTS

; Swap equipment w/ inventory item
; This code only runs if the equipment
; is selected second -- which cannot
; happen, since the equipment menu won't
; open mid-swap. (Never runs)
C1/8EFE:	B9 4B 89    LDA $894B,Y    ; cursor column position
C1/8F01:	F0 05       BEQ $8F08      ; branch if swapping right-hand (left column)
C1/8F03:	20 3D 90    JSR $903D      ; check left-hand swap
C1/8F06:	80 03       BRA $8F0B      ; skip right-hand check
C1/8F08:	20 76 8F    JSR $8F76      ; check right-hand swap

; (Never runs)
C1/8F0B:	9C 0C 89    STZ $890C      ; reset equipment swap mode
C1/8F0E:	20 BA 4B    JSR $4BBA
C1/8F11:	A2 40 7E    LDX #$7E40
C1/8F14:	8E AA 7B    STX $7BAA
C1/8F17:	EE A9 7B    INC $7BA9
C1/8F1A:	9C 02 7B    STZ $7B02      ; unset item swapping flag
C1/8F1D:	9C AF 7B    STZ $7BAF      ; item menu cursor frozen
C1/8F20:	9C B5 7B    STZ $7BB5      ; equip menu cursor frozen
C1/8F23:	20 40 8E    JSR $8E40
C1/8F26:	18          CLC
C1/8F27:	60          RTS

; Begin equipment swapping
C1/8F28:	A9 01      	LDA #$01
C1/8F2A:	8D 0C 89   	STA $890C      ; set equipment swap mode
C1/8F2D:	B9 4B 89   	LDA $894B,Y    ; cursor column position
C1/8F30:	D0 0E      	BNE $8F40      ; branch if swapping left-hand (right column)
C1/8F32:	BD 9A 2B   	LDA $2B9A,X    ; character's left-hand item index
C1/8F35:	8D 0D 89   	STA $890D      ; set equipped item index
C1/8F38:	BD 9B 2B   	LDA $2B9B,X    ; character's left-hand item flags
C1/8F3B:	8D 0E 89   	STA $890E      ; set equipped item flags
C1/8F3E:	80 0C      	BRA $8F4C      ; skip right-hand

C1/8F40:	BD 86 2B   	LDA $2B86,X    ; character's right-hand item index
C1/8F43:	8D 0D 89   	STA $890D      ; set equipped item index
C1/8F46:	BD 87 2B   	LDA $2B87,X    ; character's right-hand item flags
C1/8F49:	8D 0E 89   	STA $890E      ; set equipped item flags

C1/8F4C:	B9 4B 89   	LDA $894B,Y    ; cursor column position
C1/8F4F:	1A         	INC A
C1/8F50:	8D 00 7B   	STA $7B00      ; #01 if righthand, #02 if lefthand
C1/8F53:	EE 02 7B   	INC $7B02      ; set item swap active
C1/8F56:	8E 03 7B   	STX $7B03      ; index of swap-in item data
C1/8F59:	B9 4B 89   	LDA $894B,Y    ; cursor column position
C1/8F5C:	AA         	TAX            ; left: 0, right: 1
C1/8F5D:	BF 83 82 C1	LDA $C18283,X  ; equipment menu column offset
C1/8F61:	18         	CLC
C1/8F62:	69 03      	ADC #$03       ; add 3
C1/8F64:	8D B6 7B   	STA $7BB6      ; save equipment menu cursor xpos
C1/8F67:	A9 B4      	LDA #$B4       ; equipment menu cursor ypos
C1/8F69:	8D B7 7B   	STA $7BB7      ; save
C1/8F6C:	A9 01      	LDA #$01
C1/8F6E:	8D B5 7B   	STA $7BB5      ; equip menu cursor frozen
C1/8F71:	20 40 8E   	JSR $8E40
C1/8F74:	18         	CLC
C1/8F75:	60         	RTS

; (Never runs)
C1/8F76:	AE 03 7B   	LDX $7B03      ; index of swap-in item data
C1/8F79:	AC 05 7B   	LDY $7B05      ; index of swap-out item data
C1/8F7C:	B9 86 2B   	LDA $2B86,Y
C1/8F7F:	DD 86 26   	CMP $2686,X
C1/8F82:	D0 01      	BNE $8F85
C1/8F84:	60         	RTS

; (Never runs)
C1/8F85:	BD 86 26    LDA $2686,X
C1/8F88:	C9 FF       CMP #$FF
C1/8F8A:	F0 11       BEQ $8F9D
C1/8F8C:	20 18 8A    JSR $8A18      ; store character bitmask in $2C
C1/8F8F:	BD 87 26    LDA $2687,X
C1/8F92:	29 18       AND #$18       ; is weapon or shield
C1/8F94:	F0 EE       BEQ $8F84
C1/8F96:	BD 8A 26    LDA $268A,X
C1/8F99:	25 2C       AND $2C
C1/8F9B:	D0 E7       BNE $8F84
C1/8F9D:	B9 9A 2B    LDA $2B9A,Y
C1/8FA0:	8D 3B 7B    STA $7B3B
C1/8FA3:	B9 9B 2B    LDA $2B9B,Y
C1/8FA6:	8D 3C 7B    STA $7B3C
C1/8FA9:	BD 86 26    LDA $2686,X
C1/8FAC:	8D 39 7B    STA $7B39
C1/8FAF:	BD 87 26    LDA $2687,X
C1/8FB2:	8D 3A 7B    STA $7B3A
C1/8FB5:	20 D5 89    JSR $89D5      ; validate equip swap and flag stat update
C1/8FB8:	B0 CA       BCS $8F84      ; branch if invalid equipment setup
C1/8FBA:	AE 03 7B    LDX $7B03      ; index of swap-in item data (why?)
C1/8FBD:	AC 05 7B    LDY $7B05      ; index of swap-out item data
C1/8FC0:	7B          TDC            ; A = 0000
C1/8FC1:	AA          TAX            ; X = 0000 (undoes LDX above)
C1/8FC2:	AC 05 7B    LDY $7B05      ; index of swap-out item data
C1/8FC5:	B9 86 2B    LDA $2B86,Y
C1/8FC8:	9D 07 7B    STA $7B07,X
C1/8FCB:	E8          INX
C1/8FCC:	C8          INY
C1/8FCD:	E0 05 00    CPX #$0005
C1/8FD0:	D0 F3       BNE $8FC5
C1/8FD2:	AE 03 7B    LDX $7B03      ; index of swap-in item data
C1/8FD5:	AC 05 7B    LDY $7B05      ; index of swap-out item data
C1/8FD8:	BD 86 26    LDA $2686,X
C1/8FDB:	99 86 2B    STA $2B86,Y
C1/8FDE:	BD 87 26    LDA $2687,X
C1/8FE1:	99 87 2B    STA $2B87,Y
C1/8FE4:	BD 88 26    LDA $2688,X
C1/8FE7:	99 88 2B    STA $2B88,Y
C1/8FEA:	BD 8A 26    LDA $268A,X
C1/8FED:	99 8A 2B    STA $2B8A,Y
C1/8FF0:	A9 01       LDA #$01
C1/8FF2:	99 89 2B    STA $2B89,Y
C1/8FF5:	BD 89 26    LDA $2689,X
C1/8FF8:	C9 02       CMP #$02
C1/8FFA:	90 05       BCC $9001
C1/8FFC:	DE 89 26    DEC $2689,X
C1/8FFF:	80 13       BRA $9014
C1/9001:	A9 FF       LDA #$FF
C1/9003:	9D 86 26    STA $2686,X   ; clear item slot
C1/9006:	A9 80       LDA #$80
C1/9008:	9D 87 26    STA $2687,X   ; set unusable in battle
C1/900B:	9E 88 26    STZ $2688,X   ; zero targeting
C1/900E:	9E 89 26    STZ $2689,X   ; zero quantity
C1/9011:	9E 8A 26    STZ $268A,X   ; zero equip blacklist
C1/9014:	AD 07 7B    LDA $7B07
C1/9017:	85 40       STA $40
C1/9019:	20 B7 8C    JSR $8CB7
C1/901C:	90 14       BCC $9032
C1/901E:	20 D2 8C    JSR $8CD2
C1/9021:	7B          TDC
C1/9022:	A8          TAY
C1/9023:	B9 07 7B    LDA $7B07,Y
C1/9026:	9D 86 26    STA $2686,X
C1/9029:	E8          INX
C1/902A:	C8          INY
C1/902B:	C0 05 00    CPY #$0005
C1/902E:	D0 F3       BNE $9023
C1/9030:	80 0A       BRA $903C
C1/9032:	BD 89 26    LDA $2689,X
C1/9035:	C9 63       CMP #$63
C1/9037:	B0 03       BCS $903C
C1/9039:	FE 89 26    INC $2689,X
C1/903C:	60          RTS

; (Never runs)
C1/903D:	AE 03 7B   	LDX $7B03      ; index of swap-in item data
C1/9040:	AC 05 7B   	LDY $7B05      ; index of swap-out item data
C1/9043:	B9 9A 2B   	LDA $2B9A,Y    ; lefthand item index
C1/9046:	DD 86 26   	CMP $2686,X    ; swap-in item index
C1/9049:	D0 01      	BNE $904C      ; continue if not same item
C1/904B:	60         	RTS

; (Never runs)
C1/904C:	BD 86 26    LDA $2686,X    ; swap-in item index (redundant)
C1/904F:	C9 FF       CMP #$FF       ; empty slot
C1/9051:	F0 11       BEQ $9064      ; branch if unequipping item
C1/9053:	20 18 8A    JSR $8A18      ; store character bitmask in $2C
C1/9056:	BD 87 26    LDA $2687,X    ; swap-in item flags
C1/9059:	29 18       AND #$18       ; is weapon or shield
C1/905B:	F0 EE       BEQ $904B      ; exit if not weapon or shield
C1/905D:	BD 8A 26    LDA $268A,X    ; equippable blacklist
C1/9060:	25 2C       AND $2C        ; check character's unique bit
C1/9062:	D0 E7       BNE $904B      ; exit if character cannot equip

; (Never runs)
C1/9064:	B9 86 2B    LDA $2B86,Y
C1/9067:	8D 3B 7B    STA $7B3B
C1/906A:	B9 87 2B    LDA $2B87,Y
C1/906D:	8D 3C 7B    STA $7B3C
C1/9070:	BD 86 26    LDA $2686,X
C1/9073:	8D 39 7B    STA $7B39
C1/9076:	BD 87 26    LDA $2687,X
C1/9079:	8D 3A 7B    STA $7B3A
C1/907C:	20 D5 89    JSR $89D5      ; validate equip swap and flag stat update
C1/907F:	B0 CA       BCS $904B      ; branch if invalid equipment setup
C1/9081:	AE 03 7B    LDX $7B03      ; index of swap-in item data
C1/9084:	AC 05 7B    LDY $7B05      ; index of swap-out item data
C1/9087:	7B          TDC
C1/9088:	AA          TAX
C1/9089:	AC 05 7B    LDY $7B05      ; index of swap-out item data
C1/908C:	B9 9A 2B    LDA $2B9A,Y
C1/908F:	9D 07 7B    STA $7B07,X
C1/9092:	E8          INX
C1/9093:	C8          INY
C1/9094:	E0 05 00    CPX #$0005
C1/9097:	D0 F3       BNE $908C
C1/9099:	AE 03 7B    LDX $7B03      ; index of swap-in item data
C1/909C:	AC 05 7B    LDY $7B05      ; index of swap-out item data
C1/909F:	BD 86 26    LDA $2686,X    ; item index
C1/90A2:	99 9A 2B    STA $2B9A,Y    ; set left-hand item index
C1/90A5:	BD 87 26    LDA $2687,X    ; item flags
C1/90A8:	99 9B 2B    STA $2B9B,Y    ; set left-hand item flags
C1/90AB:	BD 88 26    LDA $2688,X    ; item targeting
C1/90AE:	99 9C 2B    STA $2B9C,Y
C1/90B1:	BD 8A 26    LDA $268A,X
C1/90B4:	99 9E 2B    STA $2B9E,Y
C1/90B7:	A9 01       LDA #$01
C1/90B9:	99 9D 2B    STA $2B9D,Y
C1/90BC:	BD 89 26    LDA $2689,X
C1/90BF:	C9 02       CMP #$02
C1/90C1:	90 05       BCC $90C8
C1/90C3:	DE 89 26    DEC $2689,X
C1/90C6:	80 13       BRA $90DB
C1/90C8:	A9 FF       LDA #$FF
C1/90CA:	9D 86 26    STA $2686,X    ; clear item slot
C1/90CD:	A9 80       LDA #$80
C1/90CF:	9D 87 26    STA $2687,X    ; set unusable in battle
C1/90D2:	9E 88 26    STZ $2688,X    ; zero targeting
C1/90D5:	9E 89 26    STZ $2689,X    ; zero quantity
C1/90D8:	9E 8A 26    STZ $268A,X    ; zero equip blacklist
C1/90DB:	AD 07 7B    LDA $7B07
C1/90DE:	85 40       STA $40
C1/90E0:	20 B7 8C    JSR $8CB7
C1/90E3:	90 14       BCC $90F9
C1/90E5:	20 D2 8C    JSR $8CD2
C1/90E8:	7B          TDC
C1/90E9:	A8          TAY
C1/90EA:	B9 07 7B    LDA $7B07,Y
C1/90ED:	9D 86 26    STA $2686,X
C1/90F0:	E8          INX
C1/90F1:	C8          INY
C1/90F2:	C0 05 00    CPY #$0005
C1/90F5:	D0 F3       BNE $90EA
C1/90F7:	80 0A       BRA $9103
C1/90F9:	BD 89 26    LDA $2689,X
C1/90FC:	C9 63       CMP #$63
C1/90FE:	B0 03       BCS $9103
C1/9100:	FE 89 26    INC $2689,X
C1/9103:	60          RTS

; Magitek targeting (why here?)
C1/9104:	43
C1/9105:	43
C1/9106:	43
C1/9107:	6A
C1/9108:	03
C1/9109:	6A
C1/910A:	43
C1/910B:	43

; Mask of Terra's available Magitek
C1/910C:	00
C1/910D:	01
C1/910E:	02
C1/910F:	03
C1/9110:	04
C1/9101:	05
C1/9112:	06
C1/9113:	07

; Mask of default available Magitek
C1/9114:	00 - Fire beam
C1/9115:	01 - Ice beam
C1/9116:	02 - Bolt beam
C1/9117:	FF
C1/9118:	04 - Heal beam
C1/9119:	FF
C1/911A:	FF
C1/911B:	FF

C1/911C:	A9 40       LDA #$40
C1/911E:	8D C2 7B    STA $7BC2       ; set menu cursor state
C1/9121:	4C 95 77    JMP $7795

C1/9124:	20 43 AB   	JSR $AB43
C1/9127:	9C B0 62   	STZ $62B0
C1/912A:	20 E5 94   	JSR $94E5        ; move color palette data from/to buffer [?]
C1/912D:	20 F4 94   	JSR $94F4       ; copy monster sprite data to buffer
C1/9130:	9C D0 62   	STZ $62D0
C1/9133:	9C D1 62   	STZ $62D1
C1/9136:	6B         	RTL

C1/9137:	20 E5 94   	JSR $94E5       ; move color palette data from/to buffer [?]
C1/913A:	20 03 95   	JSR $9503       ; update monster sprite data from buffer
C1/913D:	20 85 B0   	JSR $B085       ; post-animation cleanup [?]
C1/9140:	9C D0 62   	STZ $62D0
C1/9143:	9C D1 62   	STZ $62D1
C1/9146:	6B         	RTL

; Enter "ready" stance [others?]
C1/9147:	20 58 AB   	JSR $AB58       ; copy targets, initialize animation
C1/914A:	20 C3 99   	JSR $99C3
C1/914D:	A0 01 00   	LDY #$0001
C1/9150:	B1 78      	LDA ($78),Y     ; target slot ID
C1/9152:	48         	PHA
C1/9153:	B1 76      	LDA ($76),Y     ; command ID
C1/9155:	48         	PHA
C1/9156:	C9 16      	CMP #$16        ; "Jump" command ID
C1/9158:	D0 1A      	BNE $9174
C1/915A:	A0 01 00   	LDY #$0001
C1/915D:	B1 78      	LDA ($78),Y     ; target slot ID
C1/915F:	C9 04      	CMP #$04        ; is character slot
C1/9161:	90 05      	BCC $9168       ; branch if not ^
C1/9163:	A2 22 10    LDX #$1022      ; character offset something
C1/9166:	80 03       BRA $916B
C1/9168:	A2 50 0F   	LDX #$0F50      ; monster offset something [?]
C1/916B:	86 1E      	STX $1E         ; save ^
C1/916D:	7B         	TDC             ; clear A/B
C1/916E:	20 B3 9C   	JSR $9CB3       ; load spell animation and sound data
C1/9171:	20 5B AC   	JSR $AC5B

C1/9174:	68         	PLA             ; command ID
C1/9175:	AA         	TAX             ; index it
C1/9176:	68         	PLA             ; target slot ID
C1/9177:	C9 04      	CMP #$04        ; is monster range
C1/9179:	B0 12      	BCS $918D       ; exit if ^
C1/917B:	0A         	ASL A
C1/917C:	0A         	ASL A
C1/917D:	0A         	ASL A
C1/917E:	0A         	ASL A
C1/917F:	0A         	ASL A           ; character slot x32
C1/9180:	A8         	TAY             ; index it
C1/9181:	E0 FF 00   	CPX #$00FF      ; empty command [?]
C1/9184:	F0 07      	BEQ $918D       ; exit if ^
C1/9186:	BF 9A E4 C2	LDA $C2E49A,X   ; load sprite animation ID for this command
C1/918A:	99 BB 61   	STA $61BB,Y     ; set sprite animation for this character
C1/918D:	60         	RTS

; Offsets to pre-magic swirly animation data
C1/918E:	880F       ; black magic
C1/9190:	960F       ; white/gray magic
C2/9192:	A40F       ; esper
C1/9194:	B20F       ; everything else


; Jump table for Battle Dynamics Commands
C1/9196:	94 96      ; $00 - RTS
C1/9198:	A7 97      ; $01 - display attack name text box
C1/919A:	55 98      ; $02 - cause text box to show, msg. is param. 1?
C1/919C:	09 96      ; $03
C1/919E:	94 96      ; $04 - RTS
C1/91A0:	E2 93      ; $05 - RTS
C1/91A2:	60 B7      ; $06 ($B760) attack animation (if reflected, just see wall)
C1/91A4:	90 96      ; $07 - advance the animation data queue by $10
C1/91A6:	E2 93      ; $08 - RTS
C1/91A8:	9B A7      ; $09 - reflected. params:<command><attack><???>
C1/91AA:	19 97      ; $0A
C1/91AC:	B3 A4      ; $0B - display damage numerals, dmg. is param 1???
C1/91AE:	47 91      ; $0C ($9147) enter ready stance (or "defend")
C1/91B0:	C3 99      ; $0D - apply status ailments? (poison, mute, etc)
C1/91B2:	76 AB      ; $0E ($AB76) fail to cast spell due to "mute" or "imp" [?]
C1/91B4:	67 FD      ; $0F - special battle event, index is param. 1
C1/91B6:	35 98      ; $10 - load pointer to battle dialogue, bank 2: <dialogue>
C1/91B8:	28 97      ; $11
C1/91BA:	29 93      ; $12
C1/91BC:	9C 93      ; $13 ($939C) Add/Remove monster (w/ special animation)
C1/91BE:	CC 91      ; $14 ($91CC) Animation/Sound Effect
C1/91C0:	8F A9      ; $15
C1/91C2:	76 AB      ; $16
C1/91C4:	76 AB      ; $17
C1/91C6:	76 AB      ; $18
C1/91C8:	76 AB      ; $19
C1/91CA:	76 AB      ; $1A

; Play animation or sound effect
C1/91CC:	22 3D E6 C2	JSL $C2E63D
C1/91D0:	60         	RTS

; Used by "Kefka Death" animation routine
C1/91D1:	20 86 0E   	JSR $0E86        ; load enemy formation data [?]
C1/91D4:	20 7C 25   	JSR $257C
C1/91D7:	22 6B A9 C2	JSR $C2A96B
C1/91DB:	6B         	RTL

C1/91DC:	EE BF 62   	INC $62BF
C1/91DF:	20 E5 94   	JSR $94E5        ; move color palette data from/to buffer [?]
C1/91E2:	7B         	TDC
C1/91E3:	20 56 92   	JSR $9256
C1/91E6:	48         	PHA
C1/91E7:	09 E0      	ORA #$E0
C1/91E9:	AA         	TAX
C1/91EA:	85 14      	STA $14
C1/91EC:	85 16      	STA $16
C1/91EE:	85 18      	STA $18
C1/91F0:	A2 80 01   	LDX #$0180
C1/91F3:	86 10      	STX $10
C1/91F5:	A9 40      	LDA #$40
C1/91F7:	85 12      	STA $12
C1/91F9:	20 53 EB   	JSR $EB53
C1/91FC:	68         	PLA
C1/91FD:	1A         	INC A
C1/91FE:	C9 20      	CMP #$20
C1/9200:	D0 E1      	BNE $91E3
C1/9202:	9C BF 62   	STZ $62BF
C1/9205:	7B         	TDC
C1/9206:	AA         	TAX
C1/9207:	86 10      	STX $10
C1/9209:	4C 3C C2   	JMP $C23C         ; clear subscreen window mask

C1/920C:	EE BF 62   	INC $62BF
C1/920F:	20 E5 94   	JSR $94E5         ; move color palette data from/to buffer [?]
C1/9212:	7B         	TDC
C1/9213:	AA         	TAX
C1/9214:	9E 80 7F   	STZ $7F80,X
C1/9217:	E8         	INX
C1/9218:	E0 80 00   	CPX #$0080
C1/921B:	D0 F7      	BNE $9214
C1/921D:	20 2A 02   	JSR $022A         ; wait a frame (and run updates)
C1/9220:	A9 0F      	LDA #$0F
C1/9222:	8D AC 61   	STA $61AC
C1/9225:	A9 1F      	LDA #$1F
C1/9227:	20 56 92   	JSR $9256
C1/922A:	48         	PHA
C1/922B:	09 E0      	ORA #$E0
C1/922D:	AA         	TAX
C1/922E:	85 14      	STA $14
C1/9230:	85 16      	STA $16
C1/9232:	85 18      	STA $18
C1/9234:	A2 80 01   	LDX #$0180
C1/9237:	86 10      	STX $10
C1/9239:	A9 40      	LDA #$40
C1/923B:	85 12      	STA $12
C1/923D:	20 53 EB   	JSR $EB53
C1/9240:	68         	PLA
C1/9241:	3A         	DEC A
C1/9242:	D0 E3      	BNE $9227
C1/9244:	A9 30      	LDA #$30
C1/9246:	20 5E 92   	JSR $925E
C1/9249:	20 56 92   	JSR $9256
C1/924C:	9C BF 62   	STZ $62BF
C1/924F:	7B         	TDC
C1/9250:	AA         	TAX
C1/9251:	86 10      	STX $10
C1/9253:	4C 3C C2   	JMP $C23C         ; clear subscreen window mask

C1/9256:	48         	PHA
C1/9257:	A9 04      	LDA #$04
C1/9259:	20 B6 9B   	JSR $9BB6
C1/925C:	68         	PLA
C1/925D:	60         	RTS

C1/925E:	8D BD 61   	STA $61BD
C1/9261:	8D DD 61   	STA $61DD
C1/9264:	8D FD 61   	STA $61FD
C1/9267:	8D 1D 62   	STA $621D
C1/926A:	60         	RTS

C1/926B:	A2 02 02    LDX #$0202
C1/926E:	86 10       STX $10
C1/9270:	A9 10       LDA #$10
C1/9272:	4C 3C C2    JMP $C23C         ; fill subscreen window mask

C1/9275:	9C 80 7B    STZ $7B80
C1/9278:	EE B8 EC    INC $ECB8
C1/927B:	A9 62       LDA #$62
C1/927D:	8D 72 89    STA $8972
C1/9280:	9C 1D 20    STZ $201D
C1/9283:	9C 1E 20    STZ $201E
C1/9286:	AD B8 EC    LDA $ECB8
C1/9289:	48          PHA
C1/928A:	20 D1 1B    JSR $1BD1
C1/928D:	20 2A 02    JSR $022A          ; wait a frame (and run updates)
C1/9290:	7B          TDC
C1/9291:	AA          TAX
C1/9292:	8E B2 64    STX $64B2
C1/9295:	E6 97       INC $97
C1/9297:	A9 08       LDA #$08
C1/9299:	20 B6 9B    JSR $9BB6
C1/929C:	AD B8 EC    LDA $ECB8
C1/929F:	C9 36       CMP #$36
C1/92A1:	D0 21       BNE $92C4
C1/92A3:	AE B2 64    LDX $64B2
C1/92A6:	E0 E0 FF    CPX #$FFE0
C1/92A9:	D0 19       BNE $92C4
C1/92AB:	EE ED E9    INC $E9ED
C1/92AE:	A9 10       LDA #$10
C1/92B0:	8D 00 13    STA $1300
C1/92B3:	A9 52       LDA #$52
C1/92B5:	8D 01 13    STA $1301
C1/92B8:	A9 FF       LDA #$FF
C1/92BA:	8D 02 13    STA $1302
C1/92BD:	22 04 00 C5 JSL $C50004
C1/92C1:	9C ED E9    STZ $E9ED
C1/92C4:	AE B2 64    LDX $64B2
C1/92C7:	CA          DEX
C1/92C8:	8E B2 64    STX $64B2
C1/92CB:	E0 68 FF    CPX #$FF68
C1/92CE:	D0 C7       BNE $9297
C1/92D0:	9C B0 64    STZ $64B0
C1/92D3:	68          PLA
C1/92D4:	8D DF E9    STA $E9DF
C1/92D7:	48          PHA
C1/92D8:	20 DF 1B    JSR $1BDF
C1/92DB:	20 2A 02    JSR $022A          ; wait a frame (and run updates)
C1/92DE:	20 07 B0    JSR $B007
C1/92E1:	7B          TDC
C1/92E2:	AA          TAX
C1/92E3:	8E B2 64    STX $64B2
C1/92E6:	20 2A 02    JSR $022A          ; wait a frame (and run updates)
C1/92E9:	68          PLA
C1/92EA:	20 DC 1B    JSR $1BDC
C1/92ED:	20 07 B0    JSR $B007
C1/92F0:	A9 61       LDA #$61
C1/92F2:	8D 72 89    STA $8972
C1/92F5:	20 76 00    JSR $0076
C1/92F8:	20 6B 92    JSR $926B
C1/92FB:	7B          TDC
C1/92FC:	20 5E 92    JSR $925E
C1/92FF:	20 0C 92    JSR $920C
C1/9302:	A9 17       LDA #$17
C1/9304:	8D 91 89    STA $8991
C1/9307:	8D 8D 89    STA $898D
C1/930A:	9C 0F EC    STZ $EC0F
C1/930D:	9C 9A 62    STZ $629A
C1/9310:	9C 85 62    STZ $6285
C1/9313:	9C EF E9    STZ $E9EF
C1/9316:	AD B8 EC    LDA $ECB8
C1/9319:	C9 36       CMP #$36
C1/931B:	D0 0B       BNE $9328
C1/931D:	AD 44 2F    LDA $2F44
C1/9320:	49 FF       EOR #$FF
C1/9322:	8D E6 E9    STA $E9E6
C1/9325:	9C 82 62    STZ $6282
C1/9328:	60          RTS

C1/9329:	A0 01 00    LDY #$0001
C1/932C:	B1 76       LDA ($76),Y
C1/932E:	10 07       BPL $9337
C1/9330:	29 7F       AND #$7F
C1/9332:	91 76       STA ($76),Y
C1/9334:	20 75 92    JSR $9275
C1/9337:	A0 02 00    LDY #$0002
C1/933A:	AD 1E 20    LDA $201E
C1/933D:	91 76       STA ($76),Y
C1/933F:	C8          INY
C1/9340:	B1 76       LDA ($76),Y
C1/9342:	48          PHA
C1/9343:	7B          TDC
C1/9344:	91 76       STA ($76),Y
C1/9346:	22 68 E6 C2 JSL $C2E668
C1/934A:	7B          TDC
C1/934B:	AA          TAX
C1/934C:	9E C2 62    STZ $62C2,X
C1/934F:	9E 8B 61    STZ $618B,X
C1/9352:	E8          INX
C1/9353:	E0 06 00    CPX #$0006
C1/9356:	D0 F4       BNE $934C
C1/9358:	9C 1E 20    STZ $201E
C1/935B:	9C AB 61    STZ $61AB
C1/935E:	9C 2F 2F    STZ $2F2F
C1/9361:	A9 FF       LDA #$FF
C1/9363:	8D 91 61    STA $6191
C1/9366:	20 86 0E    JSR $0E86
C1/9369:	20 7C 25    JSR $257C
C1/936C:	20 DD 22    JSR $22DD
C1/936F:	20 72 3E    JSR $3E72
C1/9372:	20 88 15    JSR $1588
C1/9375:	20 C1 25    JSR $25C1
C1/9378:	7B          TDC
C1/9379:	A0 02 00    LDY #$0002
C1/937C:	91 76       STA ($76),Y
C1/937E:	C8          INY
C1/937F:	68          PLA
C1/9380:	91 76       STA ($76),Y
C1/9382:	8D 2F 2F    STA $2F2F
C1/9385:	8D AB 61    STA $61AB
C1/9388:	48          PHA
C1/9389:	A0 01 00    LDY #$0001
C1/938C:	AD 48 2F    LDA $2F48
C1/938F:	29 0F       AND #$0F
C1/9391:	91 76       STA ($76),Y
C1/9393:	22 68 E6 C2 JSL $C2E668
C1/9397:	68          PLA
C1/9398:	8D 1E 20    STA $201E
C1/939B:	60          RTS

; Add/Remove Monster w/ Special Animation (Battle Dynamics Command #$13)

C1/939C:	A0 03 00   	LDY #$0003      ; fourth argument
C1/939F:	B1 76      	LDA ($76),Y     ; enemies to unhide/revive
C1/93A1:	F0 2D      	BEQ $93D0       ; branch if none ^

; Unhiding/Reviving Enemy Animation
C1/93A3:	85 10      	STA $10         ; save enemy target(s)
C1/93A5:	7B         	TDC             ; zero A/B
C1/93A6:	AA         	TAX             ; zero X

C1/93A7:	46 10      	LSR $10         ; check enemy bit
C1/93A9:	90 06      	BCC $93B1       ; branch if unset
C1/93AB:	9E C2 62   	STZ $62C2,X     ; clear Imp mode
C1/93AE:	9E 8B 61   	STZ $618B,X     ; clear Flash mode [?]
C1/93B1:	E8         	INX             ; next enemy slot
C1/93B2:	E0 06 00   	CPX #$0006      ; check all 6 slots
C1/93B5:	D0 F0      	BNE $93A7       ; loop till done

C1/93B7:	A0 01 00   	LDY #$0001      ; second argument
C1/93BA:	B1 76      	LDA ($76),Y     ; add/remove animation ID
C1/93BC:	C9 0E      	CMP #$0E        ; "Chadarnook" [?]
C1/93BE:	F0 0B      	BEQ $93CB       ; branch if ^
C1/93C0:	AD BA 64   	LDA $64BA       ; magitek mode enabled [?]
C1/93C3:	D0 06      	BNE $93CB       ; branch if ^
C1/93C5:	20 7C 25   	JSR $257C
C1/93C8:	20 C1 25   	JSR $25C1
C1/93CB:	22 68 E6 C2	JSL $C2E668
C1/93CF:	60         	RTS

; Hiding/Killing Enemy Animation

C1/93D0:	A0 02 00    LDY #$0002      ; third argument
C1/93D3:	AD 1E 20    LDA $201E       ; still visible enemies
C1/93D6:	2D AB 61    AND $61AB       ; invalid monster mask [?]
C1/93D9:	31 76       AND ($76),Y     ; "hide" targets
C1/93DB:	F0 04       BEQ $93E1       ; exit if no valid targets
C1/93DD:	22 68 E6 C2 JSL $C2E668
C1/93E1:	60          RTS

C1/93E2:	60          RTS

C1/93E3:	AD 44 2F   	LDA $2F44       ; monsters with "Clear" status
C1/93E6:	49 FF      	EOR #$FF        ; invert ^
C1/93E8:	8D E6 E9   	STA $E9E6       ; monsters without "Clear" status
C1/93EB:	AD 82 62   	LDA $6282       ; some flag [?]
C1/93EE:	F0 03      	BEQ $93F3       ; branch if not ^
C1/93F0:	9C E6 E9   	STZ $E9E6       ; set all monsters to "Clear"
C1/93F3:	AD 2F 2F   	LDA $2F2F       ; visible (living) monsters
C1/93F6:	49 FF      	EOR #$FF        ; non-visible (dead) monsters
C1/93F8:	2D 1E 20   	AND $201E       ; still visible monsters
C1/93FB:	2D AB 61   	AND $61AB       ; [?]
C1/93FE:	D0 03      	BNE $9403       ; branch if some ^
C1/9400:	4C 92 94   	JMP $9492       ; else, jump

; Handle normal monster death animation

C1/9403:	48         	PHA               ; save newly dead monsters [?]
C1/9404:	9C 67 7B   	STZ $7B67         ; clear "Hide BG1 sprites" flag [?]
C1/9407:	20 2A 02   	JSR $022A         ; wait a frame (and run updates)
C1/940A:	20 59 1E   	JSR $1E59         ; fill VRAM Battle BG1 tiles w/ $02EE
C1/940D:	20 ED 1F   	JSR $1FED         ; fill BG tile data buffer w/ $01EE
C1/9410:	20 F9 B0   	JSR $B0F9         ; move BG tile buffer to BG3 VRAM
C1/9413:	20 F4 94   	JSR $94F4         ; copy monster sprite data to buffer

C1/9416:	7B         	TDC               ; zero A/B
C1/9417:	AA         	TAX               ; zero X
C1/9418:	BF 5D B0 C2	LDA $C2B05D,X     ; some data [?]
C1/941C:	9D 60 7F   	STA $7F60,X       ; spell animation palette byte
C1/941F:	E8         	INX               ; next byte
C1/9420:	E0 20 00   	CPX #$0020        ; moved 32 bytes
C1/9423:	D0 F3      	BNE $9418         ; loop till done

C1/9425:	AD 8A 62   	LDA $628A         ; "Flashback" mode
C1/9428:	F0 0E      	BEQ $9438         ; branch if not ^
C1/942A:	A2 60 01    LDX #$0160
C1/942D:	86 18       STX $18
C1/942F:	A2 80 01    LDX #$0180
C1/9432:	86 1A       STX $1A
C1/9434:	22 42 B4 C2 JSL $C2B442       ; transform palette

C1/9438:	A2 02 02   	LDX #$0202
C1/943B:	86 10      	STX $10
C1/943D:	A9 10      	LDA #$10
C1/943F:	20 3C C2   	JSR $C23C         ; fill subscreen window mask

C1/9442:	68         	PLA               ; newly dead monsters [?]
C1/9443:	85 10      	STA $10           ; save ^
C1/9445:	85 12      	STA $12           ; save ^
C1/9447:	7B         	TDC               ; zero A/B
C1/9448:	AA         	TAX               ; zero X
C1/9449:	46 12      	LSR $12           ; check monster bit
C1/944B:	90 14      	BCC $9461         ; branch if no ^
C1/944D:	BD DB 80   	LDA $80DB,X       ; monster sprite data
C1/9450:	29 C1      	AND #$C1          ; 
C1/9452:	09 06      	ORA #$06
C1/9454:	9D DB 80   	STA $80DB,X       ; monster sprite graphic index
C1/9457:	A9 01      	LDA #$01
C1/9459:	9D DC 80   	STA $80DC,X       ; monster sprite flags
C1/945C:	BD C3 80   	LDA $80C3,X       ; monster left X position
C1/945F:	85 14      	STA $14           ; save ^
C1/9461:	E8         	INX               ; next monster slot
C1/9462:	E8         	INX               ; next monster slot
C1/9463:	E0 0C 00   	CPX #$000C        ; checked all 6 slots
C1/9466:	D0 E1      	BNE $9449         ; loop till done

C1/9468:	A5 14      	LDA $14           ; monster left X position
C1/946A:	85 10      	STA $10           ; save ^
C1/946C:	A9 2D      	LDA #$2D          ; "Bang" (dying monster)
C1/946E:	20 EF 17   	JSR $17EF         ; process animation sound effect

C1/9471:	A9 20      	LDA #$20          ; 32 frames (wait)
C1/9473:	48         	PHA               ; save waitcount
C1/9474:	20 2A 02   	JSR $022A         ; wait a frame (and run updates)
C1/9477:	20 C0 94   	JSR $94C0         ; fade palette colors
C1/947A:	68         	PLA               ; get waitcount
C1/947B:	3A         	DEC A             ; decrement wait
C1/947C:	D0 F5      	BNE $9473         ; loop till 32 frames

C1/947E:	AD 2F 2F   	LDA $2F2F         ; visible (alive) monsters
C1/9481:	8D 1E 20   	STA $201E         ; still visible monsters
C1/9484:	7B         	TDC               ; zero A/B
C1/9485:	AA         	TAX               ; zero X
C1/9486:	86 10      	STX $10           ; zero scratch
C1/9488:	20 3C C2   	JSR $C23C         ; clear subscreen window mask
C1/948B:	20 03 95   	JSR $9503         ; update monster sprite data from buffer
C1/948E:	22 97 01 C1	JSL $C10197       ; update displayed monster names

C1/9492:	AD 1E 20   	LDA $201E         ; still visible monsters
C1/9495:	CD 2F 2F   	CMP $2F2F         ; visible (alive) monsters
C1/9498:	F0 09      	BEQ $94A3         ; branch if same ^
C1/949A:	AD 1E 20   	LDA $201E         ; still visible monsters
C1/949D:	0D 2F 2F   	ORA $2F2F         ; add visible (living) monsters
C1/94A0:	8D 1E 20   	STA $201E         ; update still visible monsters

C1/94A3:	7B         	TDC               ; zero A/B
C1/94A4:	AA         	TAX               ; zero X
C1/94A5:	AD 54 2F   	LDA $2F54         ; controlled monsters (flipped)
C1/94A8:	85 10      	STA $10           ; save ^

C1/94AA:	A9 21      	LDA #$21
C1/94AC:	9D DC 80   	STA $80DC,X       ; set monster sprite flags [?]
C1/94AF:	A5 10      	LDA $10           ; controlled monsters (flipped)
C1/94B1:	29 01      	AND #$01          ; this monster bit
C1/94B3:	9D 7E 61   	STA $617E,X       ; set this monster horizontal flip
C1/94B6:	46 10      	LSR $10           ; shift next controlled monster bit
C1/94B8:	E8         	INX               ; next monster slot
C1/94B9:	E8         	INX               ; next monster slot
C1/94BA:	E0 0C 00   	CPX #$000C        ; done all 6 monsters
C1/94BD:	D0 EB      	BNE $94AA         ; loop till done
C1/94BF:	60         	RTS

; Gradually shift palette (lighten/redden?)
C1/94C0:	7B         	TDC               ; zero A/B
C1/94C1:	A8         	TAY               ; zero Y
C1/94C2:	C2 20      	REP #$20
C1/94C4:	A2 10 00   	LDX #$0010
C1/94C7:	A9 E1 00   	LDA #$00E1
C1/94CA:	85 14      	STA $14
C1/94CC:	85 16      	STA $16
C1/94CE:	85 18      	STA $18
C1/94D0:	20 6E FC   	JSR $FC6E
C1/94D3:	B9 60 7F   	LDA $7F60,Y       ; spell animation palette value
C1/94D6:	20 99 FC   	JSR $FC99         ; some color transformation
C1/94D9:	99 60 7F   	STA $7F60,Y       ; save new palette value
C1/94DC:	C8         	INY               ; next palette value
C1/94DD:	C8         	INY               ; next palette value
C1/94DE:	CA         	DEX               ; decrement counter
C1/94DF:	D0 F2      	BNE $94D3         ; loop for 16 word values
C1/94E1:	7B         	TDC               ; zero A/B
C1/94E2:	E2 20      	SEP #$20          ; 8-bit A
C1/94E4:	60         	RTS

; Move color palette data from/to buffer [?]
C1/94E5:	7B         	TDC              ; A = 0000
C1/94E6:	AA         	TAX              ; X = 0000
C1/94E7:	BD 00 7E   	LDA $7E00,X      ; color palettes (buffer?)
C1/94EA:	9D 00 7C   	STA $7C00,X      ; update color palettes [?]
C1/94ED:	E8         	INX
C1/94EE:	E0 00 02   	CPX #$0200       ; move full color palette data
C1/94F1:	D0 F4      	BNE $94E7        ; continue loop
C1/94F3:	60         	RTS

; Move monster sprite data to animation buffer
C1/94F4:	7B         	TDC
C1/94F5:	AA         	TAX              ; X = 0 (index to monster)
C1/94F6:	BD DB 80   	LDA $80DB,X      ; A = monster data
C1/94F9:	9D 0B 81   	STA $810B,X      ; move to new location
C1/94FC:	E8         	INX
C1/94FD:	E0 0C 00   	CPX #$000C       ; write 12 bytes total, 2 per monster
C1/9500:	D0 F4      	BNE $94F6
C1/9502:	60         	RTS

; Update monster sprite data from buffer
C1/9503:	7B         	TDC              ; A = 0000
C1/9504:	AA         	TAX              ; X = 0000
C1/9505:	BD 0B 81   	LDA $810B,X      ; monster sprite data (buffer)
C1/9508:	9D DB 80   	STA $80DB,X      ; update permanent monster sprite data
C1/950B:	E8         	INX              ; next byte
C1/950C:	E0 0C 00   	CPX #$000C       ; loop 12 times (2 bytes per monster)
C1/950F:	D0 F4      	BNE $9505        ; continue loop
C1/9511:	60         	RTS

; Setup the Battle Dynamics Script to be decoded
C1/9512:	20 E5 94   	JSR $94E5      (Moves a block from $7E00 to $7C00)
C1/9515:	A2 6E 2D   	LDX #$2D6E
C1/9518:	86 76      	STX $76        (Now $76 holds the start of the battle dynamics script)
C1/951A:	A2 6E 2C   	LDX #$2C6E     	
C1/951D:	86 78      	STX $78         ; this is where data for attack animations is stored (targe
C1/951F:	9C AE 60   	STZ $60AE       ; zero animation stage (used for Bushido)
C1/9522:	9C A4 62   	STZ $62A4       ; passive self-dmg (regen, etc)
C1/9525:	A9 17      	LDA #$17
C1/9527:	8D 8D 89   	STA $898D       ; main screen designation? (23)
C1/952A:	9C 3D 7B   	STZ $7B3D       ; ?
C1/952D:	9C D0 62   	STZ $62D0       ; ?
C1/9530:	9C D1 62   	STZ $62D1       ; ?
C1/9533:	7B         	TDC             ; A = 0
C1/9534:	AA         	TAX             ; X = 0
C1/9535:	8E A5 62   	STX $62A5       ; ?
C1/9538:	8E A7 62   	STX $62A7       ; ?
C1/953B:	B2 76      	LDA ($76)      (Load the battle dynaimcs command)
C1/953D:	C9 FF      	CMP #$FF       (Make sure it isn't FF (end script))
C1/953F:	F0 12      	BEQ $9553      (If it was, we're done)
C1/9541:	20 69 95   	JSR $9569      (Otherwise, do the appropriate command)
C1/9544:	C2 20      	REP #$20       (16-bit Accum./Mem.)
C1/9546:	A5 76      	LDA $76
C1/9548:	18         	CLC
C1/9549:	69 04 00   	ADC #$0004     	(So, struct starting at $2D6E is 4 wide?)
C1/954C:	85 76      	STA $76          (Advance the script pointer by 4)
C1/954E:	7B         	TDC
C1/954F:	E2 20      	SEP #$20         (8-bit Accum./Mem.)
C1/9551:	80 E0      	BRA $9533        (Do it again until we hit #$FF)
C1/9553:	AD 8C 62   	LDA $628C
C1/9556:	D0 10      	BNE $9568
C1/9558:	22 FB 01 C1	JSL $C101FB
C1/955C:	22 FB 01 C1	JSL $C101FB
C1/9560:	22 FB 01 C1	JSL $C101FB
C1/9564:	22 FB 01 C1	JSL $C101FB
C1/9568:	6B         	RTL


; Battle Dynamics Script Function
; (A holds the command number)
C1/9569:	0A         	ASL A
C1/956A:	AA         	TAX
C1/956B:	7C 96 91   	JMP ($9196,X)  ; Jump table

; Add 10h to memory location $78
; Each dynamic action command is specified in 4 bytes at $76,
; but also has a 16 byte data block (eg for targeting) at $78
C1/956E:	C2 20      	REP #$20
C1/9570:	A5 78      	LDA $78
C1/9572:	18         	CLC
C1/9573:	69 10 00   	ADC #$0010
C1/9576:	85 78      	STA $78
C1/9578:	7B         	TDC
C1/9579:	E2 20      	SEP #$20           ; 8-bit A
C1/957B:	60         	RTS

; Update Sprite Priority if necessary (for Cover, etc) [?]

C1/957C:	AD 0C 7B   	LDA $7B0C          ; pending sprite priority update [?]
C1/957F:	F0 01      	BEQ $9582          ; branch if invalid [?]
C1/9581:	60         	RTS

C1/9582:	7B         	TDC                ; A = 0000
C1/9583:	AA         	TAX                ; X = 0000
C1/9584:	A9 FF      	LDA #$FF           ; "null"
C1/9586:	9D E8 80   	STA $80E8,X        ; null byte [?]
C1/9589:	E8         	INX
C1/958A:	E8         	INX                ; every other byte
C1/958B:	E0 0C 00   	CPX #$000C         ; 12 loops (all entities)
C1/958E:	D0 F4      	BNE $9584          ; loop till finished
C1/9590:	C2 20      	REP #$20           ; 16-bit A
C1/9592:	7B         	TDC                ; A = 0000
C1/9593:	AA         	TAX                ; X = 0000
C1/9594:	A8         	TAY                ; Y = 0000
C1/9595:	64 10      	STZ $10            ; initialize entity counter

C1/9597:	BD 43 80   	LDA $8043,X        ; character bottom Y coord
C1/959A:	99 1F 7A   	STA $7A1F,Y        ; save bottom Y (buffer)
C1/959D:	A5 10      	LDA $10            ; entity index
C1/959F:	99 21 7A   	STA $7A21,Y        ; save entity index (buffer)
C1/95A2:	E6 10      	INC $10            ; next entity index
C1/95A4:	E8         	INX
C1/95A5:	E8         	INX                ; next entity offset
C1/95A6:	C8         	INY
C1/95A7:	C8         	INY
C1/95A8:	C8         	INY
C1/95A9:	C8         	INY                ; next positioning buffer
C1/95AA:	C0 10 00   	CPY #$0010         ; 4 loops (characters)
C1/95AD:	D0 E8      	BNE $9597          ; continue loop

C1/95AF:	7B         	TDC                ; A = 0000
C1/95B0:	AA         	TAX                ; X = 0000
C1/95B1:	BD 4B 80   	LDA $804B,X        ; monster corrected bottom Y coord
C1/95B4:	99 1F 7A   	STA $7A1F,Y        ; save bottom Y (buffer)
C1/95B7:	A5 10      	LDA $10            ; entity index
C1/95B9:	99 21 7A   	STA $7A21,Y        ; save entity index (buffer)
C1/95BC:	E6 10      	INC $10            ; next entity index
C1/95BE:	E8         	INX
C1/95BF:	E8         	INX                ; next entity offset
C1/95C0:	C8         	INY
C1/95C1:	C8         	INY
C1/95C2:	C8         	INY
C1/95C3:	C8         	INY                ; next positioning buffer
C1/95C4:	C0 28 00   	CPY #$0028         ; 6 loops (monsters)
C1/95C7:	D0 E8      	BNE $95B1          ; continue loop

C1/95C9:	7B         	TDC                ; A = 0000
C1/95CA:	AA         	TAX                ; X = 0000
C1/95CB:	64 10      	STZ $10            ; zero "still sorting" flag
C1/95CD:	BD 1F 7A   	LDA $7A1F,X        ; this entity's Y coord
C1/95D0:	DD 23 7A   	CMP $7A23,X        ; compare to next entity's Y coord
C1/95D3:	F0 20      	BEQ $95F5          ; skip to next if equal
C1/95D5:	B0 1E      	BCS $95F5          ; skip to next if greater
C1/95D7:	E6 10      	INC $10            ; flag "still sorting"
C1/95D9:	BD 23 7A   	LDA $7A23,X
C1/95DC:	48         	PHA
C1/95DD:	BD 1F 7A   	LDA $7A1F,X
C1/95E0:	9D 23 7A   	STA $7A23,X
C1/95E3:	68         	PLA
C1/95E4:	9D 1F 7A   	STA $7A1F,X        ; swap this and next entities' Y coords
C1/95E7:	BD 25 7A   	LDA $7A25,X
C1/95EA:	48         	PHA
C1/95EB:	BD 21 7A   	LDA $7A21,X
C1/95EE:	9D 25 7A   	STA $7A25,X
C1/95F1:	68         	PLA
C1/95F2:	9D 21 7A   	STA $7A21,X        ; swap this and next entities' indexes
C1/95F5:	E8         	INX
C1/95F6:	E8         	INX
C1/95F7:	E8         	INX
C1/95F8:	E8         	INX                ; next entity offset
C1/95F9:	E0 24 00   	CPX #$0024         ; 12 loops (all entities)
C1/95FC:	D0 CF      	BNE $95CD          ; continue loop
C1/95FE:	A5 10      	LDA $10            ; "still sorting"
C1/9600:	D0 C7      	BNE $95C9          ; keep sorting until no swaps needed
C1/9602:	7B         	TDC                ; A = 0000
C1/9603:	E2 20      	SEP #$20           ; 8-bit A
C1/9605:	EE 0C 7B   	INC $7B0C          ; sprite priority is sorted
C1/9608:	60         	RTS

; Battle Dynamics Command 03
; Simultaneous multiple damage display
C1/9609:	20 FA A5   	JSR $A5FA
C1/960C:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/960F:	7B         	TDC
C1/9610:	AA         	TAX
C1/9611:	1D 3F 7B   	ORA $7B3F,X
C1/9614:	E8         	INX
C1/9615:	E0 0A 00   	CPX #$000A
C1/9618:	D0 F7      	BNE $9611
C1/961A:	0D 1A 63   	ORA $631A
C1/961D:	0D 1B 63   	ORA $631B
C1/9620:	0D 1C 63   	ORA $631C
C1/9623:	0D 1D 63   	ORA $631D
C1/9626:	D0 E4      	BNE $960C
C1/9628:	60         	RTS

C1/9629:	7B         	TDC
C1/962A:	AA         	TAX
C1/962B:	A9 E0      	LDA #$E0
C1/962D:	85 10      	STA $10
C1/962F:	64 1A      	STZ $1A
C1/9631:	A9 02      	LDA #$02
C1/9633:	9D B4 89   	STA $89B4,X
C1/9636:	A9 81      	LDA #$81
C1/9638:	9D B5 89   	STA $89B5,X
C1/963B:	A5 10      	LDA $10
C1/963D:	9D B6 89   	STA $89B6,X
C1/9640:	E6 1A      	INC $1A
C1/9642:	A5 1A      	LDA $1A
C1/9644:	C9 02      	CMP #$02
C1/9646:	D0 0A      	BNE $9652
C1/9648:	64 1A      	STZ $1A
C1/964A:	A5 10      	LDA $10
C1/964C:	C9 FF      	CMP #$FF
C1/964E:	F0 02      	BEQ $9652
C1/9650:	E6 10      	INC $10
C1/9652:	E8         	INX
C1/9653:	E8         	INX
C1/9654:	E8         	INX
C1/9655:	E8         	INX
C1/9656:	E0 80 00   	CPX #$0080
C1/9659:	D0 D6      	BNE $9631
C1/965B:	20 73 96   	JSR $9673
C1/965E:	60         	RTS

C1/965F:	7B         	TDC
C1/9660:	AA         	TAX
C1/9661:	A9 E0      	LDA #$E0
C1/9663:	9D 96 89   	STA $8996,X
C1/9666:	E8         	INX
C1/9667:	E8         	INX
C1/9668:	E8         	INX
C1/9669:	E8         	INX
C1/966A:	E0 A0 00   	CPX #$00A0
C1/966D:	D0 F4      	BNE $9663
C1/966F:	20 8A C3   	JSR $C38A          ; set max sprite priority for all entities
C1/9672:	60         	RTS

C1/9673:	A9 20      	LDA #$20
C1/9675:	8D BD 61   	STA $61BD
C1/9678:	8D DD 61   	STA $61DD
C1/967B:	8D FD 61   	STA $61FD
C1/967E:	8D 1D 62   	STA $621D
C1/9681:	7B         	TDC
C1/9682:	AA         	TAX
C1/9683:	A9 21      	LDA #$21
C1/9685:	9D DC 80   	STA $80DC,X
C1/9688:	E8         	INX
C1/9689:	E8         	INX
C1/968A:	E0 0C 00   	CPX #$000C
C1/968D:	D0 F6      	BNE $9685
C1/968F:	60         	RTS

C1/9690:	20 6E 95   	JSR $956E
C1/9693:	60         	RTS

C1/9694:	60         	RTS

C1/9695:	A9 81       LDA #$81
C1/9697:	8D C3 E9    STA $E9C3
C1/969A:	A2 00 58    LDX #$5800
C1/969D:	8E BF E9    STX $E9BF
C1/96A0:	9C C1 E9    STZ $E9C1
C1/96A3:	9C C2 E9    STZ $E9C2
C1/96A6:	9C AC 62    STZ $62AC
C1/96A9:	60          RTS

C1/96AA:	4C 12 43   	JMP $4312

C1/96AD:	20 B9 43   	JSR $43B9
C1/96B0:	A9 3C      	LDA #$3C
C1/96B2:	8D C3 7B   	STA $7BC3
C1/96B5:	A9 02      	LDA #$02
C1/96B7:	8D C2 7B   	STA $7BC2
C1/96BA:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/96BD:	9C D5 64   	STZ $64D5
C1/96C0:	60         	RTS

C1/96C1:	20 E4 42   	JSR $42E4
C1/96C4:	20 0C 50   	JSR $500C
C1/96C7:	20 95 96   	JSR $9695
C1/96CA:	20 1A 98   	JSR $981A
C1/96CD:	20 D5 5D   	JSR $5DD5
C1/96D0:	20 E4 42   	JSR $42E4
C1/96D3:	20 0C 50   	JSR $500C
C1/96D6:	E2 10      	SEP #$10
C1/96D8:	7B         	TDC
C1/96D9:	AA         	TAX
C1/96DA:	C2 20      	REP #$20
C1/96DC:	A9 00 01   	LDA #$0100
C1/96DF:	48         	PHA
C1/96E0:	2B         	PLD
C1/96E1:	B5 02      	LDA $02,X
C1/96E3:	9D 83 4D   	STA $4D83,X
C1/96E6:	B5 06      	LDA $06,X
C1/96E8:	9D 87 4D   	STA $4D87,X
C1/96EB:	B5 0A      	LDA $0A,X
C1/96ED:	9D 8B 4D   	STA $4D8B,X
C1/96F0:	B5 0E      	LDA $0E,X
C1/96F2:	9D 8F 4D   	STA $4D8F,X
C1/96F5:	8A         	TXA
C1/96F6:	18         	CLC
C1/96F7:	69 10 00   	ADC #$0010
C1/96FA:	AA         	TAX
C1/96FB:	E0 C0      	CPX #$C0
C1/96FD:	D0 E2      	BNE $96E1
C1/96FF:	A9 00 00   	LDA #$0000
C1/9702:	48         	PHA
C1/9703:	2B         	PLD
C1/9704:	E2 20      	SEP #$20           ; 8-bit A
C1/9706:	C2 10      	REP #$10
C1/9708:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/970B:	60         	RTS

C1/970C:	20 0F 98   	JSR $980F
C1/970F:	20 1A 98   	JSR $981A
C1/9712:	9C AC 62   	STZ $62AC
C1/9715:	20 7A 98   	JSR $987A
C1/9718:	60         	RTS

C1/9719:	20 12 43   	JSR $4312
C1/971C:	20 95 96   	JSR $9695
C1/971F:	20 FE 98   	JSR $98FE
C1/9722:	20 D5 5D   	JSR $5DD5
C1/9725:	4C CC 43   	JMP $43CC

C1/9728:	A9 0C      	LDA #$0C
C1/972A:	20 C4 98   	JSR $98C4
C1/972D:	20 61 99   	JSR $9961
C1/9730:	A9 7E      	LDA #$7E
C1/9732:	8D D9 88   	STA $88D9
C1/9735:	A2 D5 57   	LDX #$57D5
C1/9738:	8E D7 88   	STX $88D7
C1/973B:	A9 CF      	LDA #$CF
C1/973D:	85 12      	STA $12
C1/973F:	A0 01 00   	LDY #$0001
C1/9742:	C2 20      	REP #$20
C1/9744:	B1 76      	LDA ($76),Y
C1/9746:	0A         	ASL A
C1/9747:	85 10      	STA $10
C1/9749:	0A         	ASL A
C1/974A:	0A         	ASL A
C1/974B:	18         	CLC
C1/974C:	65 10      	ADC $10
C1/974E:	18         	CLC
C1/974F:	69 D0 D0   	ADC #$D0D0
C1/9752:	85 10      	STA $10
C1/9754:	7B         	TDC
C1/9755:	E2 20      	SEP #$20           ; 8-bit A
C1/9757:	A8         	TAY
C1/9758:	B7 10      	LDA [$10],Y
C1/975A:	C9 FF      	CMP #$FF
C1/975C:	F0 09      	BEQ $9767
C1/975E:	99 D5 57   	STA $57D5,Y
C1/9761:	C8         	INY
C1/9762:	C0 0A 00   	CPY #$000A
C1/9765:	D0 F1      	BNE $9758
C1/9767:	7B         	TDC
C1/9768:	99 D5 57   	STA $57D5,Y
C1/976B:	A9 01      	LDA #$01
C1/976D:	8D AC 62   	STA $62AC
C1/9770:	AD 8D 89   	LDA $898D
C1/9773:	48         	PHA
C1/9774:	A9 12      	LDA #$12
C1/9776:	8D 8D 89   	STA $898D
C1/9779:	20 D5 5D   	JSR $5DD5
C1/977C:	20 87 98   	JSR $9887
C1/977F:	20 26 1F   	JSR $1F26          ; set battlefield BG1 tiles in VRAM
C1/9782:	68         	PLA
C1/9783:	8D 8D 89   	STA $898D
C1/9786:	A9 20      	LDA #$20
C1/9788:	20 B6 9B   	JSR $9BB6
C1/978B:	A9 12      	LDA #$12
C1/978D:	8D 8D 89   	STA $898D
C1/9790:	20 17 99   	JSR $9917
C1/9793:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/9796:	A9 17      	LDA #$17
C1/9798:	8D 8D 89   	STA $898D
C1/979B:	7B         	TDC
C1/979C:	AA         	TAX
C1/979D:	8E F5 4A   	STX $4AF5
C1/97A0:	60         	RTS

C1/97A1:	0F
C1/97A2:	0E
C1/97A3:	80
C1/97A4:	00
C1/97A5:	81
C1/97A6:	0C

C1/97A7:	A0 01 00   	LDY #$0001
C1/97AA:	B1 76      	LDA ($76),Y
C1/97AC:	AA         	TAX
C1/97AD:	BF A1 97 C1	LDA $C197A1,X    ; Data
C1/97B1:	48         	PHA
C1/97B2:	AA         	TAX
C1/97B3:	C8         	INY
C1/97B4:	B1 76      	LDA ($76),Y
C1/97B6:	48         	PHA
C1/97B7:	DA         	PHX
C1/97B8:	A9 12      	LDA #$12
C1/97BA:	8D 8D 89   	STA $898D
C1/97BD:	A9 0C      	LDA #$0C
C1/97BF:	20 C4 98   	JSR $98C4
C1/97C2:	20 61 99   	JSR $9961
C1/97C5:	A9 7E      	LDA #$7E
C1/97C7:	8D D9 88   	STA $88D9
C1/97CA:	A2 D5 57   	LDX #$57D5
C1/97CD:	8E D7 88   	STX $88D7
C1/97D0:	FA         	PLX
C1/97D1:	8A         	TXA
C1/97D2:	8D D5 57   	STA $57D5
C1/97D5:	68         	PLA
C1/97D6:	8D D6 57   	STA $57D6
C1/97D9:	9C D7 57   	STZ $57D7
C1/97DC:	68         	PLA
C1/97DD:	10 04      	BPL $97E3
C1/97DF:	22 11 BB C2	JSL $C2BB11
C1/97E3:	A9 01      	LDA #$01
C1/97E5:	8D AC 62   	STA $62AC
C1/97E8:	20 D5 5D   	JSR $5DD5
C1/97EB:	20 87 98   	JSR $9887
C1/97EE:	20 26 1F   	JSR $1F26          ; set battlefield BG1 tiles in VRAM
C1/97F1:	A9 17      	LDA #$17
C1/97F3:	8D 8D 89   	STA $898D
C1/97F6:	20 A7 98   	JSR $98A7
C1/97F9:	A9 12      	LDA #$12
C1/97FB:	8D 8D 89   	STA $898D
C1/97FE:	20 17 99   	JSR $9917
C1/9801:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/9804:	A9 17      	LDA #$17
C1/9806:	8D 8D 89   	STA $898D
C1/9809:	7B         	TDC
C1/980A:	AA         	TAX
C1/980B:	8E F5 4A   	STX $4AF5
C1/980E:	60         	RTS

C1/980F:	A9 0B      	LDA #$0B
C1/9811:	20 C4 98   	JSR $98C4
C1/9814:	20 26 1F   	JSR $1F26          ; set battlefield BG1 tiles in VRAM
C1/9817:	4C 80 99   	JMP $9980

C1/981A:	A9 D0      	LDA #$D0
C1/981C:	8D D9 88   	STA $88D9
C1/981F:	A0 01 00   	LDY #$0001
C1/9822:	B7 8F      	LDA [$8F],Y
C1/9824:	C2 20      	REP #$20
C1/9826:	0A         	ASL A
C1/9827:	AA         	TAX
C1/9828:	BF 00 D0 D0	LDA $D0D000,X
C1/982C:	8D D7 88   	STA $88D7
C1/982F:	E6 8F      	INC $8F
C1/9831:	7B         	TDC
C1/9832:	E2 20      	SEP #$20           ; 8-bit A
C1/9834:	60         	RTS

C1/9835:	20 0F 98   	JSR $980F
C1/9838:	A9 CF      	LDA #$CF           ; battle dialogue bank
C1/983A:	8D D9 88   	STA $88D9
C1/983D:	A0 01 00   	LDY #$0001
C1/9840:	C2 20      	REP #$20
C1/9842:	B1 76      	LDA ($76),Y
C1/9844:	0A         	ASL A
C1/9845:	AA         	TAX
C1/9846:	BF E0 DF CF	LDA $CFDFE0,X      ; pointer to battle dialogue
C1/984A:	8D D7 88   	STA $88D7          ; save ^
C1/984D:	7B         	TDC                ; zero A/B
C1/984E:	E2 20      	SEP #$20           ; 8-bit A
C1/9850:	9C AC 62   	STZ $62AC          ; flag battle dialogue pending [?]
C1/9853:	80 25      	BRA $987A

; Battle dynamics command #2 - Display battle message box
C1/9855:	AD 8D 89   	LDA $898D          ; main screen designation [?]
C1/9858:	48         	PHA                ; backup
C1/9859:	A9 12      	LDA #$12           ; message box designation [?]
C1/985B:	8D 8D 89   	STA $898D          ; update screen designation [?]
C1/985E:	20 0F 98   	JSR $980F
C1/9861:	20 FE 98   	JSR $98FE
C1/9864:	A9 01      	LDA #$01
C1/9866:	8D AC 62   	STA $62AC          ; flag battle message ready [??]
C1/9869:	68         	PLA                ; backed up main screen [?]
C1/986A:	8D 8D 89   	STA $898D          ; restore main screen designation [?]
C1/986D:	20 D5 5D   	JSR $5DD5
C1/9870:	80 0F      	BRA $9881

C1/9872:	20
C1/9873:	30
C1/9874:	40
C1/9875:	50
C1/9876:	60
C1/9877:	70
C1/9878:	80
C1/9879:	90

C1/987A:	20 D5 5D    JSR $5DD5
C1/987D:	20 81 98   	JSR $9881
C1/9880:	60         	RTS

C1/9881:	20 A7 98   	JSR $98A7
C1/9884:	4C 17 99   	JMP $9917

C1/9887:	A5 7A      	LDA $7A
C1/9889:	C2 20      	REP #$20
C1/988B:	85 10      	STA $10
C1/988D:	A9 68 00   	LDA #$0068
C1/9890:	38         	SEC
C1/9891:	E5 10      	SBC $10
C1/9893:	4A         	LSR A
C1/9894:	18         	CLC
C1/9895:	69 02 00   	ADC #$0002
C1/9898:	85 10      	STA $10
C1/989A:	AD F5 4A   	LDA $4AF5
C1/989D:	38         	SEC
C1/989E:	E5 10      	SBC $10
C1/98A0:	8D F5 4A   	STA $4AF5
C1/98A3:	7B         	TDC
C1/98A4:	E2 20      	SEP #$20           ; 8-bit A
C1/98A6:	60         	RTS

C1/98A7:	AD F5 E9   	LDA $E9F5
C1/98AA:	D0 17      	BNE $98C3
C1/98AC:	AF 4D 1D 00	LDA $001D4D        ; config settings
C1/98B0:	4A         	LSR A
C1/98B1:	4A         	LSR A
C1/98B2:	4A         	LSR A
C1/98B3:	4A         	LSR A              ; >> 4
C1/98B4:	29 07      	AND #$07           ; isolate message speed
C1/98B6:	AA         	TAX
C1/98B7:	BF 72 98 C1	LDA $C19872,X    ; Data
C1/98BB:	48         	PHA
C1/98BC:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/98BF:	68         	PLA
C1/98C0:	3A         	DEC A
C1/98C1:	D0 F8      	BNE $98BB
C1/98C3:	60         	RTS

C1/98C4:	48         	PHA
C1/98C5:	EE 9E 62   	INC $629E
C1/98C8:	9C 67 7B   	STZ $7B67
C1/98CB:	A9 01      	LDA #$01
C1/98CD:	8D C3 E9   	STA $E9C3
C1/98D0:	A0 00 50   	LDY #$5000
C1/98D3:	8C BF E9   	STY $E9BF
C1/98D6:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/98D9:	20 59 1E   	JSR $1E59          ; fill VRAM Battle BG1 tiles w/ $02EE
C1/98DC:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/98DF:	20 34 40   	JSR $4034
C1/98E2:	AD 7D 89   	LDA $897D
C1/98E5:	8D 7D 60   	STA $607D
C1/98E8:	20 29 96   	JSR $9629
C1/98EB:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/98EE:	20 BB 5D   	JSR $5DBB
C1/98F1:	A0 00 50   	LDY #$5000
C1/98F4:	8C BF E9   	STY $E9BF
C1/98F7:	20 9B 63   	JSR $639B
C1/98FA:	68         	PLA
C1/98FB:	4C 8C 53   	JMP $538C

C1/98FE:	A9 D1      	LDA #$D1
C1/9900:	8D D9 88   	STA $88D9          ; some flags or bank [?]
C1/9903:	A0 01 00   	LDY #$0001         ; arg 1
C1/9906:	B1 76      	LDA ($76),Y        ; text message ID
C1/9908:	C2 20      	REP #$20           ; 16-bit A
C1/990A:	0A         	ASL A              ; x2
C1/990B:	AA         	TAX                ; index it
C1/990C:	BF A0 F7 D1	LDA $D1F7A0,X      ; get pointer to text message
C1/9910:	8D D7 88   	STA $88D7          ; save pointer
C1/9913:	7B         	TDC                ; zero A/B
C1/9914:	E2 20      	SEP #$20           ; 8-bit A
C1/9916:	60         	RTS

C1/9917:	AD 9E 62   	LDA $629E
C1/991A:	F0 2E      	BEQ $994A
C1/991C:	AD 8D 89   	LDA $898D
C1/991F:	48         	PHA
C1/9920:	A9 12      	LDA #$12
C1/9922:	8D 8D 89   	STA $898D
C1/9925:	20 4C 99   	JSR $994C
C1/9928:	20 9C 99   	JSR $999C
C1/992B:	20 BB 5D   	JSR $5DBB
C1/992E:	A0 00 50   	LDY #$5000
C1/9931:	8C BF E9   	STY $E9BF
C1/9934:	20 9B 63   	JSR $639B
C1/9937:	20 59 1E   	JSR $1E59          ; fill VRAM Battle BG1 tiles w/ $02EE
C1/993A:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/993D:	20 5F 96   	JSR $965F
C1/9940:	AD 7D 60   	LDA $607D
C1/9943:	8D 7D 89   	STA $897D
C1/9946:	68         	PLA
C1/9947:	8D 8D 89   	STA $898D
C1/994A:	60         	RTS

C1/994B:	FF

C1/994C:	C2 20      	REP #$20
C1/994E:	7B         	TDC
C1/994F:	AA         	TAX
C1/9950:	A9 FF 01   	LDA #$01FF
C1/9953:	9D 3F E7   	STA $E73F,X
C1/9956:	E8         	INX
C1/9957:	E8         	INX
C1/9958:	E0 80 00   	CPX #$0080
C1/995B:	D0 F6      	BNE $9953
C1/995D:	7B         	TDC
C1/995E:	E2 20      	SEP #$20           ; 8-bit A
C1/9960:	60         	RTS

C1/9961:	20 4C 99   	JSR $994C
C1/9964:	C2 20      	REP #$20
C1/9966:	7B         	TDC
C1/9967:	AA         	TAX
C1/9968:	A9 00 30   	LDA #$3000
C1/996B:	9D 51 E7   	STA $E751,X
C1/996E:	1A         	INC A
C1/996F:	9D 91 E7   	STA $E791,X
C1/9972:	1A         	INC A
C1/9973:	E8         	INX
C1/9974:	E8         	INX
C1/9975:	E0 2C 00   	CPX #$002C
C1/9978:	D0 F1      	BNE $996B
C1/997A:	7B         	TDC
C1/997B:	E2 20      	SEP #$20           ; 8-bit A
C1/997D:	4C 9C 99   	JMP $999C

C1/9980:	20 4C 99   	JSR $994C
C1/9983:	C2 20      	REP #$20
C1/9985:	7B         	TDC
C1/9986:	AA         	TAX
C1/9987:	A9 00 30   	LDA #$3000
C1/998A:	9D 43 E7   	STA $E743,X
C1/998D:	1A         	INC A
C1/998E:	9D 83 E7   	STA $E783,X
C1/9991:	1A         	INC A
C1/9992:	E8         	INX
C1/9993:	E8         	INX
C1/9994:	E0 38 00   	CPX #$0038
C1/9997:	D0 F1      	BNE $998A
C1/9999:	7B         	TDC
C1/999A:	E2 20      	SEP #$20           ; 8-bit A
C1/999C:	A2 80 00   	LDX #$0080
C1/999F:	86 10      	STX $10
C1/99A1:	A2 3F E7   	LDX #$E73F
C1/99A4:	A9 7E      	LDA #$7E
C1/99A6:	A0 40 54   	LDY #$5440
C1/99A9:	20 8D 19   	JSR $198D         ; initialize VRAM DMA transfer
C1/99AC:	A2 00 00   	LDX #$0000
C1/99AF:	8E 22 7E   	STX $7E22
C1/99B2:	A2 1F 00   	LDX #$001F
C1/99B5:	8E 24 7E   	STX $7E24
C1/99B8:	AE 55 1D   	LDX $1D55
C1/99BB:	8E 26 7E   	STX $7E26
C1/99BE:	4C 8A 9C   	JMP $9C8A

C1/99C1:	08
C1/99C2:	18

C1/99C3:	7B         	TDC
C1/99C4:	AA         	TAX
C1/99C5:	8E 8B 61   	STX $618B
C1/99C8:	8E 8D 61   	STX $618D
C1/99CB:	8E 8F 61   	STX $618F
C1/99CE:	A8         	TAY
C1/99CF:	BD AE 61   	LDA $61AE,X
C1/99D2:	F0 10      	BEQ $99E4
C1/99D4:	BD 10 7B   	LDA $7B10,X
C1/99D7:	DD B2 61   	CMP $61B2,X
C1/99DA:	D0 08      	BNE $99E4
C1/99DC:	B9 BE 61   	LDA $61BE,Y
C1/99DF:	49 40      	EOR #$40
C1/99E1:	99 BE 61   	STA $61BE,Y
C1/99E4:	98         	TYA
C1/99E5:	18         	CLC
C1/99E6:	69 20      	ADC #$20
C1/99E8:	A8         	TAY
C1/99E9:	E8         	INX
C1/99EA:	E0 04 00   	CPX #$0004
C1/99ED:	D0 E0      	BNE $99CF
C1/99EF:	AD BA 64   	LDA $64BA
C1/99F2:	AA         	TAX
C1/99F3:	BF C1 99 C1	LDA $C199C1,X    ; Data
C1/99F7:	8D F1 7A   	STA $7AF1
C1/99FA:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/99FD:	7B         	TDC
C1/99FE:	A8         	TAY
C1/99FF:	B9 AE 61   	LDA $61AE,Y
C1/9A02:	F0 47      	BEQ $9A4B
C1/9A04:	98         	TYA
C1/9A05:	0A         	ASL A
C1/9A06:	0A         	ASL A
C1/9A07:	0A         	ASL A
C1/9A08:	0A         	ASL A
C1/9A09:	0A         	ASL A
C1/9A0A:	AA         	TAX
C1/9A0B:	5A         	PHY
C1/9A0C:	AD BA 64   	LDA $64BA
C1/9A0F:	D0 0F      	BNE $9A20
C1/9A11:	B9 B2 61   	LDA $61B2,Y
C1/9A14:	F0 05      	BEQ $9A1B
C1/9A16:	A0 FD FF   	LDY #$FFFD
C1/9A19:	80 03      	BRA $9A1E
C1/9A1B:	A0 03 00   	LDY #$0003
C1/9A1E:	80 12      	BRA $9A32
C1/9A20:	A9 01      	LDA #$01
C1/9A22:	99 CC 64   	STA $64CC,Y
C1/9A25:	B9 B2 61   	LDA $61B2,Y
C1/9A28:	F0 05      	BEQ $9A2F
C1/9A2A:	A0 FF FF   	LDY #$FFFF
C1/9A2D:	80 03      	BRA $9A32
C1/9A2F:	A0 01 00   	LDY #$0001
C1/9A32:	84 10      	STY $10
C1/9A34:	9E C1 61   	STZ $61C1,X
C1/9A37:	A9 04      	LDA #$04
C1/9A39:	9D C0 61   	STA $61C0,X
C1/9A3C:	C2 20      	REP #$20
C1/9A3E:	BD D4 61   	LDA $61D4,X
C1/9A41:	18         	CLC
C1/9A42:	65 10      	ADC $10
C1/9A44:	9D D4 61   	STA $61D4,X
C1/9A47:	7B         	TDC
C1/9A48:	E2 20      	SEP #$20           ; 8-bit A
C1/9A4A:	7A         	PLY
C1/9A4B:	C8         	INY
C1/9A4C:	C0 04 00   	CPY #$0004
C1/9A4F:	D0 AE      	BNE $99FF
C1/9A51:	CE F1 7A   	DEC $7AF1
C1/9A54:	D0 A4      	BNE $99FA
C1/9A56:	7B         	TDC
C1/9A57:	AA         	TAX
C1/9A58:	A8         	TAY
C1/9A59:	BD AE 61   	LDA $61AE,X
C1/9A5C:	F0 1E      	BEQ $9A7C
C1/9A5E:	9E CC 64   	STZ $64CC,X
C1/9A61:	BD 10 7B   	LDA $7B10,X
C1/9A64:	DD B2 61   	CMP $61B2,X
C1/9A67:	D0 08      	BNE $9A71
C1/9A69:	B9 BE 61   	LDA $61BE,Y
C1/9A6C:	49 40      	EOR #$40
C1/9A6E:	99 BE 61   	STA $61BE,Y
C1/9A71:	9E AE 61   	STZ $61AE,X
C1/9A74:	7B         	TDC
C1/9A75:	99 C0 61   	STA $61C0,Y
C1/9A78:	3A         	DEC A
C1/9A79:	9D B2 61   	STA $61B2,X
C1/9A7C:	7B         	TDC
C1/9A7D:	99 D1 61   	STA $61D1,Y
C1/9A80:	98         	TYA
C1/9A81:	18         	CLC
C1/9A82:	69 20      	ADC #$20
C1/9A84:	A8         	TAY
C1/9A85:	9E A0 62   	STZ $62A0,X
C1/9A88:	E8         	INX
C1/9A89:	E0 04 00   	CPX #$0004
C1/9A8C:	D0 CB      	BNE $9A59
C1/9A8E:	60         	RTS

; Toggle direction character is facing [?]
C1/9A8F:	0A         	ASL A
C1/9A90:	0A         	ASL A
C1/9A91:	0A         	ASL A
C1/9A92:	0A         	ASL A
C1/9A93:	0A         	ASL A          ; A *= 32
C1/9A94:	AA         	TAX
C1/9A95:	BD BE 61   	LDA $61BE,X
C1/9A98:	49 40      	EOR #$40       ; toggle direction character is facing [?]
C1/9A9A:	9D BE 61   	STA $61BE,X
C1/9A9D:	60         	RTS

C1/9A9E:	20 89 BC   	JSR $BC89        ; set attacker index in $10
C1/9AA1:	6B         	RTL

; Initialize attack animation:
; * Facing directions
; * Monster sprite flash
; * Character step forward

C1/9AA2:	20 43 AB   	JSR $AB43      ; update animation thread counts and pause some
C1/9AA5:	20 A6 BC   	JSR $BCA6      ; set first target index in $12
C1/9AA8:	20 89 BC   	JSR $BC89      ; set attacker index in $10
C1/9AAB:	A5 10      	LDA $10        ; A = attacker index
C1/9AAD:	30 76      	BMI $9B25      ; branch if is a monster (flash sprite twice)
C1/9AAF:	29 03      	AND #$03       ; else make sure index is 0-3
C1/9AB1:	A8         	TAY            ; character attacker index
C1/9AB2:	0A         	ASL A
C1/9AB3:	0A         	ASL A
C1/9AB4:	0A         	ASL A
C1/9AB5:	0A         	ASL A
C1/9AB6:	0A         	ASL A
C1/9AB7:	AA         	TAX            ; X = character index * 32
C1/9AB8:	AD 3D 61   	LDA $613D      ; character targets
C1/9ABB:	0D 3E 61   	ORA $613E      ; monster targets
C1/9ABE:	F0 59      	BEQ $9B19      ; if no targets, finish
C1/9AC0:	AD A4 62   	LDA $62A4      ; passive self-damage attack (regen, etc)
C1/9AC3:	D0 54      	BNE $9B19      ; also finish if this set
C1/9AC5:	1A         	INC A          ; A = #01
C1/9AC6:	99 A0 62   	STA $62A0,Y    ; mark this character as doing something?
C1/9AC9:	9D D1 61   	STA $61D1,X    ; also mark in character data block?
C1/9ACC:	A5 12      	LDA $12        ; A = first target index
C1/9ACE:	10 49      	BPL $9B19      ; branch if is a character target

; Monster target
C1/9AD0:	29 7F      	AND #$7F       ; monster index 4-9 (omit "is monster" flag)
C1/9AD2:	38         	SEC
C1/9AD3:	E9 04      	SBC #$04       ; index 0-5
C1/9AD5:	0A         	ASL A
C1/9AD6:	AA         	TAX            ; X = monster target index * 2
C1/9AD7:	A5 10      	LDA $10
C1/9AD9:	0A         	ASL A
C1/9ADA:	A8         	TAY            ; character attacker index * 2
C1/9ADB:	C2 20      	REP #$20       ; 16-bit A
C1/9ADD:	B9 33 80   	LDA $8033,Y    ; A = character xpos (center of sprite)
C1/9AE0:	29 FF 01   	AND #$01FF     ; zero high byte (except bit 0)
C1/9AE3:	85 24      	STA $24        ; save it
C1/9AE5:	BD 0F 80   	LDA $800F,X    ; A = monster target xpos
C1/9AE8:	29 FF 01   	AND #$01FF     ; zero high byte (except bit 0)
C1/9AEB:	85 22      	STA $22        ; save it
C1/9AED:	7B         	TDC            ; A = 0000
C1/9AEE:	E2 20      	SEP #$20       ; 8-bit A
C1/9AF0:	A5 10      	LDA $10
C1/9AF2:	A8         	TAY            ; character attacker index
C1/9AF3:	B9 10 7B   	LDA $7B10,Y    ; is facing right?
C1/9AF6:	F0 11      	BEQ $9B09      ; branch if not
C1/9AF8:	A6 24      	LDX $24
C1/9AFA:	E4 22      	CPX $22
C1/9AFC:	90 1B      	BCC $9B19      ; branch if monster is further right
C1/9AFE:	7B         	TDC            ; A = 0000
C1/9AFF:	99 10 7B   	STA $7B10,Y    ; set character facing left (toward monster)
C1/9B02:	A5 10      	LDA $10        ; A = character index
C1/9B04:	20 8F 9A   	JSR $9A8F      ; toggle facing direction?
C1/9B07:	80 10      	BRA $9B19

C1/9B09:	A6 22      	LDX $22
C1/9B0B:	E4 24      	CPX $24
C1/9B0D:	90 0A      	BCC $9B19      ; branch if character further right
C1/9B0F:	A9 01      	LDA #$01
C1/9B11:	99 10 7B   	STA $7B10,Y    ; else, set character to face toward target
C1/9B14:	A5 10      	LDA $10        ; A = character index
C1/9B16:	20 8F 9A   	JSR $9A8F      ; toggle facing direction?

C1/9B19:	B9 AE 61   	LDA $61AE,Y    ; prevent character stepping forward?
C1/9B1C:	D0 06      	BNE $9B24      ; exit if flag set
C1/9B1E:	B9 10 7B   	LDA $7B10,Y    ; A = new character facing direction?
C1/9B21:	99 B2 61   	STA $61B2,Y    ; copy character's facing direction
C1/9B24:	60         	RTS

; Monster attacker
; At end of routine, flash monster sprite twice
C1/9B25:	A5 10      	LDA $10        ; A = attacker index
C1/9B27:	29 7F      	AND #$7F       ; remove monster flag
C1/9B29:	38         	SEC
C1/9B2A:	E9 04      	SBC #$04       ; get 0-5 monster index
C1/9B2C:	0A         	ASL A
C1/9B2D:	AA         	TAX            ; X = attacking monster index * 2
C1/9B2E:	AD 3D 61   	LDA $613D      ; character targets?
C1/9B31:	0D 3E 61   	ORA $613E      ; monster targets?
C1/9B34:	F0 34      	BEQ $9B6A      ; branch if no targets
C1/9B36:	A5 12      	LDA $12        ; A = first target
C1/9B38:	30 30      	BMI $9B6A      ; branch if is monster
C1/9B3A:	29 03      	AND #$03       ; ensure A is only 0-3 character index
C1/9B3C:	0A         	ASL A
C1/9B3D:	A8         	TAY            ; character target index * 2
C1/9B3E:	C2 20      	REP #$20       ; 16-bit A
C1/9B40:	B9 33 80   	LDA $8033,Y    ; A = character X position
C1/9B43:	85 24      	STA $24        ; save it
C1/9B45:	BD 0F 80   	LDA $800F,X    ; A = monster X position
C1/9B48:	85 22      	STA $22        ; save it
C1/9B4A:	7B         	TDC            ; A = 0000
C1/9B4B:	E2 20      	SEP #$20       ; 8-bit A
C1/9B4D:	BD F3 80   	LDA $80F3,X    ; A = monster flags
C1/9B50:	29 01      	AND #$01       ; flipped horizontally? (eg in back attack)
C1/9B52:	F0 08      	BEQ $9B5C      ; branch if normal front attack?

C1/9B54:	A4 24      	LDY $24        ; back attack/other handling?
C1/9B56:	C4 22      	CPY $22        ; character target xpos - monster attacker xpos
C1/9B58:	90 10      	BCC $9B6A      ; monster is on right
C1/9B5A:	80 06      	BRA $9B62      ; character is on right

C1/9B5C:	A4 22      	LDY $22        ; regular front attack handling?
C1/9B5E:	C4 24      	CPY $24        ; monster xpos - character xpos
C1/9B60:	90 08      	BCC $9B6A      ; character is on right
C1/9B62:	BD F3 80   	LDA $80F3,X
C1/9B65:	49 01      	EOR #$01       ; toggle monster facing direction
C1/9B67:	9D F3 80   	STA $80F3,X

C1/9B6A:	8A         	TXA
C1/9B6B:	4A         	LSR A
C1/9B6C:	AA         	TAX            ; X = monster index (0-5)
C1/9B6D:	BD 8B 61   	LDA $618B,X    ; some monster data?
C1/9B70:	D0 2E      	BNE $9BA0      ; exit if set
C1/9B72:	FE 8B 61   	INC $618B,X    ; else, set it to 1
C1/9B75:	20 C5 9B   	JSR $9BC5      ; zero 32 bytes (spell palettes?)
C1/9B78:	A0 01 00   	LDY #$0001
C1/9B7B:	B1 78      	LDA ($78),Y    ; A = attacker index
C1/9B7D:	29 7F      	AND #$7F       ; strip out monster bit
C1/9B7F:	38         	SEC
C1/9B80:	E9 04      	SBC #$04
C1/9B82:	0A         	ASL A
C1/9B83:	AA         	TAX            ; X = monster index (0-5) * 2
C1/9B84:	BD DB 80   	LDA $80DB,X    ; A = monster sprite data?
C1/9B87:	8D F0 7A   	STA $7AF0      ; save it
C1/9B8A:	A9 06      	LDA #$06
C1/9B8C:	20 A1 9B   	JSR $9BA1      ; set monster palette index 3
C1/9B8F:	AD F0 7A   	LDA $7AF0
C1/9B92:	20 A1 9B   	JSR $9BA1      ; then reset to normal
C1/9B95:	A9 06      	LDA #$06
C1/9B97:	20 A1 9B   	JSR $9BA1      ; set monster palette index 3 again
C1/9B9A:	AD F0 7A   	LDA $7AF0
C1/9B9D:	20 A1 9B   	JSR $9BA1      ; then reset to normal
C1/9BA0:	60         	RTS

; Sets monster sprite palette index to A / 2, then waits 4 frames
C1/9BA1:	85 10      	STA $10
C1/9BA3:	BD DB 80   	LDA $80DB,X    ; A = monster sprite data
C1/9BA6:	29 F1      	AND #$F1       ; remove palette index?
C1/9BA8:	05 10      	ORA $10
C1/9BAA:	9D DB 80   	STA $80DB,X    ; set palette index to $10/2
C1/9BAD:	A9 04      	LDA #$04
C1/9BAF:	4C B6 9B   	JMP $9BB6      ; wait 4 frames

C1/9BB2:	20 B6 9B   	JSR $9BB6
C1/9BB5:	6B         	RTL

; Wait for A frames
; (perform all timer/ATB/graphic updates while waiting)

C1/9BB6:	C9 00      	CMP #$00
C1/9BB8:	F0 0A      	BEQ $9BC4
C1/9BBA:	48         	PHA
C1/9BBB:	DA         	PHX
C1/9BBC:	20 2A 02   	JSR $022A         ; loop frame advance A times
C1/9BBF:	FA         	PLX
C1/9BC0:	68         	PLA
C1/9BC1:	3A         	DEC A
C1/9BC2:	D0 F2      	BNE $9BB6
C1/9BC4:	60         	RTS

; Zero 32 bytes (color palettes?) [?]
C1/9BC5:	7B         	TDC               ; A = 0000
C1/9BC6:	AA         	TAX               ; X = 0000
C1/9BC7:	9E 60 7F   	STZ $7F60,X       ; zero a byte (color palette?)
C1/9BCA:	E8         	INX
C1/9BCB:	E0 20 00   	CPX #$0020
C1/9BCE:	D0 F7      	BNE $9BC7         ; zero 32 bytes total (color palettes?)
C1/9BD0:	A2 FF FF   	LDX #$FFFF
C1/9BD3:	8E 62 7F   	STX $7F62         ; re-zero 3rd and 4th bytes (why?)
C1/9BD6:	60         	RTS

; Load palette data

C1/9BD7:	C2 20      	REP #$20          ; 16-bit A
C1/9BD9:	0A         	ASL A
C1/9BDA:	0A         	ASL A
C1/9BDB:	0A         	ASL A
C1/9BDC:	0A         	ASL A             ; palette index (x16)
C1/9BDD:	AA         	TAX               ; index it
C1/9BDE:	7B         	TDC               ; A = 0000
C1/9BDF:	A8         	TAY               ; Y = 0000

C1/9BE0:	BF 00 60 D2	LDA $D26000,X     ; load next palette bytes
C1/9BE4:	99 60 7F   	STA $7F60,Y       ; spell animation palette 1
C1/9BE7:	99 60 7D   	STA $7D60,Y       ; spell animation palette 1 (unaltered) [?]
C1/9BEA:	99 70 7F   	STA $7F70,Y       ; spell animation palette 1, part 2
C1/9BED:	99 70 7D   	STA $7D70,Y       ; spell animation palette 1, part 2 (unaltered) [?]
C1/9BF0:	E8         	INX
C1/9BF1:	E8         	INX               ; increment source offset
C1/9BF2:	C8         	INY
C1/9BF3:	C8         	INY               ; increment destination offset
C1/9BF4:	C0 10 00   	CPY #$0010        ; copy 16 bytes total
C1/9BF7:	D0 E7      	BNE $9BE0         ; loop till finished

C1/9BF9:	7B         	TDC               ; A = 0000
C1/9BFA:	E2 20      	SEP #$20          ; 8-bit A
C1/9BFC:	AD 8A 62   	LDA $628A         ; flashback mode
C1/9BFF:	F0 0E      	BEQ $9C0F         ; exit if not in flashback
C1/9C01:	A2 60 01    LDX #$0160
C1/9C04:	86 18       STX $18
C1/9C06:	A2 80 01    LDX #$0180
C1/9C09:	86 1A       STX $1A
C1/9C0B:	22 42 B4 C2 JSL $C2B442       ; transform palette [?]
C1/9C0F:	60         	RTS

C1/9C10:	0A         	ASL A
C1/9C11:	0A         	ASL A
C1/9C12:	0A         	ASL A
C1/9C13:	0A         	ASL A             ; x16 (source offset)
C1/9C14:	AA         	TAX               ; index it
C1/9C15:	7B         	TDC               ; A = 0000
C1/9C16:	A8         	TAY               ; Y = 0000
C1/9C17:	BF 7D B0 C2	LDA $C2B07D,X     ; animation palette data
C1/9C1B:	99 70 7F   	STA $7F70,Y       ; spell animation palette 1, part 2 [?]
C1/9C1E:	C8         	INY               ; increment destination index
C1/9C1F:	E8         	INX               ; increment source index
C1/9C20:	C0 10 00   	CPY #$0010        ; move 16 bytes total
C1/9C23:	D0 F2      	BNE $9C17         ; loop till finished
C1/9C25:	60         	RTS

; Set animation palette 3 [?]

C1/9C26:	C2 20      	REP #$20          ; 16-bit A
C1/9C28:	0A         	ASL A
C1/9C29:	0A         	ASL A
C1/9C2A:	0A         	ASL A
C1/9C2B:	0A         	ASL A             ; x16 (animation palette offset) [?]
C1/9C2C:	AA         	TAX               ; index it
C1/9C2D:	7B         	TDC               ; A = 0000
C1/9C2E:	A8         	TAY               ; Y = 0000

C1/9C2F:	BF 00 60 D2	LDA $D26000,X     ; palette data byte
C1/9C33:	99 60 7E   	STA $7E60,Y       ; spell animation palette 3 [?]
C1/9C36:	99 70 7E   	STA $7E70,Y       ; spell animation palette 3 [?]
C1/9C39:	99 80 7E   	STA $7E80,Y       ; spell animation palette 3 [?]
C1/9C3C:	99 90 7E   	STA $7E90,Y       ; spell animation palette 3 [?]
C1/9C3F:	99 60 7C   	STA $7C60,Y       ; spell animation palette 3 [?]
C1/9C42:	99 70 7C   	STA $7C70,Y       ; spell animation palette 3 [?]
C1/9C45:	99 80 7C   	STA $7C80,Y       ; spell animation palette 3 [?]
C1/9C48:	99 90 7C   	STA $7C90,Y       ; spell animation palette 3 [?]
C1/9C4B:	E8         	INX
C1/9C4C:	E8         	INX               ; next source offset
C1/9C4D:	C8         	INY
C1/9C4E:	C8         	INY               ; next destination offset
C1/9C4F:	C0 10 00   	CPY #$0010        ; move 16 bytes
C1/9C52:	D0 DB      	BNE $9C2F         ; continue loop

C1/9C54:	7B         	TDC               ; A = 0000
C1/9C55:	E2 20      	SEP #$20          ; 8-bit A
C1/9C57:	AD 8A 62   	LDA $628A         ; flashback mode
C1/9C5A:	F0 0E      	BEQ $9C6A         ; exit if not ^
C1/9C5C:	A2 60 00   	LDX #$0060
C1/9C5F:	86 18      	STX $18
C1/9C61:	A2 80 00   	LDX #$0080
C1/9C64:	86 1A      	STX $1A
C1/9C66:	22 42 B4 C2	JSR $C2B442
C1/9C6A:	60         	RTS

C1/9C6B:	C2 20      	REP #$20
C1/9C6D:	0A         	ASL A
C1/9C6E:	0A         	ASL A
C1/9C6F:	0A         	ASL A
C1/9C70:	0A         	ASL A
C1/9C71:	AA         	TAX
C1/9C72:	7B         	TDC
C1/9C73:	A8         	TAY
C1/9C74:	BF 00 60 D2	LDA $D26000,X
C1/9C78:	99 20 7E   	STA $7E20,Y
C1/9C7B:	99 20 7C   	STA $7C20,Y
C1/9C7E:	E8         	INX
C1/9C7F:	E8         	INX
C1/9C80:	C8         	INY
C1/9C81:	C8         	INY
C1/9C82:	C0 08 00   	CPY #$0008
C1/9C85:	D0 ED      	BNE $9C74
C1/9C87:	7B         	TDC
C1/9C88:	E2 20      	SEP #$20           ; 8-bit A
C1/9C8A:	AD 8A 62   	LDA $628A
C1/9C8D:	F0 0E      	BEQ $9C9D
C1/9C8F:	A2 20 00   	LDX #$0020
C1/9C92:	86 18      	STX $18
C1/9C94:	A2 28 00   	LDX #$0028
C1/9C97:	86 1A      	STX $1A
C1/9C99:	22 42 B4 C2	JSR $C2B442
C1/9C9D:	60         	RTS

; Clears all animation thread data

C1/9C9E:	7B         	TDC
C1/9C9F:	AA         	TAX
C1/9CA0:	9D 2E 6A   	STA $6A2E,X
C1/9CA3:	9D 7E 6F   	STA $6F7E,X
C1/9CA6:	9D CE 74   	STA $74CE,X
C1/9CA9:	9D DE 64   	STA $64DE,X
C1/9CAC:	E8         	INX
C1/9CAD:	E0 50 05   	CPX #$0550
C1/9CB0:	D0 EE      	BNE $9CA0
C1/9CB2:	60         	RTS

; Load spell animation and sound data
; (A = spell index, $E1 = data offset for command)
C1/9CB3:	8D 6A 62   	STA $626A        ; animation/spell index
C1/9CB6:	EB         	XBA              ; prep multiplication
C1/9CB7:	A9 0E      	LDA #$0E         ; #14
C1/9CB9:	20 CA 18   	JSR $18CA        ; multiply index * 14
C1/9CBC:	C2 20      	REP #$20         ; 16-bit A
C1/9CBE:	AF 16 42 00	LDA $004216      ; animation/spell data offset
C1/9CC2:	18         	CLC
C1/9CC3:	65 1E      	ADC $1E          ; add base offset for command
C1/9CC5:	AA         	TAX              ; index it
C1/9CC6:	7B         	TDC              ; zero A/B
C1/9CC7:	A8         	TAY              ; zero Y
C1/9CC8:	E2 20      	SEP #$20         ; 8-bit A

C1/9CCA:	BF B2 7F D0	LDA $D07FB2,X    ; load one byte of animation data
C1/9CCE:	99 73 62   	STA $6273,Y      ; move to buffer
C1/9CD1:	E8         	INX              ; next source index
C1/9CD2:	C8         	INY              ; next destination index
C1/9CD3:	C0 0E 00   	CPY #$000E       ; loop for all 14 bytes
C1/9CD6:	D0 F2      	BNE $9CCA

C1/9CD8:	AD 7C 62   	LDA $627C        ; spell's sound effect
C1/9CDB:	8D E7 E9   	STA $E9E7        ; save to "default sound effect" [?]
C1/9CDE:	20 9E 9C   	JSR $9C9E        ; clear all old animation thread data
C1/9CE1:	AE 73 62   	LDX $6273        ; animation sprite script id
C1/9CE4:	E0 FF FF   	CPX #$FFFF       ; null?
C1/9CE7:	F0 17      	BEQ $9D00        ; branch if ^
C1/9CE9:	20 8B A1   	JSR $A18B        ; copy base animation data to $7AEA-7AEF
C1/9CEC:	AE EE 7A   	LDX $7AEE        ; sprite animation frame width
C1/9CEF:	8E 35 7B   	STX $7B35        ; copy to buffer [?]
C1/9CF2:	AE EA 7A   	LDX $7AEA        ; sprite animation VRAM move instructions
C1/9CF5:	AD AE 60   	LDA $60AE        ; bushido multistrike stage
C1/9CF8:	D0 03      	BNE $9CFD        ; branch if in middle of multistrike
C1/9CFA:	20 B1 A1   	JSR $A1B1        ; move spell sprite graphics to VRAM
                                       ; this overwrites all fight tiles
C1/9CFD:	20 B5 A0   	JSR $A0B5        ; load animation frame data (from 7AEC)

C1/9D00:	20 17 99   	JSR $9917        ; something with loading BG1 tiles [?]
C1/9D03:	AE 75 62   	LDX $6275        ; BG1 animation script ID
C1/9D06:	E0 FF FF   	CPX #$FFFF       ; null?
C1/9D09:	F0 3D      	BEQ $9D48        ; branch if null
C1/9D0B:	20 8B A1   	JSR $A18B        ; copy base animation data to $7AEA-7AEF
C1/9D0E:	AE EE 7A   	LDX $7AEE        ; BG1 animation frame width
C1/9D11:	8E 31 7B   	STX $7B31        ; copy to buffer [?]
C1/9D14:	AE EA 7A   	LDX $7AEA        ; BG1 animation VRAM move instructions
C1/9D17:	AD AE 60   	LDA $60AE        ; bushido multistrike stage
C1/9D1A:	D0 03      	BNE $9D1F        ; branch if in middle of multistrike
C1/9D1C:	20 E0 A1   	JSR $A1E0        ; move BG1 animation graphics to VRAM
C1/9D1F:	AE 75 62   	LDX $6275        ; BG1 animation script ID
C1/9D22:	E0 25 02   	CPX #$0225       ; check specific ID
C1/9D25:	F0 0F      	BEQ $9D36        ; branch if ^
C1/9D27:	E0 3C 00   	CPX #$003C       ; check specific ID
C1/9D2A:	F0 0A      	BEQ $9D36        ; branch if ^
C1/9D2C:	E0 16 02   	CPX #$0216       ; check specific ID
C1/9D2F:	F0 05      	BEQ $9D36        ; branch if ^
C1/9D31:	E0 3B 00   	CPX #$003B       ; check specific ID
C1/9D34:	D0 07      	BNE $9D3D        ; branch if NOT ^

; Special BG1 handling for some script IDs
C1/9D36:	20 12 9F   	JSR $9F12
C1/9D39:	A9 2E      	LDA #$2E
C1/9D3B:	80 05      	BRA $9D42

; Default BG1 script handling
C1/9D3D:	20 1C 9F   	JSR $9F1C        ; ???
C1/9D40:	A9 2C      	LDA #$2C

; Finish BG1 animation script handling
C1/9D42:	20 61 9F   	JSR $9F61        ; fill BG1 tile data buffer [?]
C1/9D45:	20 3A 9E   	JSR $9E3A        ; set BG1 animation frame XY offsets

; Start BG3 animation script handling
C1/9D48:	AE 77 62   	LDX $6277        ; BG3 animation script ID
C1/9D4B:	E0 FF FF   	CPX #$FFFF       ; null?
C1/9D4E:	F0 1A      	BEQ $9D6A        ; branch if ^
C1/9D50:	20 8B A1   	JSR $A18B        ; copy base animation data to $7AEA-7AEF
C1/9D53:	AE EE 7A   	LDX $7AEE        ; BG3 animation frame width
C1/9D56:	8E 33 7B   	STX $7B33        ; copy to buffer [?]
C1/9D59:	AE EA 7A   	LDX $7AEA        ; BG3 animation VRAM move instructions
C1/9D5C:	AD AE 60   	LDA $60AE        ; bushido multistrike stage
C1/9D5F:	D0 03      	BNE $9D64        ; branch if in middle of multistrike
C1/9D61:	20 CF A1   	JSR $A1CF        ; move BG3 animation graphics to VRAM

C1/9D64:	20 4A 9F   	JSR $9F4A        ; clear BG3 tile buffer [?]
C1/9D67:	20 80 9E   	JSR $9E80        ; set BG3 animation frame XY offsets

C1/9D6A:	AE 7E 62   	LDX $627E        ; esper animation graphics ID
C1/9D6D:	E0 FF FF   	CPX #$FFFF       ; null?
C1/9D70:	F0 09      	BEQ $9D7B        ; branch if ^
C1/9D72:	20 8B A1   	JSR $A18B        ; copy base animation data to $7AEA-7AEF
C1/9D75:	AE EE 7A   	LDX $7AEE        ; esper animation frame width
C1/9D78:	8E 37 7B   	STX $7B37        ; copy to buffer [?]

C1/9D7B:	20 AC A0   	JSR $A0AC        ; load 2 fixed animations and frame data
                                       ;
C1/9D7E:	AD 79 62   	LDA $6279        ; spell animation sprite palette
C1/9D81:	20 D7 9B   	JSR $9BD7        ; load palette data
C1/9D84:	7B         	TDC              ; zero A/B
C1/9D85:	AD 7A 62   	LDA $627A        ; spell animation BG1 palette
C1/9D88:	8D 67 61   	STA $6167        ; copy to buffer [?]
C1/9D8B:	AD 7B 62   	LDA $627B        ; spell animation BG3 palette
C1/9D8E:	20 6B 9C   	JSR $9C6B        ; load it ^ [?]
C1/9D91:	20 71 A7   	JSR $A771        ; set character blockers bitmask
C1/9D94:	60         	RTS

; Fight/Throw animation subroutine [?]

C1/9D95:	8D 6A 62   	STA $626A          ; animation id
C1/9D98:	C2 20      	REP #$20           ; 16-bit A
C1/9D9A:	0A         	ASL A              ; animation id * 2
C1/9D9B:	0A         	ASL A              ; animation id * 4
C1/9D9C:	0A         	ASL A              ; animation id * 8
C1/9D9D:	AA         	TAX                ; index it
C1/9D9E:	7B         	TDC                ; A = 0000
C1/9D9F:	A8         	TAY                ; Y = 0000
C1/9DA0:	7B         	TDC                ; A = 0000 (again?)
C1/9DA1:	E2 20      	SEP #$20           ; 8-bit A
C1/9DA3:	AD 8A 61   	LDA $618A          ; monster special attack
C1/9DA6:	F0 10      	BEQ $9DB8          ; branch if not ^

; Lookup and set full animation data
; ($626B $626C $626D $626E $626F $6270 $6271 $6272)

C1/9DA8:	BF E8 E6 EC	LDA $ECE6E8,X      ; data byte (monster specials) [?]
C1/9DAC:	99 6B 62   	STA $626B,Y        ; move data
C1/9DAF:	E8         	INX                ; next source offset
C1/9DB0:	C8         	INY                ; next destination offset
C1/9DB1:	C0 08 00   	CPY #$0008         ; move 8 bytes
C1/9DB4:	D0 F2      	BNE $9DA8          ; loop until finished
C1/9DB6:	80 0E      	BRA $9DC6          ; branch when done

C1/9DB8:	BF 00 E4 EC	LDA $ECE400,X      ; data byte (character animations) [?]
C1/9DBC:	99 6B 62   	STA $626B,Y        ; move data
C1/9DBF:	E8         	INX                ; next source offset
C1/9DC0:	C8         	INY                ; next destination offset
C1/9DC1:	C0 08 00   	CPY #$0008         ; move 8 bytes
C1/9DC4:	D0 F2      	BNE $9DB8          ; loop until finished

C1/9DC6:	A5 10      	LDA $10            ; attacker id
C1/9DC8:	29 03      	AND #$03           ; 0-4
C1/9DCA:	AA         	TAX                ; index it
C1/9DCB:	AD F4 7A   	LDA $7AF4          ; left-hand flag
C1/9DCE:	0A         	ASL A              ; move "left-hand" bit into carry
C1/9DCF:	2A         	ROL A              ; move into bit 0 of A
C1/9DD0:	29 01      	AND #$01           ; isolate "left-hand" bit
C1/9DD2:	5D 10 7B   	EOR $7B10,X        ; toggle if character facing right
C1/9DD5:	29 01      	AND #$01           ; isolate "left-hand" bit (again)
C1/9DD7:	AA         	TAX                ; X = 0 or 1
C1/9DD8:	BD 6B 62   	LDA $626B,X        ; weapon animation script (left or right hand)
C1/9DDB:	AA         	TAX                ; index it
C1/9DDC:	20 8B A1   	JSR $A18B          ; 6-byte animation data in $7AEA (based on X)
C1/9DDF:	AC EE 7A   	LDY $7AEE          ; weapon animation data 5-6
C1/9DE2:	8C 2D 7B   	STY $7B2D          ; set weapon graphics frame width/height
C1/9DE5:	AE EA 7A   	LDX $7AEA          ; instructions for tile VRAM move
C1/9DE8:	20 C0 A1   	JSR $A1C0          ; move 96 tiles into VRAM
C1/9DEB:	20 B5 A0   	JSR $A0B5          ; load animation frame data
C1/9DEE:	AD 8A 61   	LDA $618A          ; monster special attack
C1/9DF1:	F0 13      	BEQ $9E06          ; branch if not ^
C1/9DF3:	AD 6E 62   	LDA $626E          ; hit animation script
C1/9DF6:	C9 60      	CMP #$60           ; 96
C1/9DF8:	90 0C      	BCC $9E06          ; skip adding offset if less than 96
C1/9DFA:	C2 20      	REP #$20           ; 16-bit A
C1/9DFC:	18         	CLC                ; prepare add
C1/9DFD:	69 00 02   	ADC #$0200         ; add animation script offset
C1/9E00:	AA         	TAX                ; index it
C1/9E01:	7B         	TDC                ; A = 0000
C1/9E02:	E2 20      	SEP #$20           ; 8-bit A
C1/9E04:	80 04      	BRA $9E0A          ; continue

C1/9E06:	AD 6E 62   	LDA $626E          ; hit animation script
C1/9E09:	AA         	TAX                ; index it

C1/9E0A:	20 8B A1   	JSR $A18B          ; 6-byte animation data in $7AEA (based on X)
C1/9E0D:	AC EE 7A   	LDY $7AEE          ; hit animation data 5-6
C1/9E10:	8C 2F 7B   	STY $7B2F          ; set hit graphics frame width/height
C1/9E13:	8C 31 7B   	STY $7B31          ; BG1 animation frame width/height
C1/9E16:	AE EA 7A   	LDX $7AEA          ; instructions for tile VRAM move
C1/9E19:	20 E0 A1   	JSR $A1E0          ; move 160 tiles into VRAM
C1/9E1C:	20 1C 9F   	JSR $9F1C          ; ??????????
C1/9E1F:	A9 2C      	LDA #$2C
C1/9E21:	20 61 9F   	JSR $9F61          ; ??????????
C1/9E24:	20 3A 9E   	JSR $9E3A          ; ??????????
C1/9E27:	AD 6D 62   	LDA $626D          ; weapon palette
C1/9E2A:	20 D7 9B   	JSR $9BD7          ; load palette data
C1/9E2D:	AD 6F 62   	LDA $626F          ; hit palette
C1/9E30:	8D 67 61   	STA $6167          ; animation BG1 palette [?]
C1/9E33:	20 4B A0   	JSR $A04B          ; load some fixed animation data [?]
C1/9E36:	20 71 A7   	JSR $A771          ; set character blockers bitmask
C1/9E39:	60         	RTS

; Set BG1 animation frame XY offsets
; X offset is flipped to negative if $28 is set

C1/9E3A:	A5 28      	LDA $28            ; [?]
C1/9E3C:	F0 27      	BEQ $9E65          ; branch if not ^
C1/9E3E:	AD 31 7B   	LDA $7B31          ; BG1 animation frame width
C1/9E41:	C2 20      	REP #$20           ; 16-bit A
C1/9E43:	0A         	ASL A
C1/9E44:	0A         	ASL A
C1/9E45:	0A         	ASL A              ; x8
C1/9E46:	8D 16 7B   	STA $7B16          ; set BG1 animation frame X offset
C1/9E49:	A9 00 01   	LDA #$0100         ; 256
C1/9E4C:	38         	SEC                ; set carry
C1/9E4D:	ED 16 7B   	SBC $7B16          ; subtract BG1 animation X offset
C1/9E50:	8D 16 7B   	STA $7B16          ; reset X offset to negative
C1/9E53:	AD 32 7B   	LDA $7B32          ; BG1 animation frame height
C1/9E56:	29 FF 00   	AND #$00FF         ; isolate height
C1/9E59:	0A         	ASL A
C1/9E5A:	0A         	ASL A
C1/9E5B:	0A         	ASL A              ; x8
C1/9E5C:	8D 18 7B   	STA $7B18          ; set BG1 animation frame Y offset
C1/9E5F:	7B         	TDC                ; zero A/B
C1/9E60:	E2 20      	SEP #$20           ; 8-bit A
C1/9E62:	4C 7F 9E   	JMP $9E7F          ; rts

C1/9E65:	AD 31 7B   	LDA $7B31          ; BG1 animation frame width
C1/9E68:	C2 20      	REP #$20           ; 16-bit A
C1/9E6A:	0A         	ASL A
C1/9E6B:	0A         	ASL A
C1/9E6C:	0A         	ASL A              ; x8
C1/9E6D:	8D 16 7B   	STA $7B16          ; set BG1 animation frame X offset
C1/9E70:	AD 32 7B   	LDA $7B32          ; BG1 animation frame height
C1/9E73:	29 FF 00   	AND #$00FF         ; isolate height
C1/9E76:	0A         	ASL A
C1/9E77:	0A         	ASL A
C1/9E78:	0A         	ASL A              ; x8
C1/9E79:	8D 18 7B   	STA $7B18          ; set BG1 animation frame Y offset
C1/9E7C:	7B         	TDC                ; zero A/B
C1/9E7D:	E2 20      	SEP #$20           ; 8-bit A
C1/9E7F:	60         	RTS

; Set BG3 animation frame offsets XY
C1/9E80:	A5 28      	LDA $28
C1/9E82:	F0 27      	BEQ $9EAB
C1/9E84:	AD 33 7B   	LDA $7B33
C1/9E87:	C2 20      	REP #$20
C1/9E89:	0A         	ASL A
C1/9E8A:	0A         	ASL A
C1/9E8B:	0A         	ASL A
C1/9E8C:	8D 22 7B   	STA $7B22
C1/9E8F:	A9 00 01   	LDA #$0100
C1/9E92:	38         	SEC
C1/9E93:	ED 22 7B   	SBC $7B22
C1/9E96:	8D 22 7B   	STA $7B22
C1/9E99:	AD 34 7B   	LDA $7B34
C1/9E9C:	29 FF 00   	AND #$00FF
C1/9E9F:	0A         	ASL A
C1/9EA0:	0A         	ASL A
C1/9EA1:	0A         	ASL A
C1/9EA2:	8D 24 7B   	STA $7B24
C1/9EA5:	7B         	TDC
C1/9EA6:	E2 20      	SEP #$20           ; 8-bit A
C1/9EA8:	4C C5 9E   	JMP $9EC5

C1/9EAB:	AD 33 7B   	LDA $7B33
C1/9EAE:	C2 20      	REP #$20
C1/9EB0:	0A         	ASL A
C1/9EB1:	0A         	ASL A
C1/9EB2:	0A         	ASL A
C1/9EB3:	8D 22 7B   	STA $7B22
C1/9EB6:	AD 34 7B   	LDA $7B34
C1/9EB9:	29 FF 00   	AND #$00FF
C1/9EBC:	0A         	ASL A
C1/9EBD:	0A         	ASL A
C1/9EBE:	0A         	ASL A
C1/9EBF:	8D 24 7B   	STA $7B24
C1/9EC2:	7B         	TDC
C1/9EC3:	E2 20      	SEP #$20           ; 8-bit A
C1/9EC5:	60         	RTS

C1/9EC6:	20 CA 9E   	JSR $9ECA       ; fill BG1 animation tile buffer w/ $02EE
C1/9EC9:	6B         	RTL

; Fill BG1 Animation Tile Buffer w/ $02EE
C1/9ECA:	8B         	PHB               ; store bank
C1/9ECB:	A9 7F      	LDA #$7F
C1/9ECD:	48         	PHA
C1/9ECE:	AB         	PLB               ; set bank to $7F
C1/9ECF:	C2 20      	REP #$20          ; 16-bit A
C1/9ED1:	7B         	TDC               ; A = 0000
C1/9ED2:	AA         	TAX               ; X = 0000
C1/9ED3:	A9 EE 02   	LDA #$02EE
C1/9ED6:	9D 00 C4   	STA $C400,X       ; fill BG1 animation tile data buffer
C1/9ED9:	9D 00 CC   	STA $CC00,X
C1/9EDC:	9D 00 D4   	STA $D400,X
C1/9EDF:	9D 00 DC   	STA $DC00,X
C1/9EE2:	E8         	INX
C1/9EE3:	E8         	INX
C1/9EE4:	E0 00 08   	CPX #$0800        ; fill entire buffer
C1/9EE7:	D0 ED      	BNE $9ED6         ; continue loop
C1/9EE9:	7B         	TDC               ; A = 0000
C1/9EEA:	E2 20      	SEP #$20          ; 8-bit A
C1/9EEC:	AB         	PLB               ; restore bank
C1/9EED:	60         	RTS

; FIll BG3 Animation Tile Buffer w/ $01EE
C1/9EEE:	8B         	PHB               ; store bank
C1/9EEF:	A9 7F      	LDA #$7F
C1/9EF1:	48         	PHA
C1/9EF2:	AB         	PLB               ; set bank to $7F
C1/9EF3:	C2 20      	REP #$20          ; 16-bit A
C1/9EF5:	7B         	TDC               ; A = 0000
C1/9EF6:	AA         	TAX               ; X = 0000
C1/9EF7:	A9 EE 01   	LDA #$01EE        ; fill byte [?]
C1/9EFA:	9D 00 E4   	STA $E400,X
C1/9EFD:	9D 00 E9   	STA $E900,X
C1/9F00:	9D 00 EE   	STA $EE00,X
C1/9F03:	9D 00 F3   	STA $F300,X       ; fill BG3 animation tile data buffer
C1/9F06:	E8         	INX
C1/9F07:	E8         	INX
C1/9F08:	E0 00 05   	CPX #$0500        ; fill entire buffer [?]
C1/9F0B:	D0 ED      	BNE $9EFA         ; continue loop

C1/9F0D:	7B         	TDC               ; A = 0000
C1/9F0E:	E2 20      	SEP #$20          ; 8-bit A
C1/9F10:	AB         	PLB               ; restore bank
C1/9F11:	60         	RTS

C1/9F12:	20 89 BC   	JSR $BC89        ; set attacker index in $10
C1/9F15:	20 A6 BC   	JSR $BCA6
C1/9F18:	A5 12      	LDA $12
C1/9F1A:	80 05      	BRA $9F21

; Sets $28, $29
C1/9F1C:	20 89 BC   	JSR $BC89        ; set attacker index in $10
C1/9F1F:	A5 10      	LDA $10          ; attacker index
C1/9F21:	30 14      	BMI $9F37        ; branch if monster attacker
C1/9F23:	AA         	TAX              ; character index
C1/9F24:	BD 10 7B   	LDA $7B10,X      ; character facing right
C1/9F27:	F0 09      	BEQ $9F32        ; branch if not
C1/9F29:	A9 10      	LDA #$10         ; 16
C1/9F2B:	85 28      	STA $28
C1/9F2D:	A9 40      	LDA #$40         ; 48
C1/9F2F:	85 29      	STA $29
C1/9F31:	60         	RTS

C1/9F32:	64 28      	STZ $28
C1/9F34:	64 29      	STZ $29
C1/9F36:	60         	RTS

C1/9F37:	29 7F      	AND #$7F
C1/9F39:	38         	SEC
C1/9F3A:	E9 04      	SBC #$04
C1/9F3C:	0A         	ASL A
C1/9F3D:	AA         	TAX
C1/9F3E:	BD F3 80   	LDA $80F3,X
C1/9F41:	5D 7E 61   	EOR $617E,X
C1/9F44:	29 01      	AND #$01
C1/9F46:	F0 E1      	BEQ $9F29
C1/9F48:	80 E8      	BRA $9F32

C1/9F4A:	20 1C 9F   	JSR $9F1C
C1/9F4D:	20 EE 9E   	JSR $9EEE       ; fill BG3 animation tile buffer w/ $01EE
C1/9F50:	A9 D1      	LDA #$D1
C1/9F52:	85 12      	STA $12
C1/9F54:	A9 7F      	LDA #$7F
C1/9F56:	85 16      	STA $16
C1/9F58:	A9 30      	LDA #$30
C1/9F5A:	85 2A      	STA $2A
C1/9F5C:	A2 00 E4   	LDX #$E400
C1/9F5F:	80 12      	BRA $9F73

C1/9F61:	48         	PHA
C1/9F62:	20 CA 9E   	JSR $9ECA       ; fill BG1 animation tile buffer w/ $02EE
C1/9F65:	A9 D1      	LDA #$D1
C1/9F67:	85 12      	STA $12
C1/9F69:	A9 7F      	LDA #$7F
C1/9F6B:	85 16      	STA $16
C1/9F6D:	68         	PLA
C1/9F6E:	85 2A      	STA $2A
C1/9F70:	A2 00 C4   	LDX #$C400
C1/9F73:	86 14      	STX $14
C1/9F75:	AD EA 7A   	LDA $7AEA
C1/9F78:	29 3F      	AND #$3F
C1/9F7A:	8D EA 7A   	STA $7AEA
C1/9F7D:	C2 20      	REP #$20
C1/9F7F:	AD EC 7A   	LDA $7AEC
C1/9F82:	0A         	ASL A
C1/9F83:	AA         	TAX
C1/9F84:	BF 3C DF D4	LDA $D4DF3C,X
C1/9F88:	85 10      	STA $10
C1/9F8A:	BF 3E DF D4	LDA $D4DF3E,X
C1/9F8E:	85 1A      	STA $1A
C1/9F90:	7B         	TDC
C1/9F91:	E2 20      	SEP #$20           ; 8-bit A
C1/9F93:	A8         	TAY
C1/9F94:	A6 10      	LDX $10
C1/9F96:	E4 1A      	CPX $1A
C1/9F98:	F0 60      	BEQ $9FFA
C1/9F9A:	A7 10      	LDA [$10]
C1/9F9C:	C9 FF      	CMP #$FF
C1/9F9E:	F0 4B      	BEQ $9FEB
C1/9FA0:	29 F0      	AND #$F0
C1/9FA2:	4A         	LSR A
C1/9FA3:	4A         	LSR A
C1/9FA4:	4A         	LSR A
C1/9FA5:	4A         	LSR A
C1/9FA6:	18         	CLC
C1/9FA7:	65 28      	ADC $28
C1/9FA9:	AA         	TAX
C1/9FAA:	BF 13 A0 C1	LDA $C1A013,X    ; Data
C1/9FAE:	85 22      	STA $22
C1/9FB0:	64 23      	STZ $23
C1/9FB2:	A7 10      	LDA [$10]
C1/9FB4:	29 0F      	AND #$0F
C1/9FB6:	C2 20      	REP #$20
C1/9FB8:	0A         	ASL A
C1/9FB9:	0A         	ASL A
C1/9FBA:	0A         	ASL A
C1/9FBB:	0A         	ASL A
C1/9FBC:	0A         	ASL A
C1/9FBD:	18         	CLC
C1/9FBE:	65 22      	ADC $22
C1/9FC0:	A8         	TAY
C1/9FC1:	E6 10      	INC $10
C1/9FC3:	7B         	TDC
C1/9FC4:	E2 20      	SEP #$20           ; 8-bit A
C1/9FC6:	A7 10      	LDA [$10]
C1/9FC8:	29 07      	AND #$07
C1/9FCA:	0A         	ASL A
C1/9FCB:	85 24      	STA $24
C1/9FCD:	A7 10      	LDA [$10]
C1/9FCF:	29 38      	AND #$38
C1/9FD1:	0A         	ASL A
C1/9FD2:	0A         	ASL A
C1/9FD3:	18         	CLC
C1/9FD4:	65 24      	ADC $24
C1/9FD6:	97 14      	STA [$14],Y
C1/9FD8:	C8         	INY
C1/9FD9:	A7 10      	LDA [$10]
C1/9FDB:	29 C0      	AND #$C0
C1/9FDD:	45 29      	EOR $29
C1/9FDF:	05 2A      	ORA $2A
C1/9FE1:	97 14      	STA [$14],Y
C1/9FE3:	A6 10      	LDX $10
C1/9FE5:	E8         	INX
C1/9FE6:	86 10      	STX $10
C1/9FE8:	4C 94 9F   	JMP $9F94

C1/9FEB:	5A         	PHY
C1/9FEC:	A0 01 00   	LDY #$0001
C1/9FEF:	B7 10      	LDA [$10],Y
C1/9FF1:	7A         	PLY
C1/9FF2:	C9 FF      	CMP #$FF
C1/9FF4:	F0 04      	BEQ $9FFA
C1/9FF6:	A9 FF      	LDA #$FF
C1/9FF8:	80 A6      	BRA $9FA0
C1/9FFA:	C2 20      	REP #$20
C1/9FFC:	A5 14      	LDA $14
C1/9FFE:	18         	CLC
C1/9FFF:	69 00 02   	ADC #$0200
C1/A002:	85 14      	STA $14
C1/A004:	EE EC 7A   	INC $7AEC
C1/A007:	7B         	TDC
C1/A008:	E2 20      	SEP #$20           ; 8-bit A
C1/A00A:	CE EA 7A   	DEC $7AEA
C1/A00D:	F0 03      	BEQ $A012
C1/A00F:	4C 7D 9F   	JMP $9F7D

C1/A012:	60         	RTS

C1/A013:	00
C1/A014:	02
C1/A015:	04
C1/A016:	06
C1/A017:	08
C1/A018:	0A
C1/A019:	0C
C1/A01A:	0E
C1/A01B:	10
C1/A01C:	12
C1/A01D:	14
C1/A01E:	16
C1/A01F:	18
C1/A020:	1A
C1/A021:	1C
C1/A022:	1E
C1/A023:	1E
C1/A024:	1C
C1/A025:	1A
C1/A026:	18
C1/A027:	16
C1/A028:	14
C1/A029:	12
C1/A02A:	10
C1/A02B:	0E
C1/A02C:	0C
C1/A02D:	0A
C1/A02E:	08
C1/A02F:	06
C1/A030:	04
C1/A031:	02
C1/A032:	00

; Clear all sprite animation frame data
C1/A033:	C2 20      	REP #$20           ; 16-bit A
C1/A035:	7B         	TDC                ; zero A/B
C1/A036:	AA         	TAX                ; zero X
C1/A037:	A9 FF FF   	LDA #$FFFF         ; null value [why not DEC ?]
C1/A03A:	9D 3F CE   	STA $CE3F,X        ; clear sprite animation frame data
C1/A03D:	9D BF D8   	STA $D8BF,X        ; clear sprite frame data (flipped)
C1/A040:	E8         	INX
C1/A041:	E8         	INX                ; next index
C1/A042:	E0 80 0A   	CPX #$0A80         ; clear all animation frame data
C1/A045:	D0 F3      	BNE $A03A          ; loop till done
C1/A047:	7B         	TDC                ; zero A/B
C1/A048:	E2 20      	SEP #$20           ; 8-bit A
C1/A04A:	60         	RTS

; Load animations 2-7 below
C1/A04B:	A9 01      	LDA #$01           ; start at second animation below
C1/A04D:	20 80 A0   	JSR $A080          ; load the animation data
C1/A050:	1A         	INC A              ; increment animation index
C1/A051:	C9 07      	CMP #$07           ; load 6 animations total
C1/A053:	D0 F8      	BNE $A04D          ; loop till done
C1/A055:	60         	RTS

; Blocking animations base data
; The ID (42-48) ultimately determines which sprite loads
; The pointers handle the animation frames themselves

C1/A056:	42 00 C3 D7 43 E2              ; reflection
C1/A05C:	43 00 1F D6 9F E0              ; interceptor
C1/A062:	44 00 73 D6 F3 E0              ; golem hand
C1/A068:	45 00 C7 D6 47 E1              ; dagger
C1/A06E:	46 00 1B D7 9B E1              ; sword
C1/A074:	47 00 6F D7 EF E1              ; cape <-- this overwrites reflection
C1/A07A:	48 00 17 D8 97 E2              ; shield

C1/A080:	48         	PHA                ; store A
C1/A081:	0A         	ASL A              ; x2
C1/A082:	85 12      	STA $12            ; save for math
C1/A084:	0A         	ASL A              ; x4
C1/A085:	18         	CLC                ; prepare add
C1/A086:	65 12      	ADC $12            ; x4 + x2 = x6
C1/A088:	AA         	TAX                ; index it
C1/A089:	C2 20      	REP #$20           ; 16-bit A
C1/A08B:	BF 56 A0 C1	LDA $C1A056,X      ; bytes 1-2
C1/A08F:	48         	PHA                ; store on stack
C1/A090:	BF 58 A0 C1	LDA $C1A058,X      ; bytes 3-4
C1/A094:	85 14      	STA $14            ; store
C1/A096:	BF 5A A0 C1	LDA $C1A05A,X      ; bytes 5-6
C1/A09A:	85 1C      	STA $1C            ; save
C1/A09C:	FA         	PLX                ; bytes 1-2
C1/A09D:	7B         	TDC                ; A = 0000
C1/A09E:	E2 20      	SEP #$20           ; 8-bit A
C1/A0A0:	20 8B A1   	JSR $A18B          ; 6-byte animation data in $7AEA (based on X)
C1/A0A3:	A9 D1      	LDA #$D1           ; source bank $D1....
C1/A0A5:	85 12      	STA $12            ; set source bank
C1/A0A7:	20 C6 A0   	JSR $A0C6
C1/A0AA:	68         	PLA                ; restore A
C1/A0AB:	60         	RTS

; Load animation above (1st and 7th)
C1/A0AC:	7B         	TDC
C1/A0AD:	20 80 A0   	JSR $A080
C1/A0B0:	A9 06      	LDA #$06
C1/A0B2:	4C 80 A0   	JMP $A080

; Load animation frame data (based on 7AEC)
C1/A0B5:	20 33 A0   	JSR $A033          ; clear all sprite animation frame data
C1/A0B8:	A9 D1      	LDA #$D1           ; bank for animation frame data
C1/A0BA:	85 12      	STA $12            ; set graphics bank [?]
C1/A0BC:	A2 3F CE   	LDX #$CE3F         ; sprite animation frame data offset
C1/A0BF:	86 14      	STX $14            ; save it
C1/A0C1:	A2 BF D8   	LDX #$D8BF         ; sprite frame data (flipped) offset
C1/A0C4:	86 1C      	STX $1C            ; save it

C1/A0C6:	AD EA 7A   	LDA $7AEA          ; instructions for tile VRAM move [?]
C1/A0C9:	29 3F      	AND #$3F           ; isolate number of frames [?]
C1/A0CB:	8D EA 7A   	STA $7AEA          ; reset instructions
C1/A0CE:	AD EE 7A   	LDA $7AEE          ; animation frame width
C1/A0D1:	0A         	ASL A
C1/A0D2:	0A         	ASL A
C1/A0D3:	0A         	ASL A              ; x8
C1/A0D4:	85 18      	STA $18            ; save frame width
C1/A0D6:	AD EF 7A   	LDA $7AEF          ; animation frame height
C1/A0D9:	0A         	ASL A
C1/A0DA:	0A         	ASL A
C1/A0DB:	0A         	ASL A              ; x8
C1/A0DC:	85 19      	STA $19            ; save frame height

C1/A0DE:	C2 20      	REP #$20           ; 16-bit A
C1/A0E0:	AD EC 7A   	LDA $7AEC          ; animation frame data index
C1/A0E3:	0A         	ASL A              ; x2
C1/A0E4:	AA         	TAX                ; index it
C1/A0E5:	BF 3C DF D4	LDA $D4DF3C,X      ; pointer to animation frame data
C1/A0E9:	85 10      	STA $10            ; save it
C1/A0EB:	BF 3E DF D4	LDA $D4DF3E,X      ; pointer to next animation frame data
C1/A0EF:	85 1A      	STA $1A            ; save it
C1/A0F1:	7B         	TDC                ; zero A/B
C1/A0F2:	E2 20      	SEP #$20           ; 8-bit A
C1/A0F4:	A8         	TAY                ; zero Y

C1/A0F5:	A6 10      	LDX $10            ; pointer to animation frame data
C1/A0F7:	E4 1A      	CPX $1A            ; at the next frame data block?
C1/A0F9:	F0 69      	BEQ $A164          ; branch if finished
C1/A0FB:	A7 10      	LDA [$10]          ; load animation frame data byte
C1/A0FD:	C9 FF      	CMP #$FF           ; null?
C1/A0FF:	F0 54      	BEQ $A155          ; branch if no more frame data

; Here we are unpacking OAM data for animation tile
; Width, Height, TileID(offset), SpriteFlags

C1/A101:	29 F0      	AND #$F0           ; isolate top nibble
C1/A103:	85 22      	STA $22            ; save it
C1/A105:	38         	SEC                ; set carry
C1/A106:	E5 18      	SBC $18            ; subtract frame width (*8)
C1/A108:	91 14      	STA ($14),Y        ; save to frame data buffer
C1/A10A:	A5 22      	LDA $22            ; get top nibble again
C1/A10C:	49 FF      	EOR #$FF           ; invert
C1/A10E:	1A         	INC A              ; +1 (basically, *-1)
C1/A10F:	38         	SEC                ; set carry
C1/A110:	E9 10      	SBC #$10           ; subtract 16
C1/A112:	18         	CLC                ; clear carry
C1/A113:	65 18      	ADC $18            ; add frame width (*8)
C1/A115:	91 1C      	STA ($1C),Y        ; save to frame data (flipped) buffer
C1/A117:	C8         	INY                ; next destination buffer index
C1/A118:	A7 10      	LDA [$10]          ; load animation frame data byte (again)
C1/A11A:	29 0F      	AND #$0F           ; isolate bottom nibble
C1/A11C:	0A         	ASL A
C1/A11D:	0A         	ASL A
C1/A11E:	0A         	ASL A
C1/A11F:	0A         	ASL A              ; x16 (shift to top nibble)
C1/A120:	38         	SEC                ; set carry
C1/A121:	E5 19      	SBC $19            ; subtract frame height
C1/A123:	91 14      	STA ($14),Y        ; save to frame data buffer
C1/A125:	91 1C      	STA ($1C),Y        ; save to frame data (flipped) buffer
C1/A127:	C8         	INY                ; next destination buffer index
C1/A128:	A6 10      	LDX $10            ; animation frame data index
C1/A12A:	E8         	INX                ; increment source index
C1/A12B:	86 10      	STX $10            ; update animation frame data index
C1/A12D:	A7 10      	LDA [$10]          ; load next animation frame data byte
C1/A12F:	29 07      	AND #$07           ; isolate bottom 3 bits
C1/A131:	0A         	ASL A              ; x2
C1/A132:	85 16      	STA $16            ; save [?]
C1/A134:	A7 10      	LDA [$10]          ; load animation frame data byte (again)
C1/A136:	29 38      	AND #$38           ; isolate bits 3-5
C1/A138:	0A         	ASL A
C1/A139:	0A         	ASL A              ; x4
C1/A13A:	18         	CLC
C1/A13B:	65 16      	ADC $16            ; get sprite tile ID (offset) [?]
C1/A13D:	91 14      	STA ($14),Y        ; save to frame data buffer
C1/A13F:	91 1C      	STA ($1C),Y        ; save to frame data (flipped) buffer
C1/A141:	C8         	INY                ; next destination buffer index
C1/A142:	A7 10      	LDA [$10]          ; load animation frame data byte (again)
C1/A144:	29 C0      	AND #$C0           ; isolate bits 6-7
C1/A146:	91 14      	STA ($14),Y        ; save to frame data buffer
C1/A148:	49 40      	EOR #$40           ; toggle bit 6
C1/A14A:	91 1C      	STA ($1C),Y        ; save to frame data (flipped) buffer
C1/A14C:	C8         	INY                ; next destination buffer index
C1/A14D:	A6 10      	LDX $10            ; animation frame data index
C1/A14F:	E8         	INX                ; increment source index
C1/A150:	86 10      	STX $10            ; update animation frame data index
C1/A152:	4C F5 A0   	JMP $A0F5          ; loop until all frames loaded

; If you hit FF frame data in ROM
C1/A155:	5A         	PHY                ; store frame data buffer index
C1/A156:	A0 01 00   	LDY #$0001         ; get specific index
C1/A159:	B7 10      	LDA [$10],Y        ; get next source byte
C1/A15B:	7A         	PLY                ; restore frame data buffer index
C1/A15C:	C9 FF      	CMP #$FF           ; is next byte also $FF (null)
C1/A15E:	F0 04      	BEQ $A164          ; branch (finish) if ^
C1/A160:	A9 FF      	LDA #$FF           ; else, load null byte
C1/A162:	80 9D      	BRA $A101          ; and treat it like normal data

; Finish after all frame data parsed and buffered
C1/A164:	A9 FF      	LDA #$FF           ; null (end of data marker)
C1/A166:	91 14      	STA ($14),Y        ; write EOF to buffer
C1/A168:	91 1C      	STA ($1C),Y        ; write EOF to buffer
C1/A16A:	C2 20      	REP #$20           ; 16-bit A
C1/A16C:	A5 14      	LDA $14            ; frame data buffer offset
C1/A16E:	18         	CLC
C1/A16F:	69 54 00   	ADC #$0054         ; get next animationa frame offset
C1/A172:	85 14      	STA $14            ; update frame data buffer offset
C1/A174:	A5 1C      	LDA $1C
C1/A176:	18         	CLC
C1/A177:	69 54 00   	ADC #$0054
C1/A17A:	85 1C      	STA $1C            ; update frame data (flipped) offset
C1/A17C:	EE EC 7A   	INC $7AEC          ; increment frame number
C1/A17F:	7B         	TDC                ; zero A/B
C1/A180:	E2 20      	SEP #$20           ; 8-bit A
C1/A182:	CE EA 7A   	DEC $7AEA          ; decrement frame count
C1/A185:	F0 03      	BEQ $A18A          ; exit if all frames buffered
C1/A187:	4C DE A0   	JMP $A0DE          ; loop and load tile data for next frame
C1/A18A:	60         	RTS

; Move 6-byte animation data (based on X index) to $7AEA

C1/A18B:	C2 20      	REP #$20           ; 16-bit A
C1/A18D:	8A         	TXA
C1/A18E:	29 FF 7F   	AND #$7FFF         ; mask dirty bit (15 bits left)
C1/A191:	0A         	ASL A              ; x2
C1/A192:	8D EA 7A   	STA $7AEA          ; save for math
C1/A195:	0A         	ASL A              ; x4
C1/A196:	18         	CLC
C1/A197:	6D EA 7A   	ADC $7AEA          ; x4 + x2 = x6
C1/A19A:	AA         	TAX                ; index to 6-byte data block
C1/A19B:	7B         	TDC                ; A = 0000
C1/A19C:	A8         	TAY                ; Y = 0000
C1/A19D:	BF 00 D0 D4	LDA $D4D000,X      ; animation graphics data byte
C1/A1A1:	99 EA 7A   	STA $7AEA,Y        ; move to new location
C1/A1A4:	E8         	INX
C1/A1A5:	E8         	INX                ; next source byte offset
C1/A1A6:	C8         	INY
C1/A1A7:	C8         	INY                ; next destination byte offset
C1/A1A8:	C0 06 00   	CPY #$0006         ; move 6 bytes total
C1/A1AB:	D0 F0      	BNE $A19D          ; loop until finished
C1/A1AD:	7B         	TDC                ; A = 0000
C1/A1AE:	E2 20      	SEP #$20           ; 8-bit A
C1/A1B0:	60         	RTS

; ###########################
; Move tiles from ROM to VRAM

; Set VRAM - Battle Animation Sprite Graphics [?] (128 tiles)
; Used only for Spell Animation graphics
C1/A1B1:	86 10      	STX $10            ; store pointer to instructions
C1/A1B3:	A2 80 00   	LDX #$0080         ; number of tiles to move
C1/A1B6:	86 16      	STX $16            ; save it
C1/A1B8:	A2 00 24   	LDX #$2400         ; ultimate VRAM destination
C1/A1BB:	86 1A      	STX $1A            ; save it
C1/A1BD:	4C EF A1   	JMP $A1EF          ; finish prepping VRAM move

; Set VRAM - Battle Animation Sprite Graphics [?] (96 tiles)
; Seems to be used only for Weapon Animation graphics
C1/A1C0:	86 10      	STX $10            ; store pointer to instructions
C1/A1C2:	A2 60 00   	LDX #$0060         ; number of tiles to move
C1/A1C5:	86 16      	STX $16            ; save it
C1/A1C7:	A2 00 26   	LDX #$2600         ; ultimate VRAM destination
C1/A1CA:	86 1A      	STX $1A            ; save it
C1/A1CC:	4C EF A1   	JMP $A1EF          ; finish prepping VRAM move

; Set VRAM - BG3 Battlefield Animation Graphics (128 tiles)
C1/A1CF:	86 10      	STX $10            ; store pointer to instructions
C1/A1D1:	A2 80 00   	LDX #$0080         ; number of tiles to move
C1/A1D4:	86 16      	STX $16            ; save it
C1/A1D6:	A2 00 50   	LDX #$5000         ; ultimate VRAM destination
C1/A1D9:	86 1A      	STX $1A            ; save it
C1/A1DB:	A5 11      	LDA $11
C1/A1DD:	4C C8 A3   	JMP $A3C8

; Set VRAM - BG1 Battlefield Animation Graphics (160 tiles)
C1/A1E0:	86 10      	STX $10            ; store pointer to instructions
C1/A1E2:	A2 A0 00   	LDX #$00A0         ; number of tiles to move
C1/A1E5:	86 16      	STX $16            ; save it
C1/A1E7:	A2 00 00   	LDX #$0000         ; ultimate VRAM destination
C1/A1EA:	86 1A      	STX $1A            ; save it
C1/A1EC:	4C EF A1   	JMP $A1EF          ; finish prepping VRAM move (why JMP)

; Move graphics tiles from ROM to RAM to VRAM
C1/A1EF:	A5 10      	LDA $10            ; graphics byte 1
C1/A1F1:	30 05      	BMI $A1F8          ; branch if bit 7 set (2bpp graphics)
C1/A1F3:	A5 11      	LDA $11            ; graphics byte 2
C1/A1F5:	4C FD A1   	JMP $A1FD          ; 3bpp tile move from ROM to RAM to VRAM
C1/A1F8:	A5 11      	LDA $11            ; graphics byte 2
C1/A1FA:	4C 06 A3   	JMP $A306          ; 2bpp tile move from ROM to RAM to VRAM

; Multi-tile move (ROM --> RAM --> VRAM) procedure
; Uses variable ROM offset for tile data, $D30000 - $D40000
; Second 16-byte block alternates zeroes
; Handles 32-byte tiles?

C1/A1FD:	85 11      	STA $11            ; restore graphics byte 2 (why?)
C1/A1FF:	A5 10      	LDA $10            ; graphics byte 1
C1/A201:	4A         	LSR A
C1/A202:	4A         	LSR A
C1/A203:	4A         	LSR A
C1/A204:	4A         	LSR A
C1/A205:	4A         	LSR A
C1/A206:	4A         	LSR A              ; move bit 6 into bit 0
C1/A207:	29 01      	AND #$01           ; isolate bit 0 (unnecessary)
C1/A209:	85 10      	STA $10            ; save it
C1/A20B:	C2 20      	REP #$20           ; 16-bit A
C1/A20D:	A5 10      	LDA $10            ; byte 1 bit 0 and byte 2
C1/A20F:	EB         	XBA                ; swap -> [byte1(0), byte2]
C1/A210:	0A         	ASL A              ; x2
C1/A211:	0A         	ASL A              ; x4
C1/A212:	0A         	ASL A              ; x8
C1/A213:	0A         	ASL A              ; x16
C1/A214:	0A         	ASL A              ; x32
C1/A215:	0A         	ASL A              ; x64
C1/A216:	18         	CLC
C1/A217:	69 00 00   	ADC #$0000         ; add zero for no reason
C1/A21A:	85 10      	STA $10            ; save this address
C1/A21C:	7B         	TDC                ; A = 0000
C1/A21D:	E2 20      	SEP #$20           ; 8-bit A
C1/A21F:	A9 D2      	LDA #$D2           ; source bank (for address above)
C1/A221:	85 12      	STA $12            ; save it
C1/A223:	A9 7F      	LDA #$7F           ; RAM destination bank
C1/A225:	85 28      	STA $28            ; save it
C1/A227:	A2 00 E4   	LDX #$E400         ; RAM destination offset
C1/A22A:	86 26      	STX $26            ; save it
C1/A22C:	C2 20      	REP #$20           ; 16-bit A
C1/A22E:	A5 16      	LDA $16            ; number of tiles to move
C1/A230:	48         	PHA                ; store on stack

C1/A231:	64 24      	STZ $24            ; clear source bank (updated below)
C1/A233:	A7 10      	LDA [$10]          ; access bytes at $D2....
C1/A235:	29 FF 3F   	AND #$3FFF         ; keep lower 14 bits
C1/A238:	0A         	ASL A
C1/A239:	0A         	ASL A              ; shift up
C1/A23A:	26 24      	ROL $24            ; no effect, since carry will be clear
C1/A23C:	0A         	ASL A              ; shift out top bit
C1/A23D:	85 22      	STA $22            ; store value x8 (w/o top bit)
C1/A23F:	0A         	ASL A              ; set carry to original bit 12
C1/A240:	26 24      	ROL $24            ; move into bit 0 of $24
C1/A242:	18         	CLC                ; unnecessary, since $24 was just zero
C1/A243:	65 22      	ADC $22            ; possibly increment $22
C1/A245:	85 22      	STA $22            ; why not just INC w/ a branch?
C1/A247:	A5 24      	LDA $24            ; 0 or 1, based on bit 12
C1/A249:	69 00 00   	ADC #$0000         ; add zero for no reason
C1/A24C:	85 24      	STA $24            ; reset for no reason
C1/A24E:	A5 22      	LDA $22
C1/A250:	18         	CLC
C1/A251:	69 00 00   	ADC #$0000         ; another add zero for no reason
C1/A254:	85 22      	STA $22
C1/A256:	A5 24      	LDA $24
C1/A258:	69 D3 00   	ADC #$00D3
C1/A25B:	85 24      	STA $24            ; set source bank to $D3 or $D4
C1/A25D:	A7 10      	LDA [$10]          ; get bytes at $D2.... again
C1/A25F:	29 00 40   	AND #$4000         ; "Flip tile horizontally"
C1/A262:	85 14      	STA $14            ; save it
C1/A264:	A7 10      	LDA [$10]          ; get bytes at $D2.... again
C1/A266:	29 00 80   	AND #$8000         ; "Flip tile vertically"
C1/A269:	D0 39      	BNE $A2A4          ; branch if ^ (why not BMI?)

; Transfer upright tile to RAM

C1/A26B:	7B         	TDC                ; A = 0000
C1/A26C:	A8         	TAY                ; Y = 0000
C1/A26D:	A7 22      	LDA [$22]          ; value at $D3/$D4....
C1/A26F:	20 70 A4   	JSR $A470          ; flip tile horizontally if $14 set
C1/A272:	97 26      	STA [$26],Y        ; move to new destination
C1/A274:	A5 22      	LDA $22
C1/A276:	18         	CLC
C1/A277:	69 02 00   	ADC #$0002         ; get next 2 bytes' source
C1/A27A:	85 22      	STA $22            ; why not INC $22 : INC $22 ?
C1/A27C:	A5 24      	LDA $24
C1/A27E:	69 00 00   	ADC #$0000         ; another add zero for no reason
C1/A281:	85 24      	STA $24
C1/A283:	C8         	INY
C1/A284:	C8         	INY                ; increment destination offset
C1/A285:	C0 10 00   	CPY #$0010         ; move 16 bytes total
C1/A288:	D0 E3      	BNE $A26D          ; loop till finished

C1/A28A:	A7 22      	LDA [$22]          ; next 2 bytes ($D3/$D4.... + $10)
C1/A28C:	20 70 A4   	JSR $A470          ; flip tile horizontally if $14 set
C1/A28F:	29 FF 00   	AND #$00FF         ; isolate low byte
C1/A292:	97 26      	STA [$26],Y        ; move to new destination
C1/A294:	E6 22      	INC $22            ; increment source by 1
C1/A296:	D0 02      	BNE $A29A          ; branch if not at end of bank
C1/A298:	E6 24      	INC $24            ; else, wrap to next bank
C1/A29A:	C8         	INY
C1/A29B:	C8         	INY                ; increment destination offset
C1/A29C:	C0 20 00   	CPY #$0020         ; move (8 + 8 zero) bytes total
C1/A29F:	D0 E9      	BNE $A28A          ; loop till finished
C1/A2A1:	4C DE A2   	JMP $A2DE

; Transfer vertically flipped tile to RAM

C1/A2A4:	A0 0E 00   	LDY #$000E         ; Y = 14
C1/A2A7:	A7 22      	LDA [$22]          ; get next 2 bytes at source
C1/A2A9:	20 70 A4   	JSR $A470          ; flip tile horizontally if $14 set
C1/A2AC:	97 26      	STA [$26],Y        ; move to destination (reversed)
C1/A2AE:	A5 22      	LDA $22
C1/A2B0:	18         	CLC
C1/A2B1:	69 02 00   	ADC #$0002         ; increment source offset by 2
C1/A2B4:	85 22      	STA $22
C1/A2B6:	A5 24      	LDA $24
C1/A2B8:	69 00 00   	ADC #$0000
C1/A2BB:	85 24      	STA $24            ; another add zero for no reason
C1/A2BD:	88         	DEY
C1/A2BE:	88         	DEY                ; decrement destination offset
C1/A2BF:	C0 FE FF   	CPY #$FFFE         ; move 16 bytes total
C1/A2C2:	D0 E3      	BNE $A2A7          ; loop till finished
C1/A2C4:	A0 1E 00   	LDY #$001E         ; Y = 30 (end of 32 byte block)
C1/A2C7:	A7 22      	LDA [$22]          ; next 2 source bytes
C1/A2C9:	20 70 A4   	JSR $A470          ; flip tile horizontally if $14 set
C1/A2CC:	29 FF 00   	AND #$00FF         ; isolate low byte
C1/A2CF:	97 26      	STA [$26],Y        ; move to destination (reversed)
C1/A2D1:	E6 22      	INC $22            ; increment source offset
C1/A2D3:	D0 02      	BNE $A2D7          ; branch if not at end of bank
C1/A2D5:	E6 24      	INC $24            ; else, increment bank
C1/A2D7:	88         	DEY
C1/A2D8:	88         	DEY                ; get next (lower) destination offset
C1/A2D9:	C0 0E 00   	CPY #$000E         ; move (8 + 8 zero) bytes total
C1/A2DC:	D0 E9      	BNE $A2C7          ; loop till finished

; Transfer RAM to VRAM

C1/A2DE:	A5 26      	LDA $26            ; destination offset
C1/A2E0:	18         	CLC
C1/A2E1:	69 20 00   	ADC #$0020         ; add 16 bytes (now at end of move)
C1/A2E4:	85 26      	STA $26
C1/A2E6:	E6 10      	INC $10
C1/A2E8:	E6 10      	INC $10            ; get next pointer to move instructions
C1/A2EA:	C6 16      	DEC $16            ; decrement total block moves
C1/A2EC:	F0 03      	BEQ $A2F1          ; branch if all blocks moved
C1/A2EE:	4C 31 A2   	JMP $A231          ; else, move next 32-byte block

; Prepare RAM to VRAM transfer
; Duplicates $C1A3B3

C1/A2F1:	68         	PLA                ; get original number of tiles
C1/A2F2:	0A         	ASL A
C1/A2F3:	0A         	ASL A
C1/A2F4:	0A         	ASL A
C1/A2F5:	0A         	ASL A
C1/A2F6:	0A         	ASL A              ; x32
C1/A2F7:	85 10      	STA $10            ; store total number of bytes moved
C1/A2F9:	7B         	TDC                ; A = 0000
C1/A2FA:	E2 20      	SEP #$20           ; 8-bit A
C1/A2FC:	A2 00 E4   	LDX #$E400         ; original RAM destination offset (now VRAM source)
C1/A2FF:	A9 7F      	LDA #$7F           ; original RAM destination bank (now VRAM source)
C1/A301:	A4 1A      	LDY $1A            ; VRAM destination offset
C1/A303:	4C 8D 19   	JMP $198D          ; execute VRAM DMA transfer

; Alternate tile move (ROM --> RAM --> VRAM) procedure
; Uses fixed ROM offset for tile data, $D87000, and
; second 16-byte block is always zeroed (simpler palette?)
; Handles 16-byte tiles?
; This is used for 2bpp graphics

C1/A306:	85 11      	STA $11            ; restore graphics byte 2 (why?)
C1/A308:	A5 10      	LDA $10            ; graphics byte 1
C1/A30A:	4A         	LSR A
C1/A30B:	4A         	LSR A
C1/A30C:	4A         	LSR A
C1/A30D:	4A         	LSR A
C1/A30E:	4A         	LSR A
C1/A30F:	4A         	LSR A              ; move bit 6 into bit 0
C1/A310:	29 01      	AND #$01           ; isolate bit 0
C1/A312:	85 10      	STA $10            ; save it
C1/A314:	C2 20      	REP #$20           ; 16-bit A
C1/A316:	A5 10      	LDA $10            ; byte1-0 and byte2
C1/A318:	EB         	XBA                ; swap --> [byte1(0), byte2]
C1/A319:	0A         	ASL A
C1/A31A:	0A         	ASL A
C1/A31B:	0A         	ASL A
C1/A31C:	0A         	ASL A
C1/A31D:	0A         	ASL A
C1/A31E:	0A         	ASL A              ; x64
C1/A31F:	18         	CLC                ; prepare add
C1/A320:	69 00 C0   	ADC #$C000         ; add additional offset
C1/A323:	85 10      	STA $10            ; save this address
C1/A325:	7B         	TDC                ; A = 0000
C1/A326:	E2 20      	SEP #$20           ; 8-bit A
C1/A328:	A9 D2      	LDA #$D2           ; source bank (for address above)
C1/A32A:	85 12      	STA $12            ; save it
C1/A32C:	A9 D8      	LDA #$D8           ; tile source bank
C1/A32E:	85 24      	STA $24            ; set tile source bank
C1/A330:	A9 7F      	LDA #$7F           ; RAM destination bank
C1/A332:	85 28      	STA $28            ; save it
C1/A334:	A2 00 E4   	LDX #$E400         ; RAM destination offset
C1/A337:	86 26      	STX $26            ; save it
C1/A339:	C2 20      	REP #$20           ; 16-bit A
C1/A33B:	A5 16      	LDA $16            ; number of tiles to move
C1/A33D:	48         	PHA                ; store on stack

C1/A33E:	A7 10      	LDA [$10]          ; get instructions at $D2....
C1/A340:	29 FF 3F   	AND #$3FFF         ; keep lower 14 bits
C1/A343:	0A         	ASL A
C1/A344:	0A         	ASL A
C1/A345:	0A         	ASL A
C1/A346:	0A         	ASL A              ; x16
C1/A347:	18         	CLC                ; prepare add
C1/A348:	69 00 70   	ADC #$7000         ; add offset for tile data
C1/A34B:	85 22      	STA $22            ; save source offset
C1/A34D:	A7 10      	LDA [$10]          ; get instructions at $D2....
C1/A34F:	29 00 40   	AND #$4000         ; "Flip tile horizontally"
C1/A352:	85 14      	STA $14            ; save for later
C1/A354:	A7 10      	LDA [$10]          ; get instructions at $D2....
C1/A356:	29 00 80   	AND #$8000         ; "Flip tile vertically"
C1/A359:	D0 21      	BNE $A37C          ; branch if ^

; Transfer upright tile to RAM

C1/A35B:	7B         	TDC                ; A = 0000
C1/A35C:	A8         	TAY                ; Y = 0000
C1/A35D:	A7 22      	LDA [$22]          ; tile data at $D87000 + offset
C1/A35F:	20 70 A4   	JSR $A470          ; flip tile horizontally if $14 set
C1/A362:	97 26      	STA [$26],Y        ; move to temporary RAM location
C1/A364:	E6 22      	INC $22
C1/A366:	E6 22      	INC $22            ; increment source offset by 2
C1/A368:	C8         	INY
C1/A369:	C8         	INY                ; increment destination by 2
C1/A36A:	C0 10 00   	CPY #$0010         ; move 16 bytes total
C1/A36D:	D0 EE      	BNE $A35D          ; loop until finished

C1/A36F:	7B         	TDC                ; A = 0000
C1/A370:	97 26      	STA [$26],Y        ; zero destination RAM bytes
C1/A372:	C8         	INY
C1/A373:	C8         	INY                ; increment destination by 2
C1/A374:	C0 20 00   	CPY #$0020         ; zero 16 trailing RAM bytes total
C1/A377:	D0 F7      	BNE $A370          ; loop till finished
C1/A379:	4C A0 A3   	JMP $A3A0          ; continue to next tile

; Transfer vertically flipped tile to RAM (reverse)

C1/A37C:	A0 0E 00   	LDY #$000E         ; last index of 16-byte block
C1/A37F:	A7 22      	LDA [$22]          ; tile data at $D87000 + offset
C1/A381:	20 70 A4   	JSR $A470          ; flip tile horizontally if $14 set
C1/A384:	97 26      	STA [$26],Y        ; move to temporary RAM location
C1/A386:	E6 22      	INC $22            
C1/A388:	E6 22      	INC $22            ; increment source offset by 2
C1/A38A:	88         	DEY
C1/A38B:	88         	DEY                ; decrement destination by 2
C1/A38C:	C0 FE FF   	CPY #$FFFE         ; move 16 bytes total
C1/A38F:	D0 EE      	BNE $A37F          ; loop until finished

C1/A391:	A0 1E 00   	LDY #$001E         ; last index of next 16-byte block
C1/A394:	7B         	TDC                ; A = 0000
C1/A395:	97 26      	STA [$26],Y        ; zero destination RAM bytes
C1/A397:	E6 22      	INC $22            ; increment source offset (why?)
C1/A399:	88         	DEY
C1/A39A:	88         	DEY                ; decrement destination by 2
C1/A39B:	C0 0E 00   	CPY #$000E         ; zero 16 trailing RAM bytes total
C1/A39E:	D0 F5      	BNE $A395          ; loop till finished

; Prepare loop to move next tile

C1/A3A0:	A5 26      	LDA $26            ; RAM destination offset
C1/A3A2:	18         	CLC
C1/A3A3:	69 20 00   	ADC #$0020         ; add 32
C1/A3A6:	85 26      	STA $26            ; save new RAM offset
C1/A3A8:	E6 10      	INC $10
C1/A3AA:	E6 10      	INC $10            ; point to next tile's instructions
C1/A3AC:	C6 16      	DEC $16            ; decrement remaining tiles
C1/A3AE:	F0 03      	BEQ $A3B3          ; continue to VRAM transfer if done
C1/A3B0:	4C 3E A3   	JMP $A33E          ; else, loop to next tile move

; Prepare RAM to VRAM transfer
; Duplicates $C1A2F1

C1/A3B3:	68         	PLA                ; restore original number of tiles
C1/A3B4:	0A         	ASL A
C1/A3B5:	0A         	ASL A
C1/A3B6:	0A         	ASL A
C1/A3B7:	0A         	ASL A
C1/A3B8:	0A         	ASL A              ; x32
C1/A3B9:	85 10      	STA $10            ; store total data size
C1/A3BB:	7B         	TDC                ; A = 0000
C1/A3BC:	E2 20      	SEP #$20           ; 8-bit A
C1/A3BE:	A2 00 E4   	LDX #$E400         ; original RAM destination offset (now VRAM source)
C1/A3C1:	A9 7F      	LDA #$7F           ; original RAM destination bank (now VRAM source)
C1/A3C3:	A4 1A      	LDY $1A            ; VRAM destination offset
C1/A3C5:	4C 8D 19   	JMP $198D          ; execute VRAM DMA transfer

C1/A3C8:	85 11      	STA $11
C1/A3CA:	A5 10      	LDA $10
C1/A3CC:	4A         	LSR A
C1/A3CD:	4A         	LSR A
C1/A3CE:	4A         	LSR A
C1/A3CF:	4A         	LSR A
C1/A3D0:	4A         	LSR A
C1/A3D1:	4A         	LSR A
C1/A3D2:	29 01      	AND #$01
C1/A3D4:	85 10      	STA $10
C1/A3D6:	C2 20      	REP #$20
C1/A3D8:	A5 10      	LDA $10
C1/A3DA:	EB         	XBA
C1/A3DB:	0A         	ASL A
C1/A3DC:	0A         	ASL A
C1/A3DD:	0A         	ASL A
C1/A3DE:	0A         	ASL A
C1/A3DF:	0A         	ASL A
C1/A3E0:	0A         	ASL A
C1/A3E1:	18         	CLC
C1/A3E2:	69 00 C0   	ADC #$C000
C1/A3E5:	85 10      	STA $10
C1/A3E7:	7B         	TDC
C1/A3E8:	E2 20      	SEP #$20           ; 8-bit A
C1/A3EA:	A9 D2      	LDA #$D2
C1/A3EC:	85 12      	STA $12
C1/A3EE:	A9 D8      	LDA #$D8
C1/A3F0:	85 24      	STA $24
C1/A3F2:	A9 7F      	LDA #$7F
C1/A3F4:	85 28      	STA $28
C1/A3F6:	A2 00 E4   	LDX #$E400
C1/A3F9:	86 26      	STX $26
C1/A3FB:	C2 20      	REP #$20
C1/A3FD:	A5 16      	LDA $16
C1/A3FF:	48         	PHA
C1/A400:	A7 10      	LDA [$10]
C1/A402:	29 FF 3F   	AND #$3FFF
C1/A405:	0A         	ASL A
C1/A406:	0A         	ASL A
C1/A407:	0A         	ASL A
C1/A408:	0A         	ASL A
C1/A409:	18         	CLC
C1/A40A:	69 00 70   	ADC #$7000
C1/A40D:	85 22      	STA $22
C1/A40F:	A7 10      	LDA [$10]
C1/A411:	29 00 40   	AND #$4000
C1/A414:	85 14      	STA $14
C1/A416:	A7 10      	LDA [$10]
C1/A418:	29 00 80   	AND #$8000
C1/A41B:	D0 17      	BNE $A434
C1/A41D:	7B         	TDC
C1/A41E:	A8         	TAY
C1/A41F:	A7 22      	LDA [$22]
C1/A421:	20 70 A4   	JSR $A470          ; flip tile horizontally if $14 set
C1/A424:	97 26      	STA [$26],Y
C1/A426:	E6 22      	INC $22
C1/A428:	E6 22      	INC $22
C1/A42A:	C8         	INY
C1/A42B:	C8         	INY
C1/A42C:	C0 10 00   	CPY #$0010
C1/A42F:	D0 EE      	BNE $A41F
C1/A431:	4C 49 A4   	JMP $A449

C1/A434:	A0 0E 00   	LDY #$000E
C1/A437:	A7 22      	LDA [$22]
C1/A439:	20 70 A4   	JSR $A470          ; flip tile horizontally if $14 set
C1/A43C:	97 26      	STA [$26],Y
C1/A43E:	E6 22      	INC $22
C1/A440:	E6 22      	INC $22
C1/A442:	88         	DEY
C1/A443:	88         	DEY
C1/A444:	C0 FE FF   	CPY #$FFFE
C1/A447:	D0 EE      	BNE $A437
C1/A449:	A5 26      	LDA $26
C1/A44B:	18         	CLC
C1/A44C:	69 10 00   	ADC #$0010
C1/A44F:	85 26      	STA $26
C1/A451:	E6 10      	INC $10
C1/A453:	E6 10      	INC $10
C1/A455:	C6 16      	DEC $16
C1/A457:	F0 03      	BEQ $A45C
C1/A459:	4C 00 A4   	JMP $A400

C1/A45C:	68         	PLA
C1/A45D:	0A         	ASL A
C1/A45E:	0A         	ASL A
C1/A45F:	0A         	ASL A
C1/A460:	0A         	ASL A
C1/A461:	85 10      	STA $10
C1/A463:	7B         	TDC
C1/A464:	E2 20      	SEP #$20           ; 8-bit A
C1/A466:	A2 00 E4   	LDX #$E400
C1/A469:	A9 7F      	LDA #$7F
C1/A46B:	A4 1A      	LDY $1A
C1/A46D:	4C 8D 19   	JMP $198D         ; initialize VRAM DMA transfer

; If $14 is set, reverse bit order within low and high bytes
; FEDCBA98 76543210 --> 89ABCDEF 01234567 (Flips tile horizontally)

C1/A470:	48         	PHA               ; store address on stack
C1/A471:	A5 14      	LDA $14           ; flag from bit 14 of instructions
C1/A473:	F0 10      	BEQ $A485         ; exit if not set
C1/A475:	68         	PLA               ; restore address
C1/A476:	EB         	XBA               ; swap 
C1/A477:	85 18      	STA $18           ; temporary store
C1/A479:	DA         	PHX               ; store X
C1/A47A:	A2 10 00   	LDX #$0010        ; 16 bit shifts
C1/A47D:	06 18      	ASL $18           ; shift top bit into carry
C1/A47F:	6A         	ROR A             ; and shift into top of A
C1/A480:	CA         	DEX               ; proceed to next bit
C1/A481:	D0 FA      	BNE $A47D         ; shift all 16 bits
C1/A483:	FA         	PLX               ; restore X
C1/A484:	60         	RTS

C1/A485:	68         	PLA               ; restore address
C1/A486:	60         	RTS


; Clear tile data (and more) for multiple damage numeral animation
C1/A487:	8B         	PHB             ; save data bank register
C1/A488:	A9 7F      	LDA #$7F
C1/A48A:	48         	PHA
C1/A48B:	AB         	PLB             ; set bank to $7F
C1/A48C:	C2 20      	REP #$20        ; 16-bit A
C1/A48E:	7B         	TDC             ; A = 0000
C1/A48F:	AA         	TAX             ; X = 0000
C1/A490:	9D 00 E4   	STA $E400,X     ; clear out BG3 animation tile data buffer
C1/A493:	E8         	INX
C1/A494:	E8         	INX
C1/A495:	E0 00 14   	CPX #$1400
C1/A498:	D0 F6      	BNE $A490       ; loop to clear $E400..$F800
C1/A49A:	7B         	TDC             ; A = 0000
C1/A49B:	AA         	TAX             ; X = 0000
C1/A49C:	9E 3F 7B   	STZ $7B3F,X     ; zero 8 bytes with these four STZ ops
C1/A49F:	9E 49 7B   	STZ $7B49,X     ; > this could be simplified, since the
C1/A4A2:	9E 53 7B   	STZ $7B53,X     ; > range of bytes to be cleared is totally
C1/A4A5:	9E 5D 7B   	STZ $7B5D,X     ; > contiguous
C1/A4A8:	E8         	INX
C1/A4A9:	E8         	INX
C1/A4AA:	E0 0A 00   	CPX #$000A      ; do it 5 times (40 bytes cleared total)
C1/A4AD:	D0 ED      	BNE $A49C       ; clears out bytes $7E7B3F-$7E7B66
C1/A4AF:	E2 20      	SEP #$20        ; 8-bit A
C1/A4B1:	AB         	PLB             ; restore bank (to $7E)
C1/A4B2:	60         	RTS

; Battle Dynamics Command 0B
; Display damage numerals (cascading)

C1/A4B3:	AD 2E 63   	LDA $632E       ; damage numeral thread counter
C1/A4B6:	29 03      	AND #$03        ; modulo 4 (only 4 threads available)
C1/A4B8:	8D 2E 63   	STA $632E       ; enforce counter range (0-3)
C1/A4BB:	AA         	TAX
C1/A4BC:	9E 1A 63   	STZ $631A,X     ; zero next empty numeral byte
C1/A4BF:	9E 22 63   	STZ $6322,X     ; damage numeral frame counter?
C1/A4C2:	20 2A 02   	JSR $022A       ; wait a frame, then run ATB and menu update?
C1/A4C5:	7B         	TDC             ; A = 0000
C1/A4C6:	AA         	TAX             ; X = 0000
C1/A4C7:	A8         	TAY
C1/A4C8:	C8         	INY             ; Y = 0001
C1/A4C9:	BD 1A 63   	LDA $631A,X     ; get first numeral flag byte
C1/A4CC:	F0 0E      	BEQ $A4DC       ; if dmg numeral thread not active, loop
C1/A4CE:	B1 76      	LDA ($76),Y     ; A = param 1 (damage target?)
C1/A4D0:	DD 1E 63   	CMP $631E,X     ; damage numeral thread target?
C1/A4D3:	D0 07      	BNE $A4DC       ; loop to check for matching targets

; Found matching numeral thread
C1/A4D5:	A9 08      	LDA #$08
C1/A4D7:	20 B6 9B   	JSR $9BB6       ; wait 8 frames
C1/A4DA:	80 06      	BRA $A4E2       ; wait for current dmg animation to end [?]

; Check next thread
C1/A4DC:	E8         	INX
C1/A4DD:	E0 04 00   	CPX #$0004
C1/A4E0:	D0 E7      	BNE $A4C9       ; check all damage numeral bytes

; Continue
C1/A4E2:	7B         	TDC             ; A = 0000
C1/A4E3:	AA         	TAX             ; X = 0000
C1/A4E4:	9E B3 60   	STZ $60B3,X     ; zero graphics bytes
C1/A4E7:	E8         	INX
C1/A4E8:	E0 80 00   	CPX #$0080      ; zero 128 bytes
C1/A4EB:	D0 F7      	BNE $A4E4

C1/A4ED:	AD 2E 63   	LDA $632E       ; get current dmg numeral thread
C1/A4F0:	0A         	ASL A           ; double index
C1/A4F1:	AA         	TAX             ; now points to 2-byte address per thread
C1/A4F2:	BF CB A5 C1	LDA $C1A5CB,X   ; address to write VRAM (low byte) [?]     ; Data
C1/A4F6:	8D 17 63   	STA $6317       ; save it
C1/A4F9:	BF CC A5 C1	LDA $C1A5CC,X   ; address to write VRAM (hi byte) [?]      ; Data
C1/A4FD:	8D 18 63   	STA $6318       ; save it
C1/A500:	EE 16 63   	INC $6316       ; enable dmg numeral graphics update
C1/A503:	20 2A 02   	JSR $022A       ; wait a frame, then run menu update
C1/A506:	A0 03 00   	LDY #$0003
C1/A509:	B1 76      	LDA ($76),Y     ; A = dmg high byte: hmdddddd
C1/A50B:	C9 FF      	CMP #$FF        ; h=heal,m=miss,d=damage-bits
C1/A50D:	D0 01      	BNE $A510       ; exit if null
C1/A50F:	60         	RTS

; Handle numeral graphics
C1/A510:	85 1E      	STA $1E         ; save param 3
C1/A512:	29 40      	AND #$40
C1/A514:	F0 1B      	BEQ $A531       ; branch if no "Miss" bit

; Handle "Miss" display
C1/A516:	C2 20      	REP #$20        ; 16-bit A
C1/A518:	7B         	TDC             ; A = 0000
C1/A519:	AA         	TAX             ; X = 0000
C1/A51A:	BF 00 BC 7F	LDA $7FBC00,X   ; A = "Miss" graphic data byte
C1/A51E:	9D D3 60   	STA $60D3,X     ; start saving at 32nd graphics data byte
C1/A521:	E8         	INX             ; ^ leaves one empty tile at beginning
C1/A522:	E8         	INX
C1/A523:	E0 40 00   	CPX #$0040      ; move 64 bytes (two tiles)
C1/A526:	D0 F2      	BNE $A51A

C1/A528:	7B         	TDC             ; A = 0000
C1/A529:	E2 20      	SEP #$20        ; 8-bit A
C1/A52B:	A9 08      	LDA #$08
C1/A52D:	85 14      	STA $14         ; set X position to 8 pixels from right
C1/A52F:	80 58      	BRA $A589       ; continue

; Handle damage display
C1/A531:	88         	DEY             ; Y = #02 (2nd param)
C1/A532:	C2 20      	REP #$20        ; 16-bit A
C1/A534:	B1 76      	LDA ($76),Y     ; A = full damage (plus top flags)
C1/A536:	29 FF 3F   	AND #$3FFF      ; remove Miss/Heal bits
C1/A539:	AA         	TAX             ; X = damage value
C1/A53A:	7B         	TDC             ; A = 0000
C1/A53B:	E2 20      	SEP #$20        ; 8-bit A
C1/A53D:	64 68      	STZ $68         ; offset for digits in numeral subroutine
C1/A53F:	20 2B 1B   	JSR $1B2B       ; get 1000s, 100s, 10s, 1s in $69-$6C
C1/A542:	C2 20      	REP #$20        ; 16-bit A
C1/A544:	A0 B3 60   	LDY #$60B3      ; Y = offset to graphics data
C1/A547:	A9 10 00   	LDA #$0010
C1/A54A:	85 14      	STA $14         ; set xpos to 16 pixels from right
C1/A54C:	A5 69      	LDA $69
C1/A54E:	29 FF 00   	AND #$00FF      ; get thousands digit
C1/A551:	D0 1F      	BNE $A572       ; if thousands, branch to show 4 digits
C1/A553:	A9 0C 00   	LDA #$000C
C1/A556:	85 14      	STA $14         ; set xpos to 12 pixels from right
C1/A558:	A5 6A      	LDA $6A
C1/A55A:	29 FF 00   	AND #$00FF      ; get hundreds digit
C1/A55D:	D0 18      	BNE $A577       ; if hundreds, branch to show 3 digits
C1/A55F:	A9 08 00   	LDA #$0008
C1/A562:	85 14      	STA $14         ; set xpos to 8 pixels from right
C1/A564:	A5 6B      	LDA $6B
C1/A566:	29 FF 00   	AND #$00FF      ; get tens digit
C1/A569:	D0 11      	BNE $A57C       ; if tens, branch to show 2 digits
C1/A56B:	A9 04 00   	LDA #$0004
C1/A56E:	85 14      	STA $14         ; set xpos to 4 pixels from right
C1/A570:	80 0F      	BRA $A581       ; branch to show 1 digit

; Load tile data for each digit
C1/A572:	A5 69      	LDA $69         ; A = thousands (hundreds in high byte)
C1/A574:	20 DB A5   	JSR $A5DB       ; move 32-bytes of tile data
C1/A577:	A5 6A      	LDA $6A         ; A = hundreds (tens in high byte)
C1/A579:	20 DB A5   	JSR $A5DB       ; move 32-bytes of tile data
C1/A57C:	A5 6B      	LDA $6B         ; A = tens (ones in high byte)
C1/A57E:	20 DB A5   	JSR $A5DB       ; move 32-bytes of tile data
C1/A581:	A5 6C      	LDA $6C         ; A = ones
C1/A583:	20 DB A5   	JSR $A5DB       ; move 32-bytes of tile data
C1/A586:	7B         	TDC             ; A = 0000
C1/A587:	E2 20      	SEP #$20        ; 8-bit A

C1/A589:	AD 2E 63   	LDA $632E       ; get current dmg numeral thread
C1/A58C:	29 03      	AND #$03        ; modulo 4
C1/A58E:	8D 2E 63   	STA $632E       ; enforce thread index range (0-3)
C1/A591:	AA         	TAX             ; X = index for current numeral thread
C1/A592:	A0 01 00   	LDY #$0001      ; Y points to first command param
C1/A595:	B1 76      	LDA ($76),Y     ; get target index
C1/A597:	9D 1E 63   	STA $631E,X     ; store target in numeral thread byte
C1/A59A:	A5 14      	LDA $14         ; get right xpos of text to display
C1/A59C:	9D 26 63   	STA $6326,X     ; save it for this thread
C1/A59F:	9E 2A 63   	STZ $632A,X     ; zero a byte for this thread [?]
C1/A5A2:	9E 22 63   	STZ $6322,X     ; zero another byte for this thread [?]
C1/A5A5:	A5 1E      	LDA $1E         ; get high dmg byte + flags
C1/A5A7:	29 80      	AND #$80        ; isolate "healing" flag
C1/A5A9:	09 01      	ORA #$01        ; add "enable dmg numeral" flag
C1/A5AB:	9D 1A 63   	STA $631A,X     ; set thread flags
C1/A5AE:	AD 2E 63   	LDA $632E       ; get current dmg numeral thread
C1/A5B1:	0A         	ASL A           ; double thread index
C1/A5B2:	AA         	TAX             ; X = offset to 2-byte pointer for thread
C1/A5B3:	BF D3 A5 C1	LDA $C1A5D3,X                                                ; Data
C1/A5B7:	8D 17 63   	STA $6317       ; set address to write VRAM (low byte) [?]
C1/A5BA:	BF D4 A5 C1	LDA $C1A5D4,X                                                ; Data
C1/A5BE:	8D 18 63   	STA $6318       ; set address to write VRAM (hi byte) [?]
C1/A5C1:	EE 16 63   	INC $6316       ; flag damage numeral graphics need update
C1/A5C4:	20 2A 02   	JSR $022A       ; wait a frame, then run menu update [?]
C1/A5C7:	EE 2E 63   	INC $632E       ; set counter for next numeral thread
C1/A5CA:	60         	RTS


; Damage numeral pointers
; Addresses for where VRAM data should be written [?]
; First four options are phase 1 [?]
; Second four options are phase 2 [?]

C1/A5CB:	002D  ; damage numeral thread 0
C1/A5CD:	402D  ; damage numeral thread 1
C1/A5CF:	802D  ; damage numeral thread 2
C1/A5D1:	C02D  ; damage numeral thread 3

C1/A5D3:	002C  ; damage numeral thread 0
C1/A5D5:	402C  ; damage numeral thread 1
C1/A5D7:	802C  ; damage numeral thread 2
C1/A5D9:	C02C  ; damage numeral thread 3

; Load graphics for a single number digit
; (Y=offset to VRAM location?)

C1/A5DB:	29 FF 00   	AND #$00FF       ; clear high byte (contains next digit)
C1/A5DE:	0A         	ASL A
C1/A5DF:	AA         	TAX              ; X = number * 2
C1/A5E0:	BF 35 A7 C1	LDA $C1A735,X    ; pointer to graphics data for number tile
C1/A5E4:	AA         	TAX
C1/A5E5:	A9 10 00   	LDA #$0010       ; loop 16 times
C1/A5E8:	85 12      	STA $12          ; iterator for loop
C1/A5EA:	BF 00 00 7F	LDA $7F0000,X
C1/A5EE:	99 00 00   	STA $0000,Y      ; copy graphics data to Y offset ($60B3-$6133)
C1/A5F1:	E8         	INX
C1/A5F2:	E8         	INX
C1/A5F3:	C8         	INY
C1/A5F4:	C8         	INY              ; update X/Y offsets
C1/A5F5:	C6 12      	DEC $12
C1/A5F7:	D0 F1      	BNE $A5EA        ; move all 32 bytes for this digit's tile
C1/A5F9:	60         	RTS

; Used for simultaneous damage numerals
C1/A5FA:	20 87 A4   	JSR $A487        ; clear BG3 animation tile buffer (and more)
C1/A5FD:	9C 3E 7B   	STZ $7B3E        ; reset "mass damage numerals" flag
C1/A600:	AD 3D 7B   	LDA $7B3D        ; get tile animation buffer counter
C1/A603:	EE 3D 7B   	INC $7B3D        ; increment for new animation
C1/A606:	EB         	XBA              ; use it in multiplication
C1/A607:	A9 14      	LDA #$14
C1/A609:	20 CA 18   	JSR $18CA        ; multiply animation buffer counter by 20
C1/A60C:	AF 16 42 00	LDA $004216      ; get multiplication product
C1/A610:	A8         	TAY              ; index to 20-byte damage buffer
C1/A611:	A9 0A      	LDA #$0A         ; long loop below executes 10 times
C1/A613:	85 10      	STA $10          ; save loop iterator
C1/A615:	64 16      	STZ $16          ; is this byte used? [?]
C1/A617:	64 20      	STZ $20          ; index to current target

; Long loop starts here
C1/A619:	64 14      	STZ $14          ; zero right xpos damage/miss tiles
C1/A61B:	B9 CF 2B   	LDA $2BCF,Y      ; get high byte damage for first target
C1/A61E:	85 1E      	STA $1E          ; save it
C1/A620:	C9 FF      	CMP #$FF
C1/A622:	D0 03      	BNE $A627        ; continue if not null
C1/A624:	4C EB A6   	JMP $A6EB        ; if null, skip this target
C1/A627:	29 40      	AND #$40
C1/A629:	F0 2A      	BEQ $A655        ; branch if no "miss" flag

; Handle miss
C1/A62B:	8B         	PHB              ; store bank register
C1/A62C:	A9 7F      	LDA #$7F
C1/A62E:	48         	PHA
C1/A62F:	AB         	PLB              ; set bank to $7F
C1/A630:	5A         	PHY              ; store index to target damage
C1/A631:	A5 20      	LDA $20          ; get this target's index
C1/A633:	0A         	ASL A
C1/A634:	AA         	TAX              ; make it an index to 2-byte data
C1/A635:	C2 20      	REP #$20         ; 16-bit A
C1/A637:	BF 49 A7 C1	LDA $C1A749,X    ; get buffer offset for this target
C1/A63B:	AA         	TAX              ; store in X
C1/A63C:	7B         	TDC              ; A = 0000
C1/A63D:	A8         	TAY              ; Y = 0000
C1/A63E:	B9 00 BC   	LDA $BC00,Y      ; get "Miss" title data
C1/A641:	9D 20 00   	STA $0020,X      ; move to this target's buffer
C1/A644:	E8         	INX
C1/A645:	E8         	INX
C1/A646:	C8         	INY
C1/A647:	C8         	INY              ; update offsets
C1/A648:	C0 40 00   	CPY #$0040       ; move 64 bytes (two-tile "Miss")
C1/A64B:	D0 F1      	BNE $A63E        ; branch if more data left to move
C1/A64D:	7B         	TDC              ; A = 0000
C1/A64E:	E2 20      	SEP #$20         ; 8-bit A
C1/A650:	7A         	PLY              ; restore Y (target index)
C1/A651:	AB         	PLB              ; restore bank ($7E)
C1/A652:	4C BD A6   	JMP $A6BD

; Handle damage
C1/A655:	C2 20      	REP #$20         ; 16-bit A
C1/A657:	B9 CE 2B   	LDA $2BCE,Y      ; get damage bytes
C1/A65A:	29 FF 3F   	AND #$3FFF       ; remove "healing" and "miss" flags
C1/A65D:	AA         	TAX              ; X = damage
C1/A65E:	7B         	TDC              ; A = 0000
C1/A65F:	E2 20      	SEP #$20         ; 8-bit A
C1/A661:	64 68      	STZ $68          ; zero offset to "0" digit tile
C1/A663:	20 2B 1B   	JSR $1B2B        ; convert dmg to base-10 digits ($69-$6C)
C1/A666:	8B         	PHB              ; store bank register
C1/A667:	A9 7F      	LDA #$7F
C1/A669:	48         	PHA
C1/A66A:	AB         	PLB              ; set bank to $7F
C1/A66B:	5A         	PHY              ; store Y
C1/A66C:	A5 20      	LDA $20          ; get target index
C1/A66E:	0A         	ASL A
C1/A66F:	AA         	TAX              ; make it an index to 2-byte data
C1/A670:	C2 20      	REP #$20         ; 16-bit A
C1/A672:	BF 49 A7 C1	LDA $C1A749,X    ; get tile buffer offset for this target
C1/A676:	AA         	TAX              ; store in X
C1/A677:	7B         	TDC              ; A = 0000
C1/A678:	A8         	TAY              ; Y = 0000
C1/A679:	A9 10 00   	LDA #$0010
C1/A67C:	85 14      	STA $14          ; set right xpos to 16 pixels
C1/A67E:	A5 69      	LDA $69          ; get thousands digit
C1/A680:	29 FF 00   	AND #$00FF       ; clear high byte ($6A, holds hundreds)
C1/A683:	D0 1F      	BNE $A6A4        ; if thousands, we'll need 4 tiles
C1/A685:	A9 0C 00   	LDA #$000C
C1/A688:	85 14      	STA $14          ; set right xpos to 12 pixels
C1/A68A:	A5 6A      	LDA $6A          ; get hundreds digit
C1/A68C:	29 FF 00   	AND #$00FF       ; clear high byte ($6B, holds tens)
C1/A68F:	D0 18      	BNE $A6A9        ; if hundreds, we'll need 3 tiles
C1/A691:	A9 08 00   	LDA #$0008
C1/A694:	85 14      	STA $14          ; set right xpos to 8 pixels
C1/A696:	A5 6B      	LDA $6B          ; get tens digit
C1/A698:	29 FF 00   	AND #$00FF       ; clear high byte ($6C, holds ones)
C1/A69B:	D0 11      	BNE $A6AE        ; if tens, we'll need 2 tiles
C1/A69D:	A9 04 00   	LDA #$0004
C1/A6A0:	85 14      	STA $14          ; set right xpos to 4 pixels
C1/A6A2:	80 0F      	BRA $A6B3        ; only one tile needed

; Get tile data for damage digits
C1/A6A4:	A5 69      	LDA $69          ; get thousands
C1/A6A6:	20 15 A7   	JSR $A715        ; fetch tile data for this digit
C1/A6A9:	A5 6A      	LDA $6A          ; get hundreds
C1/A6AB:	20 15 A7   	JSR $A715        ; fetch tile data for this digit
C1/A6AE:	A5 6B      	LDA $6B          ; get tens
C1/A6B0:	20 15 A7   	JSR $A715        ; fetch tile data for this digit
C1/A6B3:	A5 6C      	LDA $6C          ; get ones
C1/A6B5:	20 15 A7   	JSR $A715        ; fetch tile data for this digit
C1/A6B8:	7B         	TDC              ; A = 0000
C1/A6B9:	E2 20      	SEP #$20         ; 8-bit A
C1/A6BB:	7A         	PLY              ; restore Y (target index)
C1/A6BC:	AB         	PLB              ; restore bank ($7E)

; Finish up
C1/A6BD:	A5 20      	LDA $20          ; get target index
C1/A6BF:	AA         	TAX
C1/A6C0:	E0 04 00   	CPX #$0004
C1/A6C3:	90 0E      	BCC $A6D3        ; branch if is a character target

; Monster target
C1/A6C5:	BF FD 19 C1	LDA $C119FD,X    ; get bit mask for this monster
C1/A6C9:	2D 1E 20   	AND $201E        ; visible enemies
C1/A6CC:	2D AB 61   	AND $61AB        ; remove invalid monsters [?]
C1/A6CF:	F0 1A      	BEQ $A6EB        ; if target invalid, skip to next
C1/A6D1:	80 0F      	BRA $A6E2

; Character target
C1/A6D3:	BF 01 1A C1	LDA $C11A01,X    ; get bit mask for this character
C1/A6D7:	2D 1D 20   	AND $201D        ; remove invalid characters [?]
C1/A6DA:	2D AC 61   	AND $61AC        ; remove invalid characters [?]
C1/A6DD:	2D AD 61   	AND $61AD        ; remove characters with hide status [?]
C1/A6E0:	F0 09      	BEQ $A6EB        ; if target invalid, skip to next

C1/A6E2:	A5 1E      	LDA $1E          ; get high byte of damage + flags
C1/A6E4:	29 80      	AND #$80         ; isolate "heal" flag
C1/A6E6:	09 01      	ORA #$01         ; add "enable dmg numeral" flag
C1/A6E8:	9D 3F 7B   	STA $7B3F,X      ; save flags for this target

; Proceed to next target
C1/A6EB:	A5 20      	LDA $20          ; get target index
C1/A6ED:	AA         	TAX
C1/A6EE:	A5 14      	LDA $14
C1/A6F0:	9D 53 7B   	STA $7B53,X      ; set xpos for this target's dmg
C1/A6F3:	9E 5D 7B   	STZ $7B5D,X      ; [?]
C1/A6F6:	E6 20      	INC $20          ; set next target index
C1/A6F8:	C8         	INY
C1/A6F9:	C8         	INY              ; update dmg bytes offset
C1/A6FA:	C6 10      	DEC $10
C1/A6FC:	F0 03      	BEQ $A701        ; loop 10 times total
C1/A6FE:	4C 19 A6   	JMP $A619        ; restart long loop

; Done with all targets, move all tile data
C1/A701:	A2 00 0C   	LDX #$0C00
C1/A704:	86 10      	STX $10          ; length of data ($E400-$F000)
C1/A706:	A2 00 E4   	LDX #$E400       ; source address (BG3 tile data buffer)
C1/A709:	A0 00 26   	LDY #$2600       ; destination address
C1/A70C:	A9 7F      	LDA #$7F         ; source bank
C1/A70E:	20 8D 19   	JSR $198D        ; initialize VRAM DMA data transfer
C1/A711:	EE 3E 7B   	INC $7B3E        ; flag mass damage numerals as pending
C1/A714:	60         	RTS

; Move tile data for single number digit
; Very similar to $A5DB

C1/A715:	DA         	PHX              ; store X
C1/A716:	29 FF 00   	AND #$00FF       ; clear high byte (holds next digit)
C1/A719:	0A         	ASL A
C1/A71A:	AA         	TAX              ; double digit, points to 2-byte data
C1/A71B:	BF 35 A7 C1	LDA $C1A735,X    ; get pointer to graphics data for number tile
C1/A71F:	A8         	TAY
C1/A720:	FA         	PLX              ; restore X (buffer offset for this entity)
C1/A721:	A9 10 00   	LDA #$0010
C1/A724:	85 12      	STA $12          ; set iterator for loop below to 16
C1/A726:	B9 00 00   	LDA $0000,Y
C1/A729:	9D 00 00   	STA $0000,X      ; move 2 bytes at a time to tile buffer
C1/A72C:	E8         	INX
C1/A72D:	E8         	INX
C1/A72E:	C8         	INY
C1/A72F:	C8         	INY              ; update offsets
C1/A730:	C6 12      	DEC $12
C1/A732:	D0 F2      	BNE $A726        ; loop until 32 bytes are moved
C1/A734:	60         	RTS

; Pointers for damage number tile data
C1/A735:	40BC  ; 0
C1/A737:	60BC  ; 1
C1/A739:	80BC  ; 2
C1/A73B:	A0BC  ; 3
C1/A73D:	C0BC  ; 4
C1/A73F:	E0BC  ; 5
C1/A741:	00BD  ; 6
C1/A743:	20BD  ; 7
C1/A745:	40BD  ; 8
C1/A747:	60BD  ; 9

; Offsets for entity graphics data of some sort [?]
C1/A749:	00E4
C1/A74B:	80E4
C1/A74D:	00E5
C1/A74F:	80E5
C1/A751:	00E8
C1/A753:	80E8
C1/A755:	00E9
C1/A757:	80E9
C1/A759:	00EC
C1/A75B:	80EC

; 2-byte bitmask by entity index
; __mmmmmm____cccc (m=monster,c=character)
C1/A75D:	0100
C1/A75F:	0200
C1/A761:	0400
C1/A763:	0800
C1/A765:	0001
C1/A767:	0002
C1/A769:	0004
C1/A76B:	0008
C1/A76D:	0010
C1/A76F:	0020

; Set blockers bitmask in $6082

C1/A771:	5A         	PHY                 ; store Y
C1/A772:	64 10      	STZ $10             ; clear $10
C1/A774:	A0 0A 00   	LDY #$000A          ; prepare loop
C1/A777:	AD C0 62   	LDA $62C0           ; ignore block animations
C1/A77A:	F0 03      	BEQ $A77F           ; branch if not ^
C1/A77C:	7B         	TDC                 ; A = 0000
C1/A77D:	80 14      	BRA $A793           ; skip to end

C1/A77F:	B1 78      	LDA ($78),Y         ; block type (0-7) for character
C1/A781:	F0 06      	BEQ $A789           ; branch if no block animation
C1/A783:	A5 10      	LDA $10
C1/A785:	09 10      	ORA #$10
C1/A787:	85 10      	STA $10             ; flag character as blocking
C1/A789:	46 10      	LSR $10             ; shift bits down
C1/A78B:	C8         	INY                 ; next character block index
C1/A78C:	C0 0E 00   	CPY #$000E          ; check 4 characters
C1/A78F:	D0 EE      	BNE $A77F           ; loop until finished
C1/A791:	A5 10      	LDA $10             ; blockers bitmask

C1/A793:	8D 82 60   	STA $6082           ; save blockers bitmask
C1/A796:	9C 83 60   	STZ $6083           ; clear enemy blockers
C1/A799:	7A         	PLY                 ; restore Y
C1/A79A:	60         	RTS

; Reflection Function

C1/A79B:	20 F4 94   	JSR $94F4           ; copy monster sprite data to buffer
C1/A79E:	EE D1 62   	INC $62D1
C1/A7A1:	7B         	TDC
C1/A7A2:	A8         	TAY
C1/A7A3:	8C 3D 61   	STY $613D
C1/A7A6:	B1 78      	LDA ($78),Y
C1/A7A8:	30 24      	BMI $A7CE
C1/A7AA:	98         	TYA
C1/A7AB:	0A         	ASL A
C1/A7AC:	AA         	TAX
C1/A7AD:	BF 5D A7 C1	LDA $C1A75D,X    ; Data
C1/A7B1:	0D 3D 61   	ORA $613D
C1/A7B4:	8D 3D 61   	STA $613D
C1/A7B7:	BF 5E A7 C1	LDA $C1A75E,X    ; Data
C1/A7BB:	0D 3E 61   	ORA $613E
C1/A7BE:	8D 3E 61   	STA $613E
C1/A7C1:	B1 78      	LDA ($78),Y
C1/A7C3:	C9 04      	CMP #$04
C1/A7C5:	90 05      	BCC $A7CC
C1/A7C7:	38         	SEC
C1/A7C8:	E9 04      	SBC #$04
C1/A7CA:	80 02      	BRA $A7CE
C1/A7CC:	09 80      	ORA #$80
C1/A7CE:	99 42 61   	STA $6142,Y
C1/A7D1:	C8         	INY
C1/A7D2:	C0 0A 00   	CPY #$000A
C1/A7D5:	D0 CF      	BNE $A7A6
C1/A7D7:	20 43 AB   	JSR $AB43
C1/A7DA:	7B         	TDC
C1/A7DB:	A8         	TAY
C1/A7DC:	84 1E      	STY $1E
C1/A7DE:	A0 02 00   	LDY #$0002
C1/A7E1:	B1 76      	LDA ($76),Y
C1/A7E3:	20 B3 9C   	JSR $9CB3        ; load spell animation and sound data
C1/A7E6:	AD 3D 61   	LDA $613D
C1/A7E9:	0A         	ASL A
C1/A7EA:	0A         	ASL A
C1/A7EB:	0A         	ASL A
C1/A7EC:	0A         	ASL A
C1/A7ED:	85 12      	STA $12
C1/A7EF:	AD 3E 61   	LDA $613E
C1/A7F2:	85 13      	STA $13
C1/A7F4:	A0 0E 00   	LDY #$000E
C1/A7F7:	B1 78      	LDA ($78),Y
C1/A7F9:	0A         	ASL A
C1/A7FA:	0A         	ASL A
C1/A7FB:	0A         	ASL A
C1/A7FC:	0A         	ASL A
C1/A7FD:	8D 7E 60   	STA $607E
C1/A800:	C8         	INY
C1/A801:	B1 78      	LDA ($78),Y
C1/A803:	8D 7F 60   	STA $607F
C1/A806:	8D AF 62   	STA $62AF
C1/A809:	C2 20      	REP #$20
C1/A80B:	A5 12      	LDA $12
C1/A80D:	4A         	LSR A
C1/A80E:	4A         	LSR A
C1/A80F:	4A         	LSR A
C1/A810:	4A         	LSR A
C1/A811:	85 12      	STA $12
C1/A813:	AD 7E 60   	LDA $607E
C1/A816:	4A         	LSR A
C1/A817:	4A         	LSR A
C1/A818:	4A         	LSR A
C1/A819:	4A         	LSR A
C1/A81A:	8D 7E 60   	STA $607E
C1/A81D:	48         	PHA
C1/A81E:	7B         	TDC
C1/A81F:	E2 20      	SEP #$20           ; 8-bit A
C1/A821:	9C 0B 89   	STZ $890B
C1/A824:	A9 01      	LDA #$01
C1/A826:	85 1C      	STA $1C
C1/A828:	8D 84 60   	STA $6084
C1/A82B:	AD 82 60   	LDA $6082
C1/A82E:	0D 83 60   	ORA $6083
C1/A831:	0D 80 60   	ORA $6080
C1/A834:	0D 81 60   	ORA $6081
C1/A837:	D0 05      	BNE $A83E
C1/A839:	AC 73 62   	LDY $6273
C1/A83C:	30 75      	BMI $A8B3
C1/A83E:	AD 0B 89   	LDA $890B
C1/A841:	C9 04      	CMP #$04
C1/A843:	90 02      	BCC $A847
C1/A845:	09 80      	ORA #$80
C1/A847:	8D 40 61   	STA $6140
C1/A84A:	AD 0B 89   	LDA $890B
C1/A84D:	A8         	TAY
C1/A84E:	B1 78      	LDA ($78),Y
C1/A850:	C9 04      	CMP #$04
C1/A852:	90 02      	BCC $A856
C1/A854:	09 80      	ORA #$80
C1/A856:	8D 3F 61   	STA $613F
C1/A859:	AD 0B 89   	LDA $890B
C1/A85C:	29 0F      	AND #$0F
C1/A85E:	C2 20      	REP #$20
C1/A860:	0A         	ASL A
C1/A861:	AA         	TAX
C1/A862:	BF 8B CE C2	LDA $C2CE8B,X   ; increment of 128 bytes
C1/A866:	AA         	TAX
C1/A867:	7B         	TDC
C1/A868:	E2 20      	SEP #$20           ; 8-bit A
C1/A86A:	AD 0B 89   	LDA $890B
C1/A86D:	C9 04      	CMP #$04
C1/A86F:	B0 0A      	BCS $A87B
C1/A871:	18         	CLC
C1/A872:	69 0A      	ADC #$0A
C1/A874:	A8         	TAY
C1/A875:	B1 78      	LDA ($78),Y
C1/A877:	C9 03      	CMP #$03
C1/A879:	F0 12      	BEQ $A88D
C1/A87B:	A5 12      	LDA $12
C1/A87D:	29 01      	AND #$01
C1/A87F:	F0 24      	BEQ $A8A5
C1/A881:	AC 35 7B   	LDY $7B35
C1/A884:	84 22      	STY $22
C1/A886:	AC 73 62   	LDY $6273
C1/A889:	84 24      	STY $24
C1/A88B:	80 0A      	BRA $A897
C1/A88D:	A0 01 01   	LDY #$0101
C1/A890:	84 22      	STY $22
C1/A892:	A0 48 00   	LDY #$0048
C1/A895:	84 24      	STY $24
C1/A897:	A4 12      	LDY $12
C1/A899:	5A         	PHY
C1/A89A:	A9 01      	LDA #$01
C1/A89C:	8D 7E 60   	STA $607E
C1/A89F:	20 3E B2   	JSR $B23E           ; prepare animation thread for execution
C1/A8A2:	7A         	PLY
C1/A8A3:	84 12      	STY $12
C1/A8A5:	66 13      	ROR $13
C1/A8A7:	66 12      	ROR $12
C1/A8A9:	EE 0B 89   	INC $890B
C1/A8AC:	AD 0B 89   	LDA $890B
C1/A8AF:	C9 0A      	CMP #$0A
C1/A8B1:	D0 8B      	BNE $A83E
C1/A8B3:	AC 75 62   	LDY $6275
C1/A8B6:	30 27      	BMI $A8DF
C1/A8B8:	20 C3 AA   	JSR $AAC3         ; reflector in $6140, target in $12
C1/A8BB:	A5 12      	LDA $12
C1/A8BD:	8D 3F 61   	STA $613F
C1/A8C0:	A9 01      	LDA #$01
C1/A8C2:	85 1C      	STA $1C
C1/A8C4:	A2 00 05   	LDX #$0500
C1/A8C7:	AC 31 7B   	LDY $7B31
C1/A8CA:	84 22      	STY $22
C1/A8CC:	AC 75 62   	LDY $6275
C1/A8CF:	84 24      	STY $24
C1/A8D1:	20 3E B2   	JSR $B23E           ; prepare animation thread for execution
C1/A8D4:	A2 00 05   	LDX #$0500
C1/A8D7:	BD 86 6F   	LDA $6F86,X
C1/A8DA:	09 01      	ORA #$01
C1/A8DC:	9D 86 6F   	STA $6F86,X
C1/A8DF:	AC 77 62   	LDY $6277
C1/A8E2:	30 27      	BMI $A90B
C1/A8E4:	20 C3 AA   	JSR $AAC3         ; reflector in $6140, target in $12
C1/A8E7:	A5 12      	LDA $12
C1/A8E9:	8D 3F 61   	STA $613F
C1/A8EC:	A9 01      	LDA #$01
C1/A8EE:	85 1C      	STA $1C
C1/A8F0:	A2 10 05   	LDX #$0510
C1/A8F3:	AC 33 7B   	LDY $7B33
C1/A8F6:	84 22      	STY $22
C1/A8F8:	AC 77 62   	LDY $6277
C1/A8FB:	84 24      	STY $24
C1/A8FD:	20 3E B2   	JSR $B23E           ; prepare animation thread for execution
C1/A900:	A2 10 05   	LDX #$0510
C1/A903:	BD 86 6F   	LDA $6F86,X
C1/A906:	09 02      	ORA #$02
C1/A908:	9D 86 6F   	STA $6F86,X
C1/A90B:	AC 7E 62   	LDY $627E
C1/A90E:	C0 FF FF   	CPY #$FFFF
C1/A911:	F0 4B      	BEQ $A95E
C1/A913:	A9 01      	LDA #$01
C1/A915:	85 1C      	STA $1C
C1/A917:	AC 37 7B   	LDY $7B37
C1/A91A:	84 22      	STY $22
C1/A91C:	AC 7E 62   	LDY $627E
C1/A91F:	84 24      	STY $24
C1/A921:	7B         	TDC
C1/A922:	A8         	TAY
C1/A923:	B1 78      	LDA ($78),Y
C1/A925:	30 1E      	BMI $A945
C1/A927:	C9 04      	CMP #$04
C1/A929:	90 02      	BCC $A92D
C1/A92B:	09 80      	ORA #$80
C1/A92D:	8D 3F 61   	STA $613F
C1/A930:	AD D0 62   	LDA $62D0
C1/A933:	F0 07      	BEQ $A93C
C1/A935:	20 89 BC   	JSR $BC89        ; set attacker index in $10
C1/A938:	A5 10      	LDA $10
C1/A93A:	80 11      	BRA $A94D
C1/A93C:	98         	TYA
C1/A93D:	C9 04      	CMP #$04
C1/A93F:	90 02      	BCC $A943
C1/A941:	09 80      	ORA #$80
C1/A943:	80 06      	BRA $A94B
C1/A945:	C8         	INY
C1/A946:	C0 0A 00   	CPY #$000A
C1/A949:	D0 D8      	BNE $A923
C1/A94B:	85 10      	STA $10
C1/A94D:	29 0F      	AND #$0F
C1/A94F:	C2 20      	REP #$20
C1/A951:	0A         	ASL A
C1/A952:	AA         	TAX
C1/A953:	BF 8B CE C2	LDA $C2CE8B,X   ; increment of 128 bytes
C1/A957:	AA         	TAX
C1/A958:	7B         	TDC
C1/A959:	E2 20      	SEP #$20           ; 8-bit A
C1/A95B:	20 08 B2   	JSR $B208        ; prepare extra animation thread for execution
C1/A95E:	7B         	TDC
C1/A95F:	AA         	TAX
C1/A960:	8E 80 60   	STX $6080
C1/A963:	FA         	PLX
C1/A964:	8E 7E 60   	STX $607E
C1/A967:	DA         	PHX
C1/A968:	9C EE E9   	STZ $E9EE
C1/A96B:	20 3C B1   	JSR $B13C
C1/A96E:	FA         	PLX
C1/A96F:	8E 7E 60   	STX $607E
C1/A972:	7B         	TDC
C1/A973:	AA         	TAX
C1/A974:	8E 80 60   	STX $6080
C1/A977:	20 2F AE   	JSR $AE2F
C1/A97A:	20 E5 94   	JSR $94E5
C1/A97D:	20 53 C6   	JSR $C653
C1/A980:	20 03 95   	JSR $9503          ; update monster sprite data from buffer
C1/A983:	20 85 B0   	JSR $B085          ; post-animation cleanup [?]
C1/A986:	9C D1 62   	STZ $62D1
C1/A989:	9C D0 62   	STZ $62D0
C1/A98C:	4C 6E 95   	JMP $956E

C1/A98F:	20 F4 94   	JSR $94F4           ; copy monster sprite data to buffer
C1/A992:	EE D0 62   	INC $62D0
C1/A995:	EE D1 62   	INC $62D1
C1/A998:	7B         	TDC
C1/A999:	A8         	TAY
C1/A99A:	8C 3D 61   	STY $613D
C1/A99D:	B1 78      	LDA ($78),Y
C1/A99F:	30 24      	BMI $A9C5
C1/A9A1:	98         	TYA
C1/A9A2:	0A         	ASL A
C1/A9A3:	AA         	TAX
C1/A9A4:	BF 5D A7 C1	LDA $C1A75D,X    ; Data
C1/A9A8:	0D 3D 61   	ORA $613D
C1/A9AB:	8D 3D 61   	STA $613D
C1/A9AE:	BF 5E A7 C1	LDA $C1A75E,X    ; Data
C1/A9B2:	0D 3E 61   	ORA $613E
C1/A9B5:	8D 3E 61   	STA $613E
C1/A9B8:	B1 78      	LDA ($78),Y
C1/A9BA:	C9 04      	CMP #$04
C1/A9BC:	90 05      	BCC $A9C3
C1/A9BE:	38         	SEC
C1/A9BF:	E9 04      	SBC #$04
C1/A9C1:	80 02      	BRA $A9C5
C1/A9C3:	09 80      	ORA #$80
C1/A9C5:	99 42 61   	STA $6142,Y
C1/A9C8:	C8         	INY
C1/A9C9:	C0 0A 00   	CPY #$000A
C1/A9CC:	D0 CF      	BNE $A99D
C1/A9CE:	20 C3 AA   	JSR $AAC3         ; reflector in $6140, target in $12
C1/A9D1:	20 43 AB   	JSR $AB43
C1/A9D4:	7B         	TDC
C1/A9D5:	A8         	TAY
C1/A9D6:	84 1E      	STY $1E
C1/A9D8:	A0 02 00   	LDY #$0002
C1/A9DB:	B1 76      	LDA ($76),Y
C1/A9DD:	20 B3 9C   	JSR $9CB3        ; load spell animation and sound data
C1/A9E0:	AD 3D 61   	LDA $613D
C1/A9E3:	0A         	ASL A
C1/A9E4:	0A         	ASL A
C1/A9E5:	0A         	ASL A
C1/A9E6:	0A         	ASL A
C1/A9E7:	85 12      	STA $12
C1/A9E9:	AD 3E 61   	LDA $613E
C1/A9EC:	85 13      	STA $13
C1/A9EE:	C2 20      	REP #$20
C1/A9F0:	A5 12      	LDA $12
C1/A9F2:	4A         	LSR A
C1/A9F3:	4A         	LSR A
C1/A9F4:	4A         	LSR A
C1/A9F5:	4A         	LSR A
C1/A9F6:	85 12      	STA $12
C1/A9F8:	48         	PHA
C1/A9F9:	7B         	TDC
C1/A9FA:	E2 20      	SEP #$20           ; 8-bit A
C1/A9FC:	20 C3 AA   	JSR $AAC3         ; reflector in $6140, target in $12
C1/A9FF:	9C 0B 89   	STZ $890B
C1/AA02:	A9 01      	LDA #$01
C1/AA04:	85 1C      	STA $1C
C1/AA06:	8D 84 60   	STA $6084
C1/AA09:	AD 82 60   	LDA $6082
C1/AA0C:	0D 83 60   	ORA $6083
C1/AA0F:	0D 80 60   	ORA $6080
C1/AA12:	0D 81 60   	ORA $6081
C1/AA15:	D0 05      	BNE $AA1C
C1/AA17:	AC 73 62   	LDY $6273
C1/AA1A:	30 71      	BMI $AA8D
C1/AA1C:	AD 0B 89   	LDA $890B
C1/AA1F:	A8         	TAY
C1/AA20:	B1 78      	LDA ($78),Y
C1/AA22:	C9 04      	CMP #$04
C1/AA24:	90 02      	BCC $AA28
C1/AA26:	09 80      	ORA #$80
C1/AA28:	8D 3F 61   	STA $613F
C1/AA2B:	AD 0B 89   	LDA $890B
C1/AA2E:	29 0F      	AND #$0F
C1/AA30:	C2 20      	REP #$20
C1/AA32:	0A         	ASL A
C1/AA33:	AA         	TAX
C1/AA34:	BF 8B CE C2	LDA $C2CE8B,X   ; increment of 128 bytes
C1/AA38:	AA         	TAX
C1/AA39:	7B         	TDC
C1/AA3A:	E2 20      	SEP #$20           ; 8-bit A
C1/AA3C:	AD 0B 89   	LDA $890B
C1/AA3F:	A8         	TAY
C1/AA40:	AD C0 62   	LDA $62C0
C1/AA43:	D0 10      	BNE $AA55
C1/AA45:	B1 78      	LDA ($78),Y
C1/AA47:	C9 04      	CMP #$04
C1/AA49:	B0 0A      	BCS $AA55
C1/AA4B:	18         	CLC
C1/AA4C:	69 0A      	ADC #$0A
C1/AA4E:	A8         	TAY
C1/AA4F:	B1 78      	LDA ($78),Y
C1/AA51:	C9 03      	CMP #$03
C1/AA53:	F0 12      	BEQ $AA67
C1/AA55:	A5 12      	LDA $12
C1/AA57:	29 01      	AND #$01
C1/AA59:	F0 24      	BEQ $AA7F
C1/AA5B:	AC 35 7B   	LDY $7B35
C1/AA5E:	84 22      	STY $22
C1/AA60:	AC 73 62   	LDY $6273
C1/AA63:	84 24      	STY $24
C1/AA65:	80 0A      	BRA $AA71
C1/AA67:	A0 01 01   	LDY #$0101
C1/AA6A:	84 22      	STY $22
C1/AA6C:	A0 48 00   	LDY #$0048
C1/AA6F:	84 24      	STY $24
C1/AA71:	A4 12      	LDY $12
C1/AA73:	5A         	PHY
C1/AA74:	A9 01      	LDA #$01
C1/AA76:	8D 7E 60   	STA $607E
C1/AA79:	20 3E B2   	JSR $B23E           ; prepare animation thread for execution
C1/AA7C:	7A         	PLY
C1/AA7D:	84 12      	STY $12
C1/AA7F:	66 13      	ROR $13
C1/AA81:	66 12      	ROR $12
C1/AA83:	EE 0B 89   	INC $890B
C1/AA86:	AD 0B 89   	LDA $890B
C1/AA89:	C9 0A      	CMP #$0A
C1/AA8B:	D0 8F      	BNE $AA1C

C1/AA8D:	20 89 BC   	JSR $BC89        ; set attacker index in $10
C1/AA90:	A5 10      	LDA $10
C1/AA92:	30 0A      	BMI $AA9E
C1/AA94:	0A         	ASL A
C1/AA95:	0A         	ASL A
C1/AA96:	0A         	ASL A
C1/AA97:	0A         	ASL A
C1/AA98:	0A         	ASL A
C1/AA99:	A8         	TAY
C1/AA9A:	7B         	TDC
C1/AA9B:	99 BB 61   	STA $61BB,Y

C1/AA9E:	4C B3 A8   	JMP $A8B3

C1/AAA1:	20 A5 AA   	JSR $AAA5           ; set target in $12 (checks reflector)
C1/AAA4:	6B         	RTL

C1/AAA5:	AD D1 62   	LDA $62D1           ; reflection or super ball [?]
C1/AAA8:	D0 19      	BNE $AAC3           ; branch if ^
C1/AAAA:	4C A6 BC   	JMP $BCA6           ; else, set $12 to first target

C1/AAAD:	A0 0E 00   	LDY #$000E          ; animation function arg #14
C1/AAB0:	B1 78      	LDA ($78),Y         ; character reflector bitmask
C1/AAB2:	F0 03      	BEQ $AAB7           ; branch if no character reflector
C1/AAB4:	4C 0F 1A   	JMP $1A0F           ; get character index (0-3)

C1/AAB7:	C8         	INY                 ; animation function arg #15
C1/AAB8:	B1 78      	LDA ($78),Y         ; monster reflector bitmask
C1/AABA:	20 0F 1A   	JSR $1A0F           ; get monster index (0-5)
C1/AABD:	18         	CLC                 ; prepare add
C1/AABE:	69 04      	ADC #$04            ; get entity number (if monster)
C1/AAC0:	09 80      	ORA #$80            ; set "is monster" flag
C1/AAC2:	60         	RTS

C1/AAC3:	AD D0 62   	LDA $62D0           ; super ball or launcher [?]
C1/AAC6:	F0 07      	BEQ $AACF           ; branch if not ^
C1/AAC8:	20 AD AA   	JSR $AAAD           ; get reflector entity index
C1/AACB:	8D 40 61   	STA $6140           ; save as animation entity [?]
C1/AACE:	60         	RTS

; Get Reflector and New Target

C1/AACF:	7B         	TDC                 ; A = 0000
C1/AAD0:	A8         	TAY                 ; Y = 0000
C1/AAD1:	B1 78      	LDA ($78),Y         ; this reflector target
C1/AAD3:	10 08      	BPL $AADD           ; branch if target found (else null)
C1/AAD5:	C8         	INY                 ; next potential reflector
C1/AAD6:	C0 0A 00   	CPY #$000A          ; check all 10 entities
C1/AAD9:	D0 F6      	BNE $AAD1           ; continue loop
C1/AADB:	7B         	TDC                 ; A = 0000
C1/AADC:	A8         	TAY                 ; Y = 0000

C1/AADD:	C9 04      	CMP #$04            ; character target [?]
C1/AADF:	90 02      	BCC $AAE3           ; branch if ^
C1/AAE1:	09 80      	ORA #$80            ; set "is monster" flag
C1/AAE3:	85 12      	STA $12             ; set target index
C1/AAE5:	98         	TYA                 ; reflector index
C1/AAE6:	8D 40 61   	STA $6140           ; save as animation entity [?]
C1/AAE9:	60         	RTS

; Prepare/Setup BG1 and BG3 animation scripts

C1/AAEA:	AC 75 62   	LDY $6275         ; BG1 animation script id
C1/AAED:	30 27      	BMI $AB16         ; branch if BG1 script disabled [?]
C1/AAEF:	20 A5 AA   	JSR $AAA5         ; set target in $12 (checks reflector)
C1/AAF2:	A5 12      	LDA $12           ; target id
C1/AAF4:	8D 3F 61   	STA $613F         ; set BG thread starting position
C1/AAF7:	A9 01      	LDA #$01
C1/AAF9:	85 1C      	STA $1C           ; flag "some animation" [?]
C1/AAFB:	A2 00 05   	LDX #$0500        ; redundant with LDX below
C1/AAFE:	AC 31 7B   	LDY $7B31         ; BG1 animation frame dimensions
C1/AB01:	84 22      	STY $22           ; set for $B23E below
C1/AB03:	AC 75 62   	LDY $6275         ; BG1 animation script id
C1/AB06:	84 24      	STY $24           ; set for $B23E below
C1/AB08:	20 3E B2   	JSR $B23E         ; prepare animation thread for execution
C1/AB0B:	A2 00 05   	LDX #$0500        ; BG1 animation thread offset
C1/AB0E:	BD 86 6F   	LDA $6F86,X
C1/AB11:	09 01      	ORA #$01
C1/AB13:	9D 86 6F   	STA $6F86,X       ; set thread to BG1 layer

C1/AB16:	AC 77 62   	LDY $6277         ; BG3 animation script id
C1/AB19:	30 27      	BMI $AB42         ; exit if BG3 script disabled [?]
C1/AB1B:	20 A5 AA   	JSR $AAA5         ; set target in $12 (checks reflector)
C1/AB1E:	A5 12      	LDA $12           ; target id
C1/AB20:	8D 3F 61   	STA $613F         ; set BG thread starting position
C1/AB23:	A9 01      	LDA #$01
C1/AB25:	85 1C      	STA $1C           ; flag "some animation" [?]
C1/AB27:	A2 10 05   	LDX #$0510        ; redundant with LDX below
C1/AB2A:	AC 33 7B   	LDY $7B33         ; BG3 animation frame dimensions
C1/AB2D:	84 22      	STY $22           ; set for $B23E below
C1/AB2F:	AC 77 62   	LDY $6277         ; BG3 animation script id
C1/AB32:	84 24      	STY $24           ; set for $B23E below
C1/AB34:	20 3E B2   	JSR $B23E         ; prepare animation thread for execution
C1/AB37:	A2 10 05   	LDX #$0510        ; BG3 animation thread offset
C1/AB3A:	BD 86 6F   	LDA $6F86,X
C1/AB3D:	09 02      	ORA #$02
C1/AB3F:	9D 86 6F   	STA $6F86,X       ; set thread to BG3 layer
C1/AB42:	60         	RTS

C1/AB43:	A9 01      	LDA #$01
C1/AB45:	8D 0E 7B   	STA $7B0E      ; 1 monster animation thread to update [?]
C1/AB48:	8D 0F 7B   	STA $7B0F      ; 1 character animation thread to update [?]
C1/AB4B:	9C AA 60   	STZ $60AA      ; 0 shared sprite and extra threads [?]
C1/AB4E:	9C AC 60   	STZ $60AC      ; pause BG1 animation threads [?]
C1/AB51:	9C AD 60   	STZ $60AD      ; pause BG3 animation threads [?]
C1/AB54:	9C 99 00   	STZ $0099      ; pause sprite animation threads [?]
C1/AB57:	60         	RTS

C1/AB58:	9C B0 62   	STZ $62B0      ; esper thread 1 sprite priority [?]
C1/AB5B:	20 F4 94   	JSR $94F4      ; copy monster sprite data to buffer
C1/AB5E:	20 67 AB   	JSR $AB67      ; copy original character/monster targets
C1/AB61:	20 A2 9A   	JSR $9AA2      ; initial attack animation
C1/AB64:	4C 43 AB   	JMP $AB43      ; initialize animation threads

; Move/save original character and monster target bytes
C1/AB67:	A0 02 00   	LDY #$0002
C1/AB6A:	B1 78      	LDA ($78),Y     ; A = character targets
C1/AB6C:	8D 3D 61   	STA $613D       ; save character targets
C1/AB6F:	C8         	INY
C1/AB70:	B1 78      	LDA ($78),Y
C1/AB72:	8D 3E 61   	STA $613E       ; save monster targets
C1/AB75:	60         	RTS

; Related to character stances [?]
; Gets called when muted character tries to cast a spell

C1/AB76:	A0 01 00   	LDY #$0001
C1/AB79:	B1 76      	LDA ($76),Y     ; first arg (target slot ID)
C1/AB7B:	C9 04      	CMP #$04        ; >= 4
C1/AB7D:	B0 0B      	BCS $AB8A       ; exit if not in character range
C1/AB7F:	29 03      	AND #$03        ; limit to 0-3
C1/AB81:	0A         	ASL A
C1/AB82:	0A         	ASL A
C1/AB83:	0A         	ASL A
C1/AB84:	0A         	ASL A
C1/AB85:	0A         	ASL A           ; x32
C1/AB86:	AA         	TAX             ; index to target character data
C1/AB87:	9E BB 61   	STZ $61BB,X     ; reset sprite animation to default
C1/AB8A:	60         	RTS

; Set sprite animation for attacking character to zero (default)
C1/AB8B:	A0 01 00   	LDY #$0001
C1/AB8E:	B1 78      	LDA ($78),Y     ; A = attacker index
C1/AB90:	C9 04      	CMP #$04        ; is attacker a monster?
C1/AB92:	B0 0A      	BCS $AB9E       ; exit if so
C1/AB94:	0A         	ASL A
C1/AB95:	0A         	ASL A
C1/AB96:	0A         	ASL A
C1/AB97:	0A         	ASL A
C1/AB98:	0A         	ASL A           ; character index * 32
C1/AB99:	A8         	TAY
C1/AB9A:	7B         	TDC             ; A = 0
C1/AB9B:	99 BB 61   	STA $61BB,Y     ; set default (empty) sprite animation
C1/AB9E:	60         	RTS

; Setup Pre-Magic Swirly Animation

C1/AB9F:	A0 02 00   	LDY #$0002      ; battle dynamics arg #2
C1/ABA2:	7B         	TDC             ; A = 0000
C1/ABA3:	AA         	TAX             ; X = 0000
C1/ABA4:	B1 76      	LDA ($76),Y     ; spell id
C1/ABA6:	C9 18      	CMP #$18        ; first gray-magic spell
C1/ABA8:	90 11      	BCC $ABBB       ; branch if in black magic range
C1/ABAA:	E8         	INX
C1/ABAB:	E8         	INX             ; x index to gray/white swirly
C1/ABAC:	C9 36      	CMP #$36        ; first esper
C1/ABAE:	90 0B      	BCC $ABBB       ; branch if in gray/white range
C1/ABB0:	E8         	INX
C1/ABB1:	E8         	INX             ; x index to esper swirly
C1/ABB2:	C9 51      	CMP #$51        ; first skean
C1/ABB4:	90 05      	BCC $ABBB       ; branch if in esper range
C1/ABB6:	9C C0 62   	STZ $62C0       ; don't ignore block animations [?]
C1/ABB9:	80 2C      	BRA $ABE7

; Magic or Esper Swirly

C1/ABBB:	EE C0 62   	INC $62C0       ; ignore block animations [?]
C1/ABBE:	C2 20      	REP #$20        ; 16-bit A
C1/ABC0:	BF 8E 91 C1	LDA $C1918E,X   ; offset to swirly animation data
C1/ABC4:	85 1E      	STA $1E         ; store offset for $9CB3 below
C1/ABC6:	7B         	TDC             ; A = 0000
C1/ABC7:	E2 20      	SEP #$20        ; 8-bit A
C1/ABC9:	20 B3 9C   	JSR $9CB3       ; load spell animation and sound data
C1/ABCC:	20 5B AC   	JSR $AC5B       ; ?????????
C1/ABCF:	20 89 BC   	JSR $BC89       ; set attacker index in $10
C1/ABD2:	A5 10      	LDA $10         ; attacker index
C1/ABD4:	30 0B      	BMI $ABE1       ; branch if monster attacker
C1/ABD6:	29 03      	AND #$03        ; mask "is a monster" flag
C1/ABD8:	AA         	TAX             ; character index
C1/ABD9:	AD A4 62   	LDA $62A4       ; passive self-dmg (regen, etc)
C1/ABDC:	D0 03      	BNE $ABE1       ; branch if ^
C1/ABDE:	FE AE 61   	INC $61AE,X     ; disable attacker stepping forward

C1/ABE1:	9C C0 62   	STZ $62C0       ; don't ignore block animations
C1/ABE4:	20 43 AB   	JSR $AB43       ; initialize animation threads [?]
C1/ABE7:	20 8B AB   	JSR $AB8B       ; clear character attacker's sprite animation
C1/ABEA:	60         	RTS

; Magic command animation function

C1/ABEB:	A0 02 00   	LDY #$0002      ; battle dynamics arg #2
C1/ABEE:	B1 76      	LDA ($76),Y     ; spell id
C1/ABF0:	C9 F9      	CMP #$F9        ; Setzer's desperation attack [?]
C1/ABF2:	D0 12      	BNE $AC06       ; branch if not ^
C1/ABF4:	7B         	TDC             ; A = 0000
C1/ABF5:	91 76      	STA ($76),Y     ; clear spell index
C1/ABF7:	C8         	INY             ; battle dynamics arg #3
C1/ABF8:	A9 4E      	LDA #$4E
C1/ABFA:	91 76      	STA ($76),Y     ; set graphic index [?]
C1/ABFC:	20 CD BE   	JSR $BECD       ; execute "Fight" animation
C1/ABFF:	20 CD BE   	JSR $BECD       ; execute "Fight" animation
C1/AC02:	20 CD BE   	JSR $BECD       ; execute "Fight" animation
C1/AC05:	60         	RTS

; Execute spell animation

C1/AC06:	20 58 AB   	JSR $AB58       ; copy targets, initialize animation
C1/AC09:	20 8B AB   	JSR $AB8B       ; clear character attacker's sprite animation
C1/AC0C:	A0 01 00   	LDY #$0001
C1/AC0F:	B1 78      	LDA ($78),Y     ; get attacker index
C1/AC11:	C9 04      	CMP #$04        ; is monster
C1/AC13:	B0 09      	BCS $AC1E       ; branch if ^
C1/AC15:	B2 78      	LDA ($78)       ; get command animation flags
C1/AC17:	29 10      	AND #$10        ; "disable pre-magic swirly"
C1/AC19:	D0 03      	BNE $AC1E       ; branch if disabled
C1/AC1B:	20 9F AB   	JSR $AB9F       ; setup pre-magic swirly animation
C1/AC1E:	20 41 B9   	JSR $B941       ; set carry if any targets at all
C1/AC21:	90 0E      	BCC $AC31       ; branch if no targets

C1/AC23:	7B         	TDC             ; A = 0000
C1/AC24:	A8         	TAY             ; Y = 0000
C1/AC25:	84 1E      	STY $1E         ; zero offset to spell animation data
C1/AC27:	C8         	INY
C1/AC28:	C8         	INY             ; battle dynamics arg #2
C1/AC29:	B1 76      	LDA ($76),Y     ; spell id
C1/AC2B:	20 B3 9C   	JSR $9CB3       ; load graphic data for spell animation
C1/AC2E:	20 5B AC   	JSR $AC5B       ; animate the spell
C1/AC31:	20 35 AC   	JSR $AC35       ; fill/clear BG1 and BG3 tile data
C1/AC34:	60         	RTS

; Fill VRAM BG1/BG3 with $02EE/$01EE Respectively

C1/AC35:	20 CA 9E   	JSR $9ECA       ; fill BG1 animation tile buffer w/ $02EE
C1/AC38:	A2 00 08   	LDX #$0800
C1/AC3B:	86 10      	STX $10         ; VRAM transfer data length
C1/AC3D:	A2 00 C4   	LDX #$C400      ; VRAM transfer source (BG1 tiles buffer)
C1/AC40:	A9 7F      	LDA #$7F        ; VRAM transfer source bank
C1/AC42:	A0 00 0C   	LDY #$0C00      ; VRAM destination (Battlefield BG1 tiles)
C1/AC45:	20 8D 19   	JSR $198D       ; initialize VRAM DMA transfer
C1/AC48:	20 EE 9E   	JSR $9EEE       ; fill BG3 animation tile buffer w/ $01EE
C1/AC4B:	A2 00 08   	LDX #$0800
C1/AC4E:	86 10      	STX $10         ; VRAM transfer data length
C1/AC50:	A2 00 E4   	LDX #$E400      ; VRAM transfer source (BG3 tiles buffer)
C1/AC53:	A9 7F      	LDA #$7F        ; VRAM transfer source bank
C1/AC55:	A0 00 54   	LDY #$5400      ; VRAM destination offset (Battlefield BG3 tiles)
C1/AC58:	4C 8D 19   	JMP $198D       ; initialize VRAM DMA transfer

; Setup magic spell animation

C1/AC5B:	20 6B AC   	JSR $AC6B
C1/AC5E:	20 53 C6   	JSR $C653
C1/AC61:	20 03 95   	JSR $9503        ; update monster sprite data from buffer
C1/AC64:	4C 85 B0   	JMP $B085        ; post-animation cleanup [?]

C1/AC67:	20 6B AC   	JSR $AC6B
C1/AC6A:	6B         	RTL

C1/AC6B:	A0 02 00   	LDY #$0002       ; command data arg #2
C1/AC6E:	B1 78      	LDA ($78),Y      ; original character targets
C1/AC70:	0A         	ASL A
C1/AC71:	0A         	ASL A
C1/AC72:	0A         	ASL A
C1/AC73:	0A         	ASL A
C1/AC74:	85 12      	STA $12          ; set in top nibble of $12
C1/AC76:	C8         	INY              ; command data arg #3
C1/AC77:	B1 78      	LDA ($78),Y      ; original monster targets
C1/AC79:	85 13      	STA $13          ; save them
C1/AC7B:	C8         	INY              ; command data arg #4
C1/AC7C:	B1 78      	LDA ($78),Y      ; character targets (not missed)
C1/AC7E:	0A         	ASL A
C1/AC7F:	0A         	ASL A
C1/AC80:	0A         	ASL A
C1/AC81:	0A         	ASL A
C1/AC82:	8D 7E 60   	STA $607E        ; save in top nibble [?]
C1/AC85:	C8         	INY              ; command data arg #5
C1/AC86:	B1 78      	LDA ($78),Y      ; monster targets (not missed)
C1/AC88:	8D 7F 60   	STA $607F        ; save them [?]
C1/AC8B:	8D AF 62   	STA $62AF        ; also save here [?]
C1/AC8E:	C8         	INY              ; command data arg #6
C1/AC8F:	B1 78      	LDA ($78),Y      ; character bodyguards (or reflectors)
C1/AC91:	0A         	ASL A
C1/AC92:	0A         	ASL A
C1/AC93:	0A         	ASL A
C1/AC94:	0A         	ASL A
C1/AC95:	8D 80 60   	STA $6080        ; store in top nibble
C1/AC98:	C8         	INY              ; command data arg #7
C1/AC99:	B1 78      	LDA ($78),Y      ; monster bodyguards (or reflectors)
C1/AC9B:	8D 81 60   	STA $6081        ; store [?]
C1/AC9E:	C2 20      	REP #$20         ; 16-bit A
C1/ACA0:	A5 12      	LDA $12          ; original targets (00mmmmmmcccc0000)
C1/ACA2:	4A         	LSR A
C1/ACA3:	4A         	LSR A
C1/ACA4:	4A         	LSR A
C1/ACA5:	4A         	LSR A
C1/ACA6:	85 12      	STA $12          ; shift out empty bits
C1/ACA8:	AD 7E 60   	LDA $607E        ; not-missed targets
C1/ACAB:	4A         	LSR A
C1/ACAC:	4A         	LSR A
C1/ACAD:	4A         	LSR A
C1/ACAE:	4A         	LSR A
C1/ACAF:	8D 7E 60   	STA $607E        ; shift down bits
C1/ACB2:	AD 80 60   	LDA $6080        ; bodyguards/reflectors
C1/ACB5:	4A         	LSR A
C1/ACB6:	4A         	LSR A
C1/ACB7:	4A         	LSR A
C1/ACB8:	4A         	LSR A
C1/ACB9:	8D 80 60   	STA $6080        ; shift down bits
C1/ACBC:	AD C0 62   	LDA $62C0        ; ignore block animations [?]
C1/ACBF:	29 FF 00   	AND #$00FF       ; ignore hi-byte
C1/ACC2:	F0 08      	BEQ $ACCC        ; branch if allow block animations [?]
C1/ACC4:	9C 80 60   	STZ $6080        ; clear bodyguard/reflector targets
C1/ACC7:	7B         	TDC
C1/ACC8:	3A         	DEC A            ; A = $FFFF
C1/ACC9:	8D 7E 60   	STA $607E        ; set all targets in "not missed" [?]

C1/ACCC:	7B         	TDC              ; A = 0000
C1/ACCD:	E2 20      	SEP #$20         ; 8-bit A
C1/ACCF:	AE 80 60   	LDX $6080        ; bodyguards/reflectors
C1/ACD2:	DA         	PHX              ; store X
C1/ACD3:	AE 7E 60   	LDX $607E        ; "not missed" targets
C1/ACD6:	DA         	PHX              ; store "not missed" targets
C1/ACD7:	20 89 BC   	JSR $BC89        ; set attacker index in $10
C1/ACDA:	8D 40 61   	STA $6140        ; animation actor
C1/ACDD:	9C 0B 89   	STZ $890B        ; zero entity id for sprite thread [?]
C1/ACE0:	A9 01      	LDA #$01         ; 1 active thread [?]
C1/ACE2:	85 1C      	STA $1C
C1/ACE4:	8D 84 60   	STA $6084        ; number of active threads
C1/ACE7:	AD 82 60   	LDA $6082
C1/ACEA:	0D 83 60   	ORA $6083
C1/ACED:	0D 80 60   	ORA $6080
C1/ACF0:	0D 81 60   	ORA $6081        ; bodyguards/reflectors/[?]
C1/ACF3:	D0 05      	BNE $ACFA        ; branch if any ^ exist
C1/ACF5:	AC 73 62   	LDY $6273        ; sprite script id
C1/ACF8:	30 7C      	BMI $AD76        ; branch if script disabled [?]

C1/ACFA:	AD 0B 89   	LDA $890B        ; entity id for sprite thread (starts at 0) [?]
C1/ACFD:	8D 3F 61   	STA $613F        ; save it [?]
C1/AD00:	29 0F      	AND #$0F         ; entity index 0-15
C1/AD02:	C2 20      	REP #$20         ; 16-bit A
C1/AD04:	0A         	ASL A            ; x2
C1/AD05:	AA         	TAX              ; index it
C1/AD06:	BF 8B CE C2	LDA $C2CE8B,X    ; offset to entity's animation threads
C1/AD0A:	AA         	TAX              ; index it
C1/AD0B:	7B         	TDC              ; A = 0000
C1/AD0C:	E2 20      	SEP #$20         ; 8-bit A
C1/AD0E:	AD C0 62   	LDA $62C0        ; ignore block animations [?]
C1/AD11:	D0 11      	BNE $AD24        ; branch if ignoring block animations [?]
C1/AD13:	AD 0B 89   	LDA $890B        ; entity id for sprite thread [?]
C1/AD16:	C9 04      	CMP #$04         ; monster entity range
C1/AD18:	B0 0A      	BCS $AD24        ; branch if monster

C1/AD1A:	18         	CLC              ; prepare add
C1/AD1B:	69 0A      	ADC #$0A         ; add offset to character block ids
C1/AD1D:	A8         	TAY              ; index it
C1/AD1E:	B1 78      	LDA ($78),Y      ; command data character block id
C1/AD20:	C9 03      	CMP #$03         ; shield block
C1/AD22:	F0 25      	BEQ $AD49        ; branch if ^

C1/AD24:	AD 80 60   	LDA $6080        ; bodyguards/reflectors [?]
C1/AD27:	29 01      	AND #$01         ; is this entity in bitmask?
C1/AD29:	D0 12      	BNE $AD3D        ; branch if ^
C1/AD2B:	A5 12      	LDA $12          ; original targets
C1/AD2D:	29 01      	AND #$01         ; is this entity in bitmask
C1/AD2F:	F0 2B      	BEQ $AD5C        ; branch if ^
C1/AD31:	AC 35 7B   	LDY $7B35        ; animation frame width/height
C1/AD34:	84 22      	STY $22          ; save them
C1/AD36:	AC 73 62   	LDY $6273        ; animation sprite script id
C1/AD39:	84 24      	STY $24          ; save it
C1/AD3B:	80 16      	BRA $AD53

; Bodyguard/reflector entity/target
C1/AD3D:	A0 02 02   	LDY #$0202       ; reflection animation frame dimensions
C1/AD40:	84 22      	STY $22          ; save them
C1/AD42:	A0 42 00   	LDY #$0042       ; reflection animation sprite script id
C1/AD45:	84 24      	STY $24          ; save it
C1/AD47:	80 0A      	BRA $AD53

; Shield block [?]
C1/AD49:	A0 01 01   	LDY #$0101       ; shield block animation frame dimensions
C1/AD4C:	84 22      	STY $22          ; save them
C1/AD4E:	A0 63 00   	LDY #$0063       ; shield block animation sprite script id
C1/AD51:	84 24      	STY $24          ; save it

C1/AD53:	A4 12      	LDY $12          ; original targets
C1/AD55:	5A         	PHY              ; store them
C1/AD56:	20 3E B2   	JSR $B23E        ; prepare animation thread for execution
C1/AD59:	7A         	PLY              ; restore original targets
C1/AD5A:	84 12      	STY $12          ; reset in $12

C1/AD5C:	66 13      	ROR $13
C1/AD5E:	66 12      	ROR $12          ; shift out current entity from targets
C1/AD60:	6E 7F 60   	ROR $607F
C1/AD63:	6E 7E 60   	ROR $607E        ; shift out current entity from targets
C1/AD66:	6E 81 60   	ROR $6081
C1/AD69:	6E 80 60   	ROR $6080        ; shift out current entity from targets
C1/AD6C:	EE 0B 89   	INC $890B        ; next entity to process
C1/AD6F:	AD 0B 89   	LDA $890B        ; new entity index
C1/AD72:	C9 0A      	CMP #$0A         ; loop 10 times (for all entities)
C1/AD74:	D0 84      	BNE $ACFA        ; continue loop

C1/AD76:	20 EA AA   	JSR $AAEA        ; prepare/setup BG1 and BG3 animations
C1/AD79:	AC 7E 62   	LDY $627E        ; extra animation script id [?]
C1/AD7C:	C0 FF FF   	CPY #$FFFF       ; null
C1/AD7F:	F0 59      	BEQ $ADDA        ; branch if no extra animation data
C1/AD81:	30 59      	BMI $ADDC        ; branch if esper animation [?]
C1/AD83:	A9 01      	LDA #$01
C1/AD85:	85 1C      	STA $1C          ; flag "some animation" [?]
C1/AD87:	AC 37 7B   	LDY $7B37        ; extra animation dimensions
C1/AD8A:	84 22      	STY $22          ; save for $B208 below
C1/AD8C:	AC 7E 62   	LDY $627E        ; extra animation script id
C1/AD8F:	84 24      	STY $24          ; save for $B208 below
C1/AD91:	20 89 BC   	JSR $BC89        ; set attacker index in $10
C1/AD94:	A5 10      	LDA $10          ; attacker id
C1/AD96:	29 0F      	AND #$0F         ; mask "is monster" flag
C1/AD98:	C2 20      	REP #$20         ; 16-bit A
C1/AD9A:	0A         	ASL A            ; x2
C1/AD9B:	AA         	TAX              ; index it
C1/AD9C:	BF 8B CE C2	LDA $C2CE8B,X    ; offset to attacker's animation threads
C1/ADA0:	AA         	TAX              ; index it
C1/ADA1:	7B         	TDC              ; A = 0000
C1/ADA2:	E2 20      	SEP #$20         ; 8-bit A
C1/ADA4:	AD 7D 62   	LDA $627D        ; animation init function id [?]
C1/ADA7:	29 7F      	AND #$7F         ; mask top "BG1 target, not graphics"
C1/ADA9:	C9 12      	CMP #$12
C1/ADAB:	D0 04      	BNE $ADB1
C1/ADAD:	A9 03      	LDA #$03
C1/ADAF:	80 0A      	BRA $ADBB
C1/ADB1:	C9 11      	CMP #$11
C1/ADB3:	D0 04      	BNE $ADB9
C1/ADB5:	A9 06      	LDA #$06
C1/ADB7:	80 02      	BRA $ADBB
C1/ADB9:	A9 01      	LDA #$01         ; if id $12 (03), $11 (06), else (01)

C1/ADBB:	48         	PHA              ; store number of thread repetitions [?]
C1/ADBC:	DA         	PHX              ; store attacker's animation thread offset
C1/ADBD:	20 A5 AA   	JSR $AAA5        ; set target in $12 (checks reflector)
C1/ADC0:	A5 12      	LDA $12          ; target id
C1/ADC2:	8D 3F 61   	STA $613F        ; set thread animation's starting position
C1/ADC5:	FA         	PLX              ; useless PLX
C1/ADC6:	DA         	PHX              ; useless PHX
C1/ADC7:	20 08 B2   	JSR $B208        ; prepare extra animation thread for execution
C1/ADCA:	FA         	PLX              ; restore attacker animation thread offset
C1/ADCB:	C2 20      	REP #$20         ; 16-bit A
C1/ADCD:	8A         	TXA
C1/ADCE:	18         	CLC
C1/ADCF:	69 10 00   	ADC #$0010       ; get attacker's next thread offset
C1/ADD2:	AA         	TAX              ; index it
C1/ADD3:	7B         	TDC              ; A = 0000
C1/ADD4:	E2 20      	SEP #$20         ; 8-bit A
C1/ADD6:	68         	PLA              ; restore number of thread repetitions [?]
C1/ADD7:	3A         	DEC A            ; loop for each repetition
C1/ADD8:	D0 E1      	BNE $ADBB        ; continue loop
C1/ADDA:	80 27      	BRA $AE03

; Esper animation handling [?]
C1/ADDC:	20 89 BC   	JSR $BC89        ; set attacker index in $10
C1/ADDF:	20 A5 AA   	JSR $AAA5        ; set target in $12 (checks reflector)
C1/ADE2:	A5 12      	LDA $12          ; target id
C1/ADE4:	8D 3F 61   	STA $613F        ; set thread animation starting position
C1/ADE7:	A9 01      	LDA #$01
C1/ADE9:	85 1C      	STA $1C          ; flag "some animation" [?]
C1/ADEB:	A2 20 05   	LDX #$0520       ; esper animation thread offset
C1/ADEE:	AC 37 7B   	LDY $7B37        ; esper animation frame dimensions
C1/ADF1:	84 22      	STY $22          ; save for $B23E below
C1/ADF3:	C2 20      	REP #$20         ; 16-bit A
C1/ADF5:	AD 7E 62   	LDA $627E        ; extra animation script id
C1/ADF8:	29 FF 7F   	AND #$7FFF       ; mask "is esper" flag [?]
C1/ADFB:	85 24      	STA $24          ; save for $B23E below
C1/ADFD:	7B         	TDC              ; A = 0000
C1/ADFE:	E2 20      	SEP #$20         ; 8-bit A
C1/AE00:	20 3E B2   	JSR $B23E        ; prepare animation thread for execution

C1/AE03:	A0 06 00   	LDY #$0006       ; command data arg #6
C1/AE06:	B1 78      	LDA ($78),Y      ; character bodyguards/reflectors
C1/AE08:	0A         	ASL A
C1/AE09:	0A         	ASL A
C1/AE0A:	0A         	ASL A
C1/AE0B:	0A         	ASL A            ; shift to top nibble
C1/AE0C:	8D 80 60   	STA $6080        ; save targets hit [?]
C1/AE0F:	C8         	INY              ; command data arg #7
C1/AE10:	B1 78      	LDA ($78),Y      ; monster bodyguards/reflectors
C1/AE12:	8D 81 60   	STA $6081        ; save targets hit [?]
C1/AE15:	FA         	PLX              ; restore not-missed targets [?]
C1/AE16:	8E 7E 60   	STX $607E        ; save them
C1/AE19:	DA         	PHX              ; store not-missed targets
C1/AE1A:	9C EE E9   	STZ $E9EE        ; [?]
C1/AE1D:	20 3C B1   	JSR $B13C        ; [?] some cleanup?
C1/AE20:	FA         	PLX              ; restore not-missed targets [?]
C1/AE21:	8E 7E 60   	STX $607E        ; save them again (why [?])
C1/AE24:	FA         	PLX              ; restore bodyguards/reflectors [?]
C1/AE25:	8E 80 60   	STX $6080        ; save them
C1/AE28:	20 2F AE   	JSR $AE2F        ; ??????????/
C1/AE2B:	20 E5 94   	JSR $94E5        ; move color palette data from/to buffer [?]
C1/AE2E:	60         	RTS

C1/AE2F:	20 89 BC   	JSR $BC89        ; set attacker index in $10
C1/AE32:	AD EE E9   	LDA $E9EE
C1/AE35:	F0 01      	BEQ $AE38
C1/AE37:	60         	RTS

C1/AE38:	AE 82 60   	LDX $6082
C1/AE3B:	DA         	PHX
C1/AE3C:	C2 20      	REP #$20
C1/AE3E:	A0 0A 00   	LDY #$000A
C1/AE41:	B1 78      	LDA ($78),Y
C1/AE43:	8D A5 62   	STA $62A5
C1/AE46:	C8         	INY
C1/AE47:	C8         	INY
C1/AE48:	B1 78      	LDA ($78),Y
C1/AE4A:	8D A7 62   	STA $62A7
C1/AE4D:	AD 82 60   	LDA $6082
C1/AE50:	49 FF FF   	EOR #$FFFF
C1/AE53:	85 16      	STA $16
C1/AE55:	AD 80 60   	LDA $6080
C1/AE58:	49 FF FF   	EOR #$FFFF
C1/AE5B:	85 14      	STA $14
C1/AE5D:	AD 7E 60   	LDA $607E
C1/AE60:	25 14      	AND $14
C1/AE62:	25 16      	AND $16
C1/AE64:	85 2A      	STA $2A
C1/AE66:	7B         	TDC
C1/AE67:	E2 20      	SEP #$20           ; 8-bit A
C1/AE69:	A5 2A      	LDA $2A
C1/AE6B:	05 2B      	ORA $2B
C1/AE6D:	D0 54      	BNE $AEC3
C1/AE6F:	AD 80 60   	LDA $6080
C1/AE72:	0D 81 60   	ORA $6081
C1/AE75:	0D 82 60   	ORA $6082
C1/AE78:	0D 83 60   	ORA $6083
C1/AE7B:	0D 7E 60   	ORA $607E
C1/AE7E:	0D 7F 60   	ORA $607F
C1/AE81:	F0 18      	BEQ $AE9B
C1/AE83:	9C 2E 6F   	STZ $6F2E
C1/AE86:	9C 3E 6F   	STZ $6F3E
C1/AE89:	9C 4E 6F   	STZ $6F4E
C1/AE8C:	9C 5E 6F   	STZ $6F5E
C1/AE8F:	9C 6E 6F   	STZ $6F6E
C1/AE92:	9C 99 00   	STZ $0099
C1/AE95:	9C AD 60   	STZ $60AD
C1/AE98:	9C AC 60   	STZ $60AC
C1/AE9B:	AD 88 74   	LDA $7488
C1/AE9E:	09 80      	ORA #$80
C1/AEA0:	8D 88 74   	STA $7488
C1/AEA3:	AD 98 74   	LDA $7498
C1/AEA6:	09 80      	ORA #$80
C1/AEA8:	8D 98 74   	STA $7498
C1/AEAB:	AD A8 74   	LDA $74A8
C1/AEAE:	09 80      	ORA #$80
C1/AEB0:	8D A8 74   	STA $74A8
C1/AEB3:	AD B8 74   	LDA $74B8
C1/AEB6:	09 80      	ORA #$80
C1/AEB8:	8D B8 74   	STA $74B8
C1/AEBB:	AD C8 74   	LDA $74C8
C1/AEBE:	09 80      	ORA #$80
C1/AEC0:	8D C8 74   	STA $74C8
C1/AEC3:	7B         	TDC
C1/AEC4:	AA         	TAX
C1/AEC5:	AD 82 60   	LDA $6082
C1/AEC8:	29 01      	AND #$01
C1/AECA:	D0 2D      	BNE $AEF9
C1/AECC:	AD 80 60   	LDA $6080
C1/AECF:	29 01      	AND #$01
C1/AED1:	D0 26      	BNE $AEF9
C1/AED3:	AD 7E 60   	LDA $607E
C1/AED6:	29 01      	AND #$01
C1/AED8:	D0 57      	BNE $AF31
C1/AEDA:	DA         	PHX
C1/AEDB:	A9 08      	LDA #$08
C1/AEDD:	85 18      	STA $18
C1/AEDF:	BD 88 6F   	LDA $6F88,X
C1/AEE2:	09 80      	ORA #$80
C1/AEE4:	9D 88 6F   	STA $6F88,X
C1/AEE7:	C2 20      	REP #$20
C1/AEE9:	8A         	TXA
C1/AEEA:	18         	CLC
C1/AEEB:	69 10 00   	ADC #$0010
C1/AEEE:	AA         	TAX
C1/AEEF:	7B         	TDC
C1/AEF0:	E2 20      	SEP #$20           ; 8-bit A
C1/AEF2:	C6 18      	DEC $18
C1/AEF4:	D0 E9      	BNE $AEDF
C1/AEF6:	FA         	PLX
C1/AEF7:	80 38      	BRA $AF31
C1/AEF9:	BD 3E 6A   	LDA $6A3E,X
C1/AEFC:	29 02      	AND #$02
C1/AEFE:	9D 3E 6A   	STA $6A3E,X
C1/AF01:	BD 4E 6A   	LDA $6A4E,X
C1/AF04:	29 02      	AND #$02
C1/AF06:	9D 4E 6A   	STA $6A4E,X
C1/AF09:	BD 5E 6A   	LDA $6A5E,X
C1/AF0C:	29 02      	AND #$02
C1/AF0E:	9D 5E 6A   	STA $6A5E,X
C1/AF11:	BD 6E 6A   	LDA $6A6E,X
C1/AF14:	29 02      	AND #$02
C1/AF16:	9D 6E 6A   	STA $6A6E,X
C1/AF19:	BD 7E 6A   	LDA $6A7E,X
C1/AF1C:	29 02      	AND #$02
C1/AF1E:	9D 7E 6A   	STA $6A7E,X
C1/AF21:	BD 8E 6A   	LDA $6A8E,X
C1/AF24:	29 02      	AND #$02
C1/AF26:	9D 8E 6A   	STA $6A8E,X
C1/AF29:	BD 9E 6A   	LDA $6A9E,X
C1/AF2C:	29 02      	AND #$02
C1/AF2E:	9D 9E 6A   	STA $6A9E,X
C1/AF31:	C2 20      	REP #$20
C1/AF33:	8A         	TXA
C1/AF34:	18         	CLC
C1/AF35:	69 80 00   	ADC #$0080
C1/AF38:	AA         	TAX
C1/AF39:	E2 20      	SEP #$20           ; 8-bit A
C1/AF3B:	6E 83 60   	ROR $6083
C1/AF3E:	6E 82 60   	ROR $6082
C1/AF41:	6E 7F 60   	ROR $607F
C1/AF44:	6E 7E 60   	ROR $607E
C1/AF47:	6E 81 60   	ROR $6081
C1/AF4A:	6E 80 60   	ROR $6080
C1/AF4D:	E0 00 05   	CPX #$0500
C1/AF50:	F0 03      	BEQ $AF55
C1/AF52:	4C C5 AE   	JMP $AEC5

C1/AF55:	FA         	PLX
C1/AF56:	8E 82 60   	STX $6082
C1/AF59:	60         	RTS

C1/AF5A:	22 98 F4 C2	JSL $C2F498
C1/AF5E:	A9 06      	LDA #$06
C1/AF60:	8D 0C 80   	STA $800C
C1/AF63:	A0 05 00   	LDY #$0005
C1/AF66:	B1 78      	LDA ($78),Y
C1/AF68:	8D 7F 60   	STA $607F
C1/AF6B:	9C 7E 60   	STZ $607E
C1/AF6E:	9C 67 7B   	STZ $7B67
C1/AF71:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/AF74:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/AF77:	AD 7E 60   	LDA $607E
C1/AF7A:	AA         	TAX
C1/AF7B:	AD 7F 60   	LDA $607F
C1/AF7E:	3F 01 1A C1	AND $C11A01,X
C1/AF82:	F0 59      	BEQ $AFDD
C1/AF84:	48         	PHA
C1/AF85:	20 63 1E   	JSR $1E63
C1/AF88:	20 1A B0   	JSR $B01A
C1/AF8B:	20 26 1F   	JSR $1F26          ; set battlefield BG1 tiles in VRAM
C1/AF8E:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/AF91:	68         	PLA
C1/AF92:	49 FF      	EOR #$FF
C1/AF94:	8D AB 60   	STA $60AB
C1/AF97:	9C 6D 5F   	STZ $5F6D
C1/AF9A:	A9 80      	LDA #$80
C1/AF9C:	85 10      	STA $10
C1/AF9E:	A9 BE      	LDA #$BE
C1/AFA0:	20 EF 17   	JSR $17EF
C1/AFA3:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/AFA6:	AD 6D 5F   	LDA $5F6D
C1/AFA9:	A2 10 00   	LDX #$0010
C1/AFAC:	86 24      	STX $24
C1/AFAE:	AD 6D 5F   	LDA $5F6D
C1/AFB1:	20 67 6C   	JSR $6C67
C1/AFB4:	20 5F B0   	JSR $B05F
C1/AFB7:	20 2D B0   	JSR $B02D
C1/AFBA:	AD 6D 5F   	LDA $5F6D
C1/AFBD:	18         	CLC
C1/AFBE:	69 02      	ADC #$02
C1/AFC0:	8D 6D 5F   	STA $5F6D
C1/AFC3:	C9 40      	CMP #$40
C1/AFC5:	D0 DC      	BNE $AFA3
C1/AFC7:	7B         	TDC
C1/AFC8:	AA         	TAX
C1/AFC9:	86 28      	STX $28
C1/AFCB:	20 5F B0   	JSR $B05F
C1/AFCE:	AD 1E 20   	LDA $201E
C1/AFD1:	2D AB 61   	AND $61AB
C1/AFD4:	2D AB 60   	AND $60AB
C1/AFD7:	8D 1E 20   	STA $201E
C1/AFDA:	20 59 1E   	JSR $1E59          ; fill VRAM Battle BG1 tiles w/ $02EE
C1/AFDD:	EE 7E 60   	INC $607E
C1/AFE0:	AD 7E 60   	LDA $607E
C1/AFE3:	C9 06      	CMP #$06
C1/AFE5:	D0 8D      	BNE $AF74
C1/AFE7:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/AFEA:	20 59 1E   	JSR $1E59          ; fill VRAM Battle BG1 tiles w/ $02EE
C1/AFED:	7B         	TDC
C1/AFEE:	AA         	TAX
C1/AFEF:	86 10      	STX $10
C1/AFF1:	8E B4 64   	STX $64B4
C1/AFF4:	8E B6 64   	STX $64B6
C1/AFF7:	20 3C C2   	JSR $C23C          ; clear subscreen window mask
C1/AFFA:	A9 03      	LDA #$03
C1/AFFC:	8D 0C 80   	STA $800C
C1/AFFF:	60         	RTS

C1/B000:	20 07 B0   	JSR $B007
C1/B003:	20 3C C2   	JSR $C23C          ; fill subscreen window mask
C1/B006:	6B         	RTL

C1/B007:	48         	PHA
C1/B008:	AF 3F 21 00	LDA $00213F
C1/B00C:	AF 37 21 00	LDA $002137
C1/B010:	AF 3D 21 00	LDA $00213D
C1/B014:	C9 A0      	CMP #$A0
C1/B016:	90 F0      	BCC $B008
C1/B018:	68         	PLA
C1/B019:	60         	RTS

C1/B01A:	20 89 BC   	JSR $BC89        ; set attacker index in $10
C1/B01D:	A5 10      	LDA $10
C1/B01F:	30 0B      	BMI $B02C
C1/B021:	0A         	ASL A
C1/B022:	0A         	ASL A
C1/B023:	0A         	ASL A
C1/B024:	0A         	ASL A
C1/B025:	0A         	ASL A
C1/B026:	A8         	TAY
C1/B027:	A9 30      	LDA #$30
C1/B029:	99 BD 61   	STA $61BD,Y
C1/B02C:	60         	RTS

C1/B02D:	7B         	TDC
C1/B02E:	A8         	TAY
C1/B02F:	C2 20      	REP #$20
C1/B031:	A2 10 00   	LDX #$0010
C1/B034:	A9 E1 00   	LDA #$00E1
C1/B037:	85 14      	STA $14
C1/B039:	85 16      	STA $16
C1/B03B:	85 18      	STA $18
C1/B03D:	20 6E FC   	JSR $FC6E
C1/B040:	B9 60 7E   	LDA $7E60,Y
C1/B043:	20 99 FC   	JSR $FC99
C1/B046:	99 60 7E   	STA $7E60,Y
C1/B049:	C8         	INY
C1/B04A:	C8         	INY
C1/B04B:	CA         	DEX
C1/B04C:	D0 F2      	BNE $B040
C1/B04E:	7B         	TDC
C1/B04F:	E2 20      	SEP #$20           ; 8-bit A
C1/B051:	60         	RTS

C1/B052:	AF 37 21 00	LDA $002137
C1/B056:	AF 3D 21 00	LDA $00213D
C1/B05A:	C9 A0      	CMP #$A0
C1/B05C:	90 F4      	BCC $B052
C1/B05E:	60         	RTS

C1/B05F:	20 52 B0   	JSR $B052
C1/B062:	7B         	TDC
C1/B063:	AA         	TAX
C1/B064:	C2 20      	REP #$20
C1/B066:	A5 28      	LDA $28
C1/B068:	9D B0 63   	STA $63B0,X
C1/B06B:	49 FF FF   	EOR #$FFFF
C1/B06E:	9D F0 63   	STA $63F0,X
C1/B071:	E8         	INX
C1/B072:	E8         	INX
C1/B073:	E8         	INX
C1/B074:	E8         	INX
C1/B075:	E0 40 00   	CPX #$0040
C1/B078:	D0 EC      	BNE $B066
C1/B07A:	7B         	TDC
C1/B07B:	E2 20      	SEP #$20           ; 8-bit A
C1/B07D:	60         	RTS

C1/B07E:	20 ED 1F   	JSR $1FED          ; fill BG tile data buffer w/ $01EE
C1/B081:	20 F9 B0   	JSR $B0F9          ; move BG tile buffer to BG3 VRAM
C1/B084:	6B         	RTL

; Post-animation clean-up [?]

C1/B085:	A9 FF      	LDA #$FF           ; full bitmask
C1/B087:	8D AB 60   	STA $60AB          ; show all monsters [?]
C1/B08A:	20 8A C3   	JSR $C38A          ; set max sprite priority for all entities
C1/B08D:	9C 67 7B   	STZ $7B67          ; clear "hide BG1 monster sprites" [?]
C1/B090:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/B093:	20 59 1E   	JSR $1E59          ; fill VRAM Battle BG1 tiles w/ $02EE
C1/B096:	20 ED 1F   	JSR $1FED          ; fill BG tile data buffer w/ $01EE
C1/B099:	20 F9 B0   	JSR $B0F9          ; move BG tile buffer to BG3 VRAM
C1/B09C:	7B         	TDC                ; A = 0000
C1/B09D:	AA         	TAX                ; X = 0000
C1/B09E:	8E B4 64   	STX $64B4          ; zero BG1 horizontal scroll
C1/B0A1:	8E B6 64   	STX $64B6          ; zero BG1 vertical scroll
C1/B0A4:	A9 17      	LDA #$17
C1/B0A6:	8D 8D 89   	STA $898D          ; HDMA main screen designation [?]
C1/B0A9:	AD 6F 89   	LDA $896F          ; HDMA screen mode [?]
C1/B0AC:	29 AF      	AND #$AF
C1/B0AE:	09 08      	ORA #$08
C1/B0B0:	8D 6F 89   	STA $896F          ; [?]
C1/B0B3:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/B0B6:	7B         	TDC                ; A = 0000
C1/B0B7:	AA         	TAX                ; X = 0000
C1/B0B8:	86 10      	STX $10            ; 
C1/B0BA:	8E B4 64   	STX $64B4          ; zero BG1 horizontal scroll (again) [?]
C1/B0BD:	8E B6 64   	STX $64B6          ; zero BG1 vertical scroll (again) [?]
C1/B0C0:	8E F5 4A   	STX $4AF5          ; zero HDMA BG3 scroll data [?]
C1/B0C3:	8E F7 4A   	STX $4AF7          ; zero HDMA BG3 scroll data [?]
C1/B0C6:	20 3C C2   	JSR $C23C          ; clear subscreen window mask
C1/B0C9:	A9 33      	LDA #$33
C1/B0CB:	8F 23 21 00	STA $002123        ; turn on inverted BG1/2 window mask [?]
C1/B0CF:	8F 24 21 00	STA $002124        ; turn on inverted BG3/4 window mask [?]
C1/B0D3:	9C 1B 96   	STZ $961B          ; zero "circle shape" [?]
C1/B0D6:	22 4B FA C2	JSL $C2FA4B        ; reset window mask position buffer [?]
C1/B0DA:	A9 FF      	LDA #$FF           ; full bitmask
C1/B0DC:	8D AB 60   	STA $60AB          ; show all monster sprites [?]
C1/B0DF:	AD 7D 62   	LDA $627D          ; animation data init function [?]
C1/B0E2:	30 0F      	BMI $B0F3          ; branch if BG1 target [?]
C1/B0E4:	C9 6B      	CMP #$6B
C1/B0E6:	F0 08      	BEQ $B0F0
C1/B0E8:	C9 45      	CMP #$45
C1/B0EA:	F0 04      	BEQ $B0F0
C1/B0EC:	C9 0B      	CMP #$0B
C1/B0EE:	D0 03      	BNE $B0F3

C1/B0F0:	20 5A AF   	JSR $AF5A          ; process animation funcs $6B,$45,$0B [?]
C1/B0F3:	A9 17      	LDA #$17
C1/B0F5:	8D 8D 89   	STA $898D          ; main screen designation [?]
C1/B0F8:	60         	RTS

; Move tile buffer to Battlefield BG3 Tile VRAM

C1/B0F9:	A2 00 04   	LDX #$0400        ; BG3 tile data buffer size
C1/B0FC:	86 10      	STX $10           ; VRAM data length
C1/B0FE:	A2 7F A9   	LDX #$A97F        ; VRAM source offset (BG tile buffer)
C1/B101:	A9 7E      	LDA #$7E          ; VRAM source bank
C1/B103:	A0 00 54   	LDY #$5400        ; VRAM destination (Battlefield BG3 tiles)
C1/B106:	4C 8D 19   	JMP $198D         ; initialize VRAM DMA transfer

C1/B109:	20 0D B1   	JSR $B10D
C1/B10C:	6B         	RTL

C1/B10D:	20 1E B1   	JSR $B11E
C1/B110:	A2 00 08   	LDX #$0800
C1/B113:	86 10      	STX $10
C1/B115:	A2 3F AE   	LDX #$AE3F
C1/B118:	A9 7E      	LDA #$7E
C1/B11A:	20 8D 19   	JSR $198D         ; initialize VRAM DMA transfer
C1/B11D:	60         	RTS

C1/B11E:	C2 20      	REP #$20
C1/B120:	7B         	TDC
C1/B121:	AA         	TAX
C1/B122:	A9 EE 02   	LDA #$02EE
C1/B125:	9D 3F AE   	STA $AE3F,X
C1/B128:	9D 3F B0   	STA $B03F,X
C1/B12B:	9D 3F B2   	STA $B23F,X
C1/B12E:	9D 3F B4   	STA $B43F,X
C1/B131:	E8         	INX
C1/B132:	E8         	INX
C1/B133:	E0 00 02   	CPX #$0200
C1/B136:	D0 ED      	BNE $B125
C1/B138:	7B         	TDC
C1/B139:	E2 20      	SEP #$20           ; 8-bit A
C1/B13B:	60         	RTS

C1/B13C:	AD 7D 62   	LDA $627D
C1/B13F:	10 50      	BPL $B191
C1/B141:	48         	PHA
C1/B142:	20 8A C3   	JSR $C38A          ; set max sprite priority for all entities
C1/B145:	9C 67 7B   	STZ $7B67
C1/B148:	AD 6F 89   	LDA $896F
C1/B14B:	29 EF      	AND #$EF
C1/B14D:	09 40      	ORA #$40
C1/B14F:	8D 6F 89   	STA $896F
C1/B152:	A9 FF      	LDA #$FF
C1/B154:	8D AB 60   	STA $60AB
C1/B157:	A0 00 0C   	LDY #$0C00
C1/B15A:	20 0D B1   	JSR $B10D
C1/B15D:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/B160:	A9 0C      	LDA #$0C
C1/B162:	8D 71 89   	STA $8971
C1/B165:	20 59 1E   	JSR $1E59          ; fill VRAM Battle BG1 tiles w/ $02EE
C1/B168:	20 F9 B0   	JSR $B0F9          ; move BG tile buffer to BG3 VRAM
C1/B16B:	7B         	TDC
C1/B16C:	AA         	TAX
C1/B16D:	8E B4 64   	STX $64B4
C1/B170:	8E B6 64   	STX $64B6
C1/B173:	8E F5 4A   	STX $4AF5
C1/B176:	8E F7 4A   	STX $4AF7
C1/B179:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/B17C:	20 79 1E   	JSR $1E79
C1/B17F:	20 26 1F   	JSR $1F26          ; set battlefield BG1 tiles in VRAM
C1/B182:	A9 01      	LDA #$01
C1/B184:	8D 67 7B   	STA $7B67
C1/B187:	8D 0E 7B   	STA $7B0E
C1/B18A:	8D 0F 7B   	STA $7B0F
C1/B18D:	68         	PLA
C1/B18E:	4C BB B1   	JMP $B1BB

C1/B191:	48         	PHA
C1/B192:	AD 67 61   	LDA $6167
C1/B195:	20 26 9C   	JSR $9C26
C1/B198:	20 59 1E   	JSR $1E59          ; fill VRAM Battle BG1 tiles w/ $02EE
C1/B19B:	20 ED 1F   	JSR $1FED          ; fill BG tile data buffer w/ $01EE
C1/B19E:	20 F9 B0   	JSR $B0F9          ; move BG tile buffer to BG3 VRAM
C1/B1A1:	7B         	TDC
C1/B1A2:	AA         	TAX
C1/B1A3:	8E B4 64   	STX $64B4
C1/B1A6:	8E B6 64   	STX $64B6
C1/B1A9:	8E F5 4A   	STX $4AF5
C1/B1AC:	8E F7 4A   	STX $4AF7
C1/B1AF:	AD 6F 89   	LDA $896F
C1/B1B2:	09 50      	ORA #$50
C1/B1B4:	8D 6F 89   	STA $896F
C1/B1B7:	20 F5 C3   	JSR $C3F5          ; reduce priority of target sprite
C1/B1BA:	68         	PLA
C1/B1BB:	22 D0 E8 C2	JSL $C2E8D0
C1/B1BF:	60         	RTS

C1/B1C0:	20 C4 B1   	JSR $B1C4
C1/B1C3:	6B         	RTL

C1/B1C4:	8E F6 7A   	STX $7AF6
C1/B1C7:	A9 FF      	LDA #$FF
C1/B1C9:	8D 7E 60   	STA $607E
C1/B1CC:	8D 7F 60   	STA $607F
C1/B1CF:	9C 82 60   	STZ $6082
C1/B1D2:	9C 83 60   	STZ $6083
C1/B1D5:	AD 3F 61   	LDA $613F
C1/B1D8:	85 12      	STA $12
C1/B1DA:	9C A9 60   	STZ $60A9
C1/B1DD:	A9 01      	LDA #$01
C1/B1DF:	85 1A      	STA $1A
C1/B1E1:	85 1C      	STA $1C
C1/B1E3:	A6 22      	LDX $22
C1/B1E5:	DA         	PHX
C1/B1E6:	A6 24      	LDX $24
C1/B1E8:	DA         	PHX
C1/B1E9:	20 99 B3   	JSR $B399        ; clear out animation thread
C1/B1EC:	AE F6 7A   	LDX $7AF6
C1/B1EF:	C2 20      	REP #$20
C1/B1F1:	A5 22      	LDA $22
C1/B1F3:	9D 2F 6A   	STA $6A2F,X
C1/B1F6:	A5 24      	LDA $24
C1/B1F8:	85 22      	STA $22
C1/B1FA:	1A         	INC A
C1/B1FB:	1A         	INC A
C1/B1FC:	AE F6 7A   	LDX $7AF6
C1/B1FF:	9D 31 6A   	STA $6A31,X
C1/B202:	7B         	TDC
C1/B203:	E2 20      	SEP #$20           ; 8-bit A
C1/B205:	4C D0 B2   	JMP $B2D0

C1/B208:	AD 7D 62   	LDA $627D        ; animation init function id
C1/B20B:	C9 18      	CMP #$18
C1/B20D:	D0 09      	BNE $B218        ; branch if not id $18 [?]
C1/B20F:	C2 20      	REP #$20         ; 16-bit A
C1/B211:	8A         	TXA              ; attacker's animation thread offset
C1/B212:	18         	CLC              ; prep add
C1/B213:	69 60 00   	ADC #$0060       ; get attacker's 7th animation thread
C1/B216:	80 07      	BRA $B21F

C1/B218:	C2 20      	REP #$20         ; 16-bit A
C1/B21A:	8A         	TXA              ; attacker's animation thread offset
C1/B21B:	18         	CLC              ; prep add
C1/B21C:	69 10 00   	ADC #$0010       ; get attacker's 2nd animation thread

C1/B21F:	AA         	TAX              ; index it
C1/B220:	7B         	TDC              ; A = 0000
C1/B221:	E2 20      	SEP #$20         ; 8-bit A
C1/B223:	8E F6 7A   	STX $7AF6        ; current animation thread offset
C1/B226:	A9 FF      	LDA #$FF         ; full bitmask
C1/B228:	8D 7E 60   	STA $607E        ; all character targets possible
C1/B22B:	8D 7F 60   	STA $607F        ; all monster targets possible
C1/B22E:	AD 3F 61   	LDA $613F        ; animation target (thread starting position)
C1/B231:	85 12      	STA $12          ; save target
C1/B233:	A9 08      	LDA #$08
C1/B235:	8D A9 60   	STA $60A9        ; set 8-frame multi-target delay
C1/B238:	A9 03      	LDA #$03
C1/B23A:	85 1A      	STA $1A          ; flag "active" and "extra" thread
C1/B23C:	80 66      	BRA $B2A4

; Prepare animation thread(s) for execution (maybe multiple?)

C1/B23E:	AD 80 62   	LDA $6280        ; animation data's multi-target delay
C1/B241:	8D A9 60   	STA $60A9        ; save for animation threads
C1/B244:	AD 7D 62   	LDA $627D        ; animation init function id
                                       ; (from source spell animation data (9CCE)
C1/B247:	29 7F      	AND #$7F         ; mask "BG1 target, not graphics" flag
C1/B249:	C9 05      	CMP #$05         ; [?]
C1/B24B:	D0 02      	BNE $B24F        ; branch if not ^
C1/B24D:	80 04      	BRA $B253
C1/B24F:	C9 02      	CMP #$02         ; [?]
C1/B251:	D0 27      	BNE $B27A        ; branch if not ^

C1/B253:	DA         	PHX              ; store animation thread offset
C1/B254:	DA         	PHX              ; store animation thread offset again
C1/B255:	20 7A B2   	JSR $B27A
C1/B258:	C2 20      	REP #$20         ; 16-bit A
C1/B25A:	68         	PLA              ; animation thread offset
C1/B25B:	18         	CLC              ; prep add
C1/B25C:	69 40 00   	ADC #$0040       ; point to entity's 5th thread [?]
C1/B25F:	AA         	TAX              ; index it
C1/B260:	7B         	TDC              ; A = 0000
C1/B261:	E2 20      	SEP #$20         ; 8-bit A
C1/B263:	DA         	PHX              ; store this animation thread offset [?]
C1/B264:	20 7A B2   	JSR $B27A
C1/B267:	C2 20      	REP #$20         ; 16-bit A
C1/B269:	68         	PLA              ; get current animation thread offset
C1/B26A:	18         	CLC              ; prep add
C1/B26B:	69 10 00   	ADC #$0010       ; point to entity's 6th thread [?]
C1/B26E:	AA         	TAX              ; index it
C1/B26F:	7B         	TDC              ; A = 0000
C1/B270:	E2 20      	SEP #$20         ; 8-bit A
C1/B272:	20 7A B2   	JSR $B27A
C1/B275:	FA         	PLX              ; restore first animation thread offset
C1/B276:	8E F6 7A   	STX $7AF6        ; save it (again)
C1/B279:	60         	RTS

; Prepare animation thread for execution (single)

C1/B27A:	8E F6 7A   	STX $7AF6        ; offset to this animation thread
C1/B27D:	AD 84 60   	LDA $6084        ; # of active threads [?]
C1/B280:	18         	CLC              ; prep add
C1/B281:	69 08      	ADC #$08
C1/B283:	8D 84 60   	STA $6084        ; add 8 more threads [?]
C1/B286:	AD 40 61   	LDA $6140        ; current entity
C1/B289:	85 10      	STA $10          ; save it
C1/B28B:	AD D1 62   	LDA $62D1        ; reflection or super ball [?]
C1/B28E:	F0 05      	BEQ $B295        ; branch if not
C1/B290:	AD 3F 61   	LDA $613F        ; target maybe [?]
C1/B293:	80 09      	BRA $B29E

C1/B295:	AD 3F 61   	LDA $613F        ; target maybe [?]
C1/B298:	C9 04      	CMP #$04         ; monster range
C1/B29A:	90 02      	BCC $B29E        ; branch if character
C1/B29C:	09 80      	ORA #$80         ; else set "is monster" flag

C1/B29E:	85 12      	STA $12          ; store it (as target) [?]
C1/B2A0:	A9 01      	LDA #$01         ; "active" animation thread
C1/B2A2:	85 1A      	STA $1A          ; pending thread state update "active"

C1/B2A4:	A9 D0      	LDA #$D0
C1/B2A6:	85 26      	STA $26          ; set animation data bank $D0
C1/B2A8:	A6 22      	LDX $22          ; animation frame dimensions
C1/B2AA:	DA         	PHX              ; store them (in case multi-thread?)
C1/B2AB:	A6 24      	LDX $24          ; animation sprite script id
C1/B2AD:	DA         	PHX              ; store it (in case multi-thread?)
C1/B2AE:	20 99 B3   	JSR $B399        ; delete leftover animation thread
C1/B2B1:	AE F6 7A   	LDX $7AF6        ; animation thread offset
C1/B2B4:	C2 20      	REP #$20         ; 16-bit A
C1/B2B6:	A5 22      	LDA $22          ; animation frame dimensions
C1/B2B8:	9D 2F 6A   	STA $6A2F,X      ; set fresh thread's width/height
C1/B2BB:	A5 24      	LDA $24          ; animation sprite script id
C1/B2BD:	0A         	ASL A            ; x2
C1/B2BE:	AA         	TAX              ; index it
C1/B2BF:	BF D8 EA D1	LDA $D1EAD8,X    ; animation sprite data pointer
C1/B2C3:	85 22      	STA $22          ; set sprite data pointer
C1/B2C5:	1A         	INC A
C1/B2C6:	1A         	INC A            ; skip first two bytes of data
C1/B2C7:	AE F6 7A   	LDX $7AF6        ; refresh animation thread offset
C1/B2CA:	9D 31 6A   	STA $6A31,X      ; thread's script pointer
C1/B2CD:	7B         	TDC              ; A = 0000
C1/B2CE:	E2 20      	SEP #$20         ; 8-bit A
C1/B2D0:	AD 7E 60   	LDA $607E        ; not-missed targets (shifted)
C1/B2D3:	29 01      	AND #$01         ; current entity bit
C1/B2D5:	9D D4 74   	STA $74D4,X      ; flag target as "hit"
C1/B2D8:	A9 06      	LDA #$06
C1/B2DA:	9D D5 74   	STA $74D5,X      ; thread palette index [?]
C1/B2DD:	A5 26      	LDA $26
C1/B2DF:	85 24      	STA $24          ; copy animation data bank
C1/B2E1:	9D 33 6A   	STA $6A33,X      ; thread's script pointer bank
C1/B2E4:	A7 22      	LDA [$22]        ; first byte of animation script
C1/B2E6:	4A         	LSR A
C1/B2E7:	4A         	LSR A
C1/B2E8:	4A         	LSR A
C1/B2E9:	4A         	LSR A            ; shift >>> 4
C1/B2EA:	1A         	INC A            ; top nibble + 1
C1/B2EB:	9D 34 6A   	STA $6A34,X      ; set animation speed
C1/B2EE:	A5 1C      	LDA $1C          ; current animation frame
C1/B2F0:	9D 35 6A   	STA $6A35,X      ; animation frame counter [?]
C1/B2F3:	A5 1C      	LDA $1C
C1/B2F5:	18         	CLC              ; prep add
C1/B2F6:	6D A9 60   	ADC $60A9        ; add multi-target delay
C1/B2F9:	85 1C      	STA $1C          ; update frame counter
C1/B2FB:	9E 36 6A   	STZ $6A36,X      ; zero thread index [?]
C1/B2FE:	A9 40      	LDA #$40
C1/B300:	9D 37 6A   	STA $6A37,X      ; sprite graphic index [?]
C1/B303:	A5 10      	LDA $10          ; current entity (animation source [?])
C1/B305:	9D 38 6A   	STA $6A38,X      ; thread's attacker index [?]
C1/B308:	A5 12      	LDA $12          ; current target [?]
C1/B30A:	9D 39 6A   	STA $6A39,X      ; thread's target index [?]
C1/B30D:	20 8E C4   	JSR $C48E        ; ??????????????
C1/B310:	C2 20      	REP #$20         ; 16-bit A
C1/B312:	A5 14      	LDA $14
C1/B314:	9D 82 6F   	STA $6F82,X      ; thread target's X position
C1/B317:	9D 3A 6A   	STA $6A3A,X      ; thread X position
C1/B31A:	A5 16      	LDA $16
C1/B31C:	9D 84 6F   	STA $6F84,X      ; thread target's Y position
C1/B31F:	9D 3C 6A   	STA $6A3C,X      ; thread Y position
C1/B322:	7B         	TDC              ; A = 0000
C1/B323:	E2 20      	SEP #$20         ; 8-bit A
C1/B325:	20 99 C4   	JSR $C499        ; ????????????
C1/B328:	C2 20      	REP #$20         ; 16-bit A
C1/B32A:	A5 14      	LDA $14
C1/B32C:	9D 7E 6F   	STA $6F7E,X      ; thread attacker's X position
C1/B32F:	A5 16      	LDA $16
C1/B331:	9D 80 6F   	STA $6F80,X      ; thread attacker's Y position
C1/B334:	7B         	TDC              ; A = 0000
C1/B335:	E2 20      	SEP #$20         ; 8-bit A
C1/B337:	A9 30      	LDA #$30         ; max sprite priority
C1/B339:	9D 86 6F   	STA $6F86,X      ; set thread's priority to max
C1/B33C:	DA         	PHX              ; store thread offset
C1/B33D:	20 89 BC   	JSR $BC89        ; set attacker index in $10
C1/B340:	FA         	PLX              ; restore thread offset
C1/B341:	A5 10      	LDA $10          ; attacker index
C1/B343:	10 11      	BPL $B356        ; branch if character
C1/B345:	29 0F      	AND #$0F         ; mask "is monster" bit
C1/B347:	38         	SEC              ; prep minus
C1/B348:	E9 04      	SBC #$04         ; get 0-5 monster id
C1/B34A:	0A         	ASL A            ; x2
C1/B34B:	A8         	TAY              ; index it
C1/B34C:	B9 F3 80   	LDA $80F3,Y      ; horizontal flip (buffer)
C1/B34F:	59 7E 61   	EOR $617E,Y      ; toggle with horizontal flip
C1/B352:	49 01      	EOR #$01         ; toggle again (monsters face opposite)
C1/B354:	80 04      	BRA $B35A

C1/B356:	A8         	TAY              ; index attacker index
C1/B357:	B9 10 7B   	LDA $7B10,Y      ; character is facing right

C1/B35A:	0A         	ASL A
C1/B35B:	0A         	ASL A
C1/B35C:	0A         	ASL A
C1/B35D:	0A         	ASL A
C1/B35E:	0A         	ASL A
C1/B35F:	0A         	ASL A            ; shift 6 <<
C1/B360:	29 40      	AND #$40         ; isolate "horizontal flip" in bit 6
C1/B362:	9D 87 6F   	STA $6F87,X      ; animation thread direction
C1/B365:	A5 12      	LDA $12          ; target id [?]
C1/B367:	30 0C      	BMI $B375        ; branch if monster
C1/B369:	A9 02      	LDA #$02         ; character tile width
C1/B36B:	9D D2 74   	STA $74D2,X      ; store thread target's width
C1/B36E:	A9 03      	LDA #$03         ; character tile height
C1/B370:	9D D3 74   	STA $74D3,X      ; store thread target's height
C1/B373:	80 13      	BRA $B388

C1/B375:	29 7F      	AND #$7F         ; mask "is monster" bit
C1/B377:	38         	SEC              ; prep minus
C1/B378:	E9 04      	SBC #$04         ; get 0-5 monster id
C1/B37A:	0A         	ASL A            ; x2
C1/B37B:	A8         	TAY              ; index it
C1/B37C:	B9 2F 81   	LDA $812F,Y      ; monster sprite width
C1/B37F:	9D D2 74   	STA $74D2,X      ; store thread target's width
C1/B382:	B9 30 81   	LDA $8130,Y      ; monster sprite height
C1/B385:	9D D3 74   	STA $74D3,X      ; store thread target's height

C1/B388:	A9 01      	LDA #$01
C1/B38A:	9D 8D 6F   	STA $6F8D,X      ; initialize frame offset counter to 1
C1/B38D:	A5 1A      	LDA $1A
C1/B38F:	9D 2E 6A   	STA $6A2E,X      ; set thread "active"
C1/B392:	FA         	PLX              ; restore animation script id
C1/B393:	86 24      	STX $24          ; save it
C1/B395:	FA         	PLX              ; restore animation dimensions
C1/B396:	86 22      	STX $22          ; save them
C1/B398:	60         	RTS

; Clear out animation thread

C1/B399:	AE F6 7A   	LDX $7AF6         ; animation thread offset
C1/B39C:	A0 10 00   	LDY #$0010        ; prepare loop
C1/B39F:	9E 2E 6A   	STZ $6A2E,X       ; zero entire animation thread
C1/B3A2:	9E 7E 6F   	STZ $6F7E,X
C1/B3A5:	9E CE 74   	STZ $74CE,X
C1/B3A8:	9E DE 64   	STZ $64DE,X
C1/B3AB:	E8         	INX
C1/B3AC:	88         	DEY               ; loop 16 times
C1/B3AD:	D0 F0      	BNE $B39F         ; continue loop
C1/B3AF:	60         	RTS

C1/B3B0:	9C B6 62   	STZ $62B6
C1/B3B3:	9C B9 62   	STZ $62B9
C1/B3B6:	9C BB 62   	STZ $62BB
C1/B3B9:	9C BC 62   	STZ $62BC
C1/B3BC:	20 5B 18   	JSR $185B     ; random number
C1/B3BF:	29 7F      	AND #$7F
C1/B3C1:	18         	CLC
C1/B3C2:	69 80      	ADC #$80
C1/B3C4:	8D B8 62   	STA $62B8
C1/B3C7:	8D BA 62   	STA $62BA
C1/B3CA:	EE B5 62   	INC $62B5
C1/B3CD:	60         	RTS

C1/B3CE:	AD B5 62   	LDA $62B5
C1/B3D1:	F0 69      	BEQ $B43C
C1/B3D3:	64 3A      	STZ $3A
C1/B3D5:	7B         	TDC
C1/B3D6:	AA         	TAX
C1/B3D7:	BD BD 2E   	LDA $2EBD,X
C1/B3DA:	0A         	ASL A
C1/B3DB:	66 3A      	ROR $3A
C1/B3DD:	8A         	TXA
C1/B3DE:	18         	CLC
C1/B3DF:	69 20      	ADC #$20
C1/B3E1:	AA         	TAX
C1/B3E2:	E0 80 00   	CPX #$0080
C1/B3E5:	D0 F0      	BNE $B3D7
C1/B3E7:	A5 3A      	LDA $3A
C1/B3E9:	4A         	LSR A
C1/B3EA:	4A         	LSR A
C1/B3EB:	4A         	LSR A
C1/B3EC:	4A         	LSR A
C1/B3ED:	49 FF      	EOR #$FF
C1/B3EF:	85 3A      	STA $3A
C1/B3F1:	AD 1D 20   	LDA $201D
C1/B3F4:	2D AC 61   	AND $61AC
C1/B3F7:	2D AD 61   	AND $61AD
C1/B3FA:	2D 93 61   	AND $6193
C1/B3FD:	85 36      	STA $36
C1/B3FF:	A5 92      	LDA $92
C1/B401:	25 3A      	AND $3A
C1/B403:	05 36      	ORA $36
C1/B405:	F0 35      	BEQ $B43C
C1/B407:	AD B9 62   	LDA $62B9
C1/B40A:	F0 15      	BEQ $B421
C1/B40C:	A5 0E      	LDA $0E
C1/B40E:	29 01      	AND #$01
C1/B410:	F0 2A      	BEQ $B43C
C1/B412:	CE B7 62   	DEC $62B7
C1/B415:	D0 22      	BNE $B439
C1/B417:	AE BB 62   	LDX $62BB
C1/B41A:	8E 42 2F   	STX $2F42
C1/B41D:	9C B5 62   	STZ $62B5
C1/B420:	60         	RTS

C1/B421:	AD B6 62   	LDA $62B6
C1/B424:	F0 19      	BEQ $B43F
C1/B426:	A5 0E      	LDA $0E
C1/B428:	29 07      	AND #$07
C1/B42A:	D0 6F      	BNE $B49B
C1/B42C:	CE B7 62   	DEC $62B7
C1/B42F:	D0 2A      	BNE $B45B
C1/B431:	EE B9 62   	INC $62B9
C1/B434:	A9 20      	LDA #$20
C1/B436:	8D B7 62   	STA $62B7
C1/B439:	4C 9B B4   	JMP $B49B

C1/B43C:	4C 16 B5   	JMP $B516

C1/B43F:	AD BA 62   	LDA $62BA
C1/B442:	D0 0E      	BNE $B452
C1/B444:	20 5B 18   	JSR $185B     ; random number
C1/B447:	29 07      	AND #$07
C1/B449:	18         	CLC
C1/B44A:	69 08      	ADC #$08
C1/B44C:	8D B7 62   	STA $62B7
C1/B44F:	EE B6 62   	INC $62B6

C1/B452:	CE BA 62   	DEC $62BA
C1/B455:	A5 0E      	LDA $0E
C1/B457:	29 03      	AND #$03
C1/B459:	D0 40      	BNE $B49B
C1/B45B:	EE B8 62   	INC $62B8
C1/B45E:	AD B8 62   	LDA $62B8
C1/B461:	29 08      	AND #$08
C1/B463:	F0 22      	BEQ $B487
C1/B465:	AD B8 62   	LDA $62B8
C1/B468:	29 07      	AND #$07
C1/B46A:	AA         	TAX
C1/B46B:	AD 1D 20   	LDA $201D
C1/B46E:	2D AC 61   	AND $61AC
C1/B471:	2D AD 61   	AND $61AD
C1/B474:	2D 93 61   	AND $6193
C1/B477:	25 3A      	AND $3A
C1/B479:	3F 01 1A C1	AND $C11A01,X
C1/B47D:	F0 DC      	BEQ $B45B
C1/B47F:	8D BB 62   	STA $62BB
C1/B482:	9C BC 62   	STZ $62BC
C1/B485:	80 14      	BRA $B49B
C1/B487:	AD B8 62   	LDA $62B8
C1/B48A:	29 07      	AND #$07
C1/B48C:	AA         	TAX
C1/B48D:	A5 92      	LDA $92
C1/B48F:	3F 01 1A C1	AND $C11A01,X
C1/B493:	F0 C6      	BEQ $B45B
C1/B495:	8D BC 62   	STA $62BC
C1/B498:	9C BB 62   	STZ $62BB
C1/B49B:	A2 E0 38   	LDX #$38E0
C1/B49E:	86 3A      	STX $3A
C1/B4A0:	AD BB 62   	LDA $62BB
C1/B4A3:	F0 30      	BEQ $B4D5
C1/B4A5:	20 0F 1A   	JSR $1A0F
C1/B4A8:	0A         	ASL A
C1/B4A9:	AA         	TAX
C1/B4AA:	BD 9F 80   	LDA $809F,X
C1/B4AD:	F0 04      	BEQ $B4B3
C1/B4AF:	A9 78      	LDA #$78
C1/B4B1:	85 3B      	STA $3B
C1/B4B3:	BD 88 80   	LDA $8088,X
C1/B4B6:	29 01      	AND #$01
C1/B4B8:	D0 13      	BNE $B4CD
C1/B4BA:	BD 94 80   	LDA $8094,X
C1/B4BD:	29 01      	AND #$01
C1/B4BF:	D0 0C      	BNE $B4CD
C1/B4C1:	BD 87 80   	LDA $8087,X
C1/B4C4:	85 36      	STA $36
C1/B4C6:	BD 93 80   	LDA $8093,X
C1/B4C9:	85 37      	STA $37
C1/B4CB:	80 33      	BRA $B500
C1/B4CD:	A9 E0      	LDA #$E0
C1/B4CF:	85 36      	STA $36
C1/B4D1:	85 37      	STA $37
C1/B4D3:	80 2B      	BRA $B500
C1/B4D5:	AD BC 62   	LDA $62BC
C1/B4D8:	F0 3C      	BEQ $B516
C1/B4DA:	20 0F 1A   	JSR $1A0F
C1/B4DD:	0A         	ASL A
C1/B4DE:	AA         	TAX
C1/B4DF:	BD 7B 80   	LDA $807B,X
C1/B4E2:	F0 04      	BEQ $B4E8
C1/B4E4:	A9 78      	LDA #$78
C1/B4E6:	85 3B      	STA $3B
C1/B4E8:	BD 64 80   	LDA $8064,X
C1/B4EB:	29 01      	AND #$01
C1/B4ED:	D0 DE      	BNE $B4CD
C1/B4EF:	BD 70 80   	LDA $8070,X
C1/B4F2:	29 01      	AND #$01
C1/B4F4:	D0 D7      	BNE $B4CD
C1/B4F6:	BD 63 80   	LDA $8063,X
C1/B4F9:	85 36      	STA $36
C1/B4FB:	BD 6F 80   	LDA $806F,X
C1/B4FE:	85 37      	STA $37
C1/B500:	A5 71      	LDA $71
C1/B502:	C2 20      	REP #$20
C1/B504:	0A         	ASL A
C1/B505:	0A         	ASL A
C1/B506:	AA         	TAX
C1/B507:	A5 36      	LDA $36
C1/B509:	9D 00 03   	STA $0300,X
C1/B50C:	A5 3A      	LDA $3A
C1/B50E:	9D 02 03   	STA $0302,X
C1/B511:	7B         	TDC
C1/B512:	E2 20      	SEP #$20           ; 8-bit A
C1/B514:	E6 71      	INC $71
C1/B516:	60         	RTS

C1/B517:	7B         	TDC
C1/B518:	AA         	TAX
C1/B519:	A9 38      	LDA #$38
C1/B51B:	9D E6 88   	STA $88E6,X
C1/B51E:	E8         	INX
C1/B51F:	E8         	INX
C1/B520:	E8         	INX
C1/B521:	E8         	INX
C1/B522:	E0 28 00   	CPX #$0028
C1/B525:	D0 F4      	BNE $B51B
C1/B527:	A2 E0 E0   	LDX #$E0E0
C1/B52A:	8E 6F 7A   	STX $7A6F
C1/B52D:	A2 E0 E2   	LDX #$E2E0
C1/B530:	8E 71 7A   	STX $7A71
C1/B533:	60         	RTS

C1/B534:	E238
C1/B536:	E278
C1/B538:	E238
C1/B53A:	E4B8
C1/B53C:	E238
C1/B53E:	E438

C1/B540:	E2 10      	SEP #$10
C1/B542:	AD BE 62   	LDA $62BE
C1/B545:	D0 4E      	BNE $B595
C1/B547:	AD BD 62   	LDA $62BD
C1/B54A:	D0 49      	BNE $B595
C1/B54C:	AD 2F 63   	LDA $632F
C1/B54F:	F0 44      	BEQ $B595
C1/B551:	AD CA 62   	LDA $62CA
C1/B554:	0A         	ASL A
C1/B555:	0A         	ASL A
C1/B556:	0A         	ASL A
C1/B557:	0A         	ASL A
C1/B558:	0A         	ASL A
C1/B559:	AA         	TAX
C1/B55A:	C2 10      	REP #$10
C1/B55C:	20 A5 34   	JSR $34A5
C1/B55F:	E2 10      	SEP #$10
C1/B561:	AD CA 62   	LDA $62CA
C1/B564:	0A         	ASL A
C1/B565:	AA         	TAX
C1/B566:	BD 34 80   	LDA $8034,X
C1/B569:	29 01      	AND #$01
C1/B56B:	D0 28      	BNE $B595
C1/B56D:	BD 3C 80   	LDA $803C,X
C1/B570:	29 01      	AND #$01
C1/B572:	D0 21      	BNE $B595
C1/B574:	BD 33 80   	LDA $8033,X
C1/B577:	38         	SEC
C1/B578:	E9 08      	SBC #$08
C1/B57A:	8D 18 03   	STA $0318
C1/B57D:	BD 3B 80   	LDA $803B,X
C1/B580:	38         	SEC
C1/B581:	E9 18      	SBC #$18
C1/B583:	18         	CLC
C1/B584:	65 38      	ADC $38
C1/B586:	8D 19 03   	STA $0319
C1/B589:	A9 2E      	LDA #$2E
C1/B58B:	8D 1A 03   	STA $031A
C1/B58E:	A9 28      	LDA #$28
C1/B590:	8D 1B 03   	STA $031B
C1/B593:	80 08      	BRA $B59D
C1/B595:	A9 E0      	LDA #$E0
C1/B597:	8D 18 03   	STA $0318
C1/B59A:	8D 19 03   	STA $0319
C1/B59D:	AD AF 7B   	LDA $7BAF      ; item menu cursor frozen
C1/B5A0:	F0 22      	BEQ $B5C4
C1/B5A2:	AD B0 7B   	LDA $7BB0
C1/B5A5:	8D E8 88   	STA $88E8
C1/B5A8:	A9 01      	LDA #$01
C1/B5AA:	8D E7 88   	STA $88E7
C1/B5AD:	C2 10      	REP #$10
C1/B5AF:	AE B1 7B   	LDX $7BB1
C1/B5B2:	EC B3 7B   	CPX $7BB3
C1/B5B5:	90 0D      	BCC $B5C4
C1/B5B7:	E0 CA 00   	CPX #$00CA
C1/B5BA:	B0 08      	BCS $B5C4
C1/B5BC:	AD B1 7B   	LDA $7BB1
C1/B5BF:	8D E9 88   	STA $88E9
C1/B5C2:	80 03      	BRA $B5C7
C1/B5C4:	9C E7 88   	STZ $88E7
C1/B5C7:	E2 10      	SEP #$10
C1/B5C9:	9C EB 88   	STZ $88EB
C1/B5CC:	AD B5 7B   	LDA $7BB5      ; equip menu cursor frozen
C1/B5CF:	F0 0F      	BEQ $B5E0
C1/B5D1:	AD B6 7B   	LDA $7BB6
C1/B5D4:	8D EC 88   	STA $88EC
C1/B5D7:	EE EB 88   	INC $88EB
C1/B5DA:	AD B7 7B   	LDA $7BB7
C1/B5DD:	8D ED 88   	STA $88ED
C1/B5E0:	7B         	TDC
C1/B5E1:	AA         	TAX
C1/B5E2:	A8         	TAY
C1/B5E3:	B9 E3 88   	LDA $88E3,Y
C1/B5E6:	D0 0A      	BNE $B5F2
C1/B5E8:	A9 E0      	LDA #$E0
C1/B5EA:	99 F0 04   	STA $04F0,Y
C1/B5ED:	99 F1 04   	STA $04F1,Y
C1/B5F0:	80 18      	BRA $B60A
C1/B5F2:	B9 E4 88   	LDA $88E4,Y
C1/B5F5:	99 F0 04   	STA $04F0,Y
C1/B5F8:	B9 E5 88   	LDA $88E5,Y
C1/B5FB:	99 F1 04   	STA $04F1,Y
C1/B5FE:	B9 E6 88   	LDA $88E6,Y
C1/B601:	99 F3 04   	STA $04F3,Y
C1/B604:	BD 6F 7A   	LDA $7A6F,X
C1/B607:	99 F2 04   	STA $04F2,Y
C1/B60A:	E8         	INX
C1/B60B:	C8         	INY
C1/B60C:	C8         	INY
C1/B60D:	C8         	INY
C1/B60E:	C8         	INY
C1/B60F:	C0 0C      	CPY #$0C
C1/B611:	D0 D0      	BNE $B5E3
C1/B613:	B9 E3 88   	LDA $88E3,Y
C1/B616:	D0 0A      	BNE $B622
C1/B618:	A9 E0      	LDA #$E0
C1/B61A:	99 F0 04   	STA $04F0,Y
C1/B61D:	99 F1 04   	STA $04F1,Y
C1/B620:	80 2C      	BRA $B64E
C1/B622:	B9 E4 88   	LDA $88E4,Y
C1/B625:	99 F0 04   	STA $04F0,Y
C1/B628:	B9 E5 88   	LDA $88E5,Y
C1/B62B:	99 F1 04   	STA $04F1,Y
C1/B62E:	A5 0E      	LDA $0E
C1/B630:	4A         	LSR A
C1/B631:	4A         	LSR A
C1/B632:	4A         	LSR A
C1/B633:	29 02      	AND #$02
C1/B635:	85 36      	STA $36
C1/B637:	B9 E6 88   	LDA $88E6,Y
C1/B63A:	0A         	ASL A
C1/B63B:	0A         	ASL A
C1/B63C:	18         	CLC
C1/B63D:	65 36      	ADC $36
C1/B63F:	AA         	TAX
C1/B640:	BF 34 B5 C1	LDA $C1B534,X    ; Data
C1/B644:	99 F2 04   	STA $04F2,Y
C1/B647:	BF 35 B5 C1	LDA $C1B535,X    ; Data
C1/B64B:	99 F3 04   	STA $04F3,Y

C1/B64E:	20 84 B6   	JSR $B684
C1/B651:	7B         	TDC
C1/B652:	A8         	TAY
C1/B653:	B9 F3 88   	LDA $88F3,Y
C1/B656:	D0 0A      	BNE $B662
C1/B658:	A9 E0      	LDA #$E0
C1/B65A:	99 00 03   	STA $0300,Y
C1/B65D:	99 01 03   	STA $0301,Y
C1/B660:	80 17      	BRA $B679
C1/B662:	B9 F4 88   	LDA $88F4,Y
C1/B665:	99 00 03   	STA $0300,Y
C1/B668:	B9 F5 88   	LDA $88F5,Y
C1/B66B:	99 01 03   	STA $0301,Y
C1/B66E:	B9 F6 88   	LDA $88F6,Y
C1/B671:	99 03 03   	STA $0303,Y
C1/B674:	A9 E0      	LDA #$E0
C1/B676:	99 02 03   	STA $0302,Y
C1/B679:	C8         	INY
C1/B67A:	C8         	INY
C1/B67B:	C8         	INY
C1/B67C:	C8         	INY
C1/B67D:	C0 18      	CPY #$18
C1/B67F:	D0 D2      	BNE $B653
C1/B681:	C2 10      	REP #$10
C1/B683:	60         	RTS

C1/B684:	7B         	TDC
C1/B685:	AA         	TAX
C1/B686:	A9 38      	LDA #$38
C1/B688:	9D F6 88   	STA $88F6,X
C1/B68B:	9E F3 88   	STZ $88F3,X
C1/B68E:	9D 02 89   	STA $8902,X
C1/B691:	9E FF 88   	STZ $88FF,X
C1/B694:	E8         	INX
C1/B695:	E8         	INX
C1/B696:	E8         	INX
C1/B697:	E8         	INX
C1/B698:	E0 0C      	CPX #$0C
C1/B69A:	D0 EC      	BNE $B688
C1/B69C:	AD 7F 7B   	LDA $7B7F
C1/B69F:	F0 08      	BEQ $B6A9
C1/B6A1:	A5 0E      	LDA $0E
C1/B6A3:	29 01      	AND #$01
C1/B6A5:	F0 07      	BEQ $B6AE
C1/B6A7:	80 59      	BRA $B702
C1/B6A9:	AD 7D 7B   	LDA $7B7D
C1/B6AC:	F0 54      	BEQ $B702
C1/B6AE:	7B         	TDC
C1/B6AF:	AA         	TAX
C1/B6B0:	A8         	TAY
C1/B6B1:	AD 7D 7B   	LDA $7B7D
C1/B6B4:	2D 1D 20   	AND $201D
C1/B6B7:	2D AC 61   	AND $61AC
C1/B6BA:	2D AD 61   	AND $61AD
C1/B6BD:	2D 93 61   	AND $6193
C1/B6C0:	85 36      	STA $36
C1/B6C2:	46 36      	LSR $36
C1/B6C4:	90 30      	BCC $B6F6
C1/B6C6:	B9 9F 80   	LDA $809F,Y
C1/B6C9:	F0 05      	BEQ $B6D0
C1/B6CB:	A9 78      	LDA #$78
C1/B6CD:	9D F6 88   	STA $88F6,X
C1/B6D0:	B9 88 80   	LDA $8088,Y
C1/B6D3:	29 01      	AND #$01
C1/B6D5:	D0 1F      	BNE $B6F6
C1/B6D7:	B9 94 80   	LDA $8094,Y
C1/B6DA:	29 01      	AND #$01
C1/B6DC:	D0 18      	BNE $B6F6
C1/B6DE:	B9 93 80   	LDA $8093,Y
C1/B6E1:	C9 A0      	CMP #$A0
C1/B6E3:	B0 11      	BCS $B6F6
C1/B6E5:	A9 01      	LDA #$01
C1/B6E7:	9D F3 88   	STA $88F3,X
C1/B6EA:	B9 87 80   	LDA $8087,Y
C1/B6ED:	9D F4 88   	STA $88F4,X
C1/B6F0:	B9 93 80   	LDA $8093,Y
C1/B6F3:	9D F5 88   	STA $88F5,X
C1/B6F6:	C8         	INY
C1/B6F7:	C8         	INY
C1/B6F8:	E8         	INX
C1/B6F9:	E8         	INX
C1/B6FA:	E8         	INX
C1/B6FB:	E8         	INX
C1/B6FC:	E0 18      	CPX #$18
C1/B6FE:	D0 C2      	BNE $B6C2
C1/B700:	80 48      	BRA $B74A
C1/B702:	7B         	TDC
C1/B703:	AA         	TAX
C1/B704:	A8         	TAY
C1/B705:	AD 7E 7B   	LDA $7B7E
C1/B708:	25 92      	AND $92
C1/B70A:	85 36      	STA $36
C1/B70C:	46 36      	LSR $36
C1/B70E:	90 30      	BCC $B740
C1/B710:	B9 7B 80   	LDA $807B,Y
C1/B713:	F0 05      	BEQ $B71A
C1/B715:	A9 78      	LDA #$78
C1/B717:	9D F6 88   	STA $88F6,X
C1/B71A:	B9 64 80   	LDA $8064,Y
C1/B71D:	29 01      	AND #$01
C1/B71F:	D0 1F      	BNE $B740
C1/B721:	B9 70 80   	LDA $8070,Y
C1/B724:	29 01      	AND #$01
C1/B726:	D0 18      	BNE $B740
C1/B728:	B9 6F 80   	LDA $806F,Y
C1/B72B:	C9 A0      	CMP #$A0
C1/B72D:	B0 11      	BCS $B740
C1/B72F:	A9 01      	LDA #$01
C1/B731:	9D F3 88   	STA $88F3,X
C1/B734:	B9 63 80   	LDA $8063,Y
C1/B737:	9D F4 88   	STA $88F4,X
C1/B73A:	B9 6F 80   	LDA $806F,Y
C1/B73D:	9D F5 88   	STA $88F5,X
C1/B740:	C8         	INY
C1/B741:	C8         	INY
C1/B742:	E8         	INX
C1/B743:	E8         	INX
C1/B744:	E8         	INX
C1/B745:	E8         	INX
C1/B746:	E0 18      	CPX #$18
C1/B748:	D0 C2      	BNE $B70C
C1/B74A:	60         	RTS

; Block animation script ids

C1/B74B:	45 ; dagger
C1/B74C:	46 ; sword
C1/B74D:	48 ; shield
C1/B74E:	47 ; cape
C1/B74F:	40 ; ???
C1/B750:	44 ; golem 
C1/B751:	43 ; interceptor

; Block animation palettes

C1/B752:	02
C1/B753:	02
C1/B754:	01
C1/B755:	00
C1/B756:	00
C1/B757:	01
C1/B758:	03

; Block animation sound effects (why all the same?)

C1/B759:	A0
C1/B75A:	A0
C1/B75B:	A0
C1/B75C:	A0
C1/B75D:	A0
C1/B75E:	A0
C1/B75F:	A0

; Attack Animations

C1/B760:	20 9E 9C   	JSR $9C9E      ; clear all animation thread data
C1/B763:	9C BB EC   	STZ $ECBB
C1/B766:	A0 01 00   	LDY #$0001
C1/B769:	B1 76      	LDA ($76),Y    ; command ID
C1/B76B:	30 05      	BMI $B772
C1/B76D:	0A         	ASL A
C1/B76E:	AA         	TAX
C1/B76F:	FC 75 B7   	JSR ($B775,X)  ; Pointer table
C1/B772:	4C 6E 95   	JMP $956E

C1/B775:	CDBE      ; $00 ($BECD) - Fight
C1/B777:	41BC      ; $01 ($BC41) - Item
C1/B779:	EBAB      ; $02 ($ABEB) - Magic
C1/B77B:	E7BB      ; $03 ($BBE7) - Morph
C1/B77D:	DCBB      ; $04 ($BBDC) - Revert
C1/B77F:	87BB      ; $05 ($BB87) - Steal
C1/B781:	A5BB      ; $06 ($BBA5) - Capture/Mug
C1/B783:	8DB9      ; $07 ($B98D) - Swdtech/Bushido
C1/B785:	C5B9      ; $08 ($B9C5) - Throw
C1/B787:	13BC      ; $09 ($BC13) - Tools
C1/B789:	1AB9      ; $0A
C1/B78B:	AABA      ; $0B ($BAAA) - Runic (prep) [?]
C1/B78D:	E5B8      ; $0C
C1/B78F:	E8B9      ; $0D
C1/B791:	54BB      ; $0E
C1/B793:	00B9      ; $0F
C1/B795:	2BBB      ; $10
C1/B797:	76BB      ; $11
C1/B799:	88BC    	; $12 - RTS
C1/B79B:	12BB      ; $13
C1/B79D:	0AB8      ; $14
C1/B79F:	88BC    	; $15 ($BC88) - Defend [?]
C1/B7A1:	F7B9      ; $16
C1/B7A3:	EBAB      ; $17
C1/B7A5:	EDBB      ; $18
C1/B7A7:	EBAB      ; $19
C1/B7A9:	62BB      ; $1A
C1/B7AB:	49BB      ; $1B
C1/B7AD:	9CBA      ; $1C
C1/B7AF:	C3B7      ; $1D
C1/B7B1:	88BC    	; $1E - RTS
C1/B7B3:	88BC    	; $1F - RTS
C1/B7B5:	0ABB      ; $20
C1/B7B7:	F1B7      ; $21
C1/B7B9:	E9B7      ; $22 ($B7E9) - Self-damage command (regen, sap, etc)
C1/B7BB:	8EBA
C1/B7BD:	5FBA
C1/B7BF:	B7BA      ; $25 ($BAB7) - Runic (absorb) [?]
C1/B7C1:	55B9

C1/B7C3:	A0 02 00    LDY #$0002
C1/B7C6:	B1 76       LDA ($76),Y
C1/B7C8:	C9 86       CMP #$86
C1/B7CA:	90 0B       BCC $B7D7
C1/B7CC:	A9 2A       LDA #$2A
C1/B7CE:	20 A4 B8    JSR $B8A4
C1/B7D1:	20 EB AB    JSR $ABEB      ; animation function for "Magic"
C1/B7D4:	4C 6B B8    JMP $B86B          ; disable stepping forward for regen, etc

C1/B7D7:	A0 04 00    LDY #$0004
C1/B7DA:	B1 78       LDA ($78),Y
C1/B7DC:	C8          INY
C1/B7DD:	11 78       ORA ($78),Y
C1/B7DF:	D0 05       BNE $B7E6
C1/B7E1:	A9 2A       LDA #$2A
C1/B7E3:	4C A4 B8    JMP $B8A4
C1/B7E6:	4C EB AB    JMP $ABEB      ; animation function for "Magic"

; Self Damage (Regen, Sap, etc)

C1/B7E9:	EE A4 62   	INC $62A4      ; flag passive self-dmg (regen, etc)
C1/B7EC:	A9 29      	LDA #$29
C1/B7EE:	4C A4 B8   	JMP $B8A4

C1/B7F1:	20 B0 B3   	JSR $B3B0
C1/B7F4:	60         	RTS

; Character attacks with no targets (eg Air Anchor)
; Also used for Runic absorb
; And character item usage [?]
 
C1/B7F5:	DA         	PHX            ; X holds offset to animation data
C1/B7F6:	20 A2 9A   	JSR $9AA2      ; initial attacker animation?
C1/B7F9:	20 43 AB   	JSR $AB43      ; update animation thread counts, pause some
C1/B7FC:	FA         	PLX
C1/B7FD:	86 1E      	STX $1E        ; set animation data offset
C1/B7FF:	7B         	TDC            ; spell index = 0
C1/B800:	20 B3 9C   	JSR $9CB3      ; load graphic data for spell animation
C1/B803:	20 5B AC   	JSR $AC5B
C1/B806:	20 43 AB   	JSR $AB43
C1/B809:	60         	RTS

C1/B80A:	20 89 BC   	JSR $BC89        ; set attacker index in $10
C1/B80D:	A5 10      	LDA $10
C1/B80F:	30 56      	BMI $B867
C1/B811:	0A         	ASL A
C1/B812:	0A         	ASL A
C1/B813:	0A         	ASL A
C1/B814:	0A         	ASL A
C1/B815:	0A         	ASL A
C1/B816:	A8         	TAY
C1/B817:	AD 1F 20   	LDA $201F
C1/B81A:	0A         	ASL A
C1/B81B:	0A         	ASL A
C1/B81C:	18         	CLC
C1/B81D:	65 10      	ADC $10
C1/B81F:	AA         	TAX
C1/B820:	B9 C5 2E   	LDA $2EC5,Y
C1/B823:	49 01      	EOR #$01
C1/B825:	99 C5 2E   	STA $2EC5,Y
C1/B828:	29 01      	AND #$01
C1/B82A:	F0 08      	BEQ $B834
C1/B82C:	64 11      	STZ $11
C1/B82E:	BF 6F A8 C2	LDA $C2A86F,X
C1/B832:	80 04      	BRA $B838
C1/B834:	BF 7F A8 C2	LDA $C2A87F,X
C1/B838:	85 10      	STA $10
C1/B83A:	10 02      	BPL $B83E
C1/B83C:	C6 11      	DEC $11
C1/B83E:	A9 04      	LDA #$04
C1/B840:	99 C0 61   	STA $61C0,Y
C1/B843:	A9 06      	LDA #$06
C1/B845:	48         	PHA
C1/B846:	5A         	PHY
C1/B847:	A6 10      	LDX $10
C1/B849:	DA         	PHX
C1/B84A:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/B84D:	FA         	PLX
C1/B84E:	86 10      	STX $10
C1/B850:	7A         	PLY
C1/B851:	C2 20      	REP #$20
C1/B853:	B9 C9 61   	LDA $61C9,Y
C1/B856:	18         	CLC
C1/B857:	65 10      	ADC $10
C1/B859:	99 C9 61   	STA $61C9,Y
C1/B85C:	7B         	TDC
C1/B85D:	E2 20      	SEP #$20           ; 8-bit A
C1/B85F:	68         	PLA
C1/B860:	3A         	DEC A
C1/B861:	D0 E2      	BNE $B845
C1/B863:	7B         	TDC
C1/B864:	99 C0 61   	STA $61C0,Y

C1/B867:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/B86A:	60         	RTS

C1/B86B:	20 89 BC   	JSR $BC89          ; set attacker index in $10
C1/B86E:	A5 10      	LDA $10            ; attacker index
C1/B870:	30 0D      	BMI $B87F          ; exit if monster
C1/B872:	29 03      	AND #$03           ; character id 0-3
C1/B874:	DA         	PHX                ; store X
C1/B875:	AA         	TAX                ; character index
C1/B876:	AD A4 62   	LDA $62A4          ; passive self-dmg (regen, sap, etc)
C1/B879:	D0 03      	BNE $B87E          ; exit if ^
C1/B87B:	FE AE 61   	INC $61AE,X        ; disable character stepping forward
C1/B87E:	FA         	PLX                ; restore X
C1/B87F:	60         	RTS

C1/B880:	20 84 B8   	JSR $B884
C1/B883:	6B         	RTL

C1/B884:	9C C0 62   	STZ $62C0          ; clear "Ignore Block Animations"
C1/B887:	A6 1E      	LDX $1E            ; animation pointer
C1/B889:	7B         	TDC                ; zero A/B
C1/B88A:	20 B3 9C   	JSR $9CB3          ; load spell animation and sound data
C1/B88D:	4C 6B AC   	JMP $AC6B          ; setup magic spell animation

C1/B890:	0A         	ASL A
C1/B891:	AA         	TAX
C1/B892:	C2 20      	REP #$20
C1/B894:	A0 04 00   	LDY #$0004
C1/B897:	B1 78      	LDA ($78),Y
C1/B899:	48         	PHA
C1/B89A:	BF BE B4 C2	LDA $C2B4BE,X
C1/B89E:	AA         	TAX
C1/B89F:	7B         	TDC
C1/B8A0:	E2 20      	SEP #$20           ; 8-bit A
C1/B8A2:	80 1E      	BRA $B8C2

C1/B8A4:	EE C0 62   	INC $62C0          ; set "Ignore Block Animations"
C1/B8A7:	0A         	ASL A              ; animation ID x2 [?]
C1/B8A8:	AA         	TAX                ; index it
C1/B8A9:	C2 20      	REP #$20           ; 16-bit A
C1/B8AB:	A0 04 00   	LDY #$0004
C1/B8AE:	B1 78      	LDA ($78),Y        ; targets reflected off [?]
C1/B8B0:	48         	PHA                ; store ^
C1/B8B1:	A0 02 00   	LDY #$0002
C1/B8B4:	B1 78      	LDA ($78),Y        ; targets final
C1/B8B6:	C8         	INY
C1/B8B7:	C8         	INY
C1/B8B8:	91 78      	STA ($78),Y        ; replace targets reflected off
C1/B8BA:	BF BE B4 C2	LDA $C2B4BE,X      ; pointer to animation data
C1/B8BE:	AA         	TAX                ; index it
C1/B8BF:	7B         	TDC                ; zero A/B
C1/B8C0:	E2 20      	SEP #$20           ; 8-bit A

C1/B8C2:	DA         	PHX                ; save animation data pointer
C1/B8C3:	20 F4 94   	JSR $94F4          ; copy all monster sprite data to buffer
C1/B8C6:	20 67 AB   	JSR $AB67          ; backup character/monster target bytes
C1/B8C9:	20 8B AB   	JSR $AB8B          ; clear character attacker's sprite animation
C1/B8CC:	FA         	PLX                ; restore animation data pointer
C1/B8CD:	20 F5 B7   	JSR $B7F5          ; execute self-animation [?]
C1/B8D0:	20 03 95   	JSR $9503          ; update monster sprite data from buffer
C1/B8D3:	20 8B AB   	JSR $AB8B          ; clear character attacker's sprite animation
C1/B8D6:	C2 20      	REP #$20           ; 16-bit A
C1/B8D8:	68         	PLA                ; restore targets reflected off [?]
C1/B8D9:	A0 04 00   	LDY #$0004
C1/B8DC:	91 78      	STA ($78),Y        ; return targets reflected off value
C1/B8DE:	7B         	TDC                ; zero A/B
C1/B8DF:	E2 20      	SEP #$20           ; 8-bit A
C1/B8E1:	9C C0 62   	STZ $62C0          ; clear "Ignore Block Animations"
C1/B8E4:	60         	RTS

C1/B8E5:	20 35 BC   	JSR $BC35
C1/B8E8:	B2 78      	LDA ($78)
C1/B8EA:	29 10      	AND #$10
C1/B8EC:	D0 09      	BNE $B8F7
C1/B8EE:	B2 78      	LDA ($78)
C1/B8F0:	30 05      	BMI $B8F7
C1/B8F2:	A9 28      	LDA #$28
C1/B8F4:	20 E1 BB   	JSR $BBE1

C1/B8F7:	20 41 B9   	JSR $B941        ; set carry if any targets at all
C1/B8FA:	90 03      	BCC $B8FF
C1/B8FC:	20 EB AB   	JSR $ABEB      ; animation function for "Magic"
C1/B8FF:	60         	RTS

C1/B900:	20 35 BC   	JSR $BC35
C1/B903:	A2 6C 0F   	LDX #$0F6C
C1/B906:	20 F5 B7   	JSR $B7F5
C1/B909:	B2 78      	LDA ($78)
C1/B90B:	30 0C      	BMI $B919
C1/B90D:	20 EB AB   	JSR $ABEB        ; animation function for "Magic"
C1/B910:	20 35 AC   	JSR $AC35        ; fill (clear?) BG1 and BG3 tile data
C1/B913:	20 6B B8   	JSR $B86B        ; disable stepping forward for regen, etc
C1/B916:	20 03 95   	JSR $9503        ; update monster sprite data from buffer
C1/B919:	60         	RTS

C1/B91A:	20 35 BC   	JSR $BC35
C1/B91D:	A9 04      	LDA #$04
C1/B91F:	20 A4 B8   	JSR $B8A4
C1/B922:	20 41 B9   	JSR $B941        ; set carry if any targets at all
C1/B925:	90 13      	BCC $B93A
C1/B927:	A2 16 05   	LDX #$0516
C1/B92A:	86 1E      	STX $1E
C1/B92C:	A0 02 00   	LDY #$0002
C1/B92F:	B1 76      	LDA ($76),Y
C1/B931:	20 B3 9C   	JSR $9CB3        ; load spell animation and sound data
C1/B934:	20 5B AC   	JSR $AC5B
C1/B937:	20 03 95   	JSR $9503          ; update monster sprite data from buffer
C1/B93A:	20 6B B8   	JSR $B86B          ; disable stepping forward for regen, etc
C1/B93D:	20 8B AB   	JSR $AB8B
C1/B940:	60         	RTS

; Check if attack has any targets (including blockers) (set Carry if so)
C1/B941:	A0 02 00   	LDY #$0002       ; command data arg #2
C1/B944:	7B         	TDC              ; A = 0000
C1/B945:	11 78      	ORA ($78),Y      ; merge attack data bytes together
C1/B947:	C8         	INY              ; next target byte
C1/B948:	C0 0C 00   	CPY #$000C       ; loop 12 times
C1/B94B:	D0 F8      	BNE $B945        ; continue loop

C1/B94D:	C9 00      	CMP #$00         ; zero targets?
C1/B94F:	F0 02      	BEQ $B953        ; if ^, exit w/ CLC
C1/B951:	38         	SEC              ; else return with SEC
C1/B952:	60         	RTS

C1/B953:	18         	CLC              ; no targets
C1/B954:	60         	RTS

C1/B955:	20 35 BC   	JSR $BC35
C1/B958:	A0 02 00   	LDY #$0002
C1/B95B:	B1 76      	LDA ($76),Y
C1/B95D:	29 0F      	AND #$0F
C1/B95F:	8D FB EB   	STA $EBFB
C1/B962:	B1 76      	LDA ($76),Y
C1/B964:	29 F0      	AND #$F0
C1/B966:	91 76      	STA ($76),Y
C1/B968:	C8         	INY
C1/B969:	B1 76      	LDA ($76),Y
C1/B96B:	4A         	LSR A
C1/B96C:	4A         	LSR A
C1/B96D:	4A         	LSR A
C1/B96E:	4A         	LSR A
C1/B96F:	8D FC EB   	STA $EBFC
C1/B972:	B1 76      	LDA ($76),Y
C1/B974:	29 0F      	AND #$0F
C1/B976:	8D FD EB   	STA $EBFD
C1/B979:	A9 51      	LDA #$51
C1/B97B:	91 76      	STA ($76),Y
C1/B97D:	AD FB EB   	LDA $EBFB
C1/B980:	C9 0F      	CMP #$0F
C1/B982:	D0 04      	BNE $B988
C1/B984:	A9 0D      	LDA #$0D
C1/B986:	80 02      	BRA $B98A
C1/B988:	A9 0C      	LDA #$0C
C1/B98A:	4C A4 B8   	JMP $B8A4

; Bushido Attack Animation ($07)

C1/B98D:	20 35 BC   	JSR $BC35        ; initialize attack animation
C1/B990:	AD AE 60   	LDA $60AE        ; animation stage counter
C1/B993:	D0 0F      	BNE $B9A4        ; branch if mid-multistrike
C1/B995:	20 8B AB   	JSR $AB8B        ; clear attacker's sprite animation
                                       ; redundant with BC35 above [?]
C1/B998:	A9 03      	LDA #$03
C1/B99A:	20 E1 BB   	JSR $BBE1        ; special bushido initial animation [?]
C1/B99D:	20 41 B9   	JSR $B941        ; set carry if any targets at all
C1/B9A0:	90 22      	BCC $B9C4        ; abort animation if no targets
C1/B9A2:	80 08      	BRA $B9AC        ; continue animation

C1/B9A4:	20 41 B9   	JSR $B941        ; set carry if any targets at all
C1/B9A7:	90 1B      	BCC $B9C4        ; abort animation if no targets
C1/B9A9:	20 67 AB   	JSR $AB67        ; move character/monster target bytes

C1/B9AC:	20 A2 9A   	JSR $9AA2        ; initial attack animation
C1/B9AF:	A2 A6 04   	LDX #$04A6
C1/B9B2:	86 1E      	STX $1E
C1/B9B4:	A0 02 00   	LDY #$0002
C1/B9B7:	B1 76      	LDA ($76),Y
C1/B9B9:	30 09      	BMI $B9C4
C1/B9BB:	20 B3 9C   	JSR $9CB3        ; load spell animation and sound data
C1/B9BE:	20 5B AC   	JSR $AC5B
C1/B9C1:	20 03 95   	JSR $9503          ; update monster sprite data from buffer
C1/B9C4:	60         	RTS

; Throw animation

C1/B9C5:	20 35 BC   	JSR $BC35         ; initialize attack animation
C1/B9C8:	A0 02 00   	LDY #$0002        ; animation command arg #2
C1/B9CB:	B1 76      	LDA ($76),Y       ; item/weapon id
C1/B9CD:	1A         	INC A             ; item/weapon id + 1
C1/B9CE:	AA         	TAX               ; use as lookup index
C1/B9CF:	BF 40 00 D1	LDA $D10040,X     ; animation data for item
C1/B9D3:	10 0A      	BPL $B9DF         ; branch if not a throwing star
C1/B9D5:	7B         	TDC               ; A = 0000
C1/B9D6:	91 76      	STA ($76),Y       ; zero command arg #2 (item id)
C1/B9D8:	8A         	TXA               ; get item id
C1/B9D9:	C8         	INY               ; command arg #3
C1/B9DA:	91 76      	STA ($76),Y       ; set arg #3 to item id
C1/B9DC:	4C CD BE   	JMP $BECD         ; execute fight animation

C1/B9DF:	29 0F      	AND #$0F
C1/B9E1:	18         	CLC
C1/B9E2:	69 14      	ADC #$14
C1/B9E4:	20 E1 BB   	JSR $BBE1
C1/B9E7:	60         	RTS

C1/B9E8:	EE BB EC   	INC $ECBB
C1/B9EB:	20 35 BC   	JSR $BC35
C1/B9EE:	A9 25      	LDA #$25
C1/B9F0:	20 90 B8   	JSR $B890
C1/B9F3:	20 6B B8   	JSR $B86B         ; disable stepping forward for regen, etc
C1/B9F6:	60         	RTS

C1/B9F7:	B2 78      	LDA ($78)
C1/B9F9:	29 02      	AND #$02
C1/B9FB:	8D 10 EC   	STA $EC10
C1/B9FE:	20 A2 9A   	JSR $9AA2
C1/BA01:	B2 78      	LDA ($78)
C1/BA03:	10 13      	BPL $BA18
C1/BA05:	A0 04 00   	LDY #$0004
C1/BA08:	B1 78      	LDA ($78),Y
C1/BA0A:	C8         	INY
C1/BA0B:	11 78      	ORA ($78),Y
C1/BA0D:	D0 04      	BNE $BA13
C1/BA0F:	A9 0B      	LDA #$0B
C1/BA11:	80 02      	BRA $BA15
C1/BA13:	A9 09      	LDA #$09
C1/BA15:	4C E1 BB   	JMP $BBE1

C1/BA18:	A0 02 00   	LDY #$0002
C1/BA1B:	B1 78      	LDA ($78),Y
C1/BA1D:	C8         	INY
C1/BA1E:	11 78      	ORA ($78),Y
C1/BA20:	D0 05      	BNE $BA27
C1/BA22:	A9 0A      	LDA #$0A
C1/BA24:	4C E1 BB   	JMP $BBE1

C1/BA27:	A0 01 00   	LDY #$0001
C1/BA2A:	B1 78      	LDA ($78),Y
C1/BA2C:	AA         	TAX
C1/BA2D:	BF 67 4B C1	LDA $C14B67,X    ; Data
C1/BA31:	AA         	TAX
C1/BA32:	BD 87 2B   	LDA $2B87,X
C1/BA35:	29 10      	AND #$10         ; is weapon
C1/BA37:	D0 11      	BNE $BA4A
C1/BA39:	BD 9B 2B   	LDA $2B9B,X
C1/BA3C:	29 10      	AND #$10         ; is weapon
C1/BA3E:	D0 04      	BNE $BA44
C1/BA40:	A9 FF      	LDA #$FF
C1/BA42:	80 0A      	BRA $BA4E
C1/BA44:	BD 9A 2B   	LDA $2B9A,X
C1/BA47:	1A         	INC A
C1/BA48:	80 04      	BRA $BA4E
C1/BA4A:	BD 86 2B   	LDA $2B86,X
C1/BA4D:	1A         	INC A
C1/BA4E:	AA         	TAX
C1/BA4F:	BF 40 00 D1	LDA $D10040,X
C1/BA53:	29 7F      	AND #$7F
C1/BA55:	4A         	LSR A
C1/BA56:	4A         	LSR A
C1/BA57:	4A         	LSR A
C1/BA58:	4A         	LSR A
C1/BA59:	18         	CLC
C1/BA5A:	69 2B      	ADC #$2B
C1/BA5C:	4C E1 BB   	JMP $BBE1

C1/BA5F:	20 35 BC   	JSR $BC35
C1/BA62:	20 41 B9   	JSR $B941        ; set carry if any targets at all
C1/BA65:	B0 1C      	BCS $BA83
C1/BA67:	7B         	TDC
C1/BA68:	AA         	TAX
C1/BA69:	A8         	TAY
C1/BA6A:	BD C6 2E   	LDA $2EC6,X
C1/BA6D:	C9 0D      	CMP #$0D
C1/BA6F:	F0 0C      	BEQ $BA7D
C1/BA71:	C8         	INY
C1/BA72:	8A         	TXA
C1/BA73:	18         	CLC
C1/BA74:	69 20      	ADC #$20
C1/BA76:	AA         	TAX
C1/BA77:	E0 80 00   	CPX #$0080
C1/BA7A:	D0 EE      	BNE $BA6A
C1/BA7C:	60         	RTS

C1/BA7D:	98         	TYA
C1/BA7E:	A0 01 00   	LDY #$0001
C1/BA81:	91 78      	STA ($78),Y
C1/BA83:	20 F7 BB   	JSR $BBF7
C1/BA86:	90 05      	BCC $BA8D
C1/BA88:	A9 36      	LDA #$36
C1/BA8A:	4C A4 B8   	JMP $B8A4

C1/BA8D:	60         	RTS

C1/BA8E:	20 35 BC   	JSR $BC35
C1/BA91:	20 F7 BB   	JSR $BBF7
C1/BA94:	90 05      	BCC $BA9B
C1/BA96:	A9 35      	LDA #$35
C1/BA98:	20 E1 BB   	JSR $BBE1
C1/BA9B:	60         	RTS

C1/BA9C:	20 F7 BB   	JSR $BBF7
C1/BA9F:	90 08      	BCC $BAA9
C1/BAA1:	A9 34      	LDA #$34
C1/BAA3:	20 90 B8   	JSR $B890
C1/BAA6:	20 6B B8   	JSR $B86B          ; disable stepping forward for regen, etc
C1/BAA9:	60         	RTS

; Runic prep animation [?]
C1/BAAA:	20 35 BC   	JSR $BC35
C1/BAAD:	B2 78      	LDA ($78)
C1/BAAF:	30 05      	BMI $BAB6
C1/BAB1:	A9 05      	LDA #$05
C1/BAB3:	20 E1 BB   	JSR $BBE1
C1/BAB6:	60         	RTS

; Runic absorb animation [?]
C1/BAB7:	20 35 BC   	JSR $BC35        ; initialize attack animation [?]
C1/BABA:	B2 78      	LDA ($78)
C1/BABC:	29 40      	AND #$40
C1/BABE:	D0 05      	BNE $BAC5
C1/BAC0:	A9 37      	LDA #$37
C1/BAC2:	20 E1 BB   	JSR $BBE1
C1/BAC5:	60         	RTS

C1/BAC6:	20 CA BA   	JSR $BACA
C1/BAC9:	6B         	RTL

C1/BACA:	48         	PHA
C1/BACB:	20 E5 94   	JSR $94E5        ; move color palette data from/to buffer [?]
C1/BACE:	A9 00      	LDA #$00
C1/BAD0:	48         	PHA
C1/BAD1:	85 14      	STA $14
C1/BAD3:	85 16      	STA $16
C1/BAD5:	85 18      	STA $18
C1/BAD7:	20 E0 EB   	JSR $EBE0
C1/BADA:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/BADD:	68         	PLA
C1/BADE:	1A         	INC A
C1/BADF:	1A         	INC A
C1/BAE0:	C9 20      	CMP #$20
C1/BAE2:	D0 EC      	BNE $BAD0
C1/BAE4:	68         	PLA
C1/BAE5:	48         	PHA
C1/BAE6:	20 DC 1B   	JSR $1BDC
C1/BAE9:	68         	PLA
C1/BAEA:	8D B8 EC   	STA $ECB8
C1/BAED:	7B         	TDC
C1/BAEE:	AA         	TAX
C1/BAEF:	8E B0 64   	STX $64B0
C1/BAF2:	8E B2 64   	STX $64B2
C1/BAF5:	A9 1E      	LDA #$1E
C1/BAF7:	48         	PHA
C1/BAF8:	85 14      	STA $14
C1/BAFA:	85 16      	STA $16
C1/BAFC:	85 18      	STA $18
C1/BAFE:	20 E0 EB   	JSR $EBE0
C1/BB01:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/BB04:	68         	PLA
C1/BB05:	3A         	DEC A
C1/BB06:	3A         	DEC A
C1/BB07:	D0 EE      	BNE $BAF7
C1/BB09:	60         	RTS

C1/BB0A:	20 35 BC   	JSR $BC35
C1/BB0D:	A9 38      	LDA #$38
C1/BB0F:	4C E1 BB   	JMP $BBE1

C1/BB12:	20 35 BC   	JSR $BC35
C1/BB15:	AD B8 EC   	LDA $ECB8
C1/BB18:	AA         	TAX
C1/BB19:	BF 62 E4 C2	LDA $C2E462,X
C1/BB1D:	D0 0C      	BNE $BB2B
C1/BB1F:	A0 03 00   	LDY #$0003
C1/BB22:	B1 76      	LDA ($76),Y
C1/BB24:	C9 FF      	CMP #$FF
C1/BB26:	F0 03      	BEQ $BB2B
C1/BB28:	20 CA BA   	JSR $BACA
C1/BB2B:	EE BB EC   	INC $ECBB
C1/BB2E:	20 35 BC   	JSR $BC35
C1/BB31:	B2 78      	LDA ($78)
C1/BB33:	29 10      	AND #$10
C1/BB35:	D0 09      	BNE $BB40
C1/BB37:	B2 78      	LDA ($78)
C1/BB39:	30 05      	BMI $BB40
C1/BB3B:	A9 06      	LDA #$06
C1/BB3D:	20 E1 BB   	JSR $BBE1
C1/BB40:	20 41 B9   	JSR $B941        ; set carry if any targets at all
C1/BB43:	90 03      	BCC $BB48
C1/BB45:	20 EB AB   	JSR $ABEB      ; animation function for "Magic"
C1/BB48:	60         	RTS

C1/BB49:	20 F7 BB   	JSR $BBF7
C1/BB4C:	90 05      	BCC $BB53
C1/BB4E:	A9 07      	LDA #$07
C1/BB50:	20 E1 BB   	JSR $BBE1
C1/BB53:	60         	RTS

C1/BB54:	20 F7 BB   	JSR $BBF7
C1/BB57:	90 08      	BCC $BB61
C1/BB59:	A9 39      	LDA #$39
C1/BB5B:	20 90 B8   	JSR $B890
C1/BB5E:	20 6B B8   	JSR $B86B          ; disable stepping forward for regen, etc
C1/BB61:	60         	RTS

C1/BB62:	20 F7 BB   	JSR $BBF7
C1/BB65:	90 0E      	BCC $BB75
C1/BB67:	20 35 BC   	JSR $BC35
C1/BB6A:	A2 6C 0F   	LDX #$0F6C
C1/BB6D:	20 F5 B7   	JSR $B7F5
C1/BB70:	A9 27      	LDA #$27
C1/BB72:	20 E1 BB   	JSR $BBE1
C1/BB75:	60         	RTS

C1/BB76:	20 35 BC   	JSR $BC35
C1/BB79:	20 F7 BB   	JSR $BBF7
C1/BB7C:	90 08      	BCC $BB86
C1/BB7E:	A9 26      	LDA #$26
C1/BB80:	20 90 B8   	JSR $B890
C1/BB83:	20 6B B8   	JSR $B86B          ; disable stepping forward for regen, etc
C1/BB86:	60         	RTS

C1/BB87:	20 35 BC   	JSR $BC35
C1/BB8A:	B2 78      	LDA ($78)
C1/BB8C:	30 0D      	BMI $BB9B
C1/BB8E:	20 F7 BB   	JSR $BBF7
C1/BB91:	90 08      	BCC $BB9B
C1/BB93:	A9 02      	LDA #$02
C1/BB95:	20 A4 B8   	JSR $B8A4
C1/BB98:	4C 35 BC   	JMP $BC35

C1/BB9B:	20 35 BC   	JSR $BC35
C1/BB9E:	A2 26 16   	LDX #$1626
C1/BBA1:	20 F5 B7   	JSR $B7F5
C1/BBA4:	60         	RTS

C1/BBA5:	20 35 BC   	JSR $BC35
C1/BBA8:	B2 78      	LDA ($78)
C1/BBAA:	30 2F      	BMI $BBDB
C1/BBAC:	20 F7 BB   	JSR $BBF7
C1/BBAF:	90 2A      	BCC $BBDB
C1/BBB1:	20 89 BC   	JSR $BC89        ; set attacker index in $10
C1/BBB4:	A5 10      	LDA $10
C1/BBB6:	29 03      	AND #$03
C1/BBB8:	AA         	TAX
C1/BBB9:	DA         	PHX
C1/BBBA:	AD A4 62   	LDA $62A4          ; passive self-dmg (regen, etc)
C1/BBBD:	D0 03      	BNE $BBC2
C1/BBBF:	FE AE 61   	INC $61AE,X
C1/BBC2:	A9 0E      	LDA #$0E
C1/BBC4:	20 A4 B8   	JSR $B8A4
C1/BBC7:	20 CD BE   	JSR $BECD          ; execute fight animation
C1/BBCA:	A9 0F      	LDA #$0F
C1/BBCC:	20 A4 B8   	JSR $B8A4
C1/BBCF:	FA         	PLX
C1/BBD0:	AD A4 62   	LDA $62A4          ; passive self-dmg (regen, etc)
C1/BBD3:	D0 03      	BNE $BBD8
C1/BBD5:	9E AE 61   	STZ $61AE,X

C1/BBD8:	20 35 BC   	JSR $BC35
C1/BBDB:	60         	RTS

C1/BBDC:	20 35 BC   	JSR $BC35
C1/BBDF:	A9 01      	LDA #$01

; Used by Runic Prep animation, many others
C1/BBE1:	20 A4 B8   	JSR $B8A4
C1/BBE4:	4C 6B B8   	JMP $B86B          ; disable stepping forward for regen, etc

C1/BBE7:	20 35 BC   	JSR $BC35
C1/BBEA:	7B         	TDC
C1/BBEB:	80 F4      	BRA $BBE1
C1/BBED:	20 F7 BB   	JSR $BBF7
C1/BBF0:	90 04      	BCC $BBF6
C1/BBF2:	A9 24      	LDA #$24
C1/BBF4:	80 EB      	BRA $BBE1
C1/BBF6:	60         	RTS

; Called at beginning of most (all?) command animations
C1/BBF7:	20 41 B9   	JSR $B941      ; are there any targets (including blocked)
C1/BBFA:	B0 15      	BCS $BC11      ; exit if so (w/ carry set)
C1/BBFC:	20 35 BC   	JSR $BC35      ; initialize attacker [?]
C1/BBFF:	B2 78      	LDA ($78)      ; A = attack data flags
C1/BC01:	30 0E      	BMI $BC11      ; exit if attacker is a monster (w/ carry)
C1/BC03:	A2 6C 0F   	LDX #$0F6C
C1/BC06:	20 F5 B7   	JSR $B7F5      ; execute "self" animation [?]
C1/BC09:	20 6B B8   	JSR $B86B      ; disable stepping forward for regen, etc
C1/BC0C:	20 03 95   	JSR $9503      ; update monster sprite data from buffer
C1/BC0F:	18         	CLC
C1/BC10:	60         	RTS

C1/BC11:	38         	SEC
C1/BC12:	60         	RTS

; Tools animation (from C1/B76F, X=09)
C1/BC13:	20 35 BC   	JSR $BC35      ; initialize attack animation (step forward?)
C1/BC16:	20 F7 BB   	JSR $BBF7      ; handle attacks w/o target (Air Anchor)
C1/BC19:	90 19      	BCC $BC34      ; exit if no targets (Air Anchor)
C1/BC1B:	20 35 BC   	JSR $BC35      ; initialize attack animation (again!?)
C1/BC1E:	A2 F0 11   	LDX #$11F0
C1/BC21:	86 1E      	STX $1E        ; store offset to tools animation data
C1/BC23:	A0 02 00   	LDY #$0002
C1/BC26:	B1 76      	LDA ($76),Y    ; A = spell index (0-8 for tools)
C1/BC28:	20 B3 9C   	JSR $9CB3      ; load graphic data for spell animation
C1/BC2B:	20 5B AC   	JSR $AC5B
C1/BC2E:	20 03 95   	JSR $9503      ; update monster sprite data from buffer
C1/BC31:	20 6B B8   	JSR $B86B      ; disable stepping forward for regen, etc
C1/BC34:	60         	RTS

; Called at the beginning of most (all?) command animations
C1/BC35:	20 F4 94   	JSR $94F4      ; move monster sprite data (12 bytes)
C1/BC38:	20 67 AB   	JSR $AB67      ; move character/monster target bytes
C1/BC3B:	20 8B AB   	JSR $AB8B      ; clear attacker's sprite animation
C1/BC3E:	4C A2 9A   	JMP $9AA2      ; initial attacker animation

; Item command animation function

C1/BC41:	20 35 BC   	JSR $BC35        ; initialize attack animation
C1/BC44:	B2 78      	LDA ($78)        ; attack data flags
C1/BC46:	30 09      	BMI $BC51        ; branch if attacker is a monster
C1/BC48:	A2 6C 0F   	LDX #$0F6C       ; offset for item animation data
C1/BC4B:	20 F5 B7   	JSR $B7F5        ; character attacks with no targets [?]
C1/BC4E:	20 6B B8   	JSR $B86B        ; disable stepping forward animation

C1/BC51:	20 41 B9   	JSR $B941        ; set carry if any targets at all (includes missed targets)
C1/BC54:	90 2F      	BCC $BC85        ; if no targets, exit and update sprite data [?]
C1/BC56:	A0 02 00   	LDY #$0002       ; attack animation arg #2
C1/BC59:	B1 76      	LDA ($76),Y      ; item ID
C1/BC5B:	C9 E0      	CMP #$E0         ; is it a regular item
C1/BC5D:	90 05      	BCC $BC64        ; branch if not ^
C1/BC5F:	38         	SEC              ; set carry
C1/BC60:	E9 E0      	SBC #$E0         ; subtract #$E0
C1/BC62:	80 02      	BRA $BC66        ; branch with item offset
C1/BC64:	A9 E0      	LDA #$E0         ; else use #$E0 [?]

C1/BC66:	C2 20      	REP #$20         ; 16-bit A
C1/BC68:	0A         	ASL A            ; x2
C1/BC69:	AA         	TAX              ; index it
C1/BC6A:	BF 00 00 D1	LDA $D10000,X    ; animation pointer for item
C1/BC6E:	AA         	TAX              ; index it
C1/BC6F:	7B         	TDC              ; zero A/B
C1/BC70:	E2 20      	SEP #$20         ; 8-bit A
C1/BC72:	E0 FF FF   	CPX #$FFFF       ; null animation for this item
C1/BC75:	F0 0E      	BEQ $BC85        ; branch to finish if so
C1/BC77:	DA         	PHX              ; store animation pointer
C1/BC78:	20 43 AB   	JSR $AB43        ;
C1/BC7B:	FA         	PLX              ; restore animation pointer
C1/BC7C:	86 1E      	STX $1E          ; save it
C1/BC7E:	7B         	TDC              ; zero A/B
C1/BC7F:	20 B3 9C   	JSR $9CB3        ; load spell animation and sound data
C1/BC82:	20 5B AC   	JSR $AC5B        ; animate the spell

C1/BC85:	4C 03 95   	JMP $9503        ; update monster sprite data from buffer

C1/BC88:	60         	RTS


; Set attacker(?) index in $10. If monster, also set bit 7
C1/BC89:	AD D0 62   	LDA $62D0     ; if not set, branch
C1/BC8C:	F0 05      	BEQ $BC93     ; A = first index of character/monster for something (maybe cover/co
C1/BC8E:	20 AD AA   	JSR $AAAD     ; get reflector entity index
C1/BC91:	80 0E      	BRA $BCA1

C1/BC93:	A2 6E 2C   	LDX #$2C6E    ; $10 points to beginning of animation data buffer (why not use $78?)
C1/BC96:	86 10      	STX $10
C1/BC98:	A0 01 00   	LDY #$0001    ; A = first data byte, animation flags
C1/BC9B:	B2 10      	LDA ($10)     ; isolate "attacker is monster" bit
C1/BC9D:	29 80      	AND #$80      ; combine with attacker index byte (similar handling as for targets)
C1/BC9F:	11 10      	ORA ($10),Y
C1/BCA1:	85 10      	STA $10       ; now $10 is the attacker index + monster flag (or value from $AAAD)
C1/BCA3:	64 11      	STZ $11
C1/BCA5:	60         	RTS

; Save index of first target in $12. If monster, also set bit 7
C1/BCA6:	AD 3E 61   	LDA $613E     ; A = monster targets (not blocked)?
C1/BCA9:	F0 0B      	BEQ $BCB6     ; branch if no monster targets
C1/BCAB:	20 0F 1A   	JSR $1A0F     ; A = bit # of first monster target
C1/BCAE:	18         	CLC
C1/BCAF:	69 04      	ADC #$04      ; get monster target index (characters are 0-3)
C1/BCB1:	09 80      	ORA #$80      ; set bit 7
C1/BCB3:	85 12      	STA $12       ; save it
C1/BCB5:	60         	RTS

C1/BCB6:	AD 3D 61   	LDA $613D     ; A character targets (not blocked)?
C1/BCB9:	20 0F 1A   	JSR $1A0F     ; A = index of first character target
C1/BCBC:	85 12      	STA $12       ; save it
C1/BCBE:	60         	RTS

; Copy all character and monster position data
; in preparation of animations

C1/BCBF:	7B         	TDC             ; A = 0000
C1/BCC0:	AA         	TAX             ; X = 0000
C1/BCC1:	A8         	TAY             ; Y = 0000
C1/BCC2:	C2 20      	REP #$20        ; 16-bit A

C1/BCC4:	BD B7 61   	LDA $61B7,X     ; character left X position
C1/BCC7:	99 3B 81   	STA $813B,Y     ; character left X position (temp)
C1/BCCA:	BD B9 61   	LDA $61B9,X     ; character top Y position
C1/BCCD:	99 3D 81   	STA $813D,Y     ; character top Y position (temp)
C1/BCD0:	C8         	INY
C1/BCD1:	C8         	INY
C1/BCD2:	C8         	INY
C1/BCD3:	C8         	INY             ; get next character position index
C1/BCD4:	8A         	TXA
C1/BCD5:	18         	CLC
C1/BCD6:	69 20 00   	ADC #$0020
C1/BCD9:	AA         	TAX             ; increment source offset by 32
C1/BCDA:	E0 80 00   	CPX #$0080      ; process all 4 characters
C1/BCDD:	D0 E5      	BNE $BCC4       ; loop until all XY positions set
C1/BCDF:	7B         	TDC             ; A = 0000
C1/BCE0:	AA         	TAX             ; X = 0000

C1/BCE1:	BD C3 80   	LDA $80C3,X     ; monster left X position
C1/BCE4:	99 3B 81   	STA $813B,Y     ; monster left X position (temp)
C1/BCE7:	BD CF 80   	LDA $80CF,X     ; monster top Y position
C1/BCEA:	99 3D 81   	STA $813D,Y     ; monster top Y position (temp)
C1/BCED:	C8         	INY
C1/BCEE:	C8         	INY
C1/BCEF:	C8         	INY
C1/BCF0:	C8         	INY             ; get next monster position index
C1/BCF1:	E8         	INX
C1/BCF2:	E8         	INX             ; increment source offset by 2
C1/BCF3:	E0 0C 00   	CPX #$000C      ; process all 6 monsters
C1/BCF6:	D0 E9      	BNE $BCE1       ; loop until finished
C1/BCF8:	7B         	TDC             ; A = 0000
C1/BCF9:	AA         	TAX             ; X = 0000

C1/BCFA:	BD 0F 80   	LDA $800F,X     ; additional position data
C1/BCFD:	9D 6B 81   	STA $816B,X     ; copy to temporary position data
C1/BD00:	E8         	INX
C1/BD01:	E8         	INX             ; get next position bytes index
C1/BD02:	E0 3C 00   	CPX #$003C      ; 6 monsters, 4 characters, center X, center Y, bottom Y
C1/BD05:	D0 F3      	BNE $BCFA       ; loop till all copied
C1/BD07:	7B         	TDC             ; A = 0000
C1/BD08:	E2 20      	SEP #$20        ; 8-bit A
C1/BD0A:	60         	RTS

; Update permanent character/monster position data after animation

C1/BD0B:	7B         	TDC             ; A = 0000
C1/BD0C:	AA         	TAX             ; X = 0000
C1/BD0D:	A8         	TAY             ; Y = 0000
C1/BD0E:	C2 20      	REP #$20        ; 16-bit A
C1/BD10:	B9 3B 81   	LDA $813B,Y     ; character X position (temp) [?]
C1/BD13:	9D B7 61   	STA $61B7,X     ; character X position
C1/BD16:	B9 3D 81   	LDA $813D,Y     ; character Y position (temp) [?]
C1/BD19:	9D B9 61   	STA $61B9,X     ; character Y position
C1/BD1C:	C8         	INY
C1/BD1D:	C8         	INY
C1/BD1E:	C8         	INY
C1/BD1F:	C8         	INY             ; next character source index
C1/BD20:	8A         	TXA
C1/BD21:	18         	CLC
C1/BD22:	69 20 00   	ADC #$0020      ; next character destination index
C1/BD25:	AA         	TAX
C1/BD26:	E0 80 00   	CPX #$0080      ; loop 4 times
C1/BD29:	D0 E5      	BNE $BD10       ; continue loop

C1/BD2B:	7B         	TDC             ; A = 0000
C1/BD2C:	AA         	TAX             ; X = 0000
C1/BD2D:	B9 3B 81   	LDA $813B,Y     ; monster X position (temp) [?]
C1/BD30:	9D C3 80   	STA $80C3,X     ; monster X position
C1/BD33:	B9 3D 81   	LDA $813D,Y     ; monster Y position (temp) [?]
C1/BD36:	9D CF 80   	STA $80CF,X     ; monster Y position
C1/BD39:	C8         	INY
C1/BD3A:	C8         	INY
C1/BD3B:	C8         	INY
C1/BD3C:	C8         	INY             ; next monster source index
C1/BD3D:	E8         	INX
C1/BD3E:	E8         	INX             ; next monster destination index
C1/BD3F:	E0 0C 00   	CPX #$000C      ; loop 6 times
C1/BD42:	D0 E9      	BNE $BD2D       ; continue loop

C1/BD44:	7B         	TDC             ; A = 0000
C1/BD45:	AA         	TAX             ; X = 0000
C1/BD46:	BD 6B 81   	LDA $816B,X     ; monster graphics/position data
C1/BD49:	9D 0F 80   	STA $800F,X     ; monster graphics/position data
C1/BD4C:	E8         	INX
C1/BD4D:	E8         	INX             ; next monster index
C1/BD4E:	E0 3C 00   	CPX #$003C      ; loop through full data block
C1/BD51:	D0 F3      	BNE $BD46       ; continue loop
C1/BD53:	7B         	TDC             ; A = 0000
C1/BD54:	E2 20      	SEP #$20        ; 8-bit A
C1/BD56:	20 7C 95   	JSR $957C       ; update sprite priority (buffer)
C1/BD59:	60         	RTS

; Handle covering targets

C1/BD5A:	A0 08 00   	LDY #$0008       ; animation argument #8
C1/BD5D:	B1 78      	LDA ($78),Y      ; intended (covered) target's id
C1/BD5F:	C9 04      	CMP #$04         ; is it a character?
C1/BD61:	B0 37      	BCS $BD9A        ; branch if not

; Cover character target

C1/BD63:	A8         	TAY              ; intended target id
C1/BD64:	0A         	ASL A            ; intended target index
C1/BD65:	AA         	TAX              ; index it
C1/BD66:	DA         	PHX              ; store it
C1/BD67:	0A         	ASL A
C1/BD68:	0A         	ASL A
C1/BD69:	0A         	ASL A
C1/BD6A:	0A         	ASL A            ; x32 total
C1/BD6B:	AA         	TAX              ; index it
C1/BD6C:	C2 20      	REP #$20         ; 16-bit A
C1/BD6E:	BD B7 61   	LDA $61B7,X      ; intended character left X position
C1/BD71:	85 14      	STA $14          ; save it
C1/BD73:	BD B9 61   	LDA $61B9,X      ; intended character top Y position
C1/BD76:	85 16      	STA $16          ; save it
C1/BD78:	FA         	PLX              ; restore character index
C1/BD79:	BD 33 80   	LDA $8033,X      ; intended character center X coord
C1/BD7C:	85 24      	STA $24          ; save it
C1/BD7E:	BD 3B 80   	LDA $803B,X      ; intended character center Y coord
C1/BD81:	85 26      	STA $26          ; save it
C1/BD83:	BD 43 80   	LDA $8043,X      ; intended character bottom Y coord
C1/BD86:	85 28      	STA $28          ; save it
C1/BD88:	7B         	TDC              ; A = 0000
C1/BD89:	E2 20      	SEP #$20         ; 8-bit A
C1/BD8B:	B9 10 7B   	LDA $7B10,Y      ; intended character facing right
C1/BD8E:	F0 05      	BEQ $BD95        ; branch if not
C1/BD90:	A2 0C 00   	LDX #$000C       ; offset to coordinate offset data
C1/BD93:	80 3C      	BRA $BDD1        ; skip monster target handling
C1/BD95:	A2 00 00   	LDX #$0000       ; offset to coordinate offset data
C1/BD98:	80 37      	BRA $BDD1        ; skip monster target handling

; Cover monster target

C1/BD9A:	29 7F      	AND #$7F         ; mask top bit (why?)
C1/BD9C:	38         	SEC              ; prepare subtraction
C1/BD9D:	E9 04      	SBC #$04         ; get monster id 0-6
C1/BD9F:	0A         	ASL A            ; monster index
C1/BDA0:	AA         	TAX              ; index it
C1/BDA1:	C2 20      	REP #$20         ; 16-bit A
C1/BDA3:	BD 0F 80   	LDA $800F,X      ; intended monster center X [BUG?] [?]
C1/BDA6:	85 14      	STA $14          ; save it
C1/BDA8:	BD 27 80   	LDA $8027,X      ; intended monster bottom Y [BUG?] [?]
C1/BDAB:	85 16      	STA $16          ; save it
C1/BDAD:	BD 0F 80   	LDA $800F,X      ; intended monster center X
C1/BDB0:	85 24      	STA $24          ; save it
C1/BDB2:	BD 1B 80   	LDA $801B,X      ; intended monster center Y
C1/BDB5:	85 26      	STA $26          ; save it
C1/BDB7:	BD 27 80   	LDA $8027,X      ; intended monster bottom Y
C1/BDBA:	85 28      	STA $28          ; save it
C1/BDBC:	7B         	TDC              ; A = 0000
C1/BDBD:	E2 20      	SEP #$20         ; 8-bit A
C1/BDBF:	BD F3 80   	LDA $80F3,X      ; monster sprite flipped [?]
C1/BDC2:	5D 7E 61   	EOR $617E,X      ; toggle with other flipped byte [?]
C1/BDC5:	29 01      	AND #$01         ; "Horizontally flipped"
C1/BDC7:	D0 05      	BNE $BDCE        ; branch if ^
C1/BDC9:	A2 0C 00   	LDX #$000C       ; offset to coordinate offset data
C1/BDCC:	80 03      	BRA $BDD1        ; continue handling
C1/BDCE:	A2 00 00   	LDX #$0000       ; offset to coordinate offset data

; Process character bodyguards, update coords

C1/BDD1:	DA         	PHX              ; store offset to cover offsets
C1/BDD2:	86 22      	STX $22          ; save offset to cover offsets
C1/BDD4:	A0 06 00   	LDY #$0006       ; animation arg #6
C1/BDD7:	B1 78      	LDA ($78),Y      ; character bodyguards bitmask
C1/BDD9:	85 18      	STA $18          ; save bodyguard bit
C1/BDDB:	64 1A      	STZ $1A          ; bodyguard id (start at 0)

C1/BDDD:	46 18      	LSR $18          ; check leftmost bit
C1/BDDF:	90 52      	BCC $BE33        ; branch if not the bodyguard's bit
C1/BDE1:	A5 22      	LDA $22          ; offset to cover offsets
C1/BDE3:	AA         	TAX              ; index it
C1/BDE4:	C2 20      	REP #$20         ; 16-bit A
C1/BDE6:	BF A1 BE C1	LDA $C1BEA1,X    ; cover offsets 1-2
C1/BDEA:	85 10      	STA $10          ; save them
C1/BDEC:	BF A3 BE C1	LDA $C1BEA3,X    ; cover offsets 3-4
C1/BDF0:	85 12      	STA $12          ; save them
C1/BDF2:	A5 22      	LDA $22          ; offset to cover offsets
C1/BDF4:	18         	CLC              ; prepare add
C1/BDF5:	69 04 00   	ADC #$0004       ; increment by 4
C1/BDF8:	85 22      	STA $22          ; save new offset (for next bodyguard)
C1/BDFA:	7B         	TDC              ; A = 0000
C1/BDFB:	E2 20      	SEP #$20         ; 8-bit A
C1/BDFD:	A5 1A      	LDA $1A          ; bodyguard id
C1/BDFF:	0A         	ASL A            ; x2
C1/BE00:	A8         	TAY              ; index it
C1/BE01:	0A         	ASL A
C1/BE02:	0A         	ASL A
C1/BE03:	0A         	ASL A
C1/BE04:	0A         	ASL A            ; x32
C1/BE05:	AA         	TAX              ; index it
C1/BE06:	C2 20      	REP #$20         ; 16-bit A
C1/BE08:	A5 14      	LDA $14          ; intended target left X position [?]
C1/BE0A:	18         	CLC              ; prepare add
C1/BE0B:	65 10      	ADC $10          ; add offset from cover data (if facing right, eg)
C1/BE0D:	9D B7 61   	STA $61B7,X      ; update bodyguard's left X coord
C1/BE10:	A5 16      	LDA $16          ; intended target top Y position [?]
C1/BE12:	18         	CLC              ; prepare add
C1/BE13:	65 12      	ADC $12          ; add offset from cover data
C1/BE15:	9D B9 61   	STA $61B9,X      ; update bodyguard's top Y coord
C1/BE18:	A5 24      	LDA $24          ; intended target center X position
C1/BE1A:	18         	CLC              ; prepare add
C1/BE1B:	65 10      	ADC $10          ; add offset from cover data (if facing right, eg)
C1/BE1D:	99 33 80   	STA $8033,Y      ; update bodyguard's center X coord
C1/BE20:	A5 26      	LDA $26          ; intended target center Y coord
C1/BE22:	18         	CLC              ; prepare add
C1/BE23:	65 12      	ADC $12          ; add offset from cover data
C1/BE25:	99 3B 80   	STA $803B,Y      ; update bodyguard's center Y coord
C1/BE28:	A5 28      	LDA $28          ; intended target bottom Y coord
C1/BE2A:	18         	CLC              ; prepare add
C1/BE2B:	65 12      	ADC $12          ; add offset from cover data
C1/BE2D:	99 43 80   	STA $8043,Y      ; update bodyguard's bottom Y coord
C1/BE30:	7B         	TDC              ; A = 0000
C1/BE31:	E2 20      	SEP #$20         ; 8-bit A
C1/BE33:	E6 1A      	INC $1A          ; increment bodyguard id
C1/BE35:	A5 1A      	LDA $1A          ; bodyguard id
C1/BE37:	C9 04      	CMP #$04         ; check all characters
C1/BE39:	D0 A2      	BNE $BDDD        ; loop until all bodyguards checked

; Process monster bodyguards, update coords

C1/BE3B:	FA         	PLX              ; restore offset to cover offsets
C1/BE3C:	86 22      	STX $22          ; offset to cover offsets
C1/BE3E:	A0 07 00   	LDY #$0007       ; animation arg #7 ($A7)
C1/BE41:	B1 78      	LDA ($78),Y      ; monster bodyguards bitmask
C1/BE43:	85 18      	STA $18          ; save bitmask
C1/BE45:	64 1A      	STZ $1A          ; bodyguard id (start at 0)

C1/BE47:	46 18      	LSR $18          ; left rightmost bit to carry
C1/BE49:	90 4D      	BCC $BE98        ; branch if not a bodyguard
C1/BE4B:	A5 22      	LDA $22          ; offset to cover offsets
C1/BE4D:	AA         	TAX              ; index it
C1/BE4E:	C2 20      	REP #$20         ; 16-bit A
C1/BE50:	BF A1 BE C1	LDA $C1BEA1,X    ; cover offsets 1-2
C1/BE54:	85 10      	STA $10          ; save them
C1/BE56:	BF A3 BE C1	LDA $C1BEA3,X    ; cover offsets 3-4
C1/BE5A:	85 12      	STA $12          ; save them
C1/BE5C:	A5 22      	LDA $22          ; offset to cover offsets
C1/BE5E:	18         	CLC              ; prepare add
C1/BE5F:	69 04 00   	ADC #$0004       ; increment offset by 4
C1/BE62:	85 22      	STA $22          ; save offset for next bodyguard
C1/BE64:	7B         	TDC              ; A = 0000
C1/BE65:	E2 20      	SEP #$20         ; 8-bit A
C1/BE67:	A5 1A      	LDA $1A          ; bodyguard id
C1/BE69:	0A         	ASL A            ; x2
C1/BE6A:	AA         	TAX              ; index it
C1/BE6B:	C2 20      	REP #$20         ; 16-bit A
C1/BE6D:	A5 14      	LDA $14          ; intended target left X position [?]
C1/BE6F:	18         	CLC              ; prepare add
C1/BE70:	65 10      	ADC $10          ; add cover animation offset
C1/BE72:	9D C3 80   	STA $80C3,X      ; update monster bodyguard left X coord
C1/BE75:	A5 16      	LDA $16          ; intended target top Y position [?]
C1/BE77:	18         	CLC              ; prepare add
C1/BE78:	65 12      	ADC $12          ; add cover animation offset
C1/BE7A:	9D CF 80   	STA $80CF,X      ; update monster bodyguard top Y coord
C1/BE7D:	A5 24      	LDA $24          ; intended target center X position
C1/BE7F:	18         	CLC              ; prepare add
C1/BE80:	65 10      	ADC $10          ; add cover animation offset
C1/BE82:	9D 0F 80   	STA $800F,X      ; update monster bodyguard center X coord
C1/BE85:	A5 26      	LDA $26          ; intended target center Y position
C1/BE87:	18         	CLC              ; prepare add
C1/BE88:	65 12      	ADC $12          ; add cover animation offset
C1/BE8A:	9D 1B 80   	STA $801B,X      ; update monster bodyguard center Y coord
C1/BE8D:	A5 28      	LDA $28          ; intended target bottom Y position
C1/BE8F:	18         	CLC              ; prepare add
C1/BE90:	65 12      	ADC $12          ; add cover animation offset
C1/BE92:	9D 27 80   	STA $8027,X      ; update monster bodyguard bottom Y coord
C1/BE95:	7B         	TDC              ; A = 0000
C1/BE96:	E2 20      	SEP #$20         ; 8-bit A
C1/BE98:	E6 1A      	INC $1A          ; increment bodyguard id
C1/BE9A:	A5 1A      	LDA $1A          ; bodyguard id
C1/BE9C:	C9 06      	CMP #$06         ; check all 6 monsters
C1/BE9E:	D0 A7      	BNE $BE47        ; loop till finished
C1/BEA0:	60         	RTS

; Cover animation offsets
C1/BEA1:	F0 FF 00 00 F8 FF 08 00 F8 FF F8 FF
C1/BEAD:	10 00 00 00 08 00 08 00 08 00 F8 FF

; Load block animation palette and sound effect

C1/BEB9:	DA         	PHX              ; store X
C1/BEBA:	48         	PHA              ; block animation id (0-indexed)
C1/BEBB:	AA         	TAX              ; index it
C1/BEBC:	BF 59 B7 C1	LDA $C1B759,X    ; get block animation sound effect
C1/BEC0:	8D E7 E9   	STA $E9E7        ; animation sound effect (always $A0)
C1/BEC3:	BF 52 B7 C1	LDA $C1B752,X    ; get block animation palette id
C1/BEC7:	20 10 9C   	JSR $9C10        ; save palette data to $7F70-7F7F
C1/BECA:	68         	PLA              ; restore block animation id (0-indexed)
C1/BECB:	FA         	PLX              ; restore X
C1/BECC:	60         	RTS

; Execute Fight animation

C1/BECD:	B2 78      	LDA ($78)          ; attack animation flags
C1/BECF:	29 01      	AND #$01           ; "Monster Special Attack" flag
C1/BED1:	8D 8A 61   	STA $618A          ; set monster special flag
C1/BED4:	8D BB EC   	STA $ECBB          ; enable panned sound effect [?]
C1/BED7:	20 F4 94   	JSR $94F4          ; copy monster data to $810B (again)
C1/BEDA:	20 67 AB   	JSR $AB67          ; copy targets into $613D (again)
C1/BEDD:	20 A2 9A   	JSR $9AA2          ; run initial attack animation
C1/BEE0:	B2 78      	LDA ($78)          ; attack animation flags
C1/BEE2:	29 20      	AND #$20           ; flash screen (critical)
C1/BEE4:	8D 96 61   	STA $6196          ; flash screen byte
C1/BEE7:	A2 00 04   	LDX #$0400         ; size of data block
C1/BEEA:	86 10      	STX $10            ; save it
C1/BEEC:	A2 00 B4   	LDX #$B400         ; VRAM source address
C1/BEEF:	A9 7F      	LDA #$7F           ; VRAM source bank
C1/BEF1:	A0 00 24   	LDY #$2400         ; VRAM destination (Battle Sprite Graphics)
C1/BEF4:	20 8D 19   	JSR $198D          ; move animation data
C1/BEF7:	AD 8A 61   	LDA $618A          ; monster special attack
C1/BEFA:	D0 03      	BNE $BEFF          ; branch if ^
C1/BEFC:	20 6B B8   	JSR $B86B          ; disable stepping forward for regen, etc
C1/BEFF:	A0 02 00   	LDY #$0002         ; animation command arg #2
C1/BF02:	B1 76      	LDA ($76),Y        ; attack type / flags [?]
C1/BF04:	29 80      	AND #$80           ; "Left hand attack"
C1/BF06:	8D F4 7A   	STA $7AF4          ; set left-handed flag
C1/BF09:	C8         	INY                ; animation command arg #3
C1/BF0A:	B1 76      	LDA ($76),Y        ; animation (weapon) id
C1/BF0C:	8D F5 7A   	STA $7AF5          ; attack (weapon) animation id
C1/BF0F:	20 89 BC   	JSR $BC89          ; set attacker index in $10
C1/BF12:	AD F5 7A   	LDA $7AF5          ; attack (weapon) animation id
C1/BF15:	20 95 9D   	JSR $9D95          ; ????????????
C1/BF18:	AD 71 62   	LDA $6271          ; sound effect
C1/BF1B:	8D E7 E9   	STA $E9E7          ; default sound effect
C1/BF1E:	20 BF BC   	JSR $BCBF          ; get character and monster positions
C1/BF21:	20 5A BD   	JSR $BD5A          ; update bodyguard coordinates
C1/BF24:	20 89 BC   	JSR $BC89          ; set attacker index in $10
C1/BF27:	20 A6 BC   	JSR $BCA6          ; set first target index in $12
C1/BF2A:	A5 10      	LDA $10            ; attacker index
C1/BF2C:	29 7F      	AND #$7F           ; remove "is monster attacker" bit
C1/BF2E:	0A         	ASL A              ; x2
C1/BF2F:	AA         	TAX                ; index it
C1/BF30:	C2 20      	REP #$20           ; 16-bit A
C1/BF32:	BF 8B CE C2	LDA $C2CE8B,X      ; offset to attacker's sprite animation thread data (128 bytes)
C1/BF36:	AA         	TAX                ; index it
C1/BF37:	7B         	TDC                ; A = 0000
C1/BF38:	E2 20      	SEP #$20           ; 8-bit A
C1/BF3A:	AD 2D 7B   	LDA $7B2D          ; weapon graphics frame width
C1/BF3D:	9D 2F 6A   	STA $6A2F,X        ; animation frame width
C1/BF40:	AD 2E 7B   	LDA $7B2E          ; weapon graphics frame height
C1/BF43:	9D 30 6A   	STA $6A30,X        ; animation frame height
C1/BF46:	A9 06      	LDA #$06           ; [?]
C1/BF48:	9D D5 74   	STA $74D5,X        ; animation palette index [?]
C1/BF4B:	A5 10      	LDA $10            ; attacker index
C1/BF4D:	29 03      	AND #$03           ; character id (0-3)
C1/BF4F:	A8         	TAY                ; index it
C1/BF50:	AD F4 7A   	LDA $7AF4          ; left-handed weapon
C1/BF53:	0A         	ASL A
C1/BF54:	2A         	ROL A
C1/BF55:	29 01      	AND #$01           ; isolate left-handed flag in bit 0
C1/BF57:	59 10 7B   	EOR $7B10,Y        ; toggle if character facing right
C1/BF5A:	29 01      	AND #$01           ; isolate left-handed flag
C1/BF5C:	A8         	TAY                ; index it
C1/BF5D:	A5 10      	LDA $10            ; attacker index
C1/BF5F:	10 04      	BPL $BF65          ; branch if character attacker
C1/BF61:	A9 62      	LDA #$62           ; else use fixed animation id
C1/BF63:	80 03      	BRA $BF68

C1/BF65:	B9 6B 62   	LDA $626B,Y        ; animation id for hand
C1/BF68:	C2 20      	REP #$20           ; 16-bit A
C1/BF6A:	0A         	ASL A              ; x2
C1/BF6B:	DA         	PHX                ; store animation thread offset
C1/BF6C:	AA         	TAX                ; index animation data address
C1/BF6D:	BF D8 EA D1	LDA $D1EAD8,X      ; animation script pointer
C1/BF71:	FA         	PLX                ; restore animation thread offset
C1/BF72:	85 22      	STA $22            ; save animation data pointer
C1/BF74:	1A         	INC A
C1/BF75:	1A         	INC A              ; animation data pointer + 2
C1/BF76:	9D 31 6A   	STA $6A31,X        ; save animation script pointer
C1/BF79:	7B         	TDC                ; A = 0000
C1/BF7A:	E2 20      	SEP #$20           ; 8-bit A
C1/BF7C:	A9 D0      	LDA #$D0           ; animation data bank $D0
C1/BF7E:	85 24      	STA $24            ; set animation data bank
C1/BF80:	9D 33 6A   	STA $6A33,X        ; set animation script bank
C1/BF83:	A7 22      	LDA [$22]          ; animation data instructions byte 1
C1/BF85:	4A         	LSR A
C1/BF86:	4A         	LSR A
C1/BF87:	4A         	LSR A
C1/BF88:	4A         	LSR A
C1/BF89:	1A         	INC A              ; get top nibble + 1
C1/BF8A:	9D 34 6A   	STA $6A34,X        ; animation speed
C1/BF8D:	9E E7 64   	STZ $64E7,X        ; sprite layer priority (show in front)
C1/BF90:	A9 01      	LDA #$01
C1/BF92:	9D 35 6A   	STA $6A35,X        ; set animation frame counter to 1
C1/BF95:	9E 36 6A   	STZ $6A36,X        ; set thread index to 0
C1/BF98:	A5 10      	LDA $10            ; attacker index
C1/BF9A:	10 11      	BPL $BFAD          ; branch if character attacker
C1/BF9C:	29 0F      	AND #$0F           ; clear "attacker is monster" bit
C1/BF9E:	38         	SEC                ; prepare subtraction
C1/BF9F:	E9 04      	SBC #$04           ; get monster id 0-5
C1/BFA1:	0A         	ASL A              ; x2
C1/BFA2:	A8         	TAY                ; monster index
C1/BFA3:	B9 F3 80   	LDA $80F3,Y        ; flipped currently
C1/BFA6:	59 7E 61   	EOR $617E,Y        ; toggle with flipped permanently [?]
C1/BFA9:	49 01      	EOR #$01           ; isolate "Horizontal Flip"
C1/BFAB:	80 04      	BRA $BFB1

C1/BFAD:	A8         	TAY                ; index character attacker index
C1/BFAE:	B9 10 7B   	LDA $7B10,Y        ; character is facing right (bit 0)

C1/BFB1:	0A         	ASL A
C1/BFB2:	0A         	ASL A
C1/BFB3:	0A         	ASL A
C1/BFB4:	0A         	ASL A
C1/BFB5:	0A         	ASL A
C1/BFB6:	0A         	ASL A
C1/BFB7:	29 40      	AND #$40           ; isolate "Horizontal Flip" in bit 6
C1/BFB9:	9D 87 6F   	STA $6F87,X        ; set in animation thread flags
C1/BFBC:	DA         	PHX                ; store animation thread data index
C1/BFBD:	AD F4 7A   	LDA $7AF4          ; left-hand attack (bit 7)
C1/BFC0:	0A         	ASL A
C1/BFC1:	2A         	ROL A              ; shift left-hand bit to bit 0
C1/BFC2:	29 01      	AND #$01           ; isolate left-hand bit
C1/BFC4:	9D 88 6F   	STA $6F88,X        ; set in animation thread flags
C1/BFC7:	9E 8C 6F   	STZ $6F8C,X        ; zero frame offset (for loops)
C1/BFCA:	9E D8 74   	STZ $74D8,X        ; zero vector movement speed [?]
C1/BFCD:	A9 01      	LDA #$01
C1/BFCF:	9D 8D 6F   	STA $6F8D,X        ; initialize frame offset counter to 1
C1/BFD2:	A9 60      	LDA #$60
C1/BFD4:	9D 37 6A   	STA $6A37,X        ; initialize sprite tile index to 96
C1/BFD7:	A5 10      	LDA $10            ; attacker index
C1/BFD9:	9D 38 6A   	STA $6A38,X        ; set animation thread attacker index
C1/BFDC:	A5 12      	LDA $12            ; target index
C1/BFDE:	9D 39 6A   	STA $6A39,X        ; set animation thread target index
C1/BFE1:	20 99 C4   	JSR $C499          ; ??????????? (sets $14 and $16)
C1/BFE4:	C2 20      	REP #$20           ; 16-bit A
C1/BFE6:	A5 14      	LDA $14
C1/BFE8:	9D 7E 6F   	STA $6F7E,X        ; attacker X position [?]
C1/BFEB:	9D 3A 6A   	STA $6A3A,X        ; thread X position [?]
C1/BFEE:	A5 16      	LDA $16
C1/BFF0:	9D 80 6F   	STA $6F80,X        ; attacker Y position [?]
C1/BFF3:	9D 3C 6A   	STA $6A3C,X        ; thread Y position [?]
C1/BFF6:	9E CE 74   	STZ $74CE,X        ; zero thread X offset [?]
C1/BFF9:	9E D0 74   	STZ $74D0,X        ; zero thread Y offset [?]
C1/BFFC:	7B         	TDC                ; A = 0000
C1/BFFD:	E2 20      	SEP #$20           ; 8-bit A
C1/BFFF:	20 8E C4   	JSR $C48E          ; ???????????
C1/C002:	C2 20      	REP #$20           ; 16-bit A
C1/C004:	A5 14      	LDA $14
C1/C006:	9D 82 6F   	STA $6F82,X        ; target X position [?]
C1/C009:	A5 16      	LDA $16
C1/C00B:	9D 84 6F   	STA $6F84,X        ; target Y position [?]
C1/C00E:	7B         	TDC                ; A = 0000
C1/C00F:	E2 20      	SEP #$20           ; 8-bit A
C1/C011:	A9 01      	LDA #$01
C1/C013:	9D 2E 6A   	STA $6A2E,X        ; set this thread to "active" [?]
C1/C016:	A5 10      	LDA $10            ; attacker index
C1/C018:	30 05      	BMI $C01F          ; branch if monster attacker
C1/C01A:	A9 30      	LDA #$30
C1/C01C:	9D 86 6F   	STA $6F86,X        ; set highest sprite tile priority [?]

C1/C01F:	A5 12      	LDA $12            ; target index
C1/C021:	30 39      	BMI $C05C          ; branch if monster target
C1/C023:	18         	CLC                ; prepare add
C1/C024:	69 0A      	ADC #$0A           ; offset to block type(s)
C1/C026:	A8         	TAY                ; index it
C1/C027:	B1 78      	LDA ($78),Y        ; target's block animation type
C1/C029:	F0 31      	BEQ $C05C          ; branch if no block animation
C1/C02B:	3A         	DEC A              ; use 0-index for block animation ids
C1/C02C:	20 B9 BE   	JSR $BEB9          ; load block palette and sound effect
C1/C02F:	48         	PHA                ; store block animation id
C1/C030:	A5 10      	LDA $10            ; attacker index
C1/C032:	10 03      	BPL $C037          ; branch if character attacker
C1/C034:	9E 2E 6A   	STZ $6A2E,X        ; else, set thread to "inactive"

C1/C037:	68         	PLA                ; restore block animation id
C1/C038:	DA         	PHX                ; store animation thread offset
C1/C039:	AA         	TAX                ; index block animation id
C1/C03A:	BF 4B B7 C1	LDA $C1B74B,X      ; block animation script
C1/C03E:	8D 6E 62   	STA $626E          ; set animation script id [?]
C1/C041:	9C 8A 61   	STZ $618A          ; clear "monster special attack" flag
C1/C044:	FA         	PLX                ; restore animation thread offset
C1/C045:	A9 40      	LDA #$40
C1/C047:	85 14      	STA $14            ; [?]
C1/C049:	AD 70 62   	LDA $6270          ; weapon animation init data [?]
C1/C04C:	29 7F      	AND #$7F           ; mask "is thrown weapon" bit
C1/C04E:	C9 01      	CMP #$01           ; "Star" or "Gambler" weapon
C1/C050:	D0 13      	BNE $C065          ; branch if not ^
C1/C052:	AD 70 62   	LDA $6270          ; weapon animation init data [?]
C1/C055:	29 80      	AND #$80           ; only keep "thrown weapon" flag
C1/C057:	8D 70 62   	STA $6270          ; reset weapon animation id to 0 [?]
C1/C05A:	80 09      	BRA $C065

C1/C05C:	A9 60      	LDA #$60
C1/C05E:	85 14      	STA $14            ; [?]
C1/C060:	AD 70 62   	LDA $6270          ; weapon animation init data [?]
C1/C063:	10 16      	BPL $C07B          ; branch if not thrown weapon

C1/C065:	A5 12      	LDA $12            ; target index
C1/C067:	29 7F      	AND #$7F           ; mask "is a monster" bit
C1/C069:	0A         	ASL A              ; x2
C1/C06A:	AA         	TAX                ; index it
C1/C06B:	C2 20      	REP #$20           ; 16-bit A
C1/C06D:	BF 8B CE C2	LDA $C2CE8B,X      ; offset to target's sprite animation thread data [128 bytes]
C1/C071:	18         	CLC                ; prepare add
C1/C072:	69 10 00   	ADC #$0010         ; increment offset to sprite's next thread [?]
C1/C075:	AA         	TAX                ; index it
C1/C076:	7B         	TDC                ; A = 0000
C1/C077:	E2 20      	SEP #$20           ; 8-bit A
C1/C079:	80 09      	BRA $C084

C1/C07B:	A9 60      	LDA #$60           ; redundant with $C1C05C [?]
C1/C07D:	85 14      	STA $14            ; redundant with $C1C05E [?]
C1/C07F:	A2 00 05   	LDX #$0500         ; use 11th thread block [?]
C1/C082:	A9 01      	LDA #$01           ; set to BG1 layer

C1/C084:	09 30      	ORA #$30           ; set max sprite tile priority
C1/C086:	9D 86 6F   	STA $6F86,X        ; update animation thread priority [?]
C1/C089:	8E F6 7A   	STX $7AF6          ; pointer to animation thread data [?]
C1/C08C:	A5 12      	LDA $12            ; target index
C1/C08E:	30 0C      	BMI $C09C          ; branch if monster target
C1/C090:	A9 02      	LDA #$02           ; character tile width = 2
C1/C092:	9D D2 74   	STA $74D2,X        ; target tile width
C1/C095:	A9 03      	LDA #$03           ; character tile height = 3
C1/C097:	9D D3 74   	STA $74D3,X        ; target tile height
C1/C09A:	80 13      	BRA $C0AF

; Monster target
C1/C09C:	29 7F      	AND #$7F           ; mask "is a monster" bit
C1/C09E:	38         	SEC                ; prepare subtract
C1/C09F:	E9 04      	SBC #$04           ; get 0-5 monster id
C1/C0A1:	0A         	ASL A              ; x2
C1/C0A2:	A8         	TAY                ; index it
C1/C0A3:	B9 2F 81   	LDA $812F,Y        ; monster tile width
C1/C0A6:	9D D2 74   	STA $74D2,X        ; target tile width
C1/C0A9:	B9 30 81   	LDA $8130,Y        ; monster tile height
C1/C0AC:	9D D3 74   	STA $74D3,X        ; target tile height

C1/C0AF:	AD 2F 7B   	LDA $7B2F          ; hit graphics frame width
C1/C0B2:	9D 2F 6A   	STA $6A2F,X        ; next animation thread frame width
C1/C0B5:	AD 30 7B   	LDA $7B30          ; hit graphics frame height
C1/C0B8:	9D 30 6A   	STA $6A30,X        ; next animation thread frame height
C1/C0BB:	A9 06      	LDA #$06
C1/C0BD:	9D D5 74   	STA $74D5,X        ; thread palette index
C1/C0C0:	64 22      	STZ $22            ; clear animation data pointer
C1/C0C2:	64 23      	STZ $23            ; clear animation data pointer
C1/C0C4:	AD 8A 61   	LDA $618A          ; monster special attack
C1/C0C7:	F0 0E      	BEQ $C0D7          ; branch if not ^

C1/C0C9:	AD 6E 62   	LDA $626E          ; hit animation script id
C1/C0CC:	C9 60      	CMP #$60           ; script id less than 96
C1/C0CE:	90 07      	BCC $C0D7          ; branch if ^
C1/C0D0:	DA         	PHX                ; store this animation thread offset
C1/C0D1:	A2 00 02   	LDX #$0200         ; script data pointer offset
C1/C0D4:	86 22      	STX $22            ; store offset increment temporarily
C1/C0D6:	FA         	PLX                ; restore this animation thread offset

C1/C0D7:	AD 6E 62   	LDA $626E          ; hit animation script id
C1/C0DA:	C2 20      	REP #$20           ; 16-bit A
C1/C0DC:	18         	CLC                ; prepare add
C1/C0DD:	65 22      	ADC $22            ; add offset to id if > 96
C1/C0DF:	0A         	ASL A              ; x2
C1/C0E0:	DA         	PHX                ; store animation thread offset
C1/C0E1:	AA         	TAX                ; index to script data pointer
C1/C0E2:	BF D8 EA D1	LDA $D1EAD8,X      ; animation script data pointer
C1/C0E6:	FA         	PLX                ; restore animation thread offset
C1/C0E7:	85 22      	STA $22            ; set new animation data address
C1/C0E9:	1A         	INC A
C1/C0EA:	1A         	INC A              ; get address of animation script
C1/C0EB:	9D 31 6A   	STA $6A31,X        ; set animation script pointer
C1/C0EE:	7B         	TDC                ; A = 0000
C1/C0EF:	E2 20      	SEP #$20           ; 8-bit A
C1/C0F1:	A9 D0      	LDA #$D0           ; data bank $D0
C1/C0F3:	85 24      	STA $24            ; animation data bank
C1/C0F5:	9D 33 6A   	STA $6A33,X        ; animation script bank
C1/C0F8:	A7 22      	LDA [$22]          ; animation data byte 1
C1/C0FA:	4A         	LSR A
C1/C0FB:	4A         	LSR A
C1/C0FC:	4A         	LSR A
C1/C0FD:	4A         	LSR A
C1/C0FE:	1A         	INC A              ; animation data top nibble + 1
C1/C0FF:	9D 34 6A   	STA $6A34,X        ; animation speed
C1/C102:	9E E7 64   	STZ $64E7,X        ; sprite layer priority (in front)
C1/C105:	A9 01      	LDA #$01
C1/C107:	9D 35 6A   	STA $6A35,X        ; animation frame counter (set to 1)
C1/C10A:	9E 36 6A   	STZ $6A36,X        ; zero thread index
C1/C10D:	A5 14      	LDA $14            ; #$40 if character+block, #$60 otherwise
C1/C10F:	9D 37 6A   	STA $6A37,X        ; sprite graphic index [?]
C1/C112:	86 14      	STX $14            ; save this animation thread offset
C1/C114:	FA         	PLX                ; restore first animation data pointer
C1/C115:	BD 87 6F   	LDA $6F87,X        ; attacker is "Horizontal Flip" flag
C1/C118:	A6 14      	LDX $14            ; restore this animation thread offset
C1/C11A:	9D 87 6F   	STA $6F87,X        ; use "Horizontal Flip" flag for both animations
C1/C11D:	9E 88 6F   	STZ $6F88,X        ; zero animation thread flags (miss, left-hand)
C1/C120:	9E 8C 6F   	STZ $6F8C,X        ; zero frame offset (for loops) [?]
C1/C123:	9E D8 74   	STZ $74D8,X        ; zero vector movement speed [?]
C1/C126:	A9 01      	LDA #$01
C1/C128:	9D 8D 6F   	STA $6F8D,X        ; frame offset counter (set to 1)
C1/C12B:	A5 10      	LDA $10            ; attacker index
C1/C12D:	9D 38 6A   	STA $6A38,X        ; this animation thread attacker index
C1/C130:	A5 12      	LDA $12            ; target index
C1/C132:	9D 39 6A   	STA $6A39,X        ; this animation thread target index
C1/C135:	20 99 C4   	JSR $C499          ; ??????????????? (sets $14 and $16)
C1/C138:	C2 20      	REP #$20           ; 16-bit A
C1/C13A:	A5 14      	LDA $14
C1/C13C:	9D 7E 6F   	STA $6F7E,X        ; attacker X position
C1/C13F:	A5 16      	LDA $16
C1/C141:	9D 80 6F   	STA $6F80,X        ; attacker Y position
C1/C144:	9E CE 74   	STZ $74CE,X        ; thread X offset
C1/C147:	9E D0 74   	STZ $74D0,X        ; thread Y offset
C1/C14A:	7B         	TDC                ; A = 0000
C1/C14B:	E2 20      	SEP #$20           ; 8-bit A
C1/C14D:	20 8E C4   	JSR $C48E          ; ?????????????
C1/C150:	C2 20      	REP #$20           ; 16-bit A
C1/C152:	A5 14      	LDA $14
C1/C154:	9D 82 6F   	STA $6F82,X        ; target X position
C1/C157:	9D 3A 6A   	STA $6A3A,X        ; thread X position
C1/C15A:	A5 16      	LDA $16
C1/C15C:	9D 84 6F   	STA $6F84,X        ; target Y position
C1/C15F:	9D 3C 6A   	STA $6A3C,X        ; thread Y position
C1/C162:	7B         	TDC                ; A = 0000
C1/C163:	E2 20      	SEP #$20           ; 8-bit A
C1/C165:	A5 12      	LDA $12            ; target index
C1/C167:	30 0D      	BMI $C176          ; branch if monster target
C1/C169:	29 03      	AND #$03           ; character id 0-3
C1/C16B:	18         	CLC                ; prepare add
C1/C16C:	69 0A      	ADC #$0A           ; offset to block bytes
C1/C16E:	A8         	TAY                ; index to character's block arg
C1/C16F:	B1 78      	LDA ($78),Y        ; character target block id
C1/C171:	99 9B 62   	STA $629B,Y        ; save it [?] (62A5-62A8)
C1/C174:	D0 12      	BNE $C188          ; branch if character blocks

C1/C176:	A0 04 00   	LDY #$0004         ; animation function arg #4
C1/C179:	B1 78      	LDA ($78),Y        ; character targets not missed
C1/C17B:	C8         	INY                ; point to monster targets
C1/C17C:	11 78      	ORA ($78),Y        ; combined targets not missed
C1/C17E:	D0 08      	BNE $C188          ; branch if at least one hit
C1/C180:	A9 0D      	LDA #$0D           ; miss sound effect [?]
C1/C182:	8D E7 E9   	STA $E9E7          ; default animation sound effect
C1/C185:	7B         	TDC                ; A = 0000 (thread inactive)
C1/C186:	80 02      	BRA $C18A

C1/C188:	A9 01      	LDA #$01           ; target hit, so animation thread active
C1/C18A:	9D 2E 6A   	STA $6A2E,X        ; set thread active (or inactive if miss)
C1/C18D:	AD 96 61   	LDA $6196          ; flash screen flag
C1/C190:	F0 34      	BEQ $C1C6          ; branch if not ^

; Flash screen animation
C1/C192:	64 10      	STZ $10
C1/C194:	9C 3F 61   	STZ $613F
C1/C197:	A9 01      	LDA #$01
C1/C199:	85 22      	STA $22
C1/C19B:	A9 D0      	LDA #$D0
C1/C19D:	85 26      	STA $26
C1/C19F:	C2 20      	REP #$20
C1/C1A1:	AF 28 EE D1	LDA $D1EE28
C1/C1A5:	85 24      	STA $24
C1/C1A7:	7B         	TDC
C1/C1A8:	E2 20      	SEP #$20           ; 8-bit A
C1/C1AA:	A9 01      	LDA #$01
C1/C1AC:	85 1C      	STA $1C
C1/C1AE:	AE F6 7A   	LDX $7AF6
C1/C1B1:	DA         	PHX
C1/C1B2:	A2 10 05   	LDX #$0510
C1/C1B5:	DA         	PHX
C1/C1B6:	20 C4 B1   	JSR $B1C4
C1/C1B9:	FA         	PLX
C1/C1BA:	BD 86 6F   	LDA $6F86,X
C1/C1BD:	09 02      	ORA #$02
C1/C1BF:	9D 86 6F   	STA $6F86,X
C1/C1C2:	FA         	PLX
C1/C1C3:	8E F6 7A   	STX $7AF6

C1/C1C6:	20 7C 95   	JSR $957C          ; update sprite priority (buffer)
C1/C1C9:	9C 67 7B   	STZ $7B67          ; stoping hiding BG1 monster sprites [?]
C1/C1CC:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/C1CF:	AD 67 61   	LDA $6167          ; animation BG1 palette index [?]
C1/C1D2:	20 26 9C   	JSR $9C26          ; transfer animation palette data
C1/C1D5:	20 59 1E   	JSR $1E59          ; fill VRAM Battle BG1 tiles w/ $02EE
C1/C1D8:	AD 6F 89   	LDA $896F          ; screen mode (battlefield) [?]
C1/C1DB:	09 10      	ORA #$10
C1/C1DD:	8D 6F 89   	STA $896F
C1/C1E0:	20 69 C2   	JSR $C269          ; prepare animation threads by weapon type
C1/C1E3:	20 8A C3   	JSR $C38A          ; set max sprite priority for all entities
C1/C1E6:	20 A6 BC   	JSR $BCA6          ; set first target index in $12
C1/C1E9:	20 F5 C3   	JSR $C3F5          ; reduce priority of target sprite
C1/C1EC:	20 53 C6   	JSR $C653          ; <---- This is where the animation actually happens on screen
C1/C1EF:	A0 04 00   	LDY #$0004         ; command function arg #4-5
C1/C1F2:	B1 78      	LDA ($78),Y        ; targets not missed
C1/C1F4:	D0 0B      	BNE $C201          ; branch if some exist
C1/C1F6:	C8         	INY
C1/C1F7:	C8         	INY                ; command function arg #6-7
C1/C1F8:	B1 78      	LDA ($78),Y        ; reflectors
C1/C1FA:	F0 05      	BEQ $C201          ; branch if none ^
C1/C1FC:	A9 20      	LDA #$20           ; else, no targets and no reflection
C1/C1FE:	20 B6 9B   	JSR $9BB6          ; wait 32 frames (to fill time [?])

C1/C201:	20 0B BD   	JSR $BD0B          ; update sprite/position data for all entities
C1/C204:	20 59 1E   	JSR $1E59          ; fill VRAM Battle BG1 tiles w/ $02EE
C1/C207:	20 8A C3   	JSR $C38A          ; set max sprite priority for all entities
C1/C20A:	AD 6F 89   	LDA $896F          ; screen mode (battlefield) [?]
C1/C20D:	29 AF      	AND #$AF           ; clear bits 4 and 6 [?]
C1/C20F:	8D 6F 89   	STA $896F
C1/C212:	7B         	TDC                ; A = 0000
C1/C213:	AA         	TAX                ; X = 0000
C1/C214:	8E B4 64   	STX $64B4          ; zero BG1 horizontal scroll
C1/C217:	8E B6 64   	STX $64B6          ; zero BG1 vertical scroll
C1/C21A:	A9 01      	LDA #$01           ; 1 animation thread to update
C1/C21C:	8D 0E 7B   	STA $7B0E          ; monster animation threads to update
C1/C21F:	8D 0F 7B   	STA $7B0F          ; character animation threads to update
C1/C222:	AD 8A 61   	LDA $618A          ; monster special attack
C1/C225:	F0 0B      	BEQ $C232          ; branch if not ^
C1/C227:	20 6B B8   	JSR $B86B          ; disable stepping forward for regen, etc
C1/C22A:	80 06      	BRA $C232

; Do these two ops ever run?
C1/C22C:	20 0B BD   	JSR $BD0B          ; update sprite/position data for all entities
C1/C22F:	20 03 95   	JSR $9503          ; update monster sprite data from buffer

C1/C232:	20 8B AB   	JSR $AB8B          ; clear attacker's sprite animation
C1/C235:	9C 96 61   	STZ $6196          ; clear "Flash Screen" flag
C1/C238:	9C 8A 61   	STZ $618A          ; clear "monster special attack" flag
C1/C23B:	60         	RTS

; Fill subscreen window mask with repeating $10 and #0000

C1/C23C:	48         	PHA                ; store A (subscreen designation [?])
C1/C23D:	C2 20      	REP #$20           ; 16-bit A
C1/C23F:	7B         	TDC                ; A = 0000
C1/C240:	AA         	TAX                ; X = 0000
C1/C241:	A5 10      	LDA $10            ; window mask byte [?]
C1/C243:	9D 94 89   	STA $8994,X
C1/C246:	9D F8 89   	STA $89F8,X
C1/C249:	9D 5C 8A   	STA $8A5C,X
C1/C24C:	9D C0 8A   	STA $8AC0,X
C1/C24F:	9D 24 8B   	STA $8B24,X
C1/C252:	9D 88 8B   	STA $8B88,X        ; fill subscreen window mask [?]
C1/C255:	E8         	INX
C1/C256:	E8         	INX                ; skip every other byte pair
C1/C257:	E8         	INX
C1/C258:	E8         	INX                ; get next bytes to fill
C1/C259:	E0 64 00   	CPX #$0064         ; 50 loops
C1/C25C:	D0 E5      	BNE $C243          ; continue loop
C1/C25E:	8D EC 8B   	STA $8BEC          ; fill one more byte at end of block [?]
C1/C261:	7B         	TDC                ; A = 0000
C1/C262:	E2 20      	SEP #$20           ; 8-bit A
C1/C264:	68         	PLA                ; restore A
C1/C265:	8D 8E 89   	STA $898E          ; subscreen designation (battlefield) [?]
C1/C268:	60         	RTS

; Weapon animation type handling [?]

C1/C269:	AD 70 62   	LDA $6270          ; weapon animation type
C1/C26C:	29 7F      	AND #$7F           ; mask "thrown weapon" bit
C1/C26E:	0A         	ASL A              ; x2
C1/C26F:	AA         	TAX                ; index it
C1/C270:	7C 73 C2   	JMP ($C273,X)      ; jump table

; Routines for weapon animation types

C1/C273:	86 C2  ; $00 ($C286) - Normal
C1/C275:	99 C2  ; $01 ($C299) - Shuriken/Dice/Darts [?]
C1/C277:	7D C2  ; $02 ($C27D) - Boomerang
C1/C279:	12 C3  ; $03 ($C312) - Atma Weapon 3
C1/C27B:	73 C3  ; $04 ($C373) - Atma Weapon 1,2

; Boomerang
C1/C27D:	A9 02      	LDA #$02           ; # animation threads to update
C1/C27F:	8D 0E 7B   	STA $7B0E          ; 2 monster animation threads to update
C1/C282:	8D 0F 7B   	STA $7B0F          ; 2 character animtion threads to update
C1/C285:	60         	RTS

; Normal
C1/C286:	A2 02 01   	LDX #$0102         ; fill byte [?]
C1/C289:	86 10      	STX $10            ; used in $C23C below
C1/C28B:	A9 12      	LDA #$12           ; subscreen designation [?]
C1/C28D:	20 3C C2   	JSR $C23C          ; fill subscreen window mask [?]
C1/C290:	A9 02      	LDA #$02           ; # animation threads to update
C1/C292:	8D 0E 7B   	STA $7B0E          ; 2 monster animtion threads
C1/C295:	8D 0F 7B   	STA $7B0F          ; 2 character animation threads
C1/C298:	60         	RTS

; Shuriken/Dice/Dart (3 items to animate [?])
C1/C299:	AE F6 7A   	LDX $7AF6          ; animation thread pointer
C1/C29C:	A0 10 00   	LDY #$0010         ; prepare animation thread loop below
C1/C29F:	BD 38 6A   	LDA $6A38,X        ; attacker index
C1/C2A2:	30 2D      	BMI $C2D1          ; branch if monster attacker
C1/C2A4:	BD 39 6A   	LDA $6A39,X        ; target index
C1/C2A7:	30 28      	BMI $C2D1          ; branch if monster target
C1/C2A9:	AD 1F 20   	LDA $201F          ; type of battle
C1/C2AC:	C9 03      	CMP #$03           ; "side attack"
C1/C2AE:	D0 19      	BNE $C2C9          ; branch if not ^
C1/C2B0:	BD 38 6A   	LDA $6A38,X        ; attacker index
C1/C2B3:	C9 02      	CMP #$02           ; on right side
C1/C2B5:	90 09      	BCC $C2C0          ; branch if ^
C1/C2B7:	BD 39 6A   	LDA $6A39,X        ; target index
C1/C2BA:	C9 02      	CMP #$02           ; on right side
C1/C2BC:	90 13      	BCC $C2D1          ; branch if ^
C1/C2BE:	80 09      	BRA $C2C9

C1/C2C0:	BD 39 6A   	LDA $6A39,X        ; target index
C1/C2C3:	C9 02      	CMP #$02           ; on right side
C1/C2C5:	90 02      	BCC $C2C9          ; branch if ^
C1/C2C7:	80 08      	BRA $C2D1
C1/C2C9:	BD 87 6F   	LDA $6F87,X        ; horizontal animation direction
C1/C2CC:	49 40      	EOR #$40           ; toggle animation direction
C1/C2CE:	9D 87 6F   	STA $6F87,X        ; ^ only if attacking own side

C1/C2D1:	BD DE 64   	LDA $64DE,X        ; copy animation thread to next two slots
C1/C2D4:	9D EE 64   	STA $64EE,X
C1/C2D7:	9D FE 64   	STA $64FE,X
C1/C2DA:	BD 2E 6A   	LDA $6A2E,X
C1/C2DD:	9D 3E 6A   	STA $6A3E,X
C1/C2E0:	9D 4E 6A   	STA $6A4E,X
C1/C2E3:	BD 7E 6F   	LDA $6F7E,X
C1/C2E6:	9D 8E 6F   	STA $6F8E,X
C1/C2E9:	9D 9E 6F   	STA $6F9E,X
C1/C2EC:	BD CE 74   	LDA $74CE,X
C1/C2EF:	9D DE 74   	STA $74DE,X
C1/C2F2:	9D EE 74   	STA $74EE,X
C1/C2F5:	E8         	INX
C1/C2F6:	88         	DEY
C1/C2F7:	D0 D8      	BNE $C2D1          ; loop 16 times
C1/C2F9:	AE F6 7A   	LDX $7AF6          ; animation thread pointer
C1/C2FC:	BD 35 6A   	LDA $6A35,X        ; animation frame counter
C1/C2FF:	1A         	INC A
C1/C300:	1A         	INC A              ; add two frames
C1/C301:	9D 45 6A   	STA $6A45,X        ; set in new 2nd thread slot
C1/C304:	1A         	INC A
C1/C305:	1A         	INC A              ; add two more frames
C1/C306:	9D 55 6A   	STA $6A55,X        ; set in new 3rd thread slot
C1/C309:	A9 05      	LDA #$05           ; number of animation threads to update
C1/C30B:	8D 0E 7B   	STA $7B0E          ; 5 monster animation threads
C1/C30E:	8D 0F 7B   	STA $7B0F          ; 5 character animation threads
C1/C311:	60         	RTS

; Atma Weapon 3
C1/C312:	20 89 BC   	JSR $BC89        ; set attacker index in $10
C1/C315:	A5 10      	LDA $10
C1/C317:	29 7F      	AND #$7F
C1/C319:	0A         	ASL A
C1/C31A:	AA         	TAX
C1/C31B:	C2 20      	REP #$20
C1/C31D:	BF 8B CE C2	LDA $C2CE8B,X   ; increment of 128 bytes
C1/C321:	AA         	TAX
C1/C322:	DA         	PHX
C1/C323:	A0 08 00   	LDY #$0008
C1/C326:	BD DE 64   	LDA $64DE,X
C1/C329:	9D EE 64   	STA $64EE,X
C1/C32C:	9D FE 64   	STA $64FE,X
C1/C32F:	BD 2E 6A   	LDA $6A2E,X
C1/C332:	9D 3E 6A   	STA $6A3E,X
C1/C335:	9D 4E 6A   	STA $6A4E,X
C1/C338:	BD 7E 6F   	LDA $6F7E,X
C1/C33B:	9D 8E 6F   	STA $6F8E,X
C1/C33E:	9D 9E 6F   	STA $6F9E,X
C1/C341:	BD CE 74   	LDA $74CE,X
C1/C344:	9D DE 74   	STA $74DE,X
C1/C347:	9D EE 74   	STA $74EE,X
C1/C34A:	E8         	INX
C1/C34B:	E8         	INX
C1/C34C:	88         	DEY
C1/C34D:	D0 D7      	BNE $C326
C1/C34F:	7B         	TDC
C1/C350:	E2 20      	SEP #$20           ; 8-bit A
C1/C352:	FA         	PLX
C1/C353:	BD 35 6A   	LDA $6A35,X
C1/C356:	1A         	INC A
C1/C357:	1A         	INC A
C1/C358:	9D 45 6A   	STA $6A45,X
C1/C35B:	1A         	INC A
C1/C35C:	1A         	INC A
C1/C35D:	9D 55 6A   	STA $6A55,X
C1/C360:	A2 02 02   	LDX #$0202
C1/C363:	86 10      	STX $10
C1/C365:	A9 10      	LDA #$10
C1/C367:	20 3C C2   	JSR $C23C         ; fill subscreen window mask
C1/C36A:	A9 05      	LDA #$05
C1/C36C:	8D 0E 7B   	STA $7B0E
C1/C36F:	8D 0F 7B   	STA $7B0F
C1/C372:	60         	RTS

; Atma Weapon 1,2
C1/C373:	A2 02 02   	LDX #$0202
C1/C376:	86 10      	STX $10
C1/C378:	A9 10      	LDA #$10
C1/C37A:	20 3C C2   	JSR $C23C         ; fill subscreen window mask
C1/C37D:	A9 02      	LDA #$02
C1/C37F:	8D 0E 7B   	STA $7B0E
C1/C382:	8D 0F 7B   	STA $7B0F
C1/C385:	60         	RTS

C1/C386:	20 8A C3   	JSR $C38A         ; set max sprite priority for all entities
C1/C389:	6B         	RTL

; Set max sprite priority for all entities

C1/C38A:	A9 30      	LDA #$30          ; maximum sprite priority
C1/C38C:	8D BD 61   	STA $61BD         ; character 1 sprite priority
C1/C38F:	8D DD 61   	STA $61DD         ; character 2 sprite priority
C1/C392:	8D FD 61   	STA $61FD         ; character 3 sprite priority
C1/C395:	8D 1D 62   	STA $621D         ; character 4 sprite priority
C1/C398:	7B         	TDC               ; A = 0000
C1/C399:	AA         	TAX               ; X = 0000
C1/C39A:	A9 31      	LDA #$31          ; max sprite priority, top bit of sprite index [?]
C1/C39C:	9D DC 80   	STA $80DC,X       ; set monster sprite data
C1/C39F:	E8         	INX
C1/C3A0:	E8         	INX               ; next monster
C1/C3A1:	E0 0C 00   	CPX #$000C        ; 6 loops (all monsters)
C1/C3A4:	D0 F6      	BNE $C39C         ; continue loop
C1/C3A6:	60         	RTS

C1/C3A7:	20 AB C3   	JSR $C3AB
C1/C3AA:	6B         	RTL

C1/C3AB:	86 10      	STX $10
C1/C3AD:	7B         	TDC
C1/C3AE:	AA         	TAX
C1/C3AF:	A8         	TAY
C1/C3B0:	C2 20      	REP #$20
C1/C3B2:	BD 43 80   	LDA $8043,X
C1/C3B5:	C5 10      	CMP $10
C1/C3B7:	B0 0A      	BCS $C3C3
C1/C3B9:	E2 20      	SEP #$20           ; 8-bit A
C1/C3BB:	A9 20      	LDA #$20
C1/C3BD:	99 BD 61   	STA $61BD,Y
C1/C3C0:	7B         	TDC
C1/C3C1:	C2 20      	REP #$20
C1/C3C3:	98         	TYA
C1/C3C4:	18         	CLC
C1/C3C5:	69 20 00   	ADC #$0020
C1/C3C8:	A8         	TAY
C1/C3C9:	E8         	INX
C1/C3CA:	E8         	INX
C1/C3CB:	E0 08 00   	CPX #$0008
C1/C3CE:	D0 E2      	BNE $C3B2
C1/C3D0:	7B         	TDC
C1/C3D1:	AA         	TAX
C1/C3D2:	BD 27 80   	LDA $8027,X
C1/C3D5:	C5 10      	CMP $10
C1/C3D7:	B0 09      	BCS $C3E2
C1/C3D9:	E2 20      	SEP #$20           ; 8-bit A
C1/C3DB:	A9 21      	LDA #$21
C1/C3DD:	9D DC 80   	STA $80DC,X
C1/C3E0:	C2 20      	REP #$20
C1/C3E2:	E8         	INX
C1/C3E3:	E8         	INX
C1/C3E4:	E0 0C 00   	CPX #$000C
C1/C3E7:	D0 E9      	BNE $C3D2
C1/C3E9:	7B         	TDC
C1/C3EA:	E2 20      	SEP #$20           ; 8-bit A
C1/C3EC:	60         	RTS

C1/C3ED:	20 FA C3   	JSR $C3FA
C1/C3F0:	6B         	RTL

C1/C3F1:	20 F5 C3   	JSR $C3F5          ; reduce priority of target sprite
C1/C3F4:	6B         	RTL

; Reduce priority of target entity's sprite

C1/C3F5:	20 A5 AA   	JSR $AAA5          ; set target in $12 (checks reflection)
C1/C3F8:	A5 12      	LDA $12            ; target entity index
C1/C3FA:	29 7F      	AND #$7F           ; mask "is monster" flag
C1/C3FC:	A2 00 00   	LDX #$0000         ; X = 0000
C1/C3FF:	DD 21 7A   	CMP $7A21,X        ; next highest sprite priority entity
C1/C402:	F0 0A      	BEQ $C40E          ; exit loop if match found
C1/C404:	E8         	INX
C1/C405:	E8         	INX
C1/C406:	E8         	INX
C1/C407:	E8         	INX                ; point to next priority slot
C1/C408:	E0 28 00   	CPX #$0028         ; loop through all 10 slots
C1/C40B:	D0 F2      	BNE $C3FF          ; continue loop
C1/C40D:	60         	RTS

C1/C40E:	BD 21 7A   	LDA $7A21,X        ; entity index in current priority slot
C1/C411:	C9 04      	CMP #$04           ; character range
C1/C413:	90 0E      	BCC $C423          ; branch if in ^
C1/C415:	38         	SEC                ; prepare subtraction
C1/C416:	E9 04      	SBC #$04           ; get monster index 0-5
C1/C418:	29 07      	AND #$07           ; unnecessary mask
C1/C41A:	0A         	ASL A              ; x2
C1/C41B:	A8         	TAY                ; index it
C1/C41C:	A9 21      	LDA #$21           ; sprite priority "2"
C1/C41E:	99 DC 80   	STA $80DC,Y        ; reduce monster sprite priority
C1/C421:	80 0B      	BRA $C42E

C1/C423:	0A         	ASL A
C1/C424:	0A         	ASL A
C1/C425:	0A         	ASL A
C1/C426:	0A         	ASL A
C1/C427:	0A         	ASL A              ; x32
C1/C428:	A8         	TAY                ; index it
C1/C429:	A9 20      	LDA #$20           ; sprite priority "2"
C1/C42B:	99 BD 61   	STA $61BD,Y        ; reduce character sprite priority

C1/C42E:	E8         	INX
C1/C42F:	E8         	INX
C1/C430:	E8         	INX
C1/C431:	E8         	INX
C1/C432:	E0 28 00   	CPX #$0028         ; loop through all 12 entities
C1/C435:	D0 D7      	BNE $C40E          ; reduce priority for all remaining slots
C1/C437:	60         	RTS

C1/C438:	7A         	PLY
C1/C439:	B9 2F 81   	LDA $812F,Y
C1/C43C:	0A         	ASL A
C1/C43D:	0A         	ASL A
C1/C43E:	85 14      	STA $14
C1/C440:	64 15      	STZ $15
C1/C442:	C2 20      	REP #$20
C1/C444:	A5 14      	LDA $14
C1/C446:	18         	CLC
C1/C447:	69 20 00   	ADC #$0020
C1/C44A:	85 14      	STA $14
C1/C44C:	7B         	TDC
C1/C44D:	E2 20      	SEP #$20           ; 8-bit A
C1/C44F:	DA         	PHX
C1/C450:	A5 10      	LDA $10
C1/C452:	29 03      	AND #$03
C1/C454:	AA         	TAX
C1/C455:	BD 10 7B   	LDA $7B10,X
C1/C458:	29 01      	AND #$01
C1/C45A:	D0 12      	BNE $C46E
C1/C45C:	C2 20      	REP #$20
C1/C45E:	B9 0F 80   	LDA $800F,Y
C1/C461:	18         	CLC
C1/C462:	65 14      	ADC $14
C1/C464:	85 14      	STA $14
C1/C466:	B9 27 80   	LDA $8027,Y
C1/C469:	85 16      	STA $16
C1/C46B:	7B         	TDC
C1/C46C:	FA         	PLX
C1/C46D:	60         	RTS

C1/C46E:	C2 20      	REP #$20
C1/C470:	B9 0F 80   	LDA $800F,Y
C1/C473:	38         	SEC
C1/C474:	E5 14      	SBC $14
C1/C476:	85 14      	STA $14
C1/C478:	B9 27 80   	LDA $8027,Y
C1/C47B:	85 16      	STA $16
C1/C47D:	7B         	TDC
C1/C47E:	FA         	PLX
C1/C47F:	60         	RTS

C1/C480:	AD BA 64   	LDA $64BA         ; magitek mode enabled [?]
C1/C483:	F0 05      	BEQ $C48A         ; branch if not ^
C1/C485:	A0 F4 FF   	LDY #$FFF4
C1/C488:	80 01      	BRA $C48B
C1/C48A:	A8         	TAY               ; Y = 0000
C1/C48B:	84 18      	STY $18
C1/C48D:	60         	RTS

C1/C48E:	20 80 C4   	JSR $C480
C1/C491:	A9 01      	LDA #$01
C1/C493:	85 14      	STA $14
C1/C495:	A5 12      	LDA $12
C1/C497:	80 07      	BRA $C4A0

C1/C499:	20 80 C4   	JSR $C480
C1/C49C:	64 14      	STZ $14
C1/C49E:	A5 10      	LDA $10           ; attacker index
C1/C4A0:	8D B1 EC   	STA $ECB1
C1/C4A3:	10 03      	BPL $C4A8         ; branch if character attacker
C1/C4A5:	4C 8F C5   	JMP $C58F         ; else handle monster attacker

C1/C4A8:	0A         	ASL A             ; character attacker index
C1/C4A9:	A8         	TAY               ; index it
C1/C4AA:	5A         	PHY               ; store character attacker index
C1/C4AB:	A0 01 00   	LDY #$0001
C1/C4AE:	B7 22      	LDA [$22],Y       ; load animation data byte #2
C1/C4B0:	29 E0      	AND #$E0          ; isolate top 3 bits
C1/C4B2:	F0 67      	BEQ $C51B         ; branch if none set
C1/C4B4:	C9 20      	CMP #$20          ; is only bit 5 set?
C1/C4B6:	F0 61      	BEQ $C519         ; branch if ^
C1/C4B8:	C9 40      	CMP #$40          ; is only bit 6 set?
C1/C4BA:	F0 2A      	BEQ $C4E6         ; branch if ^
C1/C4BC:	C9 E0      	CMP #$E0          ; are bits 5,6,7 set?
C1/C4BE:	F0 21      	BEQ $C4E1         ; branch if ^
C1/C4C0:	C9 80      	CMP #$80          ; is only bit 7 set?
C1/C4C2:	F0 7C      	BEQ $C540         ; branch if ^
C1/C4C4:	C9 C0      	CMP #$C0          ; are bits 6,7 set?
C1/C4C6:	F0 78      	BEQ $C540         ; branch if ^
C1/C4C8:	C9 A0      	CMP #$A0          ; are bits 5,7 set?
C1/C4CA:	D0 18      	BNE $C4E4         ; branch if 5,6 set

; Only bits 5 and 7 set in 2nd animation data byte top 3 bits
C1/C4CC:	A5 14      	LDA $14
C1/C4CE:	F0 1E      	BEQ $C4EE
C1/C4D0:	C2 20      	REP #$20          ; 16-bit A
C1/C4D2:	AD 22 7B   	LDA $7B22         ; BG3 animation X offset [?]
C1/C4D5:	85 14      	STA $14
C1/C4D7:	AD 24 7B   	LDA $7B24         ; BG3 animation Y offset [?]
C1/C4DA:	85 16      	STA $16
C1/C4DC:	7B         	TDC               ; A = 0000
C1/C4DD:	E2 20      	SEP #$20          ; 8-bit A
C1/C4DF:	7A         	PLY               ; restore character attacker index
C1/C4E0:	60         	RTS

; All top three bits of 2nd animation data byte
C1/C4E1:	4C 73 C5   	JMP $C573

; Only bit 5 and 6 set in 2nd animation data byte top 3 bits
C1/C4E4:	80 08      	BRA $C4EE

; Only bit 6 in 2nd animation data byte top 3 bits
C1/C4E6:	A9 10      	LDA #$10
C1/C4E8:	85 16      	STA $16
C1/C4EA:	64 17      	STZ $17
C1/C4EC:	80 37      	BRA $C525

; Only bit 5 and 6 set in 2nd animation data byte top 3 bits
C1/C4EE:	9C B1 EC   	STZ $ECB1
C1/C4F1:	9C B2 EC   	STZ $ECB2
C1/C4F4:	7A         	PLY
C1/C4F5:	C2 20      	REP #$20
C1/C4F7:	B9 33 80   	LDA $8033,Y
C1/C4FA:	18         	CLC
C1/C4FB:	6D B1 EC   	ADC $ECB1
C1/C4FE:	10 03      	BPL $C503
C1/C500:	7B         	TDC
C1/C501:	80 08      	BRA $C50B
C1/C503:	C9 FC 00   	CMP #$00FC
C1/C506:	90 03      	BCC $C50B
C1/C508:	A9 FC 00   	LDA #$00FC
C1/C50B:	85 14      	STA $14
C1/C50D:	B9 43 80   	LDA $8043,Y
C1/C510:	18         	CLC
C1/C511:	65 18      	ADC $18
C1/C513:	85 16      	STA $16
C1/C515:	7B         	TDC
C1/C516:	E2 20      	SEP #$20           ; 8-bit A
C1/C518:	60         	RTS

; Only bit 5 in 2nd animation data byte top 3 bits
C1/C519:	80 44      	BRA $C55F

; No 5,6,7 bits in 2nd animation data byte top 3 bits
C1/C51B:	BD 30 6A   	LDA $6A30,X
C1/C51E:	0A         	ASL A
C1/C51F:	0A         	ASL A
C1/C520:	0A         	ASL A
C1/C521:	85 16      	STA $16
C1/C523:	64 17      	STZ $17
C1/C525:	7A         	PLY              ; <--- only bit 6 enters here
C1/C526:	C2 20      	REP #$20
C1/C528:	B9 33 80   	LDA $8033,Y
C1/C52B:	85 14      	STA $14
C1/C52D:	B9 43 80   	LDA $8043,Y
C1/C530:	18         	CLC
C1/C531:	69 08 00   	ADC #$0008
C1/C534:	38         	SEC
C1/C535:	E5 16      	SBC $16
C1/C537:	18         	CLC
C1/C538:	65 18      	ADC $18
C1/C53A:	85 16      	STA $16
C1/C53C:	7B         	TDC
C1/C53D:	E2 20      	SEP #$20           ; 8-bit A
C1/C53F:	60         	RTS

; Either only bit 7 or both 6/7 set in 2nd animation byte top 3 bits
C1/C540:	DA         	PHX
C1/C541:	A5 10      	LDA $10
C1/C543:	29 03      	AND #$03
C1/C545:	AA         	TAX
C1/C546:	BD 10 7B   	LDA $7B10,X
C1/C549:	29 01      	AND #$01
C1/C54B:	F0 05      	BEQ $C552
C1/C54D:	A2 E8 FF   	LDX #$FFE8
C1/C550:	80 03      	BRA $C555
C1/C552:	A2 18 00   	LDX #$0018
C1/C555:	8E B1 EC   	STX $ECB1
C1/C558:	FA         	PLX
C1/C559:	A5 14      	LDA $14
C1/C55B:	F0 91      	BEQ $C4EE
C1/C55D:	80 95      	BRA $C4F4
C1/C55F:	7A         	PLY
C1/C560:	C2 20      	REP #$20
C1/C562:	B9 33 80   	LDA $8033,Y
C1/C565:	85 14      	STA $14
C1/C567:	B9 3B 80   	LDA $803B,Y
C1/C56A:	18         	CLC
C1/C56B:	65 18      	ADC $18
C1/C56D:	85 16      	STA $16
C1/C56F:	7B         	TDC
C1/C570:	E2 20      	SEP #$20           ; 8-bit A
C1/C572:	60         	RTS

; All top three bits of 2nd animation data byte set
C1/C573:	7A         	PLY
C1/C574:	C2 20      	REP #$20
C1/C576:	B9 33 80   	LDA $8033,Y
C1/C579:	38         	SEC
C1/C57A:	E9 08 00   	SBC #$0008
C1/C57D:	85 14      	STA $14
C1/C57F:	B9 3B 80   	LDA $803B,Y
C1/C582:	18         	CLC
C1/C583:	65 18      	ADC $18
C1/C585:	38         	SEC
C1/C586:	E9 08 00   	SBC #$0008
C1/C589:	85 16      	STA $16
C1/C58B:	7B         	TDC
C1/C58C:	E2 20      	SEP #$20           ; 8-bit A
C1/C58E:	60         	RTS

C1/C58F:	29 7F      	AND #$7F
C1/C591:	38         	SEC
C1/C592:	E9 04      	SBC #$04
C1/C594:	0A         	ASL A
C1/C595:	A8         	TAY
C1/C596:	5A         	PHY
C1/C597:	A0 01 00   	LDY #$0001
C1/C59A:	B7 22      	LDA [$22],Y
C1/C59C:	29 E0      	AND #$E0
C1/C59E:	F0 2B      	BEQ $C5CB
C1/C5A0:	C9 20      	CMP #$20
C1/C5A2:	F0 24      	BEQ $C5C8
C1/C5A4:	C9 40      	CMP #$40
C1/C5A6:	F0 1D      	BEQ $C5C5
C1/C5A8:	C9 80      	CMP #$80
C1/C5AA:	F0 25      	BEQ $C5D1
C1/C5AC:	C9 C0      	CMP #$C0
C1/C5AE:	F0 1E      	BEQ $C5CE
C1/C5B0:	C9 A0      	CMP #$A0
C1/C5B2:	D0 14      	BNE $C5C8
C1/C5B4:	C2 20      	REP #$20
C1/C5B6:	AD 22 7B   	LDA $7B22
C1/C5B9:	85 14      	STA $14
C1/C5BB:	AD 24 7B   	LDA $7B24
C1/C5BE:	85 16      	STA $16
C1/C5C0:	7B         	TDC
C1/C5C1:	E2 20      	SEP #$20           ; 8-bit A
C1/C5C3:	7A         	PLY
C1/C5C4:	60         	RTS

C1/C5C5:	4C 0F C6   	JMP $C60F

C1/C5C8:	4C 42 C6   	JMP $C642

C1/C5CB:	4C 20 C6   	JMP $C620

C1/C5CE:	4C 38 C4   	JMP $C438

C1/C5D1:	7A         	PLY
C1/C5D2:	B9 2F 81   	LDA $812F,Y
C1/C5D5:	0A         	ASL A
C1/C5D6:	0A         	ASL A
C1/C5D7:	18         	CLC
C1/C5D8:	69 10      	ADC #$10
C1/C5DA:	85 14      	STA $14
C1/C5DC:	64 15      	STZ $15
C1/C5DE:	DA         	PHX
C1/C5DF:	A5 10      	LDA $10
C1/C5E1:	29 03      	AND #$03
C1/C5E3:	AA         	TAX
C1/C5E4:	BD 10 7B   	LDA $7B10,X
C1/C5E7:	29 01      	AND #$01
C1/C5E9:	D0 12      	BNE $C5FD
C1/C5EB:	C2 20      	REP #$20
C1/C5ED:	B9 0F 80   	LDA $800F,Y
C1/C5F0:	18         	CLC
C1/C5F1:	65 14      	ADC $14
C1/C5F3:	85 14      	STA $14
C1/C5F5:	B9 27 80   	LDA $8027,Y
C1/C5F8:	85 16      	STA $16
C1/C5FA:	7B         	TDC
C1/C5FB:	FA         	PLX
C1/C5FC:	60         	RTS

C1/C5FD:	C2 20      	REP #$20
C1/C5FF:	B9 0F 80   	LDA $800F,Y
C1/C602:	38         	SEC
C1/C603:	E5 14      	SBC $14
C1/C605:	85 14      	STA $14
C1/C607:	B9 27 80   	LDA $8027,Y
C1/C60A:	85 16      	STA $16
C1/C60C:	7B         	TDC
C1/C60D:	FA         	PLX
C1/C60E:	60         	RTS

C1/C60F:	7A         	PLY
C1/C610:	C2 20      	REP #$20
C1/C612:	B9 0F 80   	LDA $800F,Y
C1/C615:	85 14      	STA $14
C1/C617:	B9 CF 80   	LDA $80CF,Y
C1/C61A:	85 16      	STA $16
C1/C61C:	7B         	TDC
C1/C61D:	E2 20      	SEP #$20           ; 8-bit A
C1/C61F:	60         	RTS

C1/C620:	BD 30 6A   	LDA $6A30,X
C1/C623:	0A         	ASL A
C1/C624:	0A         	ASL A
C1/C625:	0A         	ASL A
C1/C626:	85 16      	STA $16
C1/C628:	64 17      	STZ $17
C1/C62A:	7A         	PLY
C1/C62B:	C2 20      	REP #$20
C1/C62D:	B9 0F 80   	LDA $800F,Y
C1/C630:	85 14      	STA $14
C1/C632:	B9 27 80   	LDA $8027,Y
C1/C635:	18         	CLC
C1/C636:	69 08 00   	ADC #$0008
C1/C639:	38         	SEC
C1/C63A:	E5 16      	SBC $16
C1/C63C:	85 16      	STA $16
C1/C63E:	7B         	TDC
C1/C63F:	E2 20      	SEP #$20           ; 8-bit A
C1/C641:	60         	RTS

C1/C642:	7A         	PLY
C1/C643:	C2 20      	REP #$20
C1/C645:	B9 0F 80   	LDA $800F,Y
C1/C648:	85 14      	STA $14
C1/C64A:	B9 1B 80   	LDA $801B,Y
C1/C64D:	85 16      	STA $16
C1/C64F:	7B         	TDC
C1/C650:	E2 20      	SEP #$20           ; 8-bit A
C1/C652:	60         	RTS

; Fight (and Magic) attack animation happens here

C1/C653:	7B         	TDC                ; A = 0000
C1/C654:	AA         	TAX                ; X = 0000
C1/C655:	9E 95 60   	STZ $6095,X        ; zero BG scroll data
C1/C658:	E8         	INX
C1/C659:	E0 12 00   	CPX #$0012         ; loop 18 times
C1/C65C:	D0 F7      	BNE $C655          ; clear scroll amplitude/frequency for BG1-BG3

C1/C65E:	20 7C 95   	JSR $957C          ; update sprite priority (buffer)
C1/C661:	9C FA EB   	STZ $EBFA          ; [?]
C1/C664:	9C A7 60   	STZ $60A7          ; unset "Hide BG1 animation" flag
C1/C667:	9C A8 60   	STZ $60A8          ; unset "HIde BG3 animation" flag
C1/C66A:	7B         	TDC                ; A = 0000
C1/C66B:	AA         	TAX                ; X = 0000
C1/C66C:	9E 95 60   	STZ $6095,X        ; zero BG scroll data
C1/C66F:	E8         	INX
C1/C670:	E0 12 00   	CPX #$0012         ; loop 18 times
C1/C673:	D0 F7      	BNE $C66C          ; clear amplitude/frequency data again (why?)

C1/C675:	7B         	TDC                ; A = 0000
C1/C676:	AA         	TAX                ; X = 0000
C1/C677:	A8         	TAY                ; Y = 0000
C1/C678:	BD BC 61   	LDA $61BC,X        ; character palette index
C1/C67B:	99 6E 61   	STA $616E,Y        ; copy to buffer
C1/C67E:	8A         	TXA
C1/C67F:	18         	CLC                ; clear carry
C1/C680:	69 20      	ADC #$20           ; next character's offset
C1/C682:	AA         	TAX                ; index it
C1/C683:	C8         	INY                ; next buffer index
C1/C684:	C0 04 00   	CPY #$0004         ; loop 4 times (4 characters)
C1/C687:	D0 EF      	BNE $C678          ; continue loop

C1/C689:	7B         	TDC                ; A = 0000
C1/C68A:	AA         	TAX                ; X = 0000
C1/C68B:	BD DB 80   	LDA $80DB,X        ; monster sprite data
C1/C68E:	99 6E 61   	STA $616E,Y        ; copy to buffer
C1/C691:	E8         	INX
C1/C692:	E8         	INX                ; point to next monster
C1/C693:	C8         	INY                ; point to next buffer byte
C1/C694:	C0 0A 00   	CPY #$000A         ; loop 6 times (6 monsters)
C1/C697:	D0 F2      	BNE $C68B          ; continue loop

C1/C699:	7B         	TDC                ; A = 0000
C1/C69A:	AA         	TAX                ; X = 0000
C1/C69B:	9E 85 60   	STZ $6085,X        ; zero palette shift counter [?]
C1/C69E:	E8         	INX                ; next shift counter byte
C1/C69F:	E0 10 00   	CPX #$0010         ; zero 16 bytes (all palette shifts) [?]
C1/C6A2:	D0 F7      	BNE $C69B          ; continue loop

C1/C6A4:	7B         	TDC                ; A = 0000
C1/C6A5:	AA         	TAX                ; X = 0000
C1/C6A6:	9C 14 7B   	STZ $7B14          ; # of active (sprite) threads [?]

; Process one animation thread-frame
C1/C6A9:	64 9B      	STZ $9B            ; clear "pending frame" [?]
C1/C6AB:	BD 2E 6A   	LDA $6A2E,X        ; thread is active
C1/C6AE:	F0 58      	BEQ $C708          ; continue loop if not ^
C1/C6B0:	A5 99      	LDA $99            ; sprite animation threads paused
C1/C6B2:	F0 05      	BEQ $C6B9          ; branch if not ^
C1/C6B4:	E0 00 05   	CPX #$0500         ; is this a sprite animation thread?
C1/C6B7:	90 4F      	BCC $C708          ; continue loop if ^
C1/C6B9:	EE 14 7B   	INC $7B14          ; add to active sprite thread count
C1/C6BC:	DE 35 6A   	DEC $6A35,X        ; decrement animation frame waitcount
C1/C6BF:	D0 47      	BNE $C708          ; if not zero, continue loop
C1/C6C1:	BD 34 6A   	LDA $6A34,X        ; animation speed (frames per update)
C1/C6C4:	9D 35 6A   	STA $6A35,X        ; reset animation frame waitcount
C1/C6C7:	BC 31 6A   	LDY $6A31,X        ; animation script pointer
C1/C6CA:	84 5B      	STY $5B            ; save it
C1/C6CC:	BD 33 6A   	LDA $6A33,X        ; animation script bank
C1/C6CF:	85 5D      	STA $5D            ; save it
C1/C6D1:	BD 86 6F   	LDA $6F86,X        ; thread layer/priority
C1/C6D4:	29 03      	AND #$03           ; isolate thread layer
C1/C6D6:	F0 1E      	BEQ $C6F6          ; branch if sprite layer
C1/C6D8:	29 01      	AND #$01           ; "BG1 layer"
C1/C6DA:	D0 0D      	BNE $C6E9          ; branch if ^

; BG3 layer
C1/C6DC:	9E DE 64   	STZ $64DE,X        ; zero "sprite is active"
C1/C6DF:	AD AD 60   	LDA $60AD          ; "BG3 animation paused"
C1/C6E2:	D0 7C      	BNE $C760          ; continue loop if ^
C1/C6E4:	20 23 C8   	JSR $C823          ; execute BG3 animation
C1/C6E7:	80 6F      	BRA $C758          ; continue loop

; BG1 layer
C1/C6E9:	9E DE 64   	STZ $64DE,X        ; zero "sprite is active"
C1/C6EC:	AD AC 60   	LDA $60AC          ; "BG1 animation paused"
C1/C6EF:	D0 6F      	BNE $C760          ; continue loop if ^
C1/C6F1:	20 B9 C7   	JSR $C7B9          ; execute BG1 animation
C1/C6F4:	90 62      	BCC $C758          ; continue loop

; Sprite layer
C1/C6F6:	A5 9B      	LDA $9B            ; pending frame [?]
C1/C6F8:	D0 1A      	BNE $C714          ; branch if ^
C1/C6FA:	A7 5B      	LDA [$5B]          ; animation script byte
C1/C6FC:	10 16      	BPL $C714          ; branch if not a command op
C1/C6FE:	C9 FF      	CMP #$FF           ; "end" op code
C1/C700:	D0 08      	BNE $C70A          ; branch if not end of script
C1/C702:	9E 2E 6A   	STZ $6A2E,X        ; set thread "inactive"
C1/C705:	9E DE 64   	STZ $64DE,X        ; set sprite "inactive"
C1/C708:	80 56      	BRA $C760          ; branch to next loop

; Command Ops

C1/C70A:	20 D7 D9   	JSR $D9D7          ; execute script command
C1/C70D:	A4 5B      	LDY $5B            ; animation script pointer
C1/C70F:	C8         	INY                ; get next byte offset
C1/C710:	84 5B      	STY $5B            ; update script pointer
C1/C712:	80 BD      	BRA $C6D1          ; continue this thread script

; Animation Frames - 

C1/C714:	64 9B      	STZ $9B            ; [?]
C1/C716:	C9 1F      	CMP #$1F           ; is frame #32 (last frame)
C1/C718:	F0 06      	BEQ $C720          ; branch if ^
C1/C71A:	18         	CLC                ; clear carry
C1/C71B:	7D 8C 6F   	ADC $6F8C,X        ; add frame offset (for loops)
C1/C71E:	29 7F      	AND #$7F           ; mask top bit [?]

C1/C720:	9D E3 64   	STA $64E3,X        ; set animation frame number
C1/C723:	BD 37 6A   	LDA $6A37,X        ; sprite tile base offset ID
C1/C726:	9D E4 64   	STA $64E4,X        ; store in buffer
C1/C729:	C2 20      	REP #$20           ; 16-bit A
C1/C72B:	BD 3A 6A   	LDA $6A3A,X        ; thread's X position
C1/C72E:	18         	CLC                ; clear carry
C1/C72F:	7D CE 74   	ADC $74CE,X        ; add thread's X offset
C1/C732:	9D DF 64   	STA $64DF,X        ; update sprite's X position
C1/C735:	BD 3C 6A   	LDA $6A3C,X        ; thread's Y position
C1/C738:	18         	CLC                ; clear carry
C1/C739:	7D D0 74   	ADC $74D0,X        ; add thread's Y offset
C1/C73C:	9D E1 64   	STA $64E1,X        ; update sprite's Y position
C1/C73F:	7B         	TDC                ; A = 0000
C1/C740:	E2 20      	SEP #$20           ; 8-bit A
C1/C742:	BD 87 6F   	LDA $6F87,X        ; thread is horizontally flipped
C1/C745:	9D E5 64   	STA $64E5,X        ; buffer flag [?]
C1/C748:	BD 86 6F   	LDA $6F86,X        ; thread priority/layer
C1/C74B:	29 30      	AND #$30           ; isolate sprite priority
C1/C74D:	1D D5 74   	ORA $74D5,X        ; combine with thread palette index
C1/C750:	9D E6 64   	STA $64E6,X        ; save in buffer [?]
C1/C753:	A9 01      	LDA #$01
C1/C755:	9D DE 64   	STA $64DE,X        ; set sprite "active"
C1/C758:	C2 20      	REP #$20           ; 16-bit A
C1/C75A:	A5 5B      	LDA $5B            ; script index
C1/C75C:	1A         	INC A              ; next script index
C1/C75D:	9D 31 6A   	STA $6A31,X        ; advance animation script pointer

C1/C760:	C2 20      	REP #$20           ; 16-bit A
C1/C762:	8A         	TXA                ; animation thread offset
C1/C763:	18         	CLC                ; clear carry
C1/C764:	69 10 00   	ADC #$0010         ; point to next animation thread 
C1/C767:	AA         	TAX                ; index it
C1/C768:	7B         	TDC                ; A = 0000
C1/C769:	E2 20      	SEP #$20           ; 8-bit A
C1/C76B:	E0 50 05   	CPX #$0550         ; check all 85 animation threads
C1/C76E:	F0 03      	BEQ $C773          ; branch when finished
C1/C770:	4C A9 C6   	JMP $C6A9

C1/C773:	20 2A 02   	JSR $022A          ; wait a frame (and run updates)
C1/C776:	AD D2 62   	LDA $62D2          ; sprite priority valid/updated
C1/C779:	D0 03      	BNE $C77E          ; branch if ^
C1/C77B:	20 7C 95   	JSR $957C          ; update sprite priority (buffer)
C1/C77E:	AD 14 7B   	LDA $7B14          ; # of active (sprite) threads [?]
C1/C781:	F0 03      	BEQ $C786          ; branch if none left
C1/C783:	4C A4 C6   	JMP $C6A4          ; else loop through threads again

C1/C786:	7B         	TDC                ; A = 0000
C1/C787:	AA         	TAX                ; X = 0000
C1/C788:	86 10      	STX $10
C1/C78A:	20 3C C2   	JSR $C23C          ; clear subscreen window mask
C1/C78D:	9C D2 62   	STZ $62D2          ; clear "sprite priority valid"
C1/C790:	9C AF 62   	STZ $62AF          ; clear monsters in BG1 [?]
C1/C793:	20 7C 95   	JSR $957C          ; update sprite priority (buffer)
C1/C796:	7B         	TDC                ; A = 0000
C1/C797:	AA         	TAX                ; X = 0000
C1/C798:	9D 15 7B   	STA $7B15,X        ; clear BG1 animation details
C1/C79B:	9D 21 7B   	STA $7B21,X        ; clear BG3 animation details
C1/C79E:	E8         	INX                ; next byte
C1/C79F:	E0 0C 00   	CPX #$000C         ; loop 12 times
C1/C7A2:	D0 F4      	BNE $C798          ; branch till all data clear

C1/C7A4:	A2 00 01   	LDX #$0100
C1/C7A7:	8E F5 43   	STX $43F5          ; BG1 scroll HDMA [?]
C1/C7AA:	8E B4 64   	STX $64B4          ; BG1 horizontal scroll position
C1/C7AD:	8E F5 4A   	STX $4AF5          ; BG3 scroll HDMA [?]
C1/C7B0:	7B         	TDC                ; A = 0000
C1/C7B1:	AA         	TAX                ; X = 0000
C1/C7B2:	8E B6 64   	STX $64B6          ; BG1 vertical scroll position
C1/C7B5:	8E F7 4A   	STX $4AF7          ; BG3 scroll something [?]
C1/C7B8:	60         	RTS

; Execute BG1 animation

C1/C7B9:	BD 86 6F   	LDA $6F86,X
C1/C7BC:	29 03      	AND #$03
C1/C7BE:	D0 02      	BNE $C7C2
C1/C7C0:	38         	SEC
C1/C7C1:	60         	RTS

C1/C7C2:	A7 5B      	LDA [$5B]
C1/C7C4:	C9 1F      	CMP #$1F
C1/C7C6:	F0 12      	BEQ $C7DA
C1/C7C8:	C9 FF      	CMP #$FF
C1/C7CA:	D0 12      	BNE $C7DE
C1/C7CC:	9E 2E 6A   	STZ $6A2E,X
C1/C7CF:	A0 00 01   	LDY #$0100
C1/C7D2:	8C F5 43   	STY $43F5
C1/C7D5:	8C B4 64   	STY $64B4
C1/C7D8:	18         	CLC
C1/C7D9:	60         	RTS

C1/C7DA:	A9 0F      	LDA #$0F
C1/C7DC:	80 08      	BRA $C7E6

C1/C7DE:	30 37      	BMI $C817
C1/C7E0:	18         	CLC
C1/C7E1:	7D 8C 6F   	ADC $6F8C,X
C1/C7E4:	29 7F      	AND #$7F
C1/C7E6:	C2 20      	REP #$20
C1/C7E8:	EB         	XBA
C1/C7E9:	0A         	ASL A
C1/C7EA:	18         	CLC
C1/C7EB:	69 00 C4   	ADC #$C400
C1/C7EE:	8D 1A 7B   	STA $7B1A
C1/C7F1:	BD 3A 6A   	LDA $6A3A,X
C1/C7F4:	18         	CLC
C1/C7F5:	7D CE 74   	ADC $74CE,X
C1/C7F8:	8D 1D 7B   	STA $7B1D
C1/C7FB:	BD 3C 6A   	LDA $6A3C,X
C1/C7FE:	18         	CLC
C1/C7FF:	7D D0 74   	ADC $74D0,X
C1/C802:	8D 1F 7B   	STA $7B1F
C1/C805:	7B         	TDC
C1/C806:	E2 20      	SEP #$20           ; 8-bit A
C1/C808:	A9 7F      	LDA #$7F
C1/C80A:	8D 1C 7B   	STA $7B1C
C1/C80D:	9E DE 64   	STZ $64DE,X
C1/C810:	A9 01      	LDA #$01
C1/C812:	8D 15 7B   	STA $7B15
C1/C815:	18         	CLC
C1/C816:	60         	RTS

C1/C817:	20 D7 D9   	JSR $D9D7          ; execute animation script byte command
C1/C81A:	A4 5B      	LDY $5B
C1/C81C:	C8         	INY
C1/C81D:	84 5B      	STY $5B            ; advance script pointer by 1
C1/C81F:	80 98      	BRA $C7B9

; Are these two opcodes ever used?
C1/C821:	18         	CLC
C1/C822:	60         	RTS

; Fight animation BG3 executing
C1/C823:	A7 5B      	LDA [$5B]          ; animation script byte
C1/C825:	C9 FF      	CMP #$FF           ; null?
C1/C827:	D0 0A      	BNE $C833          ; branch if not null
C1/C829:	9E 2E 6A   	STZ $6A2E,X        ; set thread "inactive"
C1/C82C:	A0 00 01   	LDY #$0100
C1/C82F:	8C F5 4A   	STY $4AF5          ; BG3 scroll HDMA [?]
C1/C832:	60         	RTS

C1/C833:	30 33      	BMI $C868          ; branch if byte's top bit set [?]
C1/C835:	18         	CLC                ; clear carry
C1/C836:	7D 8C 6F   	ADC $6F8C,X        ; add frame offset
C1/C839:	29 7F      	AND #$7F           ; mask top bit
C1/C83B:	C2 20      	REP #$20           ; 16-bit A
C1/C83D:	EB         	XBA                ; x256
C1/C83E:	0A         	ASL A              ; x2
C1/C83F:	18         	CLC                ; clear carry
C1/C840:	69 00 E4   	ADC #$E400         ; base BG3 tile buffer offset
C1/C843:	8D 26 7B   	STA $7B26          ; pointer to tile data buffer
C1/C846:	BD 3A 6A   	LDA $6A3A,X        ; thread X position
C1/C849:	18         	CLC                ; clear carry
C1/C84A:	7D CE 74   	ADC $74CE,X        ; add thread X offset
C1/C84D:	8D 29 7B   	STA $7B29          ; update BG3 animation X position
C1/C850:	BD 3C 6A   	LDA $6A3C,X        ; thread Y position
C1/C853:	18         	CLC                ; clear carry
C1/C854:	7D D0 74   	ADC $74D0,X        ; add thread Y offset
C1/C857:	8D 2B 7B   	STA $7B2BA         ; update BG3 animation Y position
C1/C85A:	7B         	TDC                ; A = 0000
C1/C85B:	E2 20      	SEP #$20           ; 8-bit A
C1/C85D:	A9 7F      	LDA #$7F           ; BG3 tile buffer bank
C1/C85F:	8D 28 7B   	STA $7B28          ; set bank
C1/C862:	A9 01      	LDA #$01
C1/C864:	8D 21 7B   	STA $7B21          ; flag BG3 tile data needs update
C1/C867:	60         	RTS

C1/C868:	20 D7 D9   	JSR $D9D7          ; execute animation script byte command
C1/C86B:	A4 5B      	LDY $5B
C1/C86D:	C8         	INY
C1/C86E:	84 5B      	STY $5B            ; point to next animation script byte
C1/C870:	80 B1      	BRA $C823          ; re-run BG3 processing with new byte

; Is this RTS ever used?
C1/C872:	60         	RTS

C1/C873:	22 81 C0 C2	JSL $C2C081
C1/C877:	60         	RTS

; Animation Script Command Op $00 ($80)
; Execute Subcommand (X)

C1/C878:	A7 5B      	LDA [$5B]      ; first command arg
C1/C87A:	C2 20      	REP #$20       ; 16-bit A
C1/C87C:	0A         	ASL A          ; x2
C1/C87D:	AA         	TAX            ; index it
C1/C87E:	7B         	TDC            ; A = 0000
C1/C87F:	E2 20      	SEP #$20       ; 8-bit A
C1/C881:	A0 01 00   	LDY #$0001     ; [?]
C1/C884:	FC 8B C8   	JSR ($C88B,X)  ; sub-command routine
C1/C887:	AE F6 7A   	LDX $7AF6      ; current animation thread offset
C1/C88A:	60         	RTS

; Animation command $00 subcommands

C1/C88B:	BED9    	; $00 ($D9BE) - Initialize thread target's position [?]
C1/C88D:	A9D9    	; $01 ($D9A9) - Zero attacker and thread offsets
C1/C88F:	81D9    	; $02 ($D981) - Copy attacker sprite flips and direction to buffer
C1/C891:	95D9    	; $03 ($D995) - Copy attacker sprite flips and direction from buffer
C1/C893:	6ED9    	; $04 ($D96E) - Randomize polar angle/radius or vector speed
C1/C895:	38D9    	; $05 ($D938) - Set thread's XY offset/coord based on attacker/target [?]
C1/C897:	07D9    	; $06 ($D907) - Curving animation, maybe for tornado only
C1/C899:	F2D8    	;
C1/C89B:	EBD8    	;
C1/C89D:	79D8    	;
C1/C89F:	2BD8    	;
C1/C8A1:	E3D7    	; $0B ($D7E3) - Slowing movement at an angle
C1/C8A3:	53D7    	;
C1/C8A5:	C4D7    	;
C1/C8A7:	9DD7    	;
C1/C8A9:	79D7    	;
C1/C8AB:	3ED7    	;
C1/C8AD:	27D7    	;
C1/C8AF:	34D7    	;
C1/C8B1:	E5D6    	;
C1/C8B3:	BDD6    	;
C1/C8B5:	98D6    	;
C1/C8B7:	8ED6    	;
C1/C8B9:	C1CB    	;
C1/C8BB:	77D6    	;
C1/C8BD:	2ED6    	;
C1/C8BF:	74CB    	;
C1/C8C1:	5DCB    	;
C1/C8C3:	6ACB    	;
C1/C8C5:	61CB    	;
C1/C8C7:	6BD5    	;
C1/C8C9:	FCD5    	;
C1/C8CB:	9FD5    	;
C1/C8CD:	4ED5    	;
C1/C8CF:	F2D4    	;
C1/C8D1:	BED4    	;
C1/C8D3:	9BD4    	;
C1/C8D5:	ADD4    	;
C1/C8D7:	93D4    	;
C1/C8D9:	8BD4    	;
C1/C8DB:	5CD4    	;
C1/C8DD:	54D4    	;
C1/C8DF:	4CD4    	;
C1/C8E1:	3CD4    	;
C1/C8E3:	44D4    	;
C1/C8E5:	23D4    	;
C1/C8E7:	E4D3    	;
C1/C8E9:	AFD3    	;
C1/C8EB:	8ED3    	;
C1/C8ED:	65D3    	;
C1/C8EF:	3ED3    	;
C1/C8F1:	D2D2    	;
C1/C8F3:	8DD2    	;
C1/C8F5:	7AD2    	;
C1/C8F7:	67D2    	;
C1/C8F9:	56D2    	;
C1/C8FB:	4DD2    	;
C1/C8FD:	E6D1    	;
C1/C8FF:	DED1    	;
C1/C901:	B0D1    	;
C1/C903:	8AD1    	;
C1/C905:	2ED1    	;
C1/C907:	26D1    	;
C1/C909:	E0D0    	;
C1/C90B:	D3D0    	;
C1/C90D:	6DD0    	;
C1/C90F:	64D0    	;
C1/C911:	0BD0    	;
C1/C913:	CCCF    	;
C1/C915:	C0CF    	;
C1/C917:	B9CF    	;
C1/C919:	AACF    	;
C1/C91B:	8DCF    	;
C1/C91D:	7FCF    	;
C1/C91F:	6ACF    	;
C1/C921:	CCD2    	;
C1/C923:	45CF    	;
C1/C925:	1CCF    	;
C1/C927:	15CF    	;
C1/C929:	F0CE    	;
C1/C92B:	9ACE    	;
C1/C92D:	62CE    	;
C1/C92F:	29CE    	;
C1/C931:	DFCD    	;
C1/C933:	C4CD    	;
C1/C935:	72CD    	;
C1/C937:	28CD    	;
C1/C939:	1FCD    	;
C1/C93B:	17CD    	;
C1/C93D:	12CD    	;
C1/C93F:	0DCD    	;
C1/C941:	08CD    	;
C1/C943:	03CD    	;
C1/C945:	DFCC    	;
C1/C947:	98CC    	;
C1/C949:	93CC    	;
C1/C94B:	3FCC    	;
C1/C94D:	1ACC    	;
C1/C94F:	F5CB    	;
C1/C951:	61D3    	;
C1/C953:	E5CB    	;
C1/C955:	E0CB    	;
C1/C957:	DBCB    	;
C1/C959:	D6CB    	;
C1/C95B:	D1CB    	;
C1/C95D:	B6CB    	;
C1/C95F:	ACCB    	;
C1/C961:	B1CB    	;
C1/C963:	5ACB    	;
C1/C965:	56CB    	;
C1/C967:	51CB    	;
C1/C969:	4DCB    	;
C1/C96B:	43CB    	;
C1/C96D:	34CB    	;
C1/C96F:	48CB    	;
C1/C971:	1DCB    	;
C1/C973:	B8CA    	;
C1/C975:	E5CA    	;
C1/C977:	D6CA    	;
C1/C979:	DBCA    	;
C1/C97B:	E0CA    	;
C1/C97D:	C2CA    	;
C1/C97F:	C7CA    	;
C1/C981:	CCCA    	;
C1/C983:	D1CA    	;
C1/C985:	BDCA    	;
C1/C987:	A1CA    	;
C1/C989:	9DCA    	;
C1/C98B:	65CA    	;
C1/C98D:	61CA    	;
C1/C98F:	3DCA    	;
C1/C991:	38CA    	;
C1/C993:	29CA    	;
C1/C995:	24CA    	;
C1/C997:	0FCA    	;
C1/C999:	F7C9    	;
C1/C99B:	C9C9    	; $88 ($C9C9) - Move animation to target character position
C1/C99D:	C1C9    	;
C1/C99F:	A9C9    	;
C1/C9A1:	A5C9    	; $8B ($C9A5) - Play "Ching" sound effect
C1/C9A3:	09CA    	;

; Animation Script Subcommand ($8B)
; Play "Ching" sound effect

C1/C9A5:	EE 81 62   	INC $6281         ; play "Ching" (shield) sound-effect
C1/C9A8:	60         	RTS

C1/C9A9:	AE F6 7A   	LDX $7AF6
C1/C9AC:	BD 39 6A   	LDA $6A39,X
C1/C9AF:	10 0F      	BPL $C9C0
C1/C9B1:	29 7F      	AND #$7F
C1/C9B3:	38         	SEC
C1/C9B4:	E9 04      	SBC #$04
C1/C9B6:	0A         	ASL A
C1/C9B7:	A8         	TAY
C1/C9B8:	B9 DC 80   	LDA $80DC,Y
C1/C9BB:	29 CF      	AND #$CF
C1/C9BD:	99 DC 80   	STA $80DC,Y
C1/C9C0:	60         	RTS

C1/C9C1:	B7 5B      	LDA [$5B],Y
C1/C9C3:	8D 85 62   	STA $6285
C1/C9C6:	4C C6 CF   	JMP $CFC6

; Animation Script Subcommand $88
; Move animation to character position?

C1/C9C9:	AE F6 7A   	LDX $7AF6          ; animation thread offset
C1/C9CC:	BD 39 6A   	LDA $6A39,X        ; target (character) index
C1/C9CF:	0A         	ASL A
C1/C9D0:	0A         	ASL A
C1/C9D1:	0A         	ASL A
C1/C9D2:	0A         	ASL A
C1/C9D3:	0A         	ASL A              ; x32
C1/C9D4:	A8         	TAY                ; index it
C1/C9D5:	C2 20      	REP #$20           ; 16-bit A
C1/C9D7:	B9 B7 61   	LDA $61B7,Y        ; target character X position
C1/C9DA:	18         	CLC
C1/C9DB:	79 C5 61   	ADC $61C5,Y        ; add character X offset
C1/C9DE:	18         	CLC
C1/C9DF:	79 D4 61   	ADC $61D4,Y        ; add additional character X offset
C1/C9E2:	18         	CLC
C1/C9E3:	69 08 00   	ADC #$0008         ; +8
C1/C9E6:	9D 3A 6A   	STA $6A3A,X        ; update thread X position
C1/C9E9:	B9 B9 61   	LDA $61B9,Y
C1/C9EC:	18         	CLC
C1/C9ED:	79 C7 61   	ADC $61C7,Y
C1/C9F0:	9D 3C 6A   	STA $6A3C,X        ; update thread Y position
C1/C9F3:	7B         	TDC
C1/C9F4:	E2 20      	SEP #$20           ; 8-bit A
C1/C9F6:	60         	RTS

C1/C9F7:	AD BB EC   	LDA $ECBB
C1/C9FA:	F0 0A      	BEQ $CA06
C1/C9FC:	AE F6 7A   	LDX $7AF6
C1/C9FF:	BD 80 6F   	LDA $6F80,X
C1/CA02:	85 10      	STA $10
C1/CA04:	80 11      	BRA $CA17

C1/CA06:	4C C6 CF   	JMP $CFC6

C1/CA09:	A9 80      	LDA #$80
C1/CA0B:	85 10      	STA $10
C1/CA0D:	80 08      	BRA $CA17
C1/CA0F:	AE F6 7A   	LDX $7AF6
C1/CA12:	BD 7E 6F   	LDA $6F7E,X
C1/CA15:	85 10      	STA $10
C1/CA17:	B7 5B      	LDA [$5B],Y
C1/CA19:	D0 03      	BNE $CA1E
C1/CA1B:	AD E7 E9   	LDA $E9E7
C1/CA1E:	20 EF 17   	JSR $17EF
C1/CA21:	4C C6 CF   	JMP $CFC6

C1/CA24:	22 21 AF C2	JSR $C2AF21
C1/CA28:	60         	RTS

C1/CA29:	C2 20      	REP #$20
C1/CA2B:	AE B6 EC   	LDX $ECB6
C1/CA2E:	AD B4 EC   	LDA $ECB4
C1/CA31:	9D CF 80   	STA $80CF,X
C1/CA34:	7B         	TDC
C1/CA35:	E2 20      	SEP #$20           ; 8-bit A
C1/CA37:	60         	RTS

C1/CA38:	22 61 AF C2	JSR $C2AF61
C1/CA3C:	60         	RTS

C1/CA3D:	64 11      	STZ $11
C1/CA3F:	B7 5B      	LDA [$5B],Y
C1/CA41:	85 10      	STA $10
C1/CA43:	10 02      	BPL $CA47
C1/CA45:	C6 11      	DEC $11
C1/CA47:	C2 20      	REP #$20
C1/CA49:	7B         	TDC
C1/CA4A:	AA         	TAX
C1/CA4B:	BD C3 80   	LDA $80C3,X
C1/CA4E:	18         	CLC
C1/CA4F:	65 10      	ADC $10
C1/CA51:	9D C3 80   	STA $80C3,X
C1/CA54:	E8         	INX
C1/CA55:	E8         	INX
C1/CA56:	E0 0C 00   	CPX #$000C
C1/CA59:	D0 F0      	BNE $CA4B
C1/CA5B:	E6 5B      	INC $5B
C1/CA5D:	7B         	TDC
C1/CA5E:	E2 20      	SEP #$20           ; 8-bit A
C1/CA60:	60         	RTS

C1/CA61:	9C CB 88   	STZ $88CB
C1/CA64:	60         	RTS

C1/CA65:	A6 5B      	LDX $5B
C1/CA67:	E8         	INX
C1/CA68:	86 5B      	STX $5B
C1/CA6A:	A2 CB 88   	LDX #$88CB
C1/CA6D:	20 BB EA   	JSR $EABB
C1/CA70:	7B         	TDC
C1/CA71:	20 85 CA   	JSR $CA85
C1/CA74:	A9 20      	LDA #$20
C1/CA76:	20 85 CA   	JSR $CA85
C1/CA79:	A9 40      	LDA #$40
C1/CA7B:	20 85 CA   	JSR $CA85
C1/CA7E:	A6 5B      	LDX $5B
C1/CA80:	E8         	INX
C1/CA81:	E8         	INX
C1/CA82:	86 5B      	STX $5B
C1/CA84:	60         	RTS

C1/CA85:	85 10      	STA $10
C1/CA87:	A0 01 00   	LDY #$0001
C1/CA8A:	B7 5B      	LDA [$5B],Y
C1/CA8C:	85 12      	STA $12
C1/CA8E:	C8         	INY
C1/CA8F:	B7 5B      	LDA [$5B],Y
C1/CA91:	18         	CLC
C1/CA92:	65 10      	ADC $10
C1/CA94:	85 10      	STA $10
C1/CA96:	A9 01      	LDA #$01
C1/CA98:	85 11      	STA $11
C1/CA9A:	4C 53 EB   	JMP $EB53

C1/CA9D:	9C AB 61   	STZ $61AB
C1/CAA0:	60         	RTS

C1/CAA1:	AE F6 7A   	LDX $7AF6
C1/CAA4:	BD 39 6A   	LDA $6A39,X
C1/CAA7:	30 0E      	BMI $CAB7
C1/CAA9:	0A         	ASL A
C1/CAAA:	0A         	ASL A
C1/CAAB:	0A         	ASL A
C1/CAAC:	0A         	ASL A
C1/CAAD:	0A         	ASL A
C1/CAAE:	AA         	TAX
C1/CAAF:	BD BE 61   	LDA $61BE,X
C1/CAB2:	49 80      	EOR #$80
C1/CAB4:	9D BE 61   	STA $61BE,X
C1/CAB7:	60         	RTS

C1/CAB8:	22 17 B0 C2	JSR $C2B017
C1/CABC:	60         	RTS

C1/CABD:	22 3E B0 C2	JSL $C2B03E
C1/CAC1:	60         	RTS

C1/CAC2:	22 D5 B2 C2	JSR $C2B2D5
C1/CAC6:	60         	RTS

C1/CAC7:	22 03 B3 C2	JSR $C2B303
C1/CACB:	60         	RTS

C1/CACC:	22 B4 B2 C2	JSR $C2B2B4
C1/CAD0:	60         	RTS

C1/CAD1:	22 81 B2 C2	JSL $C2B281
C1/CAD5:	60         	RTS

C1/CAD6:	22 8C B3 C2	JSL $C2B38C
C1/CADA:	60         	RTS

C1/CADB:	22 31 B3 C2	JSR $C2B331
C1/CADF:	60         	RTS

C1/CAE0:	22 61 B3 C2	JSR $C2B361
C1/CAE4:	60         	RTS

C1/CAE5:	AE F6 7A   	LDX $7AF6
C1/CAE8:	BD E8 64   	LDA $64E8,X
C1/CAEB:	09 80      	ORA #$80
C1/CAED:	C9 90      	CMP #$90
C1/CAEF:	90 07      	BCC $CAF8
C1/CAF1:	C9 A0      	CMP #$A0
C1/CAF3:	90 07      	BCC $CAFC
C1/CAF5:	7B         	TDC
C1/CAF6:	80 06      	BRA $CAFE
C1/CAF8:	A9 01      	LDA #$01
C1/CAFA:	80 02      	BRA $CAFE
C1/CAFC:	A9 02      	LDA #$02
C1/CAFE:	9D 8C 6F   	STA $6F8C,X
C1/CB01:	20 04 CC   	JSR $CC04
C1/CB04:	C2 20      	REP #$20
C1/CB06:	BD D0 74   	LDA $74D0,X
C1/CB09:	18         	CLC
C1/CB0A:	65 22      	ADC $22
C1/CB0C:	9D D0 74   	STA $74D0,X
C1/CB0F:	7B         	TDC
C1/CB10:	E2 20      	SEP #$20           ; 8-bit A
C1/CB12:	4C 27 CC   	JMP $CC27

C1/CB15:	02
C1/CB16:	03
C1/CB17:	04
C1/CB18:	05
C1/CB19:	06
C1/CB1A:	07
C1/CB1B:	1F
C1/CB1C:	1F

C1/CB1D:	AD FB EB    LDA $EBFB
C1/CB20:	B7 5B       LDA [$5B],Y
C1/CB22:	AA          TAX
C1/CB23:	BD FB EB    LDA $EBFB,X
C1/CB26:	AA          TAX
C1/CB27:	BF 15 CB C1 LDA $C1CB15,X
C1/CB2B:	AE F6 7A    LDX $7AF6
C1/CB2E:	9D 8C 6F    STA $6F8C,X
C1/CB31:	4C C6 CF    JMP $CFC6

C1/CB34:	7B         	TDC
C1/CB35:	AA         	TAX
C1/CB36:	BD A0 7D   	LDA $7DA0,X
C1/CB39:	9D A0 7F   	STA $7FA0,X
C1/CB3C:	E8         	INX
C1/CB3D:	E0 60 00   	CPX #$0060
C1/CB40:	D0 F4      	BNE $CB36
C1/CB42:	60         	RTS

C1/CB43:	22 53 DD C2	JSL $C2DD53
C1/CB47:	60         	RTS

C1/CB48:	22 F8 AF C2	JSL $C2AFF8
C1/CB4C:	60         	RTS

C1/CB4D:	EE 96 7B   	INC $7B96
C1/CB50:	60         	RTS

C1/CB51:	22 71 DD C2	JSR $C2DD71
C1/CB55:	60         	RTS

C1/CB56:	EE 8B 62   	INC $628B
C1/CB59:	60         	RTS

C1/CB5A:	4C CA 9E   	JMP $9ECA       ; fill BG1 animation tile buffer w/ $02EE

C1/CB5D:	EE FA EB   	INC $EBFA
C1/CB60:	60         	RTS

C1/CB61:	A9 20      	LDA #$20
C1/CB63:	85 24      	STA $24
C1/CB65:	A5 0E      	LDA $0E
C1/CB67:	4C 31 CE   	JMP $CE31

C1/CB6A:	AD F9 E9   	LDA $E9F9
C1/CB6D:	F0 04      	BEQ $CB73
C1/CB6F:	3A         	DEC A
C1/CB70:	8D F9 E9   	STA $E9F9
C1/CB73:	60         	RTS

C1/CB74:	AE F6 7A   	LDX $7AF6
C1/CB77:	BD 39 6A   	LDA $6A39,X
C1/CB7A:	10 2F      	BPL $CBAB
C1/CB7C:	29 0F      	AND #$0F
C1/CB7E:	38         	SEC
C1/CB7F:	E9 04      	SBC #$04
C1/CB81:	AA         	TAX
C1/CB82:	BF 01 1A C1	LDA $C11A01,X    ; Data
C1/CB86:	85 10      	STA $10
C1/CB88:	A6 5B      	LDX $5B
C1/CB8A:	E8         	INX
C1/CB8B:	86 5B      	STX $5B
C1/CB8D:	A7 5B      	LDA [$5B]
C1/CB8F:	29 01      	AND #$01
C1/CB91:	F0 0A      	BEQ $CB9D
C1/CB93:	AD 91 61   	LDA $6191
C1/CB96:	05 10      	ORA $10
C1/CB98:	8D 91 61   	STA $6191
C1/CB9B:	80 0E      	BRA $CBAB
C1/CB9D:	A5 10      	LDA $10
C1/CB9F:	49 FF      	EOR #$FF
C1/CBA1:	85 10      	STA $10
C1/CBA3:	AD 91 61   	LDA $6191
C1/CBA6:	25 10      	AND $10
C1/CBA8:	8D 91 61   	STA $6191
C1/CBAB:	60         	RTS

C1/CBAC:	22 C0 B9 C2	JSL $C2B9C0
C1/CBB0:	60         	RTS

C1/CBB1:	22 99 B9 C2	JSL $C2B999
C1/CBB5:	60         	RTS

C1/CBB6:	20 8A C3   	JSR $C38A          ; set max sprite priority for all entities
C1/CBB9:	AE F6 7A   	LDX $7AF6
C1/CBBC:	BD 38 6A   	LDA $6A38,X
C1/CBBF:	80 09      	BRA $CBCA
C1/CBC1:	20 8A C3   	JSR $C38A          ; set max sprite priority for all entities
C1/CBC4:	AE F6 7A   	LDX $7AF6
C1/CBC7:	BD 39 6A   	LDA $6A39,X

C1/CBCA:	20 FA C3   	JSR $C3FA
C1/CBCD:	AE F6 7A   	LDX $7AF6
C1/CBD0:	60         	RTS

C1/CBD1:	22 B4 BB C2	JSL $C2BBB4
C1/CBD5:	60         	RTS

C1/CBD6:	22 CF BB C2	JSL $C2BBCF
C1/CBDA:	60         	RTS

C1/CBDB:	22 FA BB C2	JSL $C2BBFA
C1/CBDF:	60         	RTS

C1/CBE0:	22 08 BC C2	JSL $C2BC08
C1/CBE4:	60         	RTS

C1/CBE5:	AE F6 7A   	LDX $7AF6
C1/CBE8:	7B         	TDC
C1/CBE9:	9D 37 6A   	STA $6A37,X
C1/CBEC:	AD 6F 89   	LDA $896F
C1/CBEF:	29 EF      	AND #$EF
C1/CBF1:	8D 6F 89   	STA $896F
C1/CBF4:	60         	RTS

C1/CBF5:	20 04 CC   	JSR $CC04
C1/CBF8:	C2 20      	REP #$20
C1/CBFA:	A5 22      	LDA $22
C1/CBFC:	9D CE 74   	STA $74CE,X
C1/CBFF:	7B         	TDC
C1/CC00:	E2 20      	SEP #$20           ; 8-bit A
C1/CC02:	80 23      	BRA $CC27
C1/CC04:	B7 5B      	LDA [$5B],Y
C1/CC06:	85 24      	STA $24
C1/CC08:	AE F6 7A   	LDX $7AF6
C1/CC0B:	BD E8 64   	LDA $64E8,X
C1/CC0E:	A0 03 00   	LDY #$0003
C1/CC11:	17 5B      	ORA [$5B],Y
C1/CC13:	20 68 D8   	JSR $D868
C1/CC16:	AE F6 7A   	LDX $7AF6
C1/CC19:	60         	RTS

C1/CC1A:	20 04 CC   	JSR $CC04
C1/CC1D:	C2 20      	REP #$20
C1/CC1F:	A5 22      	LDA $22
C1/CC21:	9D D0 74   	STA $74D0,X
C1/CC24:	7B         	TDC
C1/CC25:	E2 20      	SEP #$20           ; 8-bit A
C1/CC27:	A0 02 00   	LDY #$0002
C1/CC2A:	B7 5B      	LDA [$5B],Y
C1/CC2C:	85 22      	STA $22
C1/CC2E:	BD E8 64   	LDA $64E8,X
C1/CC31:	18         	CLC
C1/CC32:	65 22      	ADC $22
C1/CC34:	9D E8 64   	STA $64E8,X
C1/CC37:	A4 5B      	LDY $5B
C1/CC39:	C8         	INY
C1/CC3A:	C8         	INY
C1/CC3B:	C8         	INY
C1/CC3C:	84 5B      	STY $5B
C1/CC3E:	60         	RTS

C1/CC3F:	AE F6 7A   	LDX $7AF6
C1/CC42:	BD 38 6A   	LDA $6A38,X
C1/CC45:	30 43      	BMI $CC8A
C1/CC47:	29 03      	AND #$03
C1/CC49:	48         	PHA
C1/CC4A:	0A         	ASL A
C1/CC4B:	0A         	ASL A
C1/CC4C:	0A         	ASL A
C1/CC4D:	0A         	ASL A
C1/CC4E:	0A         	ASL A
C1/CC4F:	AA         	TAX
C1/CC50:	A0 01 00   	LDY #$0001
C1/CC53:	B7 5B      	LDA [$5B],Y
C1/CC55:	99 0F 00   	STA $000F,Y
C1/CC58:	C8         	INY
C1/CC59:	C0 05 00   	CPY #$0005
C1/CC5C:	D0 F5      	BNE $CC53
C1/CC5E:	BD BD 2E   	LDA $2EBD,X
C1/CC61:	45 10      	EOR $10
C1/CC63:	9D BD 2E   	STA $2EBD,X
C1/CC66:	BD BE 2E   	LDA $2EBE,X
C1/CC69:	45 11      	EOR $11
C1/CC6B:	9D BE 2E   	STA $2EBE,X
C1/CC6E:	BD BF 2E   	LDA $2EBF,X
C1/CC71:	45 12      	EOR $12
C1/CC73:	9D BF 2E   	STA $2EBF,X
C1/CC76:	BD C0 2E   	LDA $2EC0,X
C1/CC79:	45 13      	EOR $13
C1/CC7B:	9D C0 2E   	STA $2EC0,X
C1/CC7E:	68         	PLA
C1/CC7F:	8D 78 7B   	STA $7B78
C1/CC82:	AE F6 7A   	LDX $7AF6
C1/CC85:	DA         	PHX
C1/CC86:	20 79 2F   	JSR $2F79
C1/CC89:	FA         	PLX
C1/CC8A:	A4 5B      	LDY $5B
C1/CC8C:	C8         	INY
C1/CC8D:	C8         	INY
C1/CC8E:	C8         	INY
C1/CC8F:	C8         	INY
C1/CC90:	84 5B      	STY $5B
C1/CC92:	60         	RTS

C1/CC93:	22 38 BC C2	JSL $C2BC38
C1/CC97:	60         	RTS

C1/CC98:	A5 0E      	LDA $0E
C1/CC9A:	0A         	ASL A
C1/CC9B:	49 FF      	EOR #$FF
C1/CC9D:	1A         	INC A
C1/CC9E:	85 12      	STA $12
C1/CCA0:	AD F0 E9   	LDA $E9F0
C1/CCA3:	85 24      	STA $24
C1/CCA5:	A5 12      	LDA $12
C1/CCA7:	20 67 6C   	JSR $6C67
C1/CCAA:	C2 20      	REP #$20
C1/CCAC:	A5 28      	LDA $28
C1/CCAE:	8D C4 E9   	STA $E9C4
C1/CCB1:	8D CA E9   	STA $E9CA
C1/CCB4:	7B         	TDC
C1/CCB5:	E2 20      	SEP #$20           ; 8-bit A
C1/CCB7:	AD F0 E9   	LDA $E9F0
C1/CCBA:	85 24      	STA $24
C1/CCBC:	A5 12      	LDA $12
C1/CCBE:	18         	CLC
C1/CCBF:	69 40      	ADC #$40
C1/CCC1:	20 67 6C   	JSR $6C67
C1/CCC4:	C2 20      	REP #$20
C1/CCC6:	A5 28      	LDA $28
C1/CCC8:	8D C6 E9   	STA $E9C6
C1/CCCB:	49 FF FF   	EOR #$FFFF
C1/CCCE:	1A         	INC A
C1/CCCF:	8D C8 E9   	STA $E9C8
C1/CCD2:	7B         	TDC
C1/CCD3:	E2 20      	SEP #$20           ; 8-bit A
C1/CCD5:	AD F0 E9   	LDA $E9F0
C1/CCD8:	38         	SEC
C1/CCD9:	E9 02      	SBC #$02
C1/CCDB:	8D F0 E9   	STA $E9F0
C1/CCDE:	60         	RTS

C1/CCDF:	A9 18      	LDA #$18
C1/CCE1:	85 24      	STA $24
C1/CCE3:	AE F6 7A   	LDX $7AF6
C1/CCE6:	BD E8 64   	LDA $64E8,X
C1/CCE9:	0A         	ASL A
C1/CCEA:	0A         	ASL A
C1/CCEB:	20 68 D8   	JSR $D868
C1/CCEE:	AE F6 7A   	LDX $7AF6
C1/CCF1:	C2 20      	REP #$20
C1/CCF3:	BD D0 74   	LDA $74D0,X
C1/CCF6:	18         	CLC
C1/CCF7:	65 22      	ADC $22
C1/CCF9:	9D D0 74   	STA $74D0,X
C1/CCFC:	7B         	TDC
C1/CCFD:	E2 20      	SEP #$20           ; 8-bit A
C1/CCFF:	FE E8 64   	INC $64E8,X
C1/CD02:	60         	RTS

C1/CD03:	22 81 BC C2	JSL $C2BC81
C1/CD07:	60         	RTS

C1/CD08:	22 99 BC C2	JSL $C2BC99
C1/CD0C:	60         	RTS

C1/CD0D:	22 B7 BC C2	JSL $C2BCB7
C1/CD11:	60         	RTS

C1/CD12:	22 E3 BC C2	JSL $C2BCE3
C1/CD16:	60         	RTS

C1/CD17:	B7 5B      	LDA [$5B],Y
C1/CD19:	8D 1B 96   	STA $961B
C1/CD1C:	4C C6 CF   	JMP $CFC6

C1/CD1F:	B7 5B      	LDA [$5B],Y
C1/CD21:	8F 24 21 00	STA $002124
C1/CD25:	4C C6 CF   	JMP $CFC6

C1/CD28:	7B         	TDC
C1/CD29:	AA         	TAX
C1/CD2A:	A8         	TAY
C1/CD2B:	C2 20      	REP #$20
C1/CD2D:	A5 0E      	LDA $0E
C1/CD2F:	0A         	ASL A
C1/CD30:	85 12      	STA $12
C1/CD32:	0A         	ASL A
C1/CD33:	0A         	ASL A
C1/CD34:	85 10      	STA $10
C1/CD36:	AE F6 7A   	LDX $7AF6
C1/CD39:	BD 87 6F   	LDA $6F87,X
C1/CD3C:	29 FF 00   	AND #$00FF
C1/CD3F:	D0 10      	BNE $CD51
C1/CD41:	A5 10      	LDA $10
C1/CD43:	49 FF FF   	EOR #$FFFF
C1/CD46:	1A         	INC A
C1/CD47:	85 10      	STA $10
C1/CD49:	A5 12      	LDA $12
C1/CD4B:	49 FF FF   	EOR #$FFFF
C1/CD4E:	1A         	INC A
C1/CD4F:	85 12      	STA $12
C1/CD51:	7B         	TDC
C1/CD52:	AA         	TAX
C1/CD53:	BF 00 FD C0	LDA $C0FD00,X
C1/CD57:	30 05      	BMI $CD5E
C1/CD59:	38         	SEC
C1/CD5A:	E5 12      	SBC $12
C1/CD5C:	80 03      	BRA $CD61
C1/CD5E:	38         	SEC
C1/CD5F:	E5 10      	SBC $10
C1/CD61:	99 F5 43   	STA $43F5,Y
C1/CD64:	E8         	INX
C1/CD65:	C8         	INY
C1/CD66:	C8         	INY
C1/CD67:	C8         	INY
C1/CD68:	C8         	INY
C1/CD69:	E0 97 00   	CPX #$0097
C1/CD6C:	D0 E5      	BNE $CD53
C1/CD6E:	7B         	TDC
C1/CD6F:	E2 20      	SEP #$20           ; 8-bit A
C1/CD71:	60         	RTS

C1/CD72:	B7 5B      	LDA [$5B],Y
C1/CD74:	F0 45      	BEQ $CDBB
C1/CD76:	7B         	TDC
C1/CD77:	AA         	TAX
C1/CD78:	C2 20      	REP #$20
C1/CD7A:	AD D0 E9   	LDA $E9D0
C1/CD7D:	0A         	ASL A
C1/CD7E:	0A         	ASL A
C1/CD7F:	85 10      	STA $10
C1/CD81:	AD B6 64   	LDA $64B6
C1/CD84:	9D F7 43   	STA $43F7,X
C1/CD87:	E8         	INX
C1/CD88:	E8         	INX
C1/CD89:	E8         	INX
C1/CD8A:	E8         	INX
C1/CD8B:	E4 10      	CPX $10
C1/CD8D:	D0 F5      	BNE $CD84
C1/CD8F:	9D F7 43   	STA $43F7,X
C1/CD92:	3A         	DEC A
C1/CD93:	E8         	INX
C1/CD94:	E8         	INX
C1/CD95:	E8         	INX
C1/CD96:	E8         	INX
C1/CD97:	E0 5C 02   	CPX #$025C
C1/CD9A:	D0 F3      	BNE $CD8F
C1/CD9C:	EE D0 E9   	INC $E9D0
C1/CD9F:	7B         	TDC
C1/CDA0:	AA         	TAX
C1/CDA1:	AD B4 64   	LDA $64B4
C1/CDA4:	9D F5 43   	STA $43F5,X
C1/CDA7:	9D 21 45   	STA $4521,X
C1/CDAA:	E8         	INX
C1/CDAB:	E8         	INX
C1/CDAC:	E8         	INX
C1/CDAD:	E8         	INX
C1/CDAE:	E0 2C 01   	CPX #$012C
C1/CDB1:	D0 F1      	BNE $CDA4
C1/CDB3:	8D 4D 46   	STA $464D
C1/CDB6:	7B         	TDC
C1/CDB7:	E2 20      	SEP #$20           ; 8-bit A
C1/CDB9:	80 06      	BRA $CDC1
C1/CDBB:	A0 01 00   	LDY #$0001
C1/CDBE:	8C D0 E9   	STY $E9D0

C1/CDC1:	4C C6 CF   	JMP $CFC6

C1/CDC4:	AE F6 7A   	LDX $7AF6
C1/CDC7:	BD 39 6A   	LDA $6A39,X
C1/CDCA:	30 12      	BMI $CDDE
C1/CDCC:	0A         	ASL A
C1/CDCD:	0A         	ASL A
C1/CDCE:	0A         	ASL A
C1/CDCF:	0A         	ASL A
C1/CDD0:	0A         	ASL A
C1/CDD1:	A8         	TAY
C1/CDD2:	B9 C5 2E   	LDA $2EC5,Y
C1/CDD5:	49 01      	EOR #$01
C1/CDD7:	99 C5 2E   	STA $2EC5,Y
C1/CDDA:	7B         	TDC
C1/CDDB:	99 C0 61   	STA $61C0,Y
C1/CDDE:	60         	RTS

C1/CDDF:	AE F6 7A   	LDX $7AF6
C1/CDE2:	BD 39 6A   	LDA $6A39,X
C1/CDE5:	30 41      	BMI $CE28
C1/CDE7:	29 03      	AND #$03
C1/CDE9:	85 10      	STA $10
C1/CDEB:	0A         	ASL A
C1/CDEC:	0A         	ASL A
C1/CDED:	0A         	ASL A
C1/CDEE:	0A         	ASL A
C1/CDEF:	0A         	ASL A
C1/CDF0:	A8         	TAY
C1/CDF1:	64 11      	STZ $11
C1/CDF3:	AD 1F 20   	LDA $201F
C1/CDF6:	0A         	ASL A
C1/CDF7:	0A         	ASL A
C1/CDF8:	18         	CLC
C1/CDF9:	65 10      	ADC $10
C1/CDFB:	AA         	TAX
C1/CDFC:	B9 C5 2E   	LDA $2EC5,Y
C1/CDFF:	49 01      	EOR #$01
C1/CE01:	29 01      	AND #$01
C1/CE03:	F0 06      	BEQ $CE0B
C1/CE05:	BF 6F A8 C2	LDA $C2A86F,X
C1/CE09:	80 04      	BRA $CE0F
C1/CE0B:	BF 7F A8 C2	LDA $C2A87F,X
C1/CE0F:	85 10      	STA $10
C1/CE11:	10 02      	BPL $CE15
C1/CE13:	C6 11      	DEC $11
C1/CE15:	A9 04      	LDA #$04
C1/CE17:	99 C0 61   	STA $61C0,Y
C1/CE1A:	C2 20      	REP #$20
C1/CE1C:	B9 C9 61   	LDA $61C9,Y
C1/CE1F:	18         	CLC
C1/CE20:	65 10      	ADC $10
C1/CE22:	99 C9 61   	STA $61C9,Y
C1/CE25:	7B         	TDC
C1/CE26:	E2 20      	SEP #$20           ; 8-bit A
C1/CE28:	60         	RTS

C1/CE29:	A9 10      	LDA #$10
C1/CE2B:	85 24      	STA $24
C1/CE2D:	A5 0E      	LDA $0E
C1/CE2F:	0A         	ASL A
C1/CE30:	0A         	ASL A
C1/CE31:	0A         	ASL A
C1/CE32:	0A         	ASL A
C1/CE33:	0A         	ASL A
C1/CE34:	48         	PHA
C1/CE35:	20 68 D8   	JSR $D868
C1/CE38:	AE F6 7A   	LDX $7AF6
C1/CE3B:	C2 20      	REP #$20
C1/CE3D:	BD CE 74   	LDA $74CE,X
C1/CE40:	18         	CLC
C1/CE41:	65 22      	ADC $22
C1/CE43:	9D CE 74   	STA $74CE,X
C1/CE46:	7B         	TDC
C1/CE47:	E2 20      	SEP #$20           ; 8-bit A
C1/CE49:	68         	PLA
C1/CE4A:	18         	CLC
C1/CE4B:	69 40      	ADC #$40
C1/CE4D:	20 68 D8   	JSR $D868
C1/CE50:	AE F6 7A   	LDX $7AF6
C1/CE53:	C2 20      	REP #$20
C1/CE55:	BD D0 74   	LDA $74D0,X
C1/CE58:	18         	CLC
C1/CE59:	65 22      	ADC $22
C1/CE5B:	9D D0 74   	STA $74D0,X
C1/CE5E:	7B         	TDC
C1/CE5F:	E2 20      	SEP #$20           ; 8-bit A
C1/CE61:	60         	RTS

C1/CE62:	B7 5B      	LDA [$5B],Y
C1/CE64:	F0 08      	BEQ $CE6E
C1/CE66:	9C 9C 61   	STZ $619C
C1/CE69:	9C 9D 61   	STZ $619D
C1/CE6C:	80 12      	BRA $CE80
C1/CE6E:	AE F6 7A   	LDX $7AF6
C1/CE71:	BD 38 6A   	LDA $6A38,X
C1/CE74:	20 83 CE   	JSR $CE83
C1/CE77:	AE F6 7A   	LDX $7AF6
C1/CE7A:	BD 39 6A   	LDA $6A39,X
C1/CE7D:	20 83 CE   	JSR $CE83

C1/CE80:	4C C6 CF   	JMP $CFC6

C1/CE83:	30 09      	BMI $CE8E
C1/CE85:	29 03      	AND #$03
C1/CE87:	20 09 1A   	JSR $1A09
C1/CE8A:	8D 9C 61   	STA $619C
C1/CE8D:	60         	RTS

C1/CE8E:	29 7F      	AND #$7F
C1/CE90:	38         	SEC
C1/CE91:	E9 04      	SBC #$04
C1/CE93:	20 09 1A   	JSR $1A09
C1/CE96:	8D 9D 61   	STA $619D
C1/CE99:	60         	RTS

C1/CE9A:	7B         	TDC
C1/CE9B:	AA         	TAX
C1/CE9C:	A0 01 00   	LDY #$0001
C1/CE9F:	A7 5B      	LDA [$5B]
C1/CEA1:	D0 01      	BNE $CEA4
C1/CEA3:	CA         	DEX
C1/CEA4:	86 14      	STX $14
C1/CEA6:	7B         	TDC
C1/CEA7:	AA         	TAX
C1/CEA8:	A8         	TAY
C1/CEA9:	C2 20      	REP #$20
C1/CEAB:	A5 0E      	LDA $0E
C1/CEAD:	0A         	ASL A
C1/CEAE:	85 12      	STA $12
C1/CEB0:	0A         	ASL A
C1/CEB1:	0A         	ASL A
C1/CEB2:	85 10      	STA $10
C1/CEB4:	AE F6 7A   	LDX $7AF6
C1/CEB7:	BD 87 6F   	LDA $6F87,X
C1/CEBA:	29 FF 00   	AND #$00FF
C1/CEBD:	D0 0E      	BNE $CECD
C1/CEBF:	A5 10      	LDA $10
C1/CEC1:	45 14      	EOR $14
C1/CEC3:	1A         	INC A
C1/CEC4:	85 10      	STA $10
C1/CEC6:	A5 12      	LDA $12
C1/CEC8:	45 14      	EOR $14
C1/CECA:	1A         	INC A
C1/CECB:	85 12      	STA $12
C1/CECD:	7B         	TDC
C1/CECE:	AA         	TAX
C1/CECF:	BF 00 FD C0	LDA $C0FD00,X
C1/CED3:	30 05      	BMI $CEDA
C1/CED5:	38         	SEC
C1/CED6:	E5 12      	SBC $12
C1/CED8:	80 03      	BRA $CEDD
C1/CEDA:	38         	SEC
C1/CEDB:	E5 10      	SBC $10
C1/CEDD:	99 F5 4A   	STA $4AF5,Y
C1/CEE0:	E8         	INX
C1/CEE1:	C8         	INY
C1/CEE2:	C8         	INY
C1/CEE3:	C8         	INY
C1/CEE4:	C8         	INY
C1/CEE5:	E0 97 00   	CPX #$0097
C1/CEE8:	D0 E5      	BNE $CECF
C1/CEEA:	7B         	TDC
C1/CEEB:	E2 20      	SEP #$20           ; 8-bit A
C1/CEED:	4C C6 CF   	JMP $CFC6

C1/CEF0:	20 A1 E7   	JSR $E7A1          ; get attacker data offset in Y
C1/CEF3:	C2 20      	REP #$20
C1/CEF5:	B9 B7 61   	LDA $61B7,Y
C1/CEF8:	18         	CLC
C1/CEF9:	79 C5 61   	ADC $61C5,Y
C1/CEFC:	18         	CLC
C1/CEFD:	79 D4 61   	ADC $61D4,Y
C1/CF00:	18         	CLC
C1/CF01:	69 08 00   	ADC #$0008
C1/CF04:	9D 3A 6A   	STA $6A3A,X
C1/CF07:	B9 B9 61   	LDA $61B9,Y
C1/CF0A:	18         	CLC
C1/CF0B:	79 C7 61   	ADC $61C7,Y
C1/CF0E:	9D 3C 6A   	STA $6A3C,X
C1/CF11:	7B         	TDC
C1/CF12:	E2 20      	SEP #$20           ; 8-bit A
C1/CF14:	60         	RTS

C1/CF15:	AE F6 7A   	LDX $7AF6
C1/CF18:	9E 8C 6F   	STZ $6F8C,X
C1/CF1B:	60         	RTS

C1/CF1C:	AE F6 7A   	LDX $7AF6
C1/CF1F:	AD 54 61   	LDA $6154
C1/CF22:	85 7D      	STA $7D
C1/CF24:	9D 7E 6F   	STA $6F7E,X
C1/CF27:	9E 7F 6F   	STZ $6F7F,X
C1/CF2A:	AD 55 61   	LDA $6155
C1/CF2D:	85 7E      	STA $7E
C1/CF2F:	9D 80 6F   	STA $6F80,X
C1/CF32:	9E 81 6F   	STZ $6F81,X
C1/CF35:	BD 82 6F   	LDA $6F82,X
C1/CF38:	85 7F      	STA $7F
C1/CF3A:	BD 84 6F   	LDA $6F84,X
C1/CF3D:	85 80      	STA $80
C1/CF3F:	20 E9 F9   	JSR $F9E9
C1/CF42:	4C C6 CF   	JMP $CFC6

C1/CF45:	AE F6 7A   	LDX $7AF6
C1/CF48:	C2 20      	REP #$20
C1/CF4A:	BD 3A 6A   	LDA $6A3A,X
C1/CF4D:	18         	CLC
C1/CF4E:	7D CE 74   	ADC $74CE,X
C1/CF51:	85 10      	STA $10
C1/CF53:	BD 3C 6A   	LDA $6A3C,X
C1/CF56:	18         	CLC
C1/CF57:	7D D0 74   	ADC $74D0,X
C1/CF5A:	85 12      	STA $12
C1/CF5C:	7B         	TDC
C1/CF5D:	E2 20      	SEP #$20           ; 8-bit A
C1/CF5F:	A5 10      	LDA $10
C1/CF61:	8D 54 61   	STA $6154
C1/CF64:	A5 12      	LDA $12
C1/CF66:	8D 55 61   	STA $6155
C1/CF69:	60         	RTS

C1/CF6A:	9C AE 61   	STZ $61AE
C1/CF6D:	9C AF 61   	STZ $61AF
C1/CF70:	9C B0 61   	STZ $61B0
C1/CF73:	9C B1 61   	STZ $61B1
C1/CF76:	60         	RTS

C1/CF77:	39
C1/CF78:	3B
C1/CF79:	3C
C1/CF7A:	56
C1/CF7B:	78
C1/CF7C:	65
C1/CF7D:	39
C1/CF7E:	3B

C1/CF7F:	20 5B 18   	JSR $185B     ; random number
C1/CF82:	29 07      	AND #$07
C1/CF84:	AA         	TAX
C1/CF85:	BF 77 CF C1	LDA $C1CF77,X    ; Data
C1/CF89:	20 D7 9B   	JSR $9BD7          ; load palette data
C1/CF8C:	60         	RTS

C1/CF8D:	AE F6 7A   	LDX $7AF6
C1/CF90:	BD 39 6A   	LDA $6A39,X
C1/CF93:	10 14      	BPL $CFA9
C1/CF95:	29 7F      	AND #$7F
C1/CF97:	38         	SEC
C1/CF98:	E9 04      	SBC #$04
C1/CF9A:	20 09 1A   	JSR $1A09
C1/CF9D:	49 FF      	EOR #$FF
C1/CF9F:	85 22      	STA $22
C1/CFA1:	AD E6 E9   	LDA $E9E6
C1/CFA4:	25 22      	AND $22
C1/CFA6:	8D E6 E9   	STA $E9E6
C1/CFA9:	60         	RTS

C1/CFAA:	B7 5B      	LDA [$5B],Y
C1/CFAC:	8D 7D 89   	STA $897D
C1/CFAF:	8D 7D 60   	STA $607D
C1/CFB2:	29 0F      	AND #$0F
C1/CFB4:	8D A9 62   	STA $62A9
C1/CFB7:	80 0D      	BRA $CFC6
C1/CFB9:	B7 5B      	LDA [$5B],Y
C1/CFBB:	8D 71 89   	STA $8971
C1/CFBE:	80 06      	BRA $CFC6
C1/CFC0:	B7 5B      	LDA [$5B],Y
C1/CFC2:	8F 23 21 00	STA $002123
C1/CFC6:	A4 5B      	LDY $5B
C1/CFC8:	C8         	INY
C1/CFC9:	84 5B      	STY $5B
C1/CFCB:	60         	RTS

C1/CFCC:	AE F6 7A   	LDX $7AF6
C1/CFCF:	C2 20      	REP #$20
C1/CFD1:	BD 6E 6F   	LDA $6F6E,X
C1/CFD4:	9D 7E 6F   	STA $6F7E,X
C1/CFD7:	BD 70 6F   	LDA $6F70,X
C1/CFDA:	9D 80 6F   	STA $6F80,X
C1/CFDD:	BD 72 6F   	LDA $6F72,X
C1/CFE0:	9D 82 6F   	STA $6F82,X
C1/CFE3:	BD 74 6F   	LDA $6F74,X
C1/CFE6:	9D 84 6F   	STA $6F84,X
C1/CFE9:	BD 77 6F   	LDA $6F77,X
C1/CFEC:	9D 87 6F   	STA $6F87,X
C1/CFEF:	BD 2A 6A   	LDA $6A2A,X
C1/CFF2:	9D 3A 6A   	STA $6A3A,X
C1/CFF5:	BD 2C 6A   	LDA $6A2C,X
C1/CFF8:	9D 3C 6A   	STA $6A3C,X
C1/CFFB:	BD BE 74   	LDA $74BE,X
C1/CFFE:	9D CE 74   	STA $74CE,X
C1/D001:	BD C0 74   	LDA $74C0,X
C1/D004:	9D D0 74   	STA $74D0,X
C1/D007:	7B         	TDC
C1/D008:	E2 20      	SEP #$20           ; 8-bit A
C1/D00A:	60         	RTS

C1/D00B:	B7 5B      	LDA [$5B],Y
C1/D00D:	F0 4C      	BEQ $D05B
C1/D00F:	7B         	TDC
C1/D010:	AA         	TAX
C1/D011:	C2 20      	REP #$20
C1/D013:	AD D0 E9   	LDA $E9D0
C1/D016:	0A         	ASL A
C1/D017:	0A         	ASL A
C1/D018:	85 10      	STA $10
C1/D01A:	AD B6 64   	LDA $64B6
C1/D01D:	18         	CLC
C1/D01E:	6D D0 E9   	ADC $E9D0
C1/D021:	9D F7 43   	STA $43F7,X
C1/D024:	3A         	DEC A
C1/D025:	E8         	INX
C1/D026:	E8         	INX
C1/D027:	E8         	INX
C1/D028:	E8         	INX
C1/D029:	E4 10      	CPX $10
C1/D02B:	D0 F4      	BNE $D021
C1/D02D:	AD B6 64   	LDA $64B6
C1/D030:	9D F7 43   	STA $43F7,X
C1/D033:	E8         	INX
C1/D034:	E8         	INX
C1/D035:	E8         	INX
C1/D036:	E8         	INX
C1/D037:	E0 5C 02   	CPX #$025C
C1/D03A:	D0 F4      	BNE $D030
C1/D03C:	CE D0 E9   	DEC $E9D0
C1/D03F:	7B         	TDC
C1/D040:	AA         	TAX
C1/D041:	AD B4 64   	LDA $64B4
C1/D044:	9D F5 43   	STA $43F5,X
C1/D047:	9D 21 45   	STA $4521,X
C1/D04A:	E8         	INX
C1/D04B:	E8         	INX
C1/D04C:	E8         	INX
C1/D04D:	E8         	INX
C1/D04E:	E0 2C 01   	CPX #$012C
C1/D051:	D0 F1      	BNE $D044
C1/D053:	8D 4D 46   	STA $464D
C1/D056:	7B         	TDC
C1/D057:	E2 20      	SEP #$20           ; 8-bit A
C1/D059:	80 06      	BRA $D061
C1/D05B:	A0 80 00   	LDY #$0080
C1/D05E:	8C D0 E9   	STY $E9D0

C1/D061:	4C C6 CF   	JMP $CFC6

C1/D064:	B7 5B      	LDA [$5B],Y
C1/D066:	8F 1A 21 00	STA $00211A
C1/D06A:	4C C6 CF   	JMP $CFC6

C1/D06D:	64 11      	STZ $11
C1/D06F:	B7 5B      	LDA [$5B],Y
C1/D071:	10 02      	BPL $D075
C1/D073:	C6 11      	DEC $11
C1/D075:	85 10      	STA $10
C1/D077:	C2 20      	REP #$20
C1/D079:	AD C4 E9   	LDA $E9C4
C1/D07C:	18         	CLC
C1/D07D:	65 10      	ADC $10
C1/D07F:	8D C4 E9   	STA $E9C4
C1/D082:	7B         	TDC
C1/D083:	E2 20      	SEP #$20           ; 8-bit A
C1/D085:	C8         	INY
C1/D086:	64 11      	STZ $11
C1/D088:	B7 5B      	LDA [$5B],Y
C1/D08A:	10 02      	BPL $D08E
C1/D08C:	C6 11      	DEC $11
C1/D08E:	85 10      	STA $10
C1/D090:	C2 20      	REP #$20
C1/D092:	AD CA E9   	LDA $E9CA
C1/D095:	18         	CLC
C1/D096:	65 10      	ADC $10
C1/D098:	8D CA E9   	STA $E9CA
C1/D09B:	E2 20      	SEP #$20           ; 8-bit A
C1/D09D:	C8         	INY
C1/D09E:	64 11      	STZ $11
C1/D0A0:	B7 5B      	LDA [$5B],Y
C1/D0A2:	10 02      	BPL $D0A6
C1/D0A4:	C6 11      	DEC $11
C1/D0A6:	85 10      	STA $10
C1/D0A8:	C8         	INY
C1/D0A9:	64 13      	STZ $13
C1/D0AB:	B7 5B      	LDA [$5B],Y
C1/D0AD:	10 02      	BPL $D0B1
C1/D0AF:	C6 13      	DEC $13
C1/D0B1:	85 12      	STA $12
C1/D0B3:	C2 20      	REP #$20
C1/D0B5:	AD CC E9   	LDA $E9CC
C1/D0B8:	18         	CLC
C1/D0B9:	65 10      	ADC $10
C1/D0BB:	8D CC E9   	STA $E9CC
C1/D0BE:	AD CE E9   	LDA $E9CE
C1/D0C1:	18         	CLC
C1/D0C2:	65 12      	ADC $12
C1/D0C4:	8D CE E9   	STA $E9CE
C1/D0C7:	A5 5B      	LDA $5B
C1/D0C9:	18         	CLC
C1/D0CA:	69 04 00   	ADC #$0004
C1/D0CD:	85 5B      	STA $5B
C1/D0CF:	7B         	TDC
C1/D0D0:	E2 20      	SEP #$20           ; 8-bit A
C1/D0D2:	60         	RTS

C1/D0D3:	AD 6F 89   	LDA $896F
C1/D0D6:	29 F8      	AND #$F8
C1/D0D8:	17 5B      	ORA [$5B],Y
C1/D0DA:	8D 6F 89   	STA $896F
C1/D0DD:	4C C6 CF   	JMP $CFC6

C1/D0E0:	AE F6 7A   	LDX $7AF6
C1/D0E3:	BD 7E 6F   	LDA $6F7E,X
C1/D0E6:	4A         	LSR A
C1/D0E7:	4A         	LSR A
C1/D0E8:	4A         	LSR A
C1/D0E9:	85 10      	STA $10
C1/D0EB:	BD 7E 6F   	LDA $6F7E,X
C1/D0EE:	49 FF      	EOR #$FF
C1/D0F0:	1A         	INC A
C1/D0F1:	4A         	LSR A
C1/D0F2:	4A         	LSR A
C1/D0F3:	4A         	LSR A
C1/D0F4:	85 12      	STA $12
C1/D0F6:	AD 1F 20   	LDA $201F
C1/D0F9:	29 03      	AND #$03
C1/D0FB:	C9 02      	CMP #$02
C1/D0FD:	D0 03      	BNE $D102
C1/D0FF:	7B         	TDC
C1/D100:	80 02      	BRA $D104
C1/D102:	A9 08      	LDA #$08
C1/D104:	85 14      	STA $14
C1/D106:	AD 3B 6F   	LDA $6F3B
C1/D109:	29 01      	AND #$01
C1/D10B:	D0 11      	BNE $D11E
C1/D10D:	AD 3A 6F   	LDA $6F3A
C1/D110:	38         	SEC
C1/D111:	E5 14      	SBC $14
C1/D113:	4A         	LSR A
C1/D114:	4A         	LSR A
C1/D115:	4A         	LSR A
C1/D116:	C5 10      	CMP $10
C1/D118:	F0 0B      	BEQ $D125
C1/D11A:	C5 12      	CMP $12
C1/D11C:	F0 07      	BEQ $D125
C1/D11E:	A4 5B      	LDY $5B
C1/D120:	88         	DEY
C1/D121:	88         	DEY
C1/D122:	88         	DEY
C1/D123:	84 5B      	STY $5B
C1/D125:	60         	RTS

C1/D126:	B7 5B      	LDA [$5B],Y
C1/D128:	8D 8D 89   	STA $898D
C1/D12B:	4C C6 CF   	JMP $CFC6

C1/D12E:	20 A1 E7   	JSR $E7A1          ; get attacker data offset in Y
C1/D131:	BD 87 6F   	LDA $6F87,X
C1/D134:	29 40      	AND #$40
C1/D136:	D0 04      	BNE $D13C
C1/D138:	A9 18      	LDA #$18
C1/D13A:	80 02      	BRA $D13E
C1/D13C:	A9 E8      	LDA #$E8
C1/D13E:	85 26      	STA $26
C1/D140:	BD 39 6A   	LDA $6A39,X
C1/D143:	30 17      	BMI $D15C
C1/D145:	29 03      	AND #$03
C1/D147:	0A         	ASL A
C1/D148:	A8         	TAY
C1/D149:	B9 33 80   	LDA $8033,Y
C1/D14C:	18         	CLC
C1/D14D:	65 26      	ADC $26
C1/D14F:	90 03      	BCC $D154
C1/D151:	B9 33 80   	LDA $8033,Y
C1/D154:	9D 82 6F   	STA $6F82,X
C1/D157:	B9 43 80   	LDA $8043,Y
C1/D15A:	80 11      	BRA $D16D
C1/D15C:	38         	SEC
C1/D15D:	E9 04      	SBC #$04
C1/D15F:	0A         	ASL A
C1/D160:	A8         	TAY
C1/D161:	B9 0F 80   	LDA $800F,Y
C1/D164:	18         	CLC
C1/D165:	65 26      	ADC $26
C1/D167:	9D 82 6F   	STA $6F82,X
C1/D16A:	B9 27 80   	LDA $8027,Y
C1/D16D:	38         	SEC
C1/D16E:	E9 08      	SBC #$08
C1/D170:	9D 84 6F   	STA $6F84,X
C1/D173:	20 E8 E7   	JSR $E7E8
C1/D176:	AE F6 7A   	LDX $7AF6
C1/D179:	A5 85      	LDA $85
C1/D17B:	18         	CLC
C1/D17C:	69 28      	ADC #$28
C1/D17E:	9D DB 74   	STA $74DB,X
C1/D181:	A9 04      	LDA #$04
C1/D183:	8D AF 60   	STA $60AF
C1/D186:	9C B0 60   	STZ $60B0
C1/D189:	60         	RTS

C1/D18A:	AE F6 7A   	LDX $7AF6
C1/D18D:	BD 39 6A   	LDA $6A39,X
C1/D190:	30 0F      	BMI $D1A1
C1/D192:	AA         	TAX
C1/D193:	0A         	ASL A
C1/D194:	0A         	ASL A
C1/D195:	0A         	ASL A
C1/D196:	0A         	ASL A
C1/D197:	0A         	ASL A
C1/D198:	A8         	TAY
C1/D199:	BD 6E 61   	LDA $616E,X
C1/D19C:	99 BC 61   	STA $61BC,Y
C1/D19F:	80 0E      	BRA $D1AF

C1/D1A1:	29 0F      	AND #$0F
C1/D1A3:	AA         	TAX
C1/D1A4:	38         	SEC
C1/D1A5:	E9 04      	SBC #$04
C1/D1A7:	0A         	ASL A
C1/D1A8:	A8         	TAY
C1/D1A9:	BD 6E 61   	LDA $616E,X
C1/D1AC:	99 DB 80   	STA $80DB,Y
C1/D1AF:	60         	RTS

C1/D1B0:	AE F6 7A   	LDX $7AF6
C1/D1B3:	BD 39 6A   	LDA $6A39,X
C1/D1B6:	30 13      	BMI $D1CB
C1/D1B8:	AA         	TAX
C1/D1B9:	0A         	ASL A
C1/D1BA:	0A         	ASL A
C1/D1BB:	0A         	ASL A
C1/D1BC:	0A         	ASL A
C1/D1BD:	0A         	ASL A
C1/D1BE:	A8         	TAY
C1/D1BF:	B9 BC 61   	LDA $61BC,Y
C1/D1C2:	29 F1      	AND #$F1
C1/D1C4:	09 06      	ORA #$06
C1/D1C6:	99 BC 61   	STA $61BC,Y
C1/D1C9:	80 12      	BRA $D1DD

C1/D1CB:	29 0F      	AND #$0F
C1/D1CD:	AA         	TAX
C1/D1CE:	38         	SEC
C1/D1CF:	E9 04      	SBC #$04
C1/D1D1:	0A         	ASL A
C1/D1D2:	A8         	TAY
C1/D1D3:	B9 DB 80   	LDA $80DB,Y
C1/D1D6:	29 F1      	AND #$F1
C1/D1D8:	09 06      	ORA #$06
C1/D1DA:	99 DB 80   	STA $80DB,Y
C1/D1DD:	60         	RTS

C1/D1DE:	B7 5B      	LDA [$5B],Y
C1/D1E0:	8D AE 62   	STA $62AE
C1/D1E3:	4C C6 CF   	JMP $CFC6

C1/D1E6:	A9 80      	LDA #$80
C1/D1E8:	85 16      	STA $16
C1/D1EA:	A0 01 00   	LDY #$0001
C1/D1ED:	AD AE 62   	LDA $62AE
C1/D1F0:	18         	CLC
C1/D1F1:	77 5B      	ADC [$5B],Y
C1/D1F3:	8D AE 62   	STA $62AE
C1/D1F6:	85 12      	STA $12
C1/D1F8:	A9 E0      	LDA #$E0
C1/D1FA:	8D 96 89   	STA $8996
C1/D1FD:	A5 16      	LDA $16
C1/D1FF:	85 10      	STA $10
C1/D201:	AD AD 62   	LDA $62AD
C1/D204:	29 1F      	AND #$1F
C1/D206:	AA         	TAX
C1/D207:	A0 04 00   	LDY #$0004
C1/D20A:	5A         	PHY
C1/D20B:	BF 9C D2 C1	LDA $C1D29C,X    ; Data
C1/D20F:	38         	SEC
C1/D210:	E5 12      	SBC $12
C1/D212:	10 01      	BPL $D215
C1/D214:	7B         	TDC

C1/D215:	05 10      	ORA $10
C1/D217:	99 96 89   	STA $8996,Y
C1/D21A:	99 16 8A   	STA $8A16,Y
C1/D21D:	99 96 8A   	STA $8A96,Y
C1/D220:	99 16 8B   	STA $8B16,Y
C1/D223:	E8         	INX
C1/D224:	8A         	TXA
C1/D225:	29 1F      	AND #$1F
C1/D227:	AA         	TAX
C1/D228:	D0 04      	BNE $D22E
C1/D22A:	A5 16      	LDA $16
C1/D22C:	85 10      	STA $10
C1/D22E:	C8         	INY
C1/D22F:	C8         	INY
C1/D230:	C8         	INY
C1/D231:	C8         	INY
C1/D232:	C0 84 00   	CPY #$0084
C1/D235:	D0 D4      	BNE $D20B
C1/D237:	7A         	PLY
C1/D238:	B9 96 89   	LDA $8996,Y
C1/D23B:	99 96 8B   	STA $8B96,Y
C1/D23E:	C8         	INY
C1/D23F:	C8         	INY
C1/D240:	C8         	INY
C1/D241:	C8         	INY
C1/D242:	C0 5C 00   	CPY #$005C
C1/D245:	D0 F1      	BNE $D238
C1/D247:	EE AD 62   	INC $62AD
C1/D24A:	4C C6 CF   	JMP $CFC6

C1/D24D:	AD 6F 89   	LDA $896F
C1/D250:	09 08      	ORA #$08
C1/D252:	8D 6F 89   	STA $896F
C1/D255:	60         	RTS

C1/D256:	7B         	TDC
C1/D257:	AA         	TAX
C1/D258:	A9 E0      	LDA #$E0
C1/D25A:	9D 96 89   	STA $8996,X
C1/D25D:	E8         	INX
C1/D25E:	E8         	INX
C1/D25F:	E8         	INX
C1/D260:	E8         	INX
C1/D261:	E0 5C 02   	CPX #$025C
C1/D264:	D0 F4      	BNE $D25A
C1/D266:	60         	RTS

C1/D267:	7B         	TDC
C1/D268:	AA         	TAX
C1/D269:	BD DB 80   	LDA $80DB,X
C1/D26C:	38         	SEC
C1/D26D:	E9 0A      	SBC #$0A
C1/D26F:	9D DB 80   	STA $80DB,X
C1/D272:	E8         	INX
C1/D273:	E8         	INX
C1/D274:	E0 0C 00   	CPX #$000C
C1/D277:	D0 F0      	BNE $D269
C1/D279:	60         	RTS

C1/D27A:	7B         	TDC
C1/D27B:	AA         	TAX
C1/D27C:	BD DB 80   	LDA $80DB,X
C1/D27F:	18         	CLC
C1/D280:	69 0A      	ADC #$0A
C1/D282:	9D DB 80   	STA $80DB,X
C1/D285:	E8         	INX
C1/D286:	E8         	INX
C1/D287:	E0 0C 00   	CPX #$000C
C1/D28A:	D0 F0      	BNE $D27C
C1/D28C:	60         	RTS

C1/D28D:	7B         	TDC
C1/D28E:	AA         	TAX
C1/D28F:	BD 00 7F   	LDA $7F00,X
C1/D292:	9D A0 7F   	STA $7FA0,X
C1/D295:	E8         	INX
C1/D296:	E0 60 00   	CPX #$0060
C1/D299:	D0 F4      	BNE $D28F
C1/D29B:	60         	RTS

C1/D29C:	00
C1/D29D:	01
C1/D29E:	02
C1/D29F:	03
C1/D2A0:	04
C1/D2A1:	05
C1/D2A2:	06
C1/D2A3:	07
C1/D2A4:	08
C1/D2A5:	09
C1/D2A6:	0A
C1/D2A7:	0B
C1/D2A8:	0C
C1/D2A9:	0D
C1/D2AA:	0E
C1/D2AB:	0F
C1/D2AC:	0F
C1/D2AD:	0E
C1/D2AE:	0D
C1/D2AF:	0C
C1/D2B0:	0B
C1/D2B1:	0A
C1/D2B2:	09
C1/D2B3:	08
C1/D2B4:	07
C1/D2B5:	06
C1/D2B6:	05
C1/D2B7:	04
C1/D2B8:	03
C1/D2B9:	02
C1/D2BA:	01
C1/D2BB:	00

C1/D2BC:	80
C1/D2BD:	40
C1/D2BE:	60
C1/D2BF:	20
C1/D2C0:	A0
C1/D2C1:	C0
C1/D2C2:	80
C1/D2C3:	20
C1/D2C4:	20
C1/D2C5:	60
C1/D2C6:	20
C1/D2C7:	60
C1/D2C8:	20
C1/D2C9:	60
C1/D2CA:	20
C1/D2CB:	60

C1/D2CC:	A9 08      	LDA #$08
C1/D2CE:	85 16      	STA $16
C1/D2D0:	80 02      	BRA $D2D4

C1/D2D2:	64 16      	STZ $16
C1/D2D4:	B7 5B      	LDA [$5B],Y
C1/D2D6:	85 12      	STA $12
C1/D2D8:	A9 E0      	LDA #$E0
C1/D2DA:	8D 96 89   	STA $8996
C1/D2DD:	AD AE 62   	LDA $62AE
C1/D2E0:	29 E0      	AND #$E0
C1/D2E2:	4A         	LSR A
C1/D2E3:	4A         	LSR A
C1/D2E4:	4A         	LSR A
C1/D2E5:	4A         	LSR A
C1/D2E6:	4A         	LSR A
C1/D2E7:	18         	CLC
C1/D2E8:	65 16      	ADC $16
C1/D2EA:	AA         	TAX
C1/D2EB:	85 14      	STA $14
C1/D2ED:	BF BC D2 C1	LDA $C1D2BC,X    ; Data
C1/D2F1:	85 10      	STA $10
C1/D2F3:	AD AD 62   	LDA $62AD
C1/D2F6:	29 1F      	AND #$1F
C1/D2F8:	AA         	TAX
C1/D2F9:	A0 04 00   	LDY #$0004
C1/D2FC:	BF 9C D2 C1	LDA $C1D29C,X    ; Data
C1/D300:	38         	SEC
C1/D301:	E5 12      	SBC $12
C1/D303:	10 01      	BPL $D306
C1/D305:	7B         	TDC

C1/D306:	05 10      	ORA $10
C1/D308:	99 96 89   	STA $8996,Y
C1/D30B:	E8         	INX
C1/D30C:	8A         	TXA
C1/D30D:	29 1F      	AND #$1F
C1/D30F:	AA         	TAX
C1/D310:	D0 14      	BNE $D326
C1/D312:	A5 14      	LDA $14
C1/D314:	1A         	INC A
C1/D315:	29 07      	AND #$07
C1/D317:	85 14      	STA $14
C1/D319:	18         	CLC
C1/D31A:	65 16      	ADC $16
C1/D31C:	AA         	TAX
C1/D31D:	BF BC D2 C1	LDA $C1D2BC,X    ; Data
C1/D321:	85 10      	STA $10
C1/D323:	A2 00 00   	LDX #$0000
C1/D326:	C8         	INY
C1/D327:	C8         	INY
C1/D328:	C8         	INY
C1/D329:	C8         	INY
C1/D32A:	C0 5C 02   	CPY #$025C
C1/D32D:	D0 CD      	BNE $D2FC
C1/D32F:	A4 5B      	LDY $5B
C1/D331:	C8         	INY
C1/D332:	84 5B      	STY $5B
C1/D334:	EE AD 62   	INC $62AD
C1/D337:	EE AE 62   	INC $62AE
C1/D33A:	AE F6 7A   	LDX $7AF6
C1/D33D:	60         	RTS

C1/D33E:	AE F6 7A   	LDX $7AF6
C1/D341:	BD 87 6F   	LDA $6F87,X
C1/D344:	F0 04      	BEQ $D34A
C1/D346:	A9 01      	LDA #$01
C1/D348:	80 01      	BRA $D34B
C1/D34A:	7B         	TDC
C1/D34B:	C2 20      	REP #$20
C1/D34D:	0A         	ASL A
C1/D34E:	85 22      	STA $22
C1/D350:	A5 5B      	LDA $5B
C1/D352:	1A         	INC A
C1/D353:	18         	CLC
C1/D354:	65 22      	ADC $22
C1/D356:	85 5B      	STA $5B
C1/D358:	A7 5B      	LDA [$5B]
C1/D35A:	3A         	DEC A
C1/D35B:	85 5B      	STA $5B
C1/D35D:	7B         	TDC
C1/D35E:	E2 20      	SEP #$20           ; 8-bit A
C1/D360:	60         	RTS

C1/D361:	A9 20      	LDA #$20
C1/D363:	80 02      	BRA $D367
C1/D365:	A9 50      	LDA #$50
C1/D367:	85 24      	STA $24
C1/D369:	AE F6 7A   	LDX $7AF6
C1/D36C:	BD E9 64   	LDA $64E9,X
C1/D36F:	20 68 D8   	JSR $D868
C1/D372:	AE F6 7A   	LDX $7AF6
C1/D375:	C2 20      	REP #$20
C1/D377:	A5 22      	LDA $22
C1/D379:	9D D0 74   	STA $74D0,X
C1/D37C:	7B         	TDC
C1/D37D:	E2 20      	SEP #$20           ; 8-bit A
C1/D37F:	A0 01 00   	LDY #$0001
C1/D382:	BD E9 64   	LDA $64E9,X
C1/D385:	18         	CLC
C1/D386:	77 5B      	ADC [$5B],Y
C1/D388:	9D E9 64   	STA $64E9,X
C1/D38B:	4C C6 CF   	JMP $CFC6

C1/D38E:	B7 5B      	LDA [$5B],Y
C1/D390:	C2 20      	REP #$20
C1/D392:	0A         	ASL A
C1/D393:	0A         	ASL A
C1/D394:	0A         	ASL A
C1/D395:	0A         	ASL A
C1/D396:	AA         	TAX
C1/D397:	7B         	TDC
C1/D398:	A8         	TAY
C1/D399:	BF 00 60 D2	LDA $D26000,X
C1/D39D:	99 80 7F   	STA $7F80,Y
C1/D3A0:	E8         	INX
C1/D3A1:	E8         	INX
C1/D3A2:	C8         	INY
C1/D3A3:	C8         	INY
C1/D3A4:	C0 10 00   	CPY #$0010
C1/D3A7:	D0 F0      	BNE $D399
C1/D3A9:	7B         	TDC
C1/D3AA:	E2 20      	SEP #$20           ; 8-bit A
C1/D3AC:	4C C6 CF   	JMP $CFC6

C1/D3AF:	AE F6 7A   	LDX $7AF6
C1/D3B2:	A9 08      	LDA #$08
C1/D3B4:	8D AF 60   	STA $60AF
C1/D3B7:	9C B0 60   	STZ $60B0
C1/D3BA:	20 5B 18   	JSR $185B     ; random number
C1/D3BD:	29 07      	AND #$07
C1/D3BF:	85 22      	STA $22
C1/D3C1:	BD 87 6F   	LDA $6F87,X
C1/D3C4:	D0 04      	BNE $D3CA
C1/D3C6:	A9 7C      	LDA #$7C
C1/D3C8:	80 08      	BRA $D3D2
C1/D3CA:	A9 FC      	LDA #$FC
C1/D3CC:	A0 02 00   	LDY #$0002
C1/D3CF:	18         	CLC
C1/D3D0:	77 5B      	ADC [$5B],Y
C1/D3D2:	18         	CLC
C1/D3D3:	65 22      	ADC $22
C1/D3D5:	A0 01 00   	LDY #$0001
C1/D3D8:	77 5B      	ADC [$5B],Y
C1/D3DA:	9D DB 74   	STA $74DB,X
C1/D3DD:	A4 5B      	LDY $5B
C1/D3DF:	C8         	INY
C1/D3E0:	C8         	INY
C1/D3E1:	84 5B      	STY $5B
C1/D3E3:	60         	RTS

C1/D3E4:	C2 20      	REP #$20
C1/D3E6:	AE F6 7A   	LDX $7AF6
C1/D3E9:	A0 01 00   	LDY #$0001
C1/D3EC:	B7 5B      	LDA [$5B],Y
C1/D3EE:	29 FF 00   	AND #$00FF
C1/D3F1:	9D 3A 6A   	STA $6A3A,X
C1/D3F4:	C8         	INY
C1/D3F5:	B7 5B      	LDA [$5B],Y
C1/D3F7:	29 FF 00   	AND #$00FF
C1/D3FA:	9D 3C 6A   	STA $6A3C,X
C1/D3FD:	E6 5B      	INC $5B
C1/D3FF:	E6 5B      	INC $5B
C1/D401:	7B         	TDC
C1/D402:	E2 20      	SEP #$20           ; 8-bit A
C1/D404:	60         	RTS

C1/D405:	AE F6 7A   	LDX $7AF6
C1/D408:	AD 1F 20   	LDA $201F
C1/D40B:	29 03      	AND #$03
C1/D40D:	C9 03      	CMP #$03
C1/D40F:	D0 11      	BNE $D422
C1/D411:	BD 38 6A   	LDA $6A38,X
C1/D414:	30 08      	BMI $D41E
C1/D416:	C9 02      	CMP #$02
C1/D418:	90 04      	BCC $D41E
C1/D41A:	A9 01      	LDA #$01
C1/D41C:	80 04      	BRA $D422
C1/D41E:	A9 02      	LDA #$02
C1/D420:	60         	RTS

C1/D421:	7B         	TDC
C1/D422:	60         	RTS

C1/D423:	20 05 D4   	JSR $D405
C1/D426:	C2 20      	REP #$20
C1/D428:	0A         	ASL A
C1/D429:	85 22      	STA $22
C1/D42B:	A5 5B      	LDA $5B
C1/D42D:	1A         	INC A
C1/D42E:	18         	CLC
C1/D42F:	65 22      	ADC $22
C1/D431:	85 5B      	STA $5B
C1/D433:	A7 5B      	LDA [$5B]
C1/D435:	3A         	DEC A
C1/D436:	85 5B      	STA $5B
C1/D438:	7B         	TDC
C1/D439:	E2 20      	SEP #$20           ; 8-bit A
C1/D43B:	60         	RTS

C1/D43C:	B7 5B      	LDA [$5B],Y
C1/D43E:	20 26 9C   	JSR $9C26
C1/D441:	4C C6 CF   	JMP $CFC6

C1/D444:	B7 5B      	LDA [$5B],Y
C1/D446:	20 6B 9C   	JSR $9C6B
C1/D449:	4C C6 CF   	JMP $CFC6

C1/D44C:	B7 5B      	LDA [$5B],Y
C1/D44E:	20 D7 9B   	JSR $9BD7          ; load palette data
C1/D451:	4C C6 CF   	JMP $CFC6

C1/D454:	B7 5B      	LDA [$5B],Y
C1/D456:	8D BE 62   	STA $62BE
C1/D459:	4C C6 CF   	JMP $CFC6

C1/D45C:	B7 5B      	LDA [$5B],Y
C1/D45E:	85 10      	STA $10
C1/D460:	AD BD 61   	LDA $61BD
C1/D463:	29 CF      	AND #$CF
C1/D465:	05 10      	ORA $10
C1/D467:	8D BD 61   	STA $61BD
C1/D46A:	AD DD 61   	LDA $61DD
C1/D46D:	29 CF      	AND #$CF
C1/D46F:	05 10      	ORA $10
C1/D471:	8D DD 61   	STA $61DD
C1/D474:	AD FD 61   	LDA $61FD
C1/D477:	29 CF      	AND #$CF
C1/D479:	05 10      	ORA $10
C1/D47B:	8D FD 61   	STA $61FD
C1/D47E:	AD 1D 62   	LDA $621D
C1/D481:	29 CF      	AND #$CF
C1/D483:	05 10      	ORA $10
C1/D485:	8D 1D 62   	STA $621D
C1/D488:	4C C6 CF   	JMP $CFC6

C1/D48B:	B7 5B      	LDA [$5B],Y
C1/D48D:	8D BD 62   	STA $62BD
C1/D490:	4C C6 CF   	JMP $CFC6

C1/D493:	B7 5B      	LDA [$5B],Y
C1/D495:	8D BF 62   	STA $62BF
C1/D498:	4C C6 CF   	JMP $CFC6

C1/D49B:	7B         	TDC
C1/D49C:	AA         	TAX
C1/D49D:	C2 20      	REP #$20
C1/D49F:	9E F5 4A   	STZ $4AF5,X
C1/D4A2:	E8         	INX
C1/D4A3:	E8         	INX
C1/D4A4:	E0 5C 02   	CPX #$025C
C1/D4A7:	D0 F6      	BNE $D49F
C1/D4A9:	7B         	TDC
C1/D4AA:	E2 20      	SEP #$20           ; 8-bit A
C1/D4AC:	60         	RTS

C1/D4AD:	7B         	TDC
C1/D4AE:	AA         	TAX
C1/D4AF:	C2 20      	REP #$20
C1/D4B1:	9E F5 43   	STZ $43F5,X
C1/D4B4:	E8         	INX
C1/D4B5:	E8         	INX
C1/D4B6:	E0 5C 02   	CPX #$025C
C1/D4B9:	D0 F6      	BNE $D4B1
C1/D4BB:	E2 20      	SEP #$20           ; 8-bit A
C1/D4BD:	60         	RTS

C1/D4BE:	E2 10      	SEP #$10
C1/D4C0:	C2 20      	REP #$20
C1/D4C2:	7B         	TDC
C1/D4C3:	AA         	TAX
C1/D4C4:	AD 53 46   	LDA $4653
C1/D4C7:	48         	PHA
C1/D4C8:	DE F7 43   	DEC $43F7,X
C1/D4CB:	DE 43 44   	DEC $4443,X
C1/D4CE:	DE 8F 44   	DEC $448F,X
C1/D4D1:	DE DB 44   	DEC $44DB,X
C1/D4D4:	DE 27 45   	DEC $4527,X
C1/D4D7:	DE 73 45   	DEC $4573,X
C1/D4DA:	DE BF 45   	DEC $45BF,X
C1/D4DD:	DE 0B 46   	DEC $460B,X
C1/D4E0:	E8         	INX
C1/D4E1:	E8         	INX
C1/D4E2:	E8         	INX
C1/D4E3:	E8         	INX
C1/D4E4:	E0 4C      	CPX #$4C
C1/D4E6:	D0 E0      	BNE $D4C8
C1/D4E8:	68         	PLA
C1/D4E9:	8D 53 46   	STA $4653
C1/D4EC:	7B         	TDC
C1/D4ED:	E2 20      	SEP #$20           ; 8-bit A
C1/D4EF:	C2 10      	REP #$10
C1/D4F1:	60         	RTS

C1/D4F2:	C2 20      	REP #$20
C1/D4F4:	AD 18 7B   	LDA $7B18
C1/D4F7:	38         	SEC
C1/D4F8:	ED 1F 7B   	SBC $7B1F
C1/D4FB:	85 10      	STA $10
C1/D4FD:	7B         	TDC
C1/D4FE:	A8         	TAY
C1/D4FF:	AA         	TAX
C1/D500:	BF 9F D3 C2	LDA $C2D39F,X
C1/D504:	29 FF 00   	AND #$00FF
C1/D507:	85 12      	STA $12
C1/D509:	A5 10      	LDA $10
C1/D50B:	99 F7 43   	STA $43F7,Y
C1/D50E:	3A         	DEC A
C1/D50F:	C8         	INY
C1/D510:	C8         	INY
C1/D511:	C8         	INY
C1/D512:	C8         	INY
C1/D513:	C0 2C 01   	CPY #$012C
C1/D516:	F0 0C      	BEQ $D524
C1/D518:	C6 12      	DEC $12
C1/D51A:	D0 EF      	BNE $D50B
C1/D51C:	3A         	DEC A
C1/D51D:	85 10      	STA $10
C1/D51F:	E6 14      	INC $14
C1/D521:	E8         	INX
C1/D522:	80 DC      	BRA $D500

C1/D524:	3A         	DEC A
C1/D525:	85 10      	STA $10
C1/D527:	BF 9F D3 C2	LDA $C2D39F,X
C1/D52B:	29 FF 00   	AND #$00FF
C1/D52E:	85 12      	STA $12
C1/D530:	A5 10      	LDA $10
C1/D532:	99 F7 43   	STA $43F7,Y
C1/D535:	3A         	DEC A
C1/D536:	C8         	INY
C1/D537:	C8         	INY
C1/D538:	C8         	INY
C1/D539:	C8         	INY
C1/D53A:	C0 5C 02   	CPY #$025C
C1/D53D:	F0 0B      	BEQ $D54A
C1/D53F:	C6 12      	DEC $12
C1/D541:	D0 EF      	BNE $D532
C1/D543:	3A         	DEC A
C1/D544:	85 10      	STA $10
C1/D546:	C6 14      	DEC $14
C1/D548:	80 DD      	BRA $D527
C1/D54A:	7B         	TDC
C1/D54B:	E2 20      	SEP #$20           ; 8-bit A
C1/D54D:	60         	RTS

C1/D54E:	AE F6 7A   	LDX $7AF6
C1/D551:	BD D8 74   	LDA $74D8,X
C1/D554:	18         	CLC
C1/D555:	69 40      	ADC #$40
C1/D557:	30 09      	BMI $D562
C1/D559:	BD E7 64   	LDA $64E7,X
C1/D55C:	29 FE      	AND #$FE
C1/D55E:	9D E7 64   	STA $64E7,X
C1/D561:	60         	RTS

C1/D562:	BD E7 64   	LDA $64E7,X
C1/D565:	09 01      	ORA #$01
C1/D567:	9D E7 64   	STA $64E7,X
C1/D56A:	60         	RTS

C1/D56B:	E2 10      	SEP #$10
C1/D56D:	C2 20      	REP #$20
C1/D56F:	7B         	TDC
C1/D570:	AA         	TAX
C1/D571:	AD 53 4D   	LDA $4D53
C1/D574:	48         	PHA
C1/D575:	DE F7 4A   	DEC $4AF7,X
C1/D578:	DE 43 4B   	DEC $4B43,X
C1/D57B:	DE 8F 4B   	DEC $4B8F,X
C1/D57E:	DE DB 4B   	DEC $4BDB,X
C1/D581:	DE 27 4C   	DEC $4C27,X
C1/D584:	DE 73 4C   	DEC $4C73,X
C1/D587:	DE BF 4C   	DEC $4CBF,X
C1/D58A:	DE 0B 4D   	DEC $4D0B,X
C1/D58D:	E8         	INX
C1/D58E:	E8         	INX
C1/D58F:	E8         	INX
C1/D590:	E8         	INX
C1/D591:	E0 4C      	CPX #$4C
C1/D593:	D0 E0      	BNE $D575
C1/D595:	68         	PLA
C1/D596:	8D 53 4D   	STA $4D53
C1/D599:	7B         	TDC
C1/D59A:	E2 20      	SEP #$20           ; 8-bit A
C1/D59C:	C2 10      	REP #$10
C1/D59E:	60         	RTS

C1/D59F:	C2 20      	REP #$20
C1/D5A1:	AD 24 7B   	LDA $7B24
C1/D5A4:	38         	SEC
C1/D5A5:	ED 2B 7B   	SBC $7B2B
C1/D5A8:	85 10      	STA $10
C1/D5AA:	7B         	TDC
C1/D5AB:	A8         	TAY
C1/D5AC:	AA         	TAX
C1/D5AD:	BF 9F D3 C2	LDA $C2D39F,X
C1/D5B1:	29 FF 00   	AND #$00FF
C1/D5B4:	85 12      	STA $12
C1/D5B6:	A5 10      	LDA $10
C1/D5B8:	99 F7 4A   	STA $4AF7,Y
C1/D5BB:	3A         	DEC A
C1/D5BC:	C8         	INY
C1/D5BD:	C8         	INY
C1/D5BE:	C8         	INY
C1/D5BF:	C8         	INY
C1/D5C0:	C0 2C 01   	CPY #$012C
C1/D5C3:	F0 0C      	BEQ $D5D1
C1/D5C5:	C6 12      	DEC $12
C1/D5C7:	D0 EF      	BNE $D5B8
C1/D5C9:	3A         	DEC A
C1/D5CA:	85 10      	STA $10
C1/D5CC:	E6 14      	INC $14
C1/D5CE:	E8         	INX
C1/D5CF:	80 DC      	BRA $D5AD

C1/D5D1:	3A         	DEC A
C1/D5D2:	85 10      	STA $10
C1/D5D4:	BF 9F D3 C2	LDA $C2D39F,X
C1/D5D8:	29 FF 00   	AND #$00FF
C1/D5DB:	85 12      	STA $12
C1/D5DD:	A5 10      	LDA $10
C1/D5DF:	99 F7 4A   	STA $4AF7,Y
C1/D5E2:	3A         	DEC A
C1/D5E3:	C8         	INY
C1/D5E4:	C8         	INY
C1/D5E5:	C8         	INY
C1/D5E6:	C8         	INY
C1/D5E7:	C0 5C 02   	CPY #$025C
C1/D5EA:	F0 0C      	BEQ $D5F8
C1/D5EC:	C6 12      	DEC $12
C1/D5EE:	D0 EF      	BNE $D5DF
C1/D5F0:	3A         	DEC A
C1/D5F1:	85 10      	STA $10
C1/D5F3:	C6 14      	DEC $14
C1/D5F5:	CA         	DEX
C1/D5F6:	80 DC      	BRA $D5D4
C1/D5F8:	7B         	TDC
C1/D5F9:	E2 20      	SEP #$20           ; 8-bit A
C1/D5FB:	60         	RTS

C1/D5FC:	A9 4C      	LDA #$4C
C1/D5FE:	8D 13 96   	STA $9613
C1/D601:	AD 1B 96   	LDA $961B
C1/D604:	48         	PHA
C1/D605:	9C 1B 96   	STZ $961B
C1/D608:	A9 4C      	LDA #$4C
C1/D60A:	8D 15 96   	STA $9615
C1/D60D:	A9 80      	LDA #$80
C1/D60F:	8D 14 96   	STA $9614
C1/D612:	20 C7 1B   	JSR $1BC7
C1/D615:	7B         	TDC
C1/D616:	AA         	TAX
C1/D617:	BD 21 9A   	LDA $9A21,X
C1/D61A:	9D F5 4A   	STA $4AF5,X
C1/D61D:	9E F6 4A   	STZ $4AF6,X
C1/D620:	E8         	INX
C1/D621:	E8         	INX
C1/D622:	E8         	INX
C1/D623:	E8         	INX
C1/D624:	E0 5C 02   	CPX #$025C
C1/D627:	D0 EE      	BNE $D617
C1/D629:	68         	PLA
C1/D62A:	8D 1B 96   	STA $961B
C1/D62D:	60         	RTS

C1/D62E:	A2 2C 00   	LDX #$002C
C1/D631:	86 24      	STX $24
C1/D633:	A9 10      	LDA #$10
C1/D635:	38         	SEC
C1/D636:	ED 6C 61   	SBC $616C
C1/D639:	D0 05      	BNE $D640
C1/D63B:	A2 34 00   	LDX #$0034
C1/D63E:	86 24      	STX $24
C1/D640:	C2 20      	REP #$20
C1/D642:	0A         	ASL A
C1/D643:	0A         	ASL A
C1/D644:	0A         	ASL A
C1/D645:	85 22      	STA $22
C1/D647:	AE F6 7A   	LDX $7AF6
C1/D64A:	BD 3C 6A   	LDA $6A3C,X
C1/D64D:	18         	CLC
C1/D64E:	65 22      	ADC $22
C1/D650:	38         	SEC
C1/D651:	E5 24      	SBC $24
C1/D653:	9D 3C 6A   	STA $6A3C,X
C1/D656:	7B         	TDC
C1/D657:	E2 20      	SEP #$20           ; 8-bit A
C1/D659:	20 8A C3   	JSR $C38A          ; set max sprite priority for all entities
C1/D65C:	AE F6 7A   	LDX $7AF6
C1/D65F:	BD 38 6A   	LDA $6A38,X
C1/D662:	20 FA C3   	JSR $C3FA
C1/D665:	AE F6 7A   	LDX $7AF6
C1/D668:	BD 38 6A   	LDA $6A38,X
C1/D66B:	0A         	ASL A
C1/D66C:	0A         	ASL A
C1/D66D:	0A         	ASL A
C1/D66E:	0A         	ASL A
C1/D66F:	0A         	ASL A
C1/D670:	A8         	TAY
C1/D671:	A9 30      	LDA #$30
C1/D673:	99 BD 61   	STA $61BD,Y
C1/D676:	60         	RTS

C1/D677:	AE 69 61   	LDX $6169
C1/D67A:	7B         	TDC
C1/D67B:	A8         	TAY
C1/D67C:	BF 20 78 D2	LDA $D27820,X
C1/D680:	99 60 7E   	STA $7E60,Y
C1/D683:	99 60 7C   	STA $7C60,Y
C1/D686:	E8         	INX
C1/D687:	C8         	INY
C1/D688:	C0 20 00   	CPY #$0020
C1/D68B:	D0 EF      	BNE $D67C
C1/D68D:	60         	RTS

C1/D68E:	AE F6 7A   	LDX $7AF6
C1/D691:	9E E8 64   	STZ $64E8,X
C1/D694:	9E E9 64   	STZ $64E9,X
C1/D697:	60         	RTS

C1/D698:	AE F6 7A   	LDX $7AF6
C1/D69B:	C2 20      	REP #$20
C1/D69D:	BD 3A 6A   	LDA $6A3A,X
C1/D6A0:	18         	CLC
C1/D6A1:	7D CE 74   	ADC $74CE,X
C1/D6A4:	85 22      	STA $22
C1/D6A6:	BD 3C 6A   	LDA $6A3C,X
C1/D6A9:	18         	CLC
C1/D6AA:	7D D0 74   	ADC $74D0,X
C1/D6AD:	85 24      	STA $24
C1/D6AF:	7B         	TDC
C1/D6B0:	E2 20      	SEP #$20           ; 8-bit A
C1/D6B2:	A5 22      	LDA $22
C1/D6B4:	8D 14 96   	STA $9614
C1/D6B7:	A5 24      	LDA $24
C1/D6B9:	8D 15 96   	STA $9615
C1/D6BC:	60         	RTS

C1/D6BD:	AE F6 7A   	LDX $7AF6
C1/D6C0:	BD 39 6A   	LDA $6A39,X
C1/D6C3:	30 1F      	BMI $D6E4
C1/D6C5:	29 03      	AND #$03
C1/D6C7:	85 10      	STA $10
C1/D6C9:	0A         	ASL A
C1/D6CA:	0A         	ASL A
C1/D6CB:	0A         	ASL A
C1/D6CC:	0A         	ASL A
C1/D6CD:	0A         	ASL A
C1/D6CE:	AA         	TAX
C1/D6CF:	BD BD 2E   	LDA $2EBD,X
C1/D6D2:	09 10      	ORA #$10
C1/D6D4:	9D BD 2E   	STA $2EBD,X
C1/D6D7:	A5 10      	LDA $10
C1/D6D9:	8D 78 7B   	STA $7B78
C1/D6DC:	AE F6 7A   	LDX $7AF6
C1/D6DF:	DA         	PHX
C1/D6E0:	20 79 2F   	JSR $2F79
C1/D6E3:	FA         	PLX
C1/D6E4:	60         	RTS

C1/D6E5:	AE F6 7A   	LDX $7AF6
C1/D6E8:	BD 39 6A   	LDA $6A39,X
C1/D6EB:	30 20      	BMI $D70D
C1/D6ED:	29 03      	AND #$03
C1/D6EF:	85 10      	STA $10
C1/D6F1:	0A         	ASL A
C1/D6F2:	0A         	ASL A
C1/D6F3:	0A         	ASL A
C1/D6F4:	0A         	ASL A
C1/D6F5:	0A         	ASL A
C1/D6F6:	AA         	TAX
C1/D6F7:	BD BD 2E   	LDA $2EBD,X
C1/D6FA:	49 20      	EOR #$20
C1/D6FC:	9D BD 2E   	STA $2EBD,X
C1/D6FF:	A5 10      	LDA $10
C1/D701:	8D 78 7B   	STA $7B78
C1/D704:	AE F6 7A   	LDX $7AF6
C1/D707:	DA         	PHX
C1/D708:	20 79 2F   	JSR $2F79
C1/D70B:	FA         	PLX
C1/D70C:	60         	RTS

C1/D70D:	29 7F      	AND #$7F
C1/D70F:	38         	SEC
C1/D710:	E9 04      	SBC #$04
C1/D712:	A8         	TAY
C1/D713:	B9 C2 62   	LDA $62C2,Y
C1/D716:	49 01      	EOR #$01
C1/D718:	99 C2 62   	STA $62C2,Y
C1/D71B:	AE F6 7A   	LDX $7AF6
C1/D71E:	DA         	PHX
C1/D71F:	20 7C 25   	JSR $257C
C1/D722:	20 C1 25   	JSR $25C1
C1/D725:	FA         	PLX
C1/D726:	60         	RTS

C1/D727:	20 5B 18   	JSR $185B     ; random number
C1/D72A:	AE F6 7A   	LDX $7AF6
C1/D72D:	9D D8 74   	STA $74D8,X
C1/D730:	9E D9 74   	STZ $74D9,X
C1/D733:	60         	RTS

C1/D734:	AE F6 7A   	LDX $7AF6
C1/D737:	9E D8 74   	STZ $74D8,X
C1/D73A:	9E D9 74   	STZ $74D9,X
C1/D73D:	60         	RTS

C1/D73E:	C2 20      	REP #$20
C1/D740:	AE F6 7A   	LDX $7AF6
C1/D743:	BD 82 6F   	LDA $6F82,X
C1/D746:	9D 3A 6A   	STA $6A3A,X
C1/D749:	BD 84 6F   	LDA $6F84,X
C1/D74C:	9D 3C 6A   	STA $6A3C,X
C1/D74F:	7B         	TDC
C1/D750:	E2 20      	SEP #$20           ; 8-bit A
C1/D752:	60         	RTS

C1/D753:	C2 20      	REP #$20
C1/D755:	AD F6 7A   	LDA $7AF6
C1/D758:	AA         	TAX
C1/D759:	29 80 FF   	AND #$FF80
C1/D75C:	A8         	TAY
C1/D75D:	B9 3A 6A   	LDA $6A3A,Y
C1/D760:	9D 3A 6A   	STA $6A3A,X
C1/D763:	B9 3C 6A   	LDA $6A3C,Y
C1/D766:	9D 3C 6A   	STA $6A3C,X
C1/D769:	B9 CE 74   	LDA $74CE,Y
C1/D76C:	9D CE 74   	STA $74CE,X
C1/D76F:	B9 D0 74   	LDA $74D0,Y
C1/D772:	9D D0 74   	STA $74D0,X
C1/D775:	7B         	TDC
C1/D776:	E2 20      	SEP #$20           ; 8-bit A
C1/D778:	60         	RTS

C1/D779:	AE F6 7A   	LDX $7AF6
C1/D77C:	A9 08      	LDA #$08
C1/D77E:	8D AF 60   	STA $60AF
C1/D781:	9C B0 60   	STZ $60B0
C1/D784:	20 5B 18   	JSR $185B     ; random number
C1/D787:	29 07      	AND #$07
C1/D789:	85 22      	STA $22
C1/D78B:	BD 87 6F   	LDA $6F87,X
C1/D78E:	D0 04      	BNE $D794
C1/D790:	A9 7C      	LDA #$7C
C1/D792:	80 02      	BRA $D796
C1/D794:	A9 FC      	LDA #$FC
C1/D796:	18         	CLC
C1/D797:	65 22      	ADC $22
C1/D799:	9D DB 74   	STA $74DB,X
C1/D79C:	60         	RTS

C1/D79D:	AE F6 7A   	LDX $7AF6
C1/D7A0:	BD 38 6A   	LDA $6A38,X
C1/D7A3:	10 1E      	BPL $D7C3
C1/D7A5:	29 7F      	AND #$7F
C1/D7A7:	38         	SEC
C1/D7A8:	E9 04      	SBC #$04
C1/D7AA:	0A         	ASL A
C1/D7AB:	A8         	TAY
C1/D7AC:	C2 20      	REP #$20
C1/D7AE:	B9 C3 80   	LDA $80C3,Y
C1/D7B1:	9D E8 64   	STA $64E8,X
C1/D7B4:	B9 CF 80   	LDA $80CF,Y
C1/D7B7:	9D EA 64   	STA $64EA,X
C1/D7BA:	7B         	TDC
C1/D7BB:	99 B7 80   	STA $80B7,Y
C1/D7BE:	99 AB 80   	STA $80AB,Y
C1/D7C1:	E2 20      	SEP #$20           ; 8-bit A
C1/D7C3:	60         	RTS

C1/D7C4:	AE F6 7A   	LDX $7AF6
C1/D7C7:	C2 20      	REP #$20
C1/D7C9:	BD D9 74   	LDA $74D9,X
C1/D7CC:	18         	CLC
C1/D7CD:	69 08 00   	ADC #$0008
C1/D7D0:	DD DC 74   	CMP $74DC,X
C1/D7D3:	90 F7      	BCC $D7CC
C1/D7D5:	38         	SEC
C1/D7D6:	E9 08 00   	SBC #$0008
C1/D7D9:	9D D9 74   	STA $74D9,X
C1/D7DC:	7B         	TDC
C1/D7DD:	E2 20      	SEP #$20           ; 8-bit A
C1/D7DF:	20 19 E9   	JSR $E919
C1/D7E2:	60         	RTS

; Animation Script Subcommand $8B ($0B)
; Some sort of decelerating angular movement (thread XY position update)

C1/D7E3:	AE F6 7A   	LDX $7AF6          ; animation thread offset
C1/D7E6:	BD D9 74   	LDA $74D9,X        ; current polar radius/angle
C1/D7E9:	85 24      	STA $24            ; store ^
C1/D7EB:	BD D8 74   	LDA $74D8,X        ; calculated polar movement speed
C1/D7EE:	20 68 D8   	JSR $D868          ; do angle math
C1/D7F1:	AE F6 7A   	LDX $7AF6          ; animation thread offset
C1/D7F4:	C2 20      	REP #$20           ; 16-bit A
C1/D7F6:	A5 22      	LDA $22            ; get angle math result
C1/D7F8:	9D D0 74   	STA $74D0,X        ; update thread Y offset
C1/D7FB:	7B         	TDC                ; zero A/B
C1/D7FC:	E2 20      	SEP #$20           ; 8-bit A
C1/D7FE:	BD D8 74   	LDA $74D8,X        ; calculated polar movement speed
C1/D801:	18         	CLC                ; clear carry
C1/D802:	69 40      	ADC #$40           ; add 64
C1/D804:	20 68 D8   	JSR $D868          ; do angle math
C1/D807:	AE F6 7A   	LDX $7AF6          ; animation thread offset
C1/D80A:	C2 20      	REP #$20           ; 16-bit A
C1/D80C:	A5 22      	LDA $22            ; get angle math result
C1/D80E:	9D CE 74   	STA $74CE,X        ; update thread X offset
C1/D811:	7B         	TDC                ; zero A/B
C1/D812:	E2 20      	SEP #$20           ; 8-bit A
C1/D814:	BD D8 74   	LDA $74D8,X        ; calculated polar movement speed
C1/D817:	38         	SEC                ; set carry
C1/D818:	E9 04      	SBC #$04           ; subtract 4
C1/D81A:	9D D8 74   	STA $74D8,X        ; set new movement speed
C1/D81D:	BD D9 74   	LDA $74D9,X        ; current polar radius
C1/D820:	18         	CLC                ; clear carry
C1/D821:	69 02      	ADC #$02           ; add 2
C1/D823:	C9 30      	CMP #$30           ; >= #48?
C1/D825:	B0 03      	BCS $D82A          ; exit if ^
C1/D827:	9D D9 74   	STA $74D9,X        ; else, update polar radius
C1/D82A:	60         	RTS

C1/D82B:	AE F6 7A   	LDX $7AF6
C1/D82E:	A9 30      	LDA #$30
C1/D830:	85 24      	STA $24
C1/D832:	BD D8 74   	LDA $74D8,X
C1/D835:	5D D9 74   	EOR $74D9,X
C1/D838:	20 68 D8   	JSR $D868
C1/D83B:	AE F6 7A   	LDX $7AF6
C1/D83E:	C2 20      	REP #$20
C1/D840:	A5 22      	LDA $22
C1/D842:	9D D0 74   	STA $74D0,X
C1/D845:	7B         	TDC
C1/D846:	E2 20      	SEP #$20           ; 8-bit A
C1/D848:	BD D8 74   	LDA $74D8,X
C1/D84B:	18         	CLC
C1/D84C:	69 20      	ADC #$20
C1/D84E:	20 68 D8   	JSR $D868
C1/D851:	AE F6 7A   	LDX $7AF6
C1/D854:	C2 20      	REP #$20
C1/D856:	A5 22      	LDA $22
C1/D858:	9D CE 74   	STA $74CE,X
C1/D85B:	7B         	TDC
C1/D85C:	E2 20      	SEP #$20           ; 8-bit A
C1/D85E:	BD D8 74   	LDA $74D8,X
C1/D861:	38         	SEC
C1/D862:	E9 04      	SBC #$04
C1/D864:	9D D8 74   	STA $74D8,X
C1/D867:	60         	RTS

; Do angle math, store in $22-$23

C1/D868:	20 99 6B   	JSR $6B99          ; do some angle math (w/ $24)
C1/D86B:	30 05      	BMI $D872
C1/D86D:	85 22      	STA $22
C1/D86F:	64 23      	STZ $23
C1/D871:	60         	RTS
C1/D872:	85 22      	STA $22
C1/D874:	A9 FF      	LDA #$FF
C1/D876:	85 23      	STA $23
C1/D878:	60         	RTS

C1/D879:	A9 30      	LDA #$30
C1/D87B:	8D BD 61   	STA $61BD
C1/D87E:	8D DD 61   	STA $61DD
C1/D881:	8D FD 61   	STA $61FD
C1/D884:	8D 1D 62   	STA $621D
C1/D887:	A9 31      	LDA #$31
C1/D889:	8D DC 80   	STA $80DC
C1/D88C:	8D DE 80   	STA $80DE
C1/D88F:	8D E0 80   	STA $80E0
C1/D892:	8D E2 80   	STA $80E2
C1/D895:	8D E4 80   	STA $80E4
C1/D898:	8D E6 80   	STA $80E6
C1/D89B:	AE F6 7A   	LDX $7AF6
C1/D89E:	C2 20      	REP #$20
C1/D8A0:	BD 3C 6A   	LDA $6A3C,X
C1/D8A3:	18         	CLC
C1/D8A4:	7D D0 74   	ADC $74D0,X
C1/D8A7:	18         	CLC
C1/D8A8:	69 46 00   	ADC #$0046
C1/D8AB:	85 24      	STA $24
C1/D8AD:	7B         	TDC
C1/D8AE:	AA         	TAX
C1/D8AF:	A8         	TAY
C1/D8B0:	A5 24      	LDA $24
C1/D8B2:	D9 43 80   	CMP $8043,Y
C1/D8B5:	90 0A      	BCC $D8C1
C1/D8B7:	E2 20      	SEP #$20           ; 8-bit A
C1/D8B9:	A9 20      	LDA #$20
C1/D8BB:	9D BD 61   	STA $61BD,X
C1/D8BE:	7B         	TDC
C1/D8BF:	C2 20      	REP #$20
C1/D8C1:	8A         	TXA
C1/D8C2:	18         	CLC
C1/D8C3:	69 20 00   	ADC #$0020
C1/D8C6:	AA         	TAX
C1/D8C7:	C8         	INY
C1/D8C8:	C8         	INY
C1/D8C9:	C0 08 00   	CPY #$0008
C1/D8CC:	D0 E2      	BNE $D8B0
C1/D8CE:	7B         	TDC
C1/D8CF:	A8         	TAY
C1/D8D0:	A5 24      	LDA $24
C1/D8D2:	D9 27 80   	CMP $8027,Y
C1/D8D5:	90 09      	BCC $D8E0
C1/D8D7:	E2 20      	SEP #$20           ; 8-bit A
C1/D8D9:	A9 21      	LDA #$21
C1/D8DB:	99 DC 80   	STA $80DC,Y
C1/D8DE:	C2 20      	REP #$20
C1/D8E0:	C8         	INY
C1/D8E1:	C8         	INY
C1/D8E2:	C0 0C 00   	CPY #$000C
C1/D8E5:	D0 E9      	BNE $D8D0
C1/D8E7:	7B         	TDC
C1/D8E8:	E2 20      	SEP #$20           ; 8-bit A
C1/D8EA:	60         	RTS

C1/D8EB:	AE F6 7A   	LDX $7AF6
C1/D8EE:	20 09 FA   	JSR $FA09
C1/D8F1:	60         	RTS

C1/D8F2:	AE F6 7A   	LDX $7AF6
C1/D8F5:	C2 20      	REP #$20
C1/D8F7:	BD CE 74   	LDA $74CE,X
C1/D8FA:	8D 9E 5F   	STA $5F9E
C1/D8FD:	BD D0 74   	LDA $74D0,X
C1/D900:	8D 8E 5F   	STA $5F8E
C1/D903:	7B         	TDC
C1/D904:	E2 20      	SEP #$20           ; 8-bit A
C1/D906:	60         	RTS

; Curving animation, maybe for Tornado only
; Animation command $00, subcommand $06

C1/D907:	7B         	TDC               ; A = 0000
C1/D908:	AA         	TAX               ; X = 0000
C1/D909:	9E 6D 5F   	STZ $5F6D,X       ; zero tornado data [?]
C1/D90C:	E8         	INX               ; next byte
C1/D90D:	E0 40 00   	CPX #$0040        ; clear 64 bytes
C1/D910:	D0 F7      	BNE $D909         ; continue loop

C1/D912:	20 5B 18   	JSR $185B         ; random number
C1/D915:	7B         	TDC               ; A = 0000 (why?) [BUG]
C1/D916:	8D 6D 5F   	STA $5F6D         ; overwrite first tornado byte
C1/D919:	18         	CLC               ; clear carry
C1/D91A:	69 10      	ADC #$10          ; add 16 [?]
C1/D91C:	8D 7D 5F   	STA $5F7D         ; overwrite 16th tornado byte
C1/D91F:	A9 08      	LDA #$08
C1/D921:	85 24      	STA $24
C1/D923:	85 1A      	STA $1A
C1/D925:	A2 00 01   	LDX #$0100        ; transfer data length
C1/D928:	86 1C      	STX $1C           ; save for $0D8B below
C1/D92A:	A2 F5 44   	LDX #$44F5        ; transfer destination RAM offset
C1/D92D:	7B         	TDC               ; A = 0000
C1/D92E:	20 8B 0D   	JSR $0D8B         ; generate curve values [?]
C1/D931:	20 B4 E5   	JSR $E5B4         ; clear BG1 scroll HDMA table buffer
C1/D934:	AE F6 7A   	LDX $7AF6         ; restore animation thread offset
C1/D937:	60         	RTS

; Set thread's XY offset/coord based on attacker/target [?]
; Animation command $00, subcommand $05

C1/D938:	20 A1 E7   	JSR $E7A1         ; get attacker data offset in Y
C1/D93B:	C2 20      	REP #$20          ; 16-bit A
C1/D93D:	B9 C5 61   	LDA $61C5,Y       ; get attacker X offset
C1/D940:	9D CE 74   	STA $74CE,X       ; copy to thread's X offset
C1/D943:	B9 C7 61   	LDA $61C7,Y       ; get attacker Y offset
C1/D946:	9D D0 74   	STA $74D0,X       ; copy to thread's Y offset
C1/D949:	7B         	TDC               ; A = 0000
C1/D94A:	E2 20      	SEP #$20          ; 8-bit A
C1/D94C:	BD 38 6A   	LDA $6A38,X       ; thread attacker index
C1/D94F:	A8         	TAY               ; index it
C1/D950:	B9 10 7B   	LDA $7B10,Y       ; attacker is facing right
C1/D953:	F0 03      	BEQ $D958         ; branch if not ^
C1/D955:	7B         	TDC               ; A = $00
C1/D956:	80 02      	BRA $D95A         ; skip
C1/D958:	A9 80      	LDA #$80          ; A = $80

C1/D95A:	9D 3A 6A   	STA $6A3A,X       ; set thread X coord based on direction
C1/D95D:	A9 04      	LDA #$04          ; $0400 (face right) or $0480 (left)
C1/D95F:	9D 3B 6A   	STA $6A3B,X       ; set thread X coord high byte
C1/D962:	BD D2 74   	LDA $74D2,X       ; target's width
C1/D965:	0A         	ASL A
C1/D966:	0A         	ASL A             ; x4
C1/D967:	18         	CLC               ; clear carry
C1/D968:	69 08      	ADC #$08          ; add 8 [?]
C1/D96A:	9D 3C 6A   	STA $6A3C,X       ; thread Y position [?]
C1/D96D:	60         	RTS

; Randomize polar angle/radius or vector speed
; Animation command $00, subcommand $04

C1/D96E:	20 5B 18   	JSR $185B         ; random number
C1/D971:	AE F6 7A   	LDX $7AF6         ; animation thread offset
C1/D974:	9D D8 74   	STA $74D8,X       ; set random vector movement speed [?]
C1/D977:	20 5B 18   	JSR $185B         ; random number
C1/D97A:	AE F6 7A   	LDX $7AF6         ; animation thread offset (redundant)
C1/D97D:	9D D9 74   	STA $74D9,X       ; random polar radius [?]
C1/D980:	60         	RTS

; Copy attacker sprite flip and direction to buffer
; Animation command $00, subcommand $02

C1/D981:	20 A1 E7   	JSR $E7A1          ; get attacker data offset in Y
C1/D984:	B9 BE 61   	LDA $61BE,Y        ; attacker sprite flip flags
C1/D987:	8D B2 60   	STA $60B2          ; save in buffer
C1/D98A:	BD 38 6A   	LDA $6A38,X        ; thread attacker index
C1/D98D:	A8         	TAY                ; index it
C1/D98E:	B9 10 7B   	LDA $7B10,Y        ; attacker facing right
C1/D991:	8D B1 60   	STA $60B1          ; save in buffer
C1/D994:	60         	RTS

; Copy attacker sprite flip and direction from buffer
; Animation command $00, subcommand $03

C1/D995:	20 A1 E7   	JSR $E7A1          ; get attacker data offset in Y
C1/D998:	AD B2 60   	LDA $60B2          ; buffered attacker sprite flip
C1/D99B:	99 BE 61   	STA $61BE,Y        ; update in attacker graphics data
C1/D99E:	BD 38 6A   	LDA $6A38,X        ; thread attacker index
C1/D9A1:	A8         	TAY                ; index it
C1/D9A2:	AD B1 60   	LDA $60B1          ; buffered attacker facing direction
C1/D9A5:	99 10 7B   	STA $7B10,Y        ; update in character graphics data
C1/D9A8:	60         	RTS

; Zero attacker and thread offsets
; Animation command $00, subcommand $01

C1/D9A9:	20 A1 E7   	JSR $E7A1          ; get attacker data offset in Y
C1/D9AC:	C2 20      	REP #$20           ; 16-bit A
C1/D9AE:	7B         	TDC                ; A = 0000
C1/D9AF:	99 C5 61   	STA $61C5,Y        ; zero attacker X offset
C1/D9B2:	99 C7 61   	STA $61C7,Y        ; zero attacker Y offset
C1/D9B5:	9D CE 74   	STA $74CE,X        ; zero thread X offset
C1/D9B8:	9D D0 74   	STA $74D0,X        ; zero thread Y offset
C1/D9BB:	E2 20      	SEP #$20           ; 8-bit A
C1/D9BD:	60         	RTS

; Initialize thread target's position [?]
; Animation command $00, subcommand $00

C1/D9BE:	20 A1 E7   	JSR $E7A1          ; get attacker data offset in $7AF8 and Y
C1/D9C1:	C2 20      	REP #$20           ; 16-bit
C1/D9C3:	B9 B7 61   	LDA $61B7,Y        ; attacker's X position
C1/D9C6:	18         	CLC                ; clear carry
C1/D9C7:	79 D4 61   	ADC $61D4,Y        ; attacker's X offset
C1/D9CA:	9D 82 6F   	STA $6F82,X        ; set thread target's X position
C1/D9CD:	B9 B9 61   	LDA $61B9,Y        ; attacker's Y position
C1/D9D0:	9D 84 6F   	STA $6F84,X        ; set thread target's Y position
C1/D9D3:	7B         	TDC                ; A = 0000
C1/D9D4:	E2 20      	SEP #$20           ; 8-bit A
C1/D9D6:	60         	RTS

; Execute animation script byte command

C1/D9D7:	29 7F      	AND #$7F           ; mask top bit/flag
C1/D9D9:	0A         	ASL A              ; x2
C1/D9DA:	8E F6 7A   	STX $7AF6          ; store pointer to animation thread
C1/D9DD:	AA         	TAX                ; index script byte x2
C1/D9DE:	A4 5B      	LDY $5B            ; this byte's address
C1/D9E0:	C8         	INY                ; point to next byte
C1/D9E1:	84 5B      	STY $5B
C1/D9E3:	7C E6 D9   	JMP ($D9E6,X)      ; execute this byte's command [?]

; Animation script byte commands
; Script byte commands have bit 7 set
; initially, to indicate that they are
; commands [?]

C1/D9E6:	78C8    	; 00: ($C878) - Execute subcommand (X)
C1/D9E8:	47F3    	; 01: ($F347) - Update attacker sprite based on direction
C1/D9EA:	3FF3    	; 02: ($F33F) - Update target sprite based on direction
C1/D9EC:	77F3    	; 03: ($F377) - Execute direction-based subcommand (X)
C1/D9EE:	B3F7    	; 04:
C1/D9F0:	9DF8    	; 05:
C1/D9F2:	91F4    	; 06:
C1/D9F4:	76F4    	; 07:
C1/D9F6:	1DF7    	; 08:
C1/D9F8:	BCF7    	; 09: ($F7BC) - Mark beginning of loop (X iterations)
C1/D9FA:	2FF8    	; 0A: ($F82F) - End of loop block [loop to start]
C1/D9FC:	E6F7    	; 0B:
C1/D9FE:	4BF8    	; 0C:
C1/DA00:	63F2    	; 0D:
C1/DA02:	7AF2    	; 0E:
C1/DA04:	63F2    	; 0F:
C1/DA06:	55F2    	; 10:
C1/DA08:	B4F8    	; 11:
C1/DA0A:	DBFA    	; 12:
C1/DA0C:	3DFA    	; 13:
C1/DA0E:	E0F8    	; 14:
C1/DA10:	E6F9    	; 15:
C1/DA12:	63FB    	; 16:
C1/DA14:	D7FB    	; 17:
C1/DA16:	A8FB    	; 18:
C1/DA18:	37FC    	; 19:
C1/DA1A:	40FC    	; 1A: ($FC40) - Set "Is Facing Right" flag
C1/DA1C:	1AF3    	; 1B:
C1/DA1E:	A2F2    	; 1C:
C1/DA20:	F1F2    	; 1D:
C1/DA22:	B6F2    	; 1E:
C1/DA24:	CFF7    	; 1F:
C1/DA26:	4BFA    	; 20:
C1/DA28:	90FA    	; 21:
C1/DA2A:	E1F2    	; 22:
C1/DA2C:	E5F1    	; 23:
C1/DA2E:	1DF2    	; 24:
C1/DA30:	ECF0    	; 25:
C1/DA32:	94F0    	; 26:
C1/DA34:	88F0    	; 27:
C1/DA36:	73F0    	; 28:
C1/DA38:	C8EF    	; 29:
C1/DA3A:	6EEC    	; 2A:
C1/DA3C:	58EC    	; 2B:
C1/DA3E:	9CEE    	; 2C:
C1/DA40:	A3EF    	; 2D:
C1/DA42:	86ED    	; 2E:
C1/DA44:	DAEB    	; 2F:
C1/DA46:	C4EB    	; 30:
C1/DA48:	ACEC    	; 31:
C1/DA4A:	96EC    	; 32:
C1/DA4C:	4FEC    	; 33:
C1/DA4E:	46EC    	; 34:
C1/DA50:	B2EB    	; 35:
C1/DA52:	BBEB    	; 36:
C1/DA54:	84EC    	; 37:
C1/DA56:	8DEC    	; 38:
C1/DA58:	EAEC    	; 39:
C1/DA5A:	D4EC    	; 3A:
C1/DA5C:	CBEC    	; 3B:
C1/DA5E:	C2EC    	; 3C:
C1/DA60:	A1EA    	; 3D:
C1/DA62:	98EA    	; 3E:
C1/DA64:	85EA    	; 3F:
C1/DA66:	76EA    	; 40:
C1/DA68:	05EA    	; 41:
C1/DA6A:	EBE9    	; 42: ($E9EB) - Unpause X animation thread types
C1/DA6C:	2FF0    	; 43:
C1/DA6E:	9FE9    	; 44:
C1/DA70:	FBE8    	; 45: ($E8FB) - Branch to next animation "stage"
C1/DA72:	30E8    	; 46:
C1/DA74:	73C8    	; 47:
C1/DA76:	B1E7    	; 48:
C1/DA78:	E4DA    	; 49:
C1/DA7A:	98E7    	; 4A:
C1/DA7C:	79E7    	; 4B:
C1/DA7E:	24EC    	; 4C:
C1/DA80:	02EC    	; 4D:
C1/DA82:	F0EB    	; 4E:
C1/DA84:	F9EB    	; 4F:
C1/DA86:	46E7    	; 50:
C1/DA88:	3DE7    	; 51:
C1/DA8A:	6DF8    	; 52:
C1/DA8C:	44F0    	; 53:
C1/DA8E:	22E7    	; 54:
C1/DA90:	07E7    	; 55:
C1/DA92:	CDE6    	; 56:
C1/DA94:	8DE6    	; 57:
C1/DA96:	F9E5    	; 58:
C1/DA98:	F0E5    	; 59:
C1/DA9A:	28E5    	; 5A:
C1/DA9C:	09E5    	; 5B:
C1/DA9E:	3AE4    	; 5C:
C1/DAA0:	16E4    	; 5D:
C1/DAA2:	01E4    	; 5E:
C1/DAA4:	ECE3    	; 5F:
C1/DAA6:	A0E3    	; 60:
C1/DAA8:	28E3    	; 61:
C1/DAAA:	8DDD    	; 62:
C1/DAAC:	42DD    	; 63:
C1/DAAE:	86E2    	; 64:
C1/DAB0:	5DE1    	; 65:
C1/DAB2:	B3E1    	; 66:
C1/DAB4:	5AE2    	; 67:
C1/DAB6:	DFDC    	; 68:
C1/DAB8:	9BDC    	; 69:
C1/DABA:	81DC    	; 6A:
C1/DABC:	66DC    	; 6B:
C1/DABE:	55DC    	; 6C:
C1/DAC0:	8FDB    	; 6D:
C1/DAC2:	C5E5    	; 6E:
C1/DAC4:	D9DC    	; 6F:
C1/DAC6:	6CDB    	; 70:
C1/DAC8:	C0E2    	; 71:
C1/DACA:	80F9    	; 72:
C1/DACC:	64DB    	; 73:
C1/DACE:	0FF3    	; 74:
C1/DAD0:	FCF7    	; 75:
C1/DAD2:	A2E4    	; 76:
C1/DAD4:	50DB    	; 77:
C1/DAD6:	31DB    	; 78:
C1/DAD8:	F9DA    	; 79:
C1/DADA:	23DB    	; 7A:
C1/DADC:	4CED    	; 7B:
C1/DADE:	12ED    	; 7C:
C1/DAE0:	00ED    	; 7D:
C1/DAE2:	09ED    	; 7E:

C1/DAE4:	AE F6 7A   	LDX $7AF6
C1/DAE7:	BD 82 6F   	LDA $6F82,X
C1/DAEA:	85 10      	STA $10
C1/DAEC:	A7 5B      	LDA [$5B]
C1/DAEE:	F0 03      	BEQ $DAF3
C1/DAF0:	4C EF 17   	JMP $17EF

C1/DAF3:	AD E7 E9   	LDA $E9E7
C1/DAF6:	4C EF 17   	JMP $17EF

C1/DAF9:	AE F6 7A   	LDX $7AF6
C1/DAFC:	A0 02 00   	LDY #$0002
C1/DAFF:	B7 5B      	LDA [$5B],Y
C1/DB01:	30 11      	BMI $DB14
C1/DB03:	88         	DEY
C1/DB04:	B7 5B      	LDA [$5B],Y
C1/DB06:	F0 07      	BEQ $DB0F
C1/DB08:	BD 39 6A   	LDA $6A39,X
C1/DB0B:	30 0F      	BMI $DB1C
C1/DB0D:	80 05      	BRA $DB14
C1/DB0F:	BD 38 6A   	LDA $6A38,X
C1/DB12:	30 08      	BMI $DB1C

C1/DB14:	29 03      	AND #$03
C1/DB16:	A8         	TAY
C1/DB17:	A7 5B      	LDA [$5B]
C1/DB19:	99 CC 64   	STA $64CC,Y
C1/DB1C:	A4 5B      	LDY $5B
C1/DB1E:	C8         	INY
C1/DB1F:	C8         	INY
C1/DB20:	84 5B      	STY $5B
C1/DB22:	60         	RTS

C1/DB23:	AE F6 7A   	LDX $7AF6
C1/DB26:	C2 20      	REP #$20
C1/DB28:	A7 5B      	LDA [$5B]
C1/DB2A:	3A         	DEC A
C1/DB2B:	85 5B      	STA $5B
C1/DB2D:	7B         	TDC
C1/DB2E:	E2 20      	SEP #$20           ; 8-bit A
C1/DB30:	60         	RTS

C1/DB31:	AE F6 7A   	LDX $7AF6
C1/DB34:	AD BA 64   	LDA $64BA
C1/DB37:	F0 02      	BEQ $DB3B
C1/DB39:	A9 01      	LDA #$01
C1/DB3B:	C2 20      	REP #$20
C1/DB3D:	0A         	ASL A
C1/DB3E:	85 22      	STA $22
C1/DB40:	A5 5B      	LDA $5B
C1/DB42:	18         	CLC
C1/DB43:	65 22      	ADC $22
C1/DB45:	85 5B      	STA $5B
C1/DB47:	A7 5B      	LDA [$5B]
C1/DB49:	3A         	DEC A
C1/DB4A:	85 5B      	STA $5B
C1/DB4C:	7B         	TDC
C1/DB4D:	E2 20      	SEP #$20           ; 8-bit A
C1/DB4F:	60         	RTS

C1/DB50:	AF 3F 21 00	LDA $00213F
C1/DB54:	AF 37 21 00	LDA $002137
C1/DB58:	AF 3D 21 00	LDA $00213D
C1/DB5C:	C7 5B      	CMP [$5B]
C1/DB5E:	90 F0      	BCC $DB50
C1/DB60:	AE F6 7A   	LDX $7AF6
C1/DB63:	60         	RTS

C1/DB64:	AE F6 7A   	LDX $7AF6
C1/DB67:	BD 38 6A   	LDA $6A38,X
C1/DB6A:	80 06      	BRA $DB72
C1/DB6C:	AE F6 7A   	LDX $7AF6
C1/DB6F:	BD 39 6A   	LDA $6A39,X

C1/DB72:	30 04      	BMI $DB78
C1/DB74:	29 03      	AND #$03
C1/DB76:	80 02      	BRA $DB7A
C1/DB78:	A9 04      	LDA #$04
C1/DB7A:	C2 20      	REP #$20
C1/DB7C:	0A         	ASL A
C1/DB7D:	85 22      	STA $22
C1/DB7F:	A5 5B      	LDA $5B
C1/DB81:	18         	CLC
C1/DB82:	65 22      	ADC $22
C1/DB84:	85 5B      	STA $5B
C1/DB86:	A7 5B      	LDA [$5B]
C1/DB88:	3A         	DEC A
C1/DB89:	85 5B      	STA $5B
C1/DB8B:	7B         	TDC
C1/DB8C:	E2 20      	SEP #$20           ; 8-bit A
C1/DB8E:	60         	RTS

C1/DB8F:	AE F6 7A   	LDX $7AF6
C1/DB92:	C2 20      	REP #$20
C1/DB94:	BD 3A 6A   	LDA $6A3A,X
C1/DB97:	85 22      	STA $22
C1/DB99:	29 00 01   	AND #$0100
C1/DB9C:	F0 03      	BEQ $DBA1
C1/DB9E:	3A         	DEC A
C1/DB9F:	85 22      	STA $22
C1/DBA1:	BD 3C 6A   	LDA $6A3C,X
C1/DBA4:	85 24      	STA $24
C1/DBA6:	29 00 01   	AND #$0100
C1/DBA9:	F0 03      	BEQ $DBAE
C1/DBAB:	3A         	DEC A
C1/DBAC:	85 24      	STA $24
C1/DBAE:	7B         	TDC
C1/DBAF:	E2 20      	SEP #$20           ; 8-bit A
C1/DBB1:	A5 22      	LDA $22
C1/DBB3:	85 7D      	STA $7D
C1/DBB5:	A5 24      	LDA $24
C1/DBB7:	85 7E      	STA $7E
C1/DBB9:	BD 82 6F   	LDA $6F82,X
C1/DBBC:	85 7F      	STA $7F
C1/DBBE:	BD 84 6F   	LDA $6F84,X
C1/DBC1:	85 80      	STA $80
C1/DBC3:	20 91 6C   	JSR $6C91
C1/DBC6:	AE F6 7A   	LDX $7AF6
C1/DBC9:	A9 07      	LDA #$07
C1/DBCB:	85 24      	STA $24
C1/DBCD:	20 BA E7   	JSR $E7BA
C1/DBD0:	A5 85      	LDA $85
C1/DBD2:	38         	SEC
C1/DBD3:	FD DB 74   	SBC $74DB,X
C1/DBD6:	30 0B      	BMI $DBE3
C1/DBD8:	BD DB 74   	LDA $74DB,X
C1/DBDB:	18         	CLC
C1/DBDC:	65 22      	ADC $22
C1/DBDE:	9D DB 74   	STA $74DB,X
C1/DBE1:	80 09      	BRA $DBEC
C1/DBE3:	BD DB 74   	LDA $74DB,X
C1/DBE6:	38         	SEC
C1/DBE7:	E5 22      	SBC $22
C1/DBE9:	9D DB 74   	STA $74DB,X
C1/DBEC:	A7 5B      	LDA [$5B]
C1/DBEE:	18         	CLC
C1/DBEF:	69 04      	ADC #$04
C1/DBF1:	85 24      	STA $24
C1/DBF3:	AE F6 7A   	LDX $7AF6
C1/DBF6:	A5 86      	LDA $86
C1/DBF8:	C5 24      	CMP $24
C1/DBFA:	B0 06      	BCS $DC02
C1/DBFC:	A4 5B      	LDY $5B
C1/DBFE:	C8         	INY
C1/DBFF:	84 5B      	STY $5B
C1/DC01:	60         	RTS

C1/DC02:	A7 5B      	LDA [$5B]
C1/DC04:	A8         	TAY
C1/DC05:	84 24      	STY $24
C1/DC07:	BD DB 74   	LDA $74DB,X
C1/DC0A:	18         	CLC
C1/DC0B:	69 40      	ADC #$40
C1/DC0D:	20 67 6C   	JSR $6C67
C1/DC10:	AE F6 7A   	LDX $7AF6
C1/DC13:	C2 20      	REP #$20
C1/DC15:	BD 3A 6A   	LDA $6A3A,X
C1/DC18:	18         	CLC
C1/DC19:	65 28      	ADC $28
C1/DC1B:	9D 3A 6A   	STA $6A3A,X
C1/DC1E:	7B         	TDC
C1/DC1F:	E2 20      	SEP #$20           ; 8-bit A
C1/DC21:	AE F6 7A   	LDX $7AF6
C1/DC24:	A7 5B      	LDA [$5B]
C1/DC26:	A8         	TAY
C1/DC27:	84 24      	STY $24
C1/DC29:	BD DB 74   	LDA $74DB,X
C1/DC2C:	20 67 6C   	JSR $6C67
C1/DC2F:	AE F6 7A   	LDX $7AF6
C1/DC32:	C2 20      	REP #$20
C1/DC34:	BD 3C 6A   	LDA $6A3C,X
C1/DC37:	18         	CLC
C1/DC38:	65 28      	ADC $28
C1/DC3A:	9D 3C 6A   	STA $6A3C,X
C1/DC3D:	A0 01 00   	LDY #$0001
C1/DC40:	B7 5B      	LDA [$5B],Y
C1/DC42:	29 FF 00   	AND #$00FF
C1/DC45:	85 22      	STA $22
C1/DC47:	A5 5B      	LDA $5B
C1/DC49:	38         	SEC
C1/DC4A:	E5 22      	SBC $22
C1/DC4C:	85 5B      	STA $5B
C1/DC4E:	7B         	TDC
C1/DC4F:	E2 20      	SEP #$20           ; 8-bit A
C1/DC51:	AE F6 7A   	LDX $7AF6
C1/DC54:	60         	RTS

C1/DC55:	AE F6 7A   	LDX $7AF6
C1/DC58:	BD 86 6F   	LDA $6F86,X
C1/DC5B:	29 FC      	AND #$FC
C1/DC5D:	07 5B      	ORA [$5B]
C1/DC5F:	9D 86 6F   	STA $6F86,X
C1/DC62:	9E 8C 6F   	STZ $6F8C,X
C1/DC65:	60         	RTS

C1/DC66:	AE F6 7A   	LDX $7AF6
C1/DC69:	BD 36 6A   	LDA $6A36,X
C1/DC6C:	C2 20      	REP #$20
C1/DC6E:	0A         	ASL A
C1/DC6F:	85 22      	STA $22
C1/DC71:	A5 5B      	LDA $5B
C1/DC73:	18         	CLC
C1/DC74:	65 22      	ADC $22
C1/DC76:	85 5B      	STA $5B
C1/DC78:	A7 5B      	LDA [$5B]
C1/DC7A:	3A         	DEC A
C1/DC7B:	85 5B      	STA $5B
C1/DC7D:	7B         	TDC
C1/DC7E:	E2 20      	SEP #$20           ; 8-bit A
C1/DC80:	60         	RTS

C1/DC81:	A7 5B      	LDA [$5B]
C1/DC83:	10 05      	BPL $DC8A
C1/DC85:	29 0F      	AND #$0F
C1/DC87:	8D C8 62   	STA $62C8
C1/DC8A:	A7 5B      	LDA [$5B]
C1/DC8C:	29 40      	AND #$40
C1/DC8E:	F0 07      	BEQ $DC97
C1/DC90:	A7 5B      	LDA [$5B]
C1/DC92:	29 0F      	AND #$0F
C1/DC94:	8D C9 62   	STA $62C9
C1/DC97:	AE F6 7A   	LDX $7AF6
C1/DC9A:	60         	RTS

C1/DC9B:	20 5B 18   	JSR $185B     ; random number
C1/DC9E:	85 10      	STA $10
C1/DCA0:	20 5B 18   	JSR $185B     ; random number
C1/DCA3:	85 12      	STA $12
C1/DCA5:	AE F6 7A   	LDX $7AF6
C1/DCA8:	A5 10      	LDA $10
C1/DCAA:	27 5B      	AND [$5B]
C1/DCAC:	9D CE 74   	STA $74CE,X
C1/DCAF:	9E CF 74   	STZ $74CF,X
C1/DCB2:	BD 87 6F   	LDA $6F87,X
C1/DCB5:	F0 0F      	BEQ $DCC6
C1/DCB7:	C2 20      	REP #$20
C1/DCB9:	BD CE 74   	LDA $74CE,X
C1/DCBC:	49 FF FF   	EOR #$FFFF
C1/DCBF:	1A         	INC A
C1/DCC0:	9D CE 74   	STA $74CE,X
C1/DCC3:	7B         	TDC
C1/DCC4:	E2 20      	SEP #$20           ; 8-bit A
C1/DCC6:	A0 01 00   	LDY #$0001
C1/DCC9:	A5 12      	LDA $12
C1/DCCB:	37 5B      	AND [$5B],Y
C1/DCCD:	9D D0 74   	STA $74D0,X
C1/DCD0:	9E D1 74   	STZ $74D1,X
C1/DCD3:	A4 5B      	LDY $5B
C1/DCD5:	C8         	INY
C1/DCD6:	84 5B      	STY $5B
C1/DCD8:	60         	RTS

C1/DCD9:	A9 01      	LDA #$01
C1/DCDB:	85 1A      	STA $1A
C1/DCDD:	80 02      	BRA $DCE1
C1/DCDF:	64 1A      	STZ $1A
C1/DCE1:	AE F6 7A   	LDX $7AF6
C1/DCE4:	BD D9 74   	LDA $74D9,X
C1/DCE7:	85 24      	STA $24
C1/DCE9:	BD D8 74   	LDA $74D8,X
C1/DCEC:	20 68 D8   	JSR $D868
C1/DCEF:	AE F6 7A   	LDX $7AF6
C1/DCF2:	C2 20      	REP #$20
C1/DCF4:	BD 87 6F   	LDA $6F87,X
C1/DCF7:	29 FF 00   	AND #$00FF
C1/DCFA:	F0 07      	BEQ $DD03
C1/DCFC:	A5 22      	LDA $22
C1/DCFE:	49 FF FF   	EOR #$FFFF
C1/DD01:	85 22      	STA $22
C1/DD03:	A5 22      	LDA $22
C1/DD05:	9D CE 74   	STA $74CE,X
C1/DD08:	7B         	TDC
C1/DD09:	E2 20      	SEP #$20           ; 8-bit A
C1/DD0B:	A5 1A      	LDA $1A
C1/DD0D:	F0 02      	BEQ $DD11
C1/DD0F:	46 24      	LSR $24
C1/DD11:	BD D8 74   	LDA $74D8,X
C1/DD14:	18         	CLC
C1/DD15:	69 40      	ADC #$40
C1/DD17:	20 68 D8   	JSR $D868
C1/DD1A:	AE F6 7A   	LDX $7AF6
C1/DD1D:	C2 20      	REP #$20
C1/DD1F:	A5 22      	LDA $22
C1/DD21:	9D D0 74   	STA $74D0,X
C1/DD24:	7B         	TDC
C1/DD25:	E2 20      	SEP #$20           ; 8-bit A
C1/DD27:	BD D9 74   	LDA $74D9,X
C1/DD2A:	18         	CLC
C1/DD2B:	67 5B      	ADC [$5B]
C1/DD2D:	9D D9 74   	STA $74D9,X
C1/DD30:	A0 01 00   	LDY #$0001
C1/DD33:	BD D8 74   	LDA $74D8,X
C1/DD36:	18         	CLC
C1/DD37:	77 5B      	ADC [$5B],Y
C1/DD39:	9D D8 74   	STA $74D8,X
C1/DD3C:	A4 5B      	LDY $5B
C1/DD3E:	C8         	INY
C1/DD3F:	84 5B      	STY $5B
C1/DD41:	60         	RTS

C1/DD42:	7B          TDC
C1/DD43:	1A          INC A
C1/DD44:	20 D9 DD    JSR $DDD9
C1/DD47:	AE F6 7A    LDX $7AF6
C1/DD4A:	A7 5B       LDA [$5B]
C1/DD4C:	85 26       STA $26
C1/DD4E:	64 27       STZ $27
C1/DD50:	C2 20       REP #$20
C1/DD52:	BD D7 74    LDA $74D7,X
C1/DD55:	38          SEC
C1/DD56:	E5 26       SBC $26
C1/DD58:	9D D7 74    STA $74D7,X
C1/DD5B:	10 10       BPL $DD6D
C1/DD5D:	BD E8 64    LDA $64E8,X
C1/DD60:	99 C3 80    STA $80C3,Y
C1/DD63:	BD EA 64    LDA $64EA,X
C1/DD66:	99 CF 80    STA $80CF,Y
C1/DD69:	E6 5B       INC $5B
C1/DD6B:	80 19       BRA $DD86
C1/DD6D:	A5 14       LDA $14
C1/DD6F:	18          CLC
C1/DD70:	65 28       ADC $28
C1/DD72:	99 CF 80    STA $80CF,Y
C1/DD75:	A0 01 00    LDY #$0001
C1/DD78:	B7 5B       LDA [$5B],Y
C1/DD7A:	29 FF 00    AND #$00FF
C1/DD7D:	85 22       STA $22
C1/DD7F:	A5 5B       LDA $5B
C1/DD81:	38          SEC
C1/DD82:	E5 22       SBC $22
C1/DD84:	85 5B       STA $5B
C1/DD86:	7B          TDC
C1/DD87:	E2 20       SEP #$20           ; 8-bit A
C1/DD89:	AE F6 7A    LDX $7AF6
C1/DD8C:	60          RTS

C1/DD8D:	7B          TDC
C1/DD8E:	20 D9 DD    JSR $DDD9
C1/DD91:	AE F6 7A    LDX $7AF6
C1/DD94:	A7 5B       LDA [$5B]
C1/DD96:	85 26       STA $26
C1/DD98:	64 27       STZ $27
C1/DD9A:	C2 20       REP #$20
C1/DD9C:	BD D7 74    LDA $74D7,X
C1/DD9F:	38          SEC
C1/DDA0:	E5 26       SBC $26
C1/DDA2:	9D D7 74    STA $74D7,X
C1/DDA5:	10 12       BPL $DDB9
C1/DDA7:	A5 14       LDA $14
C1/DDA9:	99 CF 80    STA $80CF,Y
C1/DDAC:	BD D9 74    LDA $74D9,X
C1/DDAF:	29 FF 00    AND #$00FF
C1/DDB2:	9D D7 74    STA $74D7,X
C1/DDB5:	E6 5B       INC $5B
C1/DDB7:	80 19       BRA $DDD2
C1/DDB9:	A5 14       LDA $14
C1/DDBB:	18          CLC
C1/DDBC:	65 28       ADC $28
C1/DDBE:	99 CF 80    STA $80CF,Y
C1/DDC1:	A0 01 00    LDY #$0001
C1/DDC4:	B7 5B       LDA [$5B],Y
C1/DDC6:	29 FF 00    AND #$00FF
C1/DDC9:	85 22       STA $22
C1/DDCB:	A5 5B       LDA $5B
C1/DDCD:	38          SEC
C1/DDCE:	E5 22       SBC $22
C1/DDD0:	85 5B       STA $5B
C1/DDD2:	7B          TDC
C1/DDD3:	E2 20       SEP #$20           ; 8-bit A
C1/DDD5:	AE F6 7A    LDX $7AF6
C1/DDD8:	60          RTS

C1/DDD9:	48          PHA
C1/DDDA:	AE F6 7A    LDX $7AF6
C1/DDDD:	BD 38 6A    LDA $6A38,X
C1/DDE0:	29 7F       AND #$7F
C1/DDE2:	38          SEC
C1/DDE3:	E9 04       SBC #$04
C1/DDE5:	0A          ASL A
C1/DDE6:	A8          TAY
C1/DDE7:	8C F8 7A    STY $7AF8
C1/DDEA:	A7 5B       LDA [$5B]
C1/DDEC:	C2 20       REP #$20
C1/DDEE:	85 26       STA $26
C1/DDF0:	B9 AB 80    LDA $80AB,Y
C1/DDF3:	85 10       STA $10
C1/DDF5:	B9 B7 80    LDA $80B7,Y
C1/DDF8:	85 12       STA $12
C1/DDFA:	7B          TDC
C1/DDFB:	E2 20       SEP #$20           ; 8-bit A
C1/DDFD:	68          PLA
C1/DDFE:	F0 05       BEQ $DE05
C1/DE00:	20 FE DE    JSR $DEFE
C1/DE03:	80 03       BRA $DE08
C1/DE05:	20 A0 DF    JSR $DFA0
C1/DE08:	AE F6 7A    LDX $7AF6
C1/DE0B:	A9 FF       LDA #$FF
C1/DE0D:	8F 04 42 00 STA $004204
C1/DE11:	8F 05 42 00 STA $004205
C1/DE15:	BD D9 74    LDA $74D9,X
C1/DE18:	8F 06 42 00 STA $004206
C1/DE1C:	AC F8 7A    LDY $7AF8
C1/DE1F:	C2 20       REP #$20
C1/DE21:	A5 10       LDA $10
C1/DE23:	99 AB 80    STA $80AB,Y
C1/DE26:	18          CLC
C1/DE27:	7D E8 64    ADC $64E8,X
C1/DE2A:	99 C3 80    STA $80C3,Y
C1/DE2D:	A5 12       LDA $12
C1/DE2F:	99 B7 80    STA $80B7,Y
C1/DE32:	18          CLC
C1/DE33:	7D EA 64    ADC $64EA,X
C1/DE36:	48          PHA
C1/DE37:	99 CF 80    STA $80CF,Y
C1/DE3A:	BD D7 74    LDA $74D7,X
C1/DE3D:	29 FF 00    AND #$00FF
C1/DE40:	85 22       STA $22
C1/DE42:	AF 14 42 00 LDA $004214
C1/DE46:	85 24       STA $24
C1/DE48:	20 F4 18    JSR $18F4
C1/DE4B:	7B          TDC
C1/DE4C:	E2 20       SEP #$20           ; 8-bit A
C1/DE4E:	A2 20 00    LDX #$0020
C1/DE51:	86 24       STX $24
C1/DE53:	A5 27       LDA $27
C1/DE55:	4A          LSR A
C1/DE56:	18          CLC
C1/DE57:	69 80       ADC #$80
C1/DE59:	20 67 6C    JSR $6C67
C1/DE5C:	FA          PLX
C1/DE5D:	86 14       STX $14
C1/DE5F:	AC F8 7A    LDY $7AF8
C1/DE62:	AE F6 7A    LDX $7AF6
C1/DE65:	60          RTS

C1/DE66:	AE F6 7A    LDX $7AF6
C1/DE69:	BD 38 6A    LDA $6A38,X
C1/DE6C:	29 7F       AND #$7F
C1/DE6E:	38          SEC
C1/DE6F:	E9 04       SBC #$04
C1/DE71:	0A          ASL A
C1/DE72:	A8          TAY
C1/DE73:	8C F8 7A    STY $7AF8
C1/DE76:	BD D9 74    LDA $74D9,X
C1/DE79:	85 24       STA $24
C1/DE7B:	BD DA 74    LDA $74DA,X
C1/DE7E:	85 25       STA $25
C1/DE80:	BD DB 74    LDA $74DB,X
C1/DE83:	18          CLC
C1/DE84:	69 40       ADC #$40
C1/DE86:	20 67 6C    JSR $6C67
C1/DE89:	AE F6 7A    LDX $7AF6
C1/DE8C:	AC F8 7A    LDY $7AF8
C1/DE8F:	C2 20       REP #$20
C1/DE91:	A5 28       LDA $28
C1/DE93:	18          CLC
C1/DE94:	7D E8 64    ADC $64E8,X
C1/DE97:	99 C3 80    STA $80C3,Y
C1/DE9A:	7B          TDC
C1/DE9B:	E2 20       SEP #$20           ; 8-bit A
C1/DE9D:	BD DB 74    LDA $74DB,X
C1/DEA0:	20 67 6C    JSR $6C67
C1/DEA3:	AE F6 7A    LDX $7AF6
C1/DEA6:	A9 FF       LDA #$FF
C1/DEA8:	8F 04 42 00 STA $004204
C1/DEAC:	8F 05 42 00 STA $004205
C1/DEB0:	BD DD 74    LDA $74DD,X
C1/DEB3:	F0 04       BEQ $DEB9
C1/DEB5:	A9 FF       LDA #$FF
C1/DEB7:	80 03       BRA $DEBC
C1/DEB9:	BD DC 74    LDA $74DC,X
C1/DEBC:	8F 06 42 00 STA $004206
C1/DEC0:	AC F8 7A    LDY $7AF8
C1/DEC3:	BD D9 74    LDA $74D9,X
C1/DEC6:	C2 20       REP #$20
C1/DEC8:	85 22       STA $22
C1/DECA:	A5 28       LDA $28
C1/DECC:	48          PHA
C1/DECD:	AF 14 42 00 LDA $004214
C1/DED1:	85 24       STA $24
C1/DED3:	20 F4 18    JSR $18F4
C1/DED6:	7B          TDC
C1/DED7:	E2 20       SEP #$20           ; 8-bit A
C1/DED9:	A2 20 00    LDX #$0020
C1/DEDC:	86 24       STX $24
C1/DEDE:	A5 27       LDA $27
C1/DEE0:	4A          LSR A
C1/DEE1:	18          CLC
C1/DEE2:	69 80       ADC #$80
C1/DEE4:	20 67 6C    JSR $6C67
C1/DEE7:	AC F8 7A    LDY $7AF8
C1/DEEA:	AE F6 7A    LDX $7AF6
C1/DEED:	C2 20       REP #$20
C1/DEEF:	68          PLA
C1/DEF0:	18          CLC
C1/DEF1:	65 28       ADC $28
C1/DEF3:	18          CLC
C1/DEF4:	7D EA 64    ADC $64EA,X
C1/DEF7:	99 CF 80    STA $80CF,Y
C1/DEFA:	7B          TDC
C1/DEFB:	E2 20       SEP #$20           ; 8-bit A
C1/DEFD:	60          RTS

C1/DEFE:	BD DC 74   	LDA $74DC,X
C1/DF01:	85 22      	STA $22
C1/DF03:	BD DD 74   	LDA $74DD,X
C1/DF06:	85 24      	STA $24
C1/DF08:	64 23      	STZ $23
C1/DF0A:	64 25      	STZ $25
C1/DF0C:	64 29      	STZ $29
C1/DF0E:	A5 22      	LDA $22
C1/DF10:	C5 24      	CMP $24
C1/DF12:	90 46      	BCC $DF5A
C1/DF14:	A4 12      	LDY $12
C1/DF16:	BD DA 74   	LDA $74DA,X
C1/DF19:	30 0E      	BMI $DF29
C1/DF1B:	C2 20      	REP #$20
C1/DF1D:	A5 10      	LDA $10
C1/DF1F:	38         	SEC
C1/DF20:	E5 26      	SBC $26
C1/DF22:	85 10      	STA $10
C1/DF24:	7B         	TDC
C1/DF25:	E2 20      	SEP #$20           ; 8-bit A
C1/DF27:	80 0C      	BRA $DF35
C1/DF29:	C2 20      	REP #$20
C1/DF2B:	A5 10      	LDA $10
C1/DF2D:	18         	CLC
C1/DF2E:	65 26      	ADC $26
C1/DF30:	85 10      	STA $10
C1/DF32:	7B         	TDC
C1/DF33:	E2 20      	SEP #$20           ; 8-bit A
C1/DF35:	BD DB 74   	LDA $74DB,X
C1/DF38:	30 10      	BMI $DF4A
C1/DF3A:	BD D6 74   	LDA $74D6,X
C1/DF3D:	85 28      	STA $28
C1/DF3F:	20 7C E0   	JSR $E07C
C1/DF42:	A5 28      	LDA $28
C1/DF44:	9D D6 74   	STA $74D6,X
C1/DF47:	84 12      	STY $12
C1/DF49:	60         	RTS

C1/DF4A:	BD D6 74   	LDA $74D6,X
C1/DF4D:	85 28      	STA $28
C1/DF4F:	20 99 E0   	JSR $E099
C1/DF52:	A5 28      	LDA $28
C1/DF54:	9D D6 74   	STA $74D6,X
C1/DF57:	84 12      	STY $12
C1/DF59:	60         	RTS

C1/DF5A:	A4 10      	LDY $10
C1/DF5C:	BD DB 74   	LDA $74DB,X
C1/DF5F:	30 0E      	BMI $DF6F
C1/DF61:	C2 20      	REP #$20
C1/DF63:	A5 12      	LDA $12
C1/DF65:	38         	SEC
C1/DF66:	E5 26      	SBC $26
C1/DF68:	85 12      	STA $12
C1/DF6A:	7B         	TDC
C1/DF6B:	E2 20      	SEP #$20           ; 8-bit A
C1/DF6D:	80 0C      	BRA $DF7B
C1/DF6F:	C2 20      	REP #$20
C1/DF71:	A5 12      	LDA $12
C1/DF73:	18         	CLC
C1/DF74:	65 26      	ADC $26
C1/DF76:	85 12      	STA $12
C1/DF78:	7B         	TDC
C1/DF79:	E2 20      	SEP #$20           ; 8-bit A
C1/DF7B:	BD DA 74   	LDA $74DA,X
C1/DF7E:	30 10      	BMI $DF90
C1/DF80:	BD D6 74   	LDA $74D6,X
C1/DF83:	85 28      	STA $28
C1/DF85:	20 42 E0   	JSR $E042
C1/DF88:	A5 28      	LDA $28
C1/DF8A:	9D D6 74   	STA $74D6,X
C1/DF8D:	84 10      	STY $10
C1/DF8F:	60         	RTS

C1/DF90:	BD D6 74   	LDA $74D6,X
C1/DF93:	85 28      	STA $28
C1/DF95:	20 5F E0   	JSR $E05F
C1/DF98:	A5 28      	LDA $28
C1/DF9A:	9D D6 74   	STA $74D6,X
C1/DF9D:	84 10      	STY $10
C1/DF9F:	60         	RTS

C1/DFA0:	BD DC 74   	LDA $74DC,X
C1/DFA3:	85 22      	STA $22
C1/DFA5:	BD DD 74   	LDA $74DD,X
C1/DFA8:	85 24      	STA $24
C1/DFAA:	64 23      	STZ $23
C1/DFAC:	64 25      	STZ $25
C1/DFAE:	64 29      	STZ $29
C1/DFB0:	A5 22      	LDA $22
C1/DFB2:	C5 24      	CMP $24
C1/DFB4:	90 46      	BCC $DFFC
C1/DFB6:	A4 12      	LDY $12
C1/DFB8:	BD DA 74   	LDA $74DA,X
C1/DFBB:	30 0E      	BMI $DFCB
C1/DFBD:	C2 20      	REP #$20
C1/DFBF:	A5 10      	LDA $10
C1/DFC1:	18         	CLC
C1/DFC2:	65 26      	ADC $26
C1/DFC4:	85 10      	STA $10
C1/DFC6:	7B         	TDC
C1/DFC7:	E2 20      	SEP #$20           ; 8-bit A
C1/DFC9:	80 0C      	BRA $DFD7
C1/DFCB:	C2 20      	REP #$20
C1/DFCD:	A5 10      	LDA $10
C1/DFCF:	38         	SEC
C1/DFD0:	E5 26      	SBC $26
C1/DFD2:	85 10      	STA $10
C1/DFD4:	7B         	TDC
C1/DFD5:	E2 20      	SEP #$20           ; 8-bit A
C1/DFD7:	BD DB 74   	LDA $74DB,X
C1/DFDA:	30 10      	BMI $DFEC
C1/DFDC:	BD D6 74   	LDA $74D6,X
C1/DFDF:	85 28      	STA $28
C1/DFE1:	20 99 E0   	JSR $E099
C1/DFE4:	A5 28      	LDA $28
C1/DFE6:	9D D6 74   	STA $74D6,X
C1/DFE9:	84 12      	STY $12
C1/DFEB:	60         	RTS

C1/DFEC:	BD D6 74   	LDA $74D6,X
C1/DFEF:	85 28      	STA $28
C1/DFF1:	20 7C E0   	JSR $E07C
C1/DFF4:	A5 28      	LDA $28
C1/DFF6:	9D D6 74   	STA $74D6,X
C1/DFF9:	84 12      	STY $12
C1/DFFB:	60         	RTS

C1/DFFC:	A4 10      	LDY $10
C1/DFFE:	BD DB 74   	LDA $74DB,X
C1/E001:	30 0E      	BMI $E011
C1/E003:	C2 20      	REP #$20
C1/E005:	A5 12      	LDA $12
C1/E007:	18         	CLC
C1/E008:	65 26      	ADC $26
C1/E00A:	85 12      	STA $12
C1/E00C:	7B         	TDC
C1/E00D:	E2 20      	SEP #$20           ; 8-bit A
C1/E00F:	80 0C      	BRA $E01D
C1/E011:	C2 20      	REP #$20
C1/E013:	A5 12      	LDA $12
C1/E015:	38         	SEC
C1/E016:	E5 26      	SBC $26
C1/E018:	85 12      	STA $12
C1/E01A:	7B         	TDC
C1/E01B:	E2 20      	SEP #$20           ; 8-bit A
C1/E01D:	BD DA 74   	LDA $74DA,X
C1/E020:	30 10      	BMI $E032
C1/E022:	BD D6 74   	LDA $74D6,X
C1/E025:	85 28      	STA $28
C1/E027:	20 5F E0   	JSR $E05F
C1/E02A:	A5 28      	LDA $28
C1/E02C:	9D D6 74   	STA $74D6,X
C1/E02F:	84 10      	STY $10
C1/E031:	60         	RTS

C1/E032:	BD D6 74   	LDA $74D6,X
C1/E035:	85 28      	STA $28
C1/E037:	20 42 E0   	JSR $E042
C1/E03A:	A5 28      	LDA $28
C1/E03C:	9D D6 74   	STA $74D6,X
C1/E03F:	84 10      	STY $10
C1/E041:	60         	RTS

C1/E042:	A5 22      	LDA $22
C1/E044:	F0 18      	BEQ $E05E
C1/E046:	C2 20      	REP #$20
C1/E048:	A5 28      	LDA $28
C1/E04A:	18         	CLC
C1/E04B:	65 22      	ADC $22
C1/E04D:	C5 24      	CMP $24
C1/E04F:	90 04      	BCC $E055
C1/E051:	38         	SEC
C1/E052:	E5 24      	SBC $24
C1/E054:	88         	DEY
C1/E055:	85 28      	STA $28
C1/E057:	C6 26      	DEC $26
C1/E059:	D0 ED      	BNE $E048
C1/E05B:	7B         	TDC
C1/E05C:	E2 20      	SEP #$20           ; 8-bit A
C1/E05E:	60         	RTS

C1/E05F:	A5 22      	LDA $22
C1/E061:	F0 18      	BEQ $E07B
C1/E063:	C2 20      	REP #$20
C1/E065:	A5 28      	LDA $28
C1/E067:	18         	CLC
C1/E068:	65 22      	ADC $22
C1/E06A:	C5 24      	CMP $24
C1/E06C:	90 04      	BCC $E072
C1/E06E:	38         	SEC
C1/E06F:	E5 24      	SBC $24
C1/E071:	C8         	INY
C1/E072:	85 28      	STA $28
C1/E074:	C6 26      	DEC $26
C1/E076:	D0 ED      	BNE $E065
C1/E078:	7B         	TDC
C1/E079:	E2 20      	SEP #$20           ; 8-bit A
C1/E07B:	60         	RTS

C1/E07C:	A5 24      	LDA $24
C1/E07E:	F0 18      	BEQ $E098
C1/E080:	C2 20      	REP #$20
C1/E082:	A5 28      	LDA $28
C1/E084:	18         	CLC
C1/E085:	65 24      	ADC $24
C1/E087:	C5 22      	CMP $22
C1/E089:	90 04      	BCC $E08F
C1/E08B:	38         	SEC
C1/E08C:	E5 22      	SBC $22
C1/E08E:	88         	DEY
C1/E08F:	85 28      	STA $28
C1/E091:	C6 26      	DEC $26
C1/E093:	D0 ED      	BNE $E082
C1/E095:	7B         	TDC
C1/E096:	E2 20      	SEP #$20           ; 8-bit A
C1/E098:	60         	RTS

C1/E099:	A5 24      	LDA $24
C1/E09B:	F0 18      	BEQ $E0B5
C1/E09D:	C2 20      	REP #$20
C1/E09F:	A5 28      	LDA $28
C1/E0A1:	18         	CLC
C1/E0A2:	65 24      	ADC $24
C1/E0A4:	C5 22      	CMP $22
C1/E0A6:	90 04      	BCC $E0AC
C1/E0A8:	38         	SEC
C1/E0A9:	E5 22      	SBC $22
C1/E0AB:	C8         	INY
C1/E0AC:	85 28      	STA $28
C1/E0AE:	C6 26      	DEC $26
C1/E0B0:	D0 ED      	BNE $E09F
C1/E0B2:	7B         	TDC
C1/E0B3:	E2 20      	SEP #$20           ; 8-bit A
C1/E0B5:	60         	RTS

C1/E0B6:	48         	PHA
C1/E0B7:	20 A1 E7   	JSR $E7A1          ; get attacker data offset in Y
C1/E0BA:	A7 5B      	LDA [$5B]
C1/E0BC:	C2 20      	REP #$20
C1/E0BE:	85 26      	STA $26
C1/E0C0:	B9 C5 61   	LDA $61C5,Y
C1/E0C3:	85 10      	STA $10
C1/E0C5:	B9 C7 61   	LDA $61C7,Y
C1/E0C8:	85 12      	STA $12
C1/E0CA:	7B         	TDC
C1/E0CB:	E2 20      	SEP #$20           ; 8-bit A
C1/E0CD:	68         	PLA
C1/E0CE:	F0 05      	BEQ $E0D5
C1/E0D0:	20 FE DE   	JSR $DEFE
C1/E0D3:	80 03      	BRA $E0D8

C1/E0D5:	20 A0 DF   	JSR $DFA0
C1/E0D8:	AE F6 7A   	LDX $7AF6
C1/E0DB:	A9 FF      	LDA #$FF
C1/E0DD:	8F 04 42 00	STA $004204
C1/E0E1:	8F 05 42 00	STA $004205
C1/E0E5:	BD D9 74   	LDA $74D9,X
C1/E0E8:	8F 06 42 00	STA $004206
C1/E0EC:	AC F8 7A   	LDY $7AF8
C1/E0EF:	C2 20      	REP #$20
C1/E0F1:	AD FA EB   	LDA $EBFA
C1/E0F4:	29 FF 00   	AND #$00FF
C1/E0F7:	F0 0C      	BEQ $E105
C1/E0F9:	A5 10      	LDA $10
C1/E0FB:	99 C5 61   	STA $61C5,Y
C1/E0FE:	A5 12      	LDA $12
C1/E100:	99 C7 61   	STA $61C7,Y
C1/E103:	80 10      	BRA $E115
C1/E105:	A5 10      	LDA $10
C1/E107:	99 C5 61   	STA $61C5,Y
C1/E10A:	9D CE 74   	STA $74CE,X
C1/E10D:	A5 12      	LDA $12
C1/E10F:	99 C7 61   	STA $61C7,Y
C1/E112:	9D D0 74   	STA $74D0,X
C1/E115:	BD D7 74   	LDA $74D7,X
C1/E118:	29 FF 00   	AND #$00FF
C1/E11B:	85 22      	STA $22
C1/E11D:	AF 14 42 00	LDA $004214
C1/E121:	85 24      	STA $24
C1/E123:	20 F4 18   	JSR $18F4
C1/E126:	7B         	TDC
C1/E127:	E2 20      	SEP #$20           ; 8-bit A
C1/E129:	A0 02 00   	LDY #$0002
C1/E12C:	B7 5B      	LDA [$5B],Y
C1/E12E:	85 24      	STA $24
C1/E130:	64 25      	STZ $25
C1/E132:	A5 27      	LDA $27
C1/E134:	4A         	LSR A
C1/E135:	18         	CLC
C1/E136:	69 80      	ADC #$80
C1/E138:	20 67 6C   	JSR $6C67
C1/E13B:	AC F8 7A   	LDY $7AF8
C1/E13E:	AE F6 7A   	LDX $7AF6
C1/E141:	C2 20      	REP #$20
C1/E143:	AD FA EB   	LDA $EBFA
C1/E146:	29 FF 00   	AND #$00FF
C1/E149:	D0 09      	BNE $E154
C1/E14B:	BD D0 74   	LDA $74D0,X
C1/E14E:	18         	CLC
C1/E14F:	65 28      	ADC $28
C1/E151:	9D D0 74   	STA $74D0,X
C1/E154:	A5 28      	LDA $28
C1/E156:	99 D2 61   	STA $61D2,Y
C1/E159:	7B         	TDC
C1/E15A:	E2 20      	SEP #$20           ; 8-bit A
C1/E15C:	60         	RTS

C1/E15D:	7B         	TDC
C1/E15E:	20 B6 E0   	JSR $E0B6
C1/E161:	AE F6 7A   	LDX $7AF6
C1/E164:	A7 5B      	LDA [$5B]
C1/E166:	85 26      	STA $26
C1/E168:	64 27      	STZ $27
C1/E16A:	20 A1 E7   	JSR $E7A1          ; get attacker data offset in Y
C1/E16D:	C2 20      	REP #$20
C1/E16F:	BD D7 74   	LDA $74D7,X
C1/E172:	38         	SEC
C1/E173:	E5 26      	SBC $26
C1/E175:	9D D7 74   	STA $74D7,X
C1/E178:	10 21      	BPL $E19B
C1/E17A:	AD FA EB   	LDA $EBFA
C1/E17D:	29 FF 00   	AND #$00FF
C1/E180:	D0 06      	BNE $E188
C1/E182:	B9 C7 61   	LDA $61C7,Y
C1/E185:	9D D0 74   	STA $74D0,X
C1/E188:	BD D9 74   	LDA $74D9,X
C1/E18B:	29 FF 00   	AND #$00FF
C1/E18E:	9D D7 74   	STA $74D7,X
C1/E191:	7B         	TDC
C1/E192:	99 D2 61   	STA $61D2,Y
C1/E195:	E6 5B      	INC $5B
C1/E197:	E6 5B      	INC $5B
C1/E199:	80 11      	BRA $E1AC
C1/E19B:	A0 01 00   	LDY #$0001
C1/E19E:	B7 5B      	LDA [$5B],Y
C1/E1A0:	29 FF 00   	AND #$00FF
C1/E1A3:	85 22      	STA $22
C1/E1A5:	A5 5B      	LDA $5B
C1/E1A7:	38         	SEC
C1/E1A8:	E5 22      	SBC $22
C1/E1AA:	85 5B      	STA $5B
C1/E1AC:	7B         	TDC
C1/E1AD:	E2 20      	SEP #$20           ; 8-bit A
C1/E1AF:	AE F6 7A   	LDX $7AF6
C1/E1B2:	60         	RTS

C1/E1B3:	7B         	TDC
C1/E1B4:	1A         	INC A
C1/E1B5:	20 B6 E0   	JSR $E0B6
C1/E1B8:	AE F6 7A   	LDX $7AF6
C1/E1BB:	A7 5B      	LDA [$5B]
C1/E1BD:	85 26      	STA $26
C1/E1BF:	64 27      	STZ $27
C1/E1C1:	20 A1 E7   	JSR $E7A1          ; get attacker data offset in Y
C1/E1C4:	C2 20      	REP #$20
C1/E1C6:	BD D7 74   	LDA $74D7,X
C1/E1C9:	38         	SEC
C1/E1CA:	E5 26      	SBC $26
C1/E1CC:	9D D7 74   	STA $74D7,X
C1/E1CF:	10 13      	BPL $E1E4
C1/E1D1:	9E D0 74   	STZ $74D0,X
C1/E1D4:	7B         	TDC
C1/E1D5:	99 D2 61   	STA $61D2,Y
C1/E1D8:	99 C5 61   	STA $61C5,Y
C1/E1DB:	99 C7 61   	STA $61C7,Y
C1/E1DE:	E6 5B      	INC $5B
C1/E1E0:	E6 5B      	INC $5B
C1/E1E2:	80 11      	BRA $E1F5
C1/E1E4:	A0 01 00   	LDY #$0001
C1/E1E7:	B7 5B      	LDA [$5B],Y
C1/E1E9:	29 FF 00   	AND #$00FF
C1/E1EC:	85 22      	STA $22
C1/E1EE:	A5 5B      	LDA $5B
C1/E1F0:	38         	SEC
C1/E1F1:	E5 22      	SBC $22
C1/E1F3:	85 5B      	STA $5B
C1/E1F5:	7B         	TDC
C1/E1F6:	E2 20      	SEP #$20           ; 8-bit A
C1/E1F8:	AE F6 7A   	LDX $7AF6
C1/E1FB:	60         	RTS

C1/E1FC:	AE F6 7A   	LDX $7AF6
C1/E1FF:	BD 38 6A   	LDA $6A38,X
C1/E202:	10 15      	BPL $E219
C1/E204:	29 7F      	AND #$7F
C1/E206:	38         	SEC
C1/E207:	E9 04      	SBC #$04
C1/E209:	0A         	ASL A
C1/E20A:	A8         	TAY
C1/E20B:	B9 0F 80   	LDA $800F,Y
C1/E20E:	8D 4C 61   	STA $614C
C1/E211:	B9 27 80   	LDA $8027,Y
C1/E214:	8D 4D 61   	STA $614D
C1/E217:	80 10      	BRA $E229
C1/E219:	29 03      	AND #$03
C1/E21B:	0A         	ASL A
C1/E21C:	A8         	TAY
C1/E21D:	B9 33 80   	LDA $8033,Y
C1/E220:	8D 4C 61   	STA $614C
C1/E223:	B9 43 80   	LDA $8043,Y
C1/E226:	8D 4D 61   	STA $614D
C1/E229:	BD 39 6A   	LDA $6A39,X
C1/E22C:	10 18      	BPL $E246
C1/E22E:	29 7F      	AND #$7F
C1/E230:	38         	SEC
C1/E231:	E9 04      	SBC #$04
C1/E233:	0A         	ASL A
C1/E234:	A8         	TAY
C1/E235:	B9 0F 80   	LDA $800F,Y
C1/E238:	8D 4E 61   	STA $614E
C1/E23B:	B9 27 80   	LDA $8027,Y
C1/E23E:	18         	CLC
C1/E23F:	69 04      	ADC #$04
C1/E241:	8D 4F 61   	STA $614F
C1/E244:	80 13      	BRA $E259
C1/E246:	29 03      	AND #$03
C1/E248:	0A         	ASL A
C1/E249:	A8         	TAY
C1/E24A:	B9 33 80   	LDA $8033,Y
C1/E24D:	8D 4E 61   	STA $614E
C1/E250:	B9 43 80   	LDA $8043,Y
C1/E253:	18         	CLC
C1/E254:	69 04      	ADC #$04
C1/E256:	8D 4F 61   	STA $614F
C1/E259:	60         	RTS

C1/E25A:	AE F6 7A   	LDX $7AF6
C1/E25D:	BD 7E 6F   	LDA $6F7E,X
C1/E260:	8D 4C 61   	STA $614C
C1/E263:	BD 80 6F   	LDA $6F80,X
C1/E266:	8D 4D 61   	STA $614D
C1/E269:	BD 82 6F   	LDA $6F82,X
C1/E26C:	8D 4E 61   	STA $614E
C1/E26F:	AD BA 64   	LDA $64BA
C1/E272:	29 FF      	AND #$FF
C1/E274:	F0 08      	BEQ $E27E
C1/E276:	BD 84 6F   	LDA $6F84,X
C1/E279:	38         	SEC
C1/E27A:	E9 18      	SBC #$18
C1/E27C:	80 03      	BRA $E281
C1/E27E:	BD 84 6F   	LDA $6F84,X
C1/E281:	8D 4F 61   	STA $614F
C1/E284:	80 03      	BRA $E289
C1/E286:	20 FC E1   	JSR $E1FC

C1/E289:	22 C8 DC C2	JSL $C2DCC8
C1/E28D:	AE F6 7A   	LDX $7AF6
C1/E290:	C2 20      	REP #$20
C1/E292:	C6 5B      	DEC $5B
C1/E294:	AD 50 61   	LDA $6150
C1/E297:	9D DA 74   	STA $74DA,X
C1/E29A:	AD 52 61   	LDA $6152
C1/E29D:	9D DC 74   	STA $74DC,X
C1/E2A0:	7B         	TDC
C1/E2A1:	E2 20      	SEP #$20           ; 8-bit A
C1/E2A3:	AD 52 61   	LDA $6152
C1/E2A6:	CD 53 61   	CMP $6153
C1/E2A9:	90 05      	BCC $E2B0
C1/E2AB:	AD 52 61   	LDA $6152
C1/E2AE:	80 03      	BRA $E2B3
C1/E2B0:	AD 53 61   	LDA $6153
C1/E2B3:	9D D7 74   	STA $74D7,X
C1/E2B6:	9D D9 74   	STA $74D9,X
C1/E2B9:	9E D6 74   	STZ $74D6,X
C1/E2BC:	9E D8 74   	STZ $74D8,X
C1/E2BF:	60         	RTS

C1/E2C0:	20 A1 E7   	JSR $E7A1          ; get attacker data offset in Y
C1/E2C3:	A7 5B      	LDA [$5B]
C1/E2C5:	10 31      	BPL $E2F8
C1/E2C7:	BD 39 6A   	LDA $6A39,X
C1/E2CA:	10 58      	BPL $E324
C1/E2CC:	29 0F      	AND #$0F
C1/E2CE:	38         	SEC
C1/E2CF:	E9 04      	SBC #$04
C1/E2D1:	AA         	TAX
C1/E2D2:	BF 01 1A C1	LDA $C11A01,X    ; Data
C1/E2D6:	85 10      	STA $10
C1/E2D8:	A7 5B      	LDA [$5B]
C1/E2DA:	29 01      	AND #$01
C1/E2DC:	F0 0A      	BEQ $E2E8
C1/E2DE:	AD AB 61   	LDA $61AB
C1/E2E1:	05 10      	ORA $10
C1/E2E3:	8D AB 61   	STA $61AB
C1/E2E6:	80 3C      	BRA $E324
C1/E2E8:	A5 10      	LDA $10
C1/E2EA:	49 FF      	EOR #$FF
C1/E2EC:	85 10      	STA $10
C1/E2EE:	AD AB 61   	LDA $61AB
C1/E2F1:	25 10      	AND $10
C1/E2F3:	8D AB 61   	STA $61AB
C1/E2F6:	80 2C      	BRA $E324
C1/E2F8:	BD 39 6A   	LDA $6A39,X
C1/E2FB:	30 27      	BMI $E324
C1/E2FD:	29 03      	AND #$03
C1/E2FF:	AA         	TAX
C1/E300:	BF 01 1A C1	LDA $C11A01,X    ; Data
C1/E304:	85 10      	STA $10
C1/E306:	A7 5B      	LDA [$5B]
C1/E308:	29 01      	AND #$01
C1/E30A:	F0 0A      	BEQ $E316
C1/E30C:	AD AC 61   	LDA $61AC
C1/E30F:	05 10      	ORA $10
C1/E311:	8D AC 61   	STA $61AC
C1/E314:	80 0E      	BRA $E324
C1/E316:	A5 10      	LDA $10
C1/E318:	49 FF      	EOR #$FF
C1/E31A:	85 10      	STA $10
C1/E31C:	AD AC 61   	LDA $61AC
C1/E31F:	25 10      	AND $10
C1/E321:	8D AC 61   	STA $61AC
C1/E324:	AE F6 7A   	LDX $7AF6
C1/E327:	60         	RTS

C1/E328:	20 A1 E7   	JSR $E7A1          ; get attacker data offset in Y
C1/E32B:	A7 5B      	LDA [$5B]
C1/E32D:	10 31      	BPL $E360
C1/E32F:	BD 38 6A   	LDA $6A38,X
C1/E332:	10 68      	BPL $E39C
C1/E334:	29 0F      	AND #$0F
C1/E336:	38         	SEC
C1/E337:	E9 04      	SBC #$04
C1/E339:	AA         	TAX
C1/E33A:	BF 01 1A C1	LDA $C11A01,X    ; Data
C1/E33E:	85 10      	STA $10
C1/E340:	A7 5B      	LDA [$5B]
C1/E342:	29 01      	AND #$01
C1/E344:	F0 0A      	BEQ $E350
C1/E346:	AD AB 61   	LDA $61AB
C1/E349:	05 10      	ORA $10
C1/E34B:	8D AB 61   	STA $61AB
C1/E34E:	80 4C      	BRA $E39C
C1/E350:	A5 10      	LDA $10
C1/E352:	49 FF      	EOR #$FF
C1/E354:	85 10      	STA $10
C1/E356:	AD AB 61   	LDA $61AB
C1/E359:	25 10      	AND $10
C1/E35B:	8D AB 61   	STA $61AB
C1/E35E:	80 3C      	BRA $E39C
C1/E360:	BD 38 6A   	LDA $6A38,X
C1/E363:	30 37      	BMI $E39C
C1/E365:	29 03      	AND #$03
C1/E367:	AA         	TAX
C1/E368:	BF 01 1A C1	LDA $C11A01,X    ; Data
C1/E36C:	85 10      	STA $10
C1/E36E:	A7 5B      	LDA [$5B]
C1/E370:	29 01      	AND #$01
C1/E372:	F0 12      	BEQ $E386
C1/E374:	AD AC 61   	LDA $61AC
C1/E377:	05 10      	ORA $10
C1/E379:	8D AC 61   	STA $61AC
C1/E37C:	B9 C0 2E   	LDA $2EC0,Y
C1/E37F:	29 DF      	AND #$DF
C1/E381:	99 C0 2E   	STA $2EC0,Y
C1/E384:	80 16      	BRA $E39C
C1/E386:	A5 10      	LDA $10
C1/E388:	49 FF      	EOR #$FF
C1/E38A:	85 10      	STA $10
C1/E38C:	AD AC 61   	LDA $61AC
C1/E38F:	25 10      	AND $10
C1/E391:	8D AC 61   	STA $61AC
C1/E394:	B9 C0 2E   	LDA $2EC0,Y
C1/E397:	09 20      	ORA #$20
C1/E399:	99 C0 2E   	STA $2EC0,Y
C1/E39C:	AE F6 7A   	LDX $7AF6
C1/E39F:	60         	RTS

C1/E3A0:	AE F6 7A   	LDX $7AF6
C1/E3A3:	A7 5B      	LDA [$5B]
C1/E3A5:	85 22      	STA $22
C1/E3A7:	A0 01 00   	LDY #$0001
C1/E3AA:	B7 5B      	LDA [$5B],Y
C1/E3AC:	85 24      	STA $24
C1/E3AE:	BD 87 6F   	LDA $6F87,X
C1/E3B1:	29 01      	AND #$01
C1/E3B3:	F0 07      	BEQ $E3BC
C1/E3B5:	A5 22      	LDA $22
C1/E3B7:	49 FF      	EOR #$FF
C1/E3B9:	1A         	INC A
C1/E3BA:	85 22      	STA $22
C1/E3BC:	AD 54 61   	LDA $6154
C1/E3BF:	18         	CLC
C1/E3C0:	65 22      	ADC $22
C1/E3C2:	8D 54 61   	STA $6154
C1/E3C5:	AD 55 61   	LDA $6155
C1/E3C8:	18         	CLC
C1/E3C9:	65 24      	ADC $24
C1/E3CB:	8D 55 61   	STA $6155
C1/E3CE:	A0 02 00   	LDY #$0002
C1/E3D1:	AD 56 61   	LDA $6156
C1/E3D4:	18         	CLC
C1/E3D5:	77 5B      	ADC [$5B],Y
C1/E3D7:	8D 56 61   	STA $6156
C1/E3DA:	C8         	INY
C1/E3DB:	AD 57 61   	LDA $6157
C1/E3DE:	18         	CLC
C1/E3DF:	77 5B      	ADC [$5B],Y
C1/E3E1:	8D 57 61   	STA $6157
C1/E3E4:	A4 5B      	LDY $5B
C1/E3E6:	C8         	INY
C1/E3E7:	C8         	INY
C1/E3E8:	C8         	INY
C1/E3E9:	84 5B      	STY $5B
C1/E3EB:	60         	RTS

C1/E3EC:	AE F6 7A   	LDX $7AF6
C1/E3EF:	BD 82 6F   	LDA $6F82,X
C1/E3F2:	8D 54 61   	STA $6154
C1/E3F5:	BD 84 6F   	LDA $6F84,X
C1/E3F8:	8D 55 61   	STA $6155
C1/E3FB:	A4 5B      	LDY $5B
C1/E3FD:	88         	DEY
C1/E3FE:	84 5B      	STY $5B
C1/E400:	60         	RTS

C1/E401:	AE F6 7A   	LDX $7AF6
C1/E404:	BD 7E 6F   	LDA $6F7E,X
C1/E407:	8D 54 61   	STA $6154
C1/E40A:	BD 80 6F   	LDA $6F80,X
C1/E40D:	8D 55 61   	STA $6155
C1/E410:	A4 5B      	LDY $5B
C1/E412:	88         	DEY
C1/E413:	84 5B      	STY $5B
C1/E415:	60         	RTS

C1/E416:	7B         	TDC
C1/E417:	A8         	TAY
C1/E418:	A7 5B      	LDA [$5B]
C1/E41A:	8D 54 61   	STA $6154
C1/E41D:	C8         	INY
C1/E41E:	B7 5B      	LDA [$5B],Y
C1/E420:	8D 55 61   	STA $6155
C1/E423:	C8         	INY
C1/E424:	B7 5B      	LDA [$5B],Y
C1/E426:	8D 56 61   	STA $6156
C1/E429:	C8         	INY
C1/E42A:	B7 5B      	LDA [$5B],Y
C1/E42C:	8D 57 61   	STA $6157
C1/E42F:	A4 5B      	LDY $5B
C1/E431:	C8         	INY
C1/E432:	C8         	INY
C1/E433:	C8         	INY
C1/E434:	84 5B      	STY $5B
C1/E436:	AE F6 7A   	LDX $7AF6
C1/E439:	60         	RTS

C1/E43A:	AD 56 61   	LDA $6156
C1/E43D:	85 24      	STA $24
C1/E43F:	AD 57 61   	LDA $6157
C1/E442:	20 99 6B   	JSR $6B99
C1/E445:	18         	CLC
C1/E446:	69 80      	ADC #$80
C1/E448:	8D 5B 61   	STA $615B
C1/E44B:	AD 57 61   	LDA $6157
C1/E44E:	18         	CLC
C1/E44F:	69 40      	ADC #$40
C1/E451:	20 99 6B   	JSR $6B99
C1/E454:	18         	CLC
C1/E455:	69 80      	ADC #$80
C1/E457:	8D 5C 61   	STA $615C
C1/E45A:	AD 57 61   	LDA $6157
C1/E45D:	18         	CLC
C1/E45E:	69 55      	ADC #$55
C1/E460:	20 99 6B   	JSR $6B99
C1/E463:	18         	CLC
C1/E464:	69 80      	ADC #$80
C1/E466:	8D 5D 61   	STA $615D
C1/E469:	AD 57 61   	LDA $6157
C1/E46C:	18         	CLC
C1/E46D:	69 95      	ADC #$95
C1/E46F:	20 99 6B   	JSR $6B99
C1/E472:	18         	CLC
C1/E473:	69 80      	ADC #$80
C1/E475:	8D 5E 61   	STA $615E
C1/E478:	AD 57 61   	LDA $6157
C1/E47B:	18         	CLC
C1/E47C:	69 AA      	ADC #$AA
C1/E47E:	20 99 6B   	JSR $6B99
C1/E481:	18         	CLC
C1/E482:	69 80      	ADC #$80
C1/E484:	8D 5F 61   	STA $615F
C1/E487:	AD 57 61   	LDA $6157
C1/E48A:	18         	CLC
C1/E48B:	69 EA      	ADC #$EA
C1/E48D:	20 99 6B   	JSR $6B99
C1/E490:	18         	CLC
C1/E491:	69 80      	ADC #$80
C1/E493:	8D 60 61   	STA $6160
C1/E496:	20 CC 1B   	JSR $1BCC
C1/E499:	A4 5B      	LDY $5B
C1/E49B:	88         	DEY
C1/E49C:	84 5B      	STY $5B
C1/E49E:	AE F6 7A   	LDX $7AF6
C1/E4A1:	60         	RTS

C1/E4A2:	AD 56 61   	LDA $6156
C1/E4A5:	85 24      	STA $24
C1/E4A7:	AD 57 61   	LDA $6157
C1/E4AA:	49 FF      	EOR #$FF
C1/E4AC:	85 10      	STA $10
C1/E4AE:	20 99 6B   	JSR $6B99
C1/E4B1:	18         	CLC
C1/E4B2:	69 80      	ADC #$80
C1/E4B4:	8D 5B 61   	STA $615B
C1/E4B7:	A5 10      	LDA $10
C1/E4B9:	18         	CLC
C1/E4BA:	69 40      	ADC #$40
C1/E4BC:	20 99 6B   	JSR $6B99
C1/E4BF:	18         	CLC
C1/E4C0:	69 80      	ADC #$80
C1/E4C2:	8D 5C 61   	STA $615C
C1/E4C5:	A5 10      	LDA $10
C1/E4C7:	18         	CLC
C1/E4C8:	69 50      	ADC #$50
C1/E4CA:	20 99 6B   	JSR $6B99
C1/E4CD:	18         	CLC
C1/E4CE:	69 80      	ADC #$80
C1/E4D0:	8D 5D 61   	STA $615D
C1/E4D3:	A5 10      	LDA $10
C1/E4D5:	18         	CLC
C1/E4D6:	69 90      	ADC #$90
C1/E4D8:	20 99 6B   	JSR $6B99
C1/E4DB:	18         	CLC
C1/E4DC:	69 80      	ADC #$80
C1/E4DE:	8D 5E 61   	STA $615E
C1/E4E1:	A5 10      	LDA $10
C1/E4E3:	18         	CLC
C1/E4E4:	69 90      	ADC #$90
C1/E4E6:	20 99 6B   	JSR $6B99
C1/E4E9:	18         	CLC
C1/E4EA:	69 80      	ADC #$80
C1/E4EC:	8D 5F 61   	STA $615F
C1/E4EF:	A5 10      	LDA $10
C1/E4F1:	18         	CLC
C1/E4F2:	69 4A      	ADC #$4A
C1/E4F4:	20 99 6B   	JSR $6B99
C1/E4F7:	18         	CLC
C1/E4F8:	69 80      	ADC #$80
C1/E4FA:	8D 60 61   	STA $6160
C1/E4FD:	20 CC 1B   	JSR $1BCC
C1/E500:	A4 5B      	LDY $5B
C1/E502:	88         	DEY
C1/E503:	84 5B      	STY $5B
C1/E505:	AE F6 7A   	LDX $7AF6
C1/E508:	60         	RTS

C1/E509:	AE F6 7A   	LDX $7AF6
C1/E50C:	BD 38 6A   	LDA $6A38,X
C1/E50F:	30 06      	BMI $E517
C1/E511:	A8         	TAY
C1/E512:	B9 AE 61   	LDA $61AE,Y
C1/E515:	F0 10      	BEQ $E527
C1/E517:	A7 5B      	LDA [$5B]
C1/E519:	C2 20      	REP #$20
C1/E51B:	85 22      	STA $22
C1/E51D:	A5 5B      	LDA $5B
C1/E51F:	18         	CLC
C1/E520:	65 22      	ADC $22
C1/E522:	85 5B      	STA $5B
C1/E524:	7B         	TDC
C1/E525:	E2 20      	SEP #$20           ; 8-bit A
C1/E527:	60         	RTS

C1/E528:	AD 9D 5F   	LDA $5F9D
C1/E52B:	85 24      	STA $24
C1/E52D:	64 25      	STZ $25
C1/E52F:	AD 7D 5F   	LDA $5F7D
C1/E532:	20 67 6C   	JSR $6C67
C1/E535:	AE F6 7A   	LDX $7AF6
C1/E538:	C2 20      	REP #$20
C1/E53A:	A5 28      	LDA $28
C1/E53C:	18         	CLC
C1/E53D:	6D 9E 5F   	ADC $5F9E
C1/E540:	9D CE 74   	STA $74CE,X
C1/E543:	7B         	TDC
C1/E544:	E2 20      	SEP #$20           ; 8-bit A
C1/E546:	AD 8D 5F   	LDA $5F8D
C1/E549:	85 24      	STA $24
C1/E54B:	AD 6D 5F   	LDA $5F6D
C1/E54E:	20 67 6C   	JSR $6C67
C1/E551:	AE F6 7A   	LDX $7AF6
C1/E554:	C2 20      	REP #$20
C1/E556:	A5 28      	LDA $28
C1/E558:	18         	CLC
C1/E559:	6D 8E 5F   	ADC $5F8E
C1/E55C:	9D D0 74   	STA $74D0,X
C1/E55F:	A7 5B      	LDA [$5B]
C1/E561:	85 22      	STA $22
C1/E563:	E6 5B      	INC $5B
C1/E565:	7B         	TDC
C1/E566:	E2 20      	SEP #$20           ; 8-bit A
C1/E568:	AD 7D 5F   	LDA $5F7D
C1/E56B:	18         	CLC
C1/E56C:	65 22      	ADC $22
C1/E56E:	8D 7D 5F   	STA $5F7D
C1/E571:	AD 6D 5F   	LDA $5F6D
C1/E574:	18         	CLC
C1/E575:	65 23      	ADC $23
C1/E577:	8D 6D 5F   	STA $5F6D
C1/E57A:	AD 9D 5F   	LDA $5F9D
C1/E57D:	18         	CLC
C1/E57E:	69 01      	ADC #$01
C1/E580:	C9 40      	CMP #$40
C1/E582:	90 02      	BCC $E586
C1/E584:	A9 40      	LDA #$40
C1/E586:	8D 9D 5F   	STA $5F9D
C1/E589:	4A         	LSR A
C1/E58A:	8D 8D 5F   	STA $5F8D
C1/E58D:	AD A1 5F   	LDA $5FA1
C1/E590:	EE A1 5F   	INC $5FA1
C1/E593:	EE A1 5F   	INC $5FA1
C1/E596:	0A         	ASL A
C1/E597:	0A         	ASL A
C1/E598:	A8         	TAY
C1/E599:	7B         	TDC
C1/E59A:	AA         	TAX
C1/E59B:	E2 10      	SEP #$10
C1/E59D:	C2 20      	REP #$20
C1/E59F:	B9 F5 44   	LDA $44F5,Y
C1/E5A2:	9D B0 63   	STA $63B0,X
C1/E5A5:	C8         	INY
C1/E5A6:	C8         	INY
C1/E5A7:	E8         	INX
C1/E5A8:	E8         	INX
C1/E5A9:	D0 F4      	BNE $E59F
C1/E5AB:	7B         	TDC
C1/E5AC:	E2 20      	SEP #$20         ; 8-bit A
C1/E5AE:	C2 10      	REP #$10
C1/E5B0:	AE F6 7A   	LDX $7AF6
C1/E5B3:	60         	RTS

; Clear BG1 Scroll HDMA Table Buffer

C1/E5B4:	7B         	TDC              ; A = 0000
C1/E5B5:	AA         	TAX              ; X = 0000
C1/E5B6:	C2 20      	REP #$20         ; 16-bit A
C1/E5B8:	9D B0 63   	STA $63B0,X      ; zero BG1 scroll HDMA buffer [?]
C1/E5BB:	E8         	INX
C1/E5BC:	E8         	INX              ; next pair of bytes
C1/E5BD:	E0 00 01   	CPX #$0100       ; clear entire buffer
C1/E5C0:	D0 F6      	BNE $E5B8        ; loop
C1/E5C2:	E2 20      	SEP #$20         ; 8-bit A
C1/E5C4:	60         	RTS

C1/E5C5:	AE F6 7A   	LDX $7AF6
C1/E5C8:	BD 39 6A   	LDA $6A39,X
C1/E5CB:	30 11      	BMI $E5DE
C1/E5CD:	0A         	ASL A
C1/E5CE:	0A         	ASL A
C1/E5CF:	0A         	ASL A
C1/E5D0:	0A         	ASL A
C1/E5D1:	0A         	ASL A
C1/E5D2:	A8         	TAY
C1/E5D3:	B9 BD 61   	LDA $61BD,Y
C1/E5D6:	29 CF      	AND #$CF
C1/E5D8:	07 5B      	ORA [$5B]
C1/E5DA:	99 BD 61   	STA $61BD,Y
C1/E5DD:	60         	RTS

C1/E5DE:	29 7F      	AND #$7F
C1/E5E0:	38         	SEC
C1/E5E1:	E9 04      	SBC #$04
C1/E5E3:	0A         	ASL A
C1/E5E4:	A8         	TAY
C1/E5E5:	B9 DC 80   	LDA $80DC,Y
C1/E5E8:	29 CF      	AND #$CF
C1/E5EA:	07 5B      	ORA [$5B]
C1/E5EC:	99 DC 80   	STA $80DC,Y
C1/E5EF:	60         	RTS

C1/E5F0:	20 A1 E7   	JSR $E7A1          ; get attacker data offset in Y
C1/E5F3:	A7 5B      	LDA [$5B]
C1/E5F5:	99 BD 61   	STA $61BD,Y
C1/E5F8:	60         	RTS

C1/E5F9:	AE F6 7A   	LDX $7AF6
C1/E5FC:	BD 38 6A   	LDA $6A38,X
C1/E5FF:	A8         	TAY
C1/E600:	64 10      	STZ $10
C1/E602:	B9 10 7B   	LDA $7B10,Y
C1/E605:	F0 02      	BEQ $E609
C1/E607:	C6 10      	DEC $10
C1/E609:	BD 3B 6A   	LDA $6A3B,X
C1/E60C:	85 24      	STA $24
C1/E60E:	64 25      	STZ $25
C1/E610:	BD 3A 6A   	LDA $6A3A,X
C1/E613:	18         	CLC
C1/E614:	69 40      	ADC #$40
C1/E616:	20 67 6C   	JSR $6C67
C1/E619:	20 A1 E7   	JSR $E7A1          ; get attacker data offset in Y
C1/E61C:	C2 20      	REP #$20
C1/E61E:	BD CE 74   	LDA $74CE,X
C1/E621:	18         	CLC
C1/E622:	65 28      	ADC $28
C1/E624:	99 C5 61   	STA $61C5,Y
C1/E627:	46 24      	LSR $24
C1/E629:	7B         	TDC
C1/E62A:	E2 20      	SEP #$20           ; 8-bit A
C1/E62C:	BD 3A 6A   	LDA $6A3A,X
C1/E62F:	20 67 6C   	JSR $6C67
C1/E632:	20 A1 E7   	JSR $E7A1          ; get attacker data offset in Y
C1/E635:	C2 20      	REP #$20
C1/E637:	BD D0 74   	LDA $74D0,X
C1/E63A:	18         	CLC
C1/E63B:	65 28      	ADC $28
C1/E63D:	99 C7 61   	STA $61C7,Y
C1/E640:	A0 02 00   	LDY #$0002
C1/E643:	B7 5B      	LDA [$5B],Y
C1/E645:	29 FF 00   	AND #$00FF
C1/E648:	85 24      	STA $24
C1/E64A:	A7 5B      	LDA [$5B]
C1/E64C:	85 22      	STA $22
C1/E64E:	E6 5B      	INC $5B
C1/E650:	E6 5B      	INC $5B
C1/E652:	7B         	TDC
C1/E653:	E2 20      	SEP #$20           ; 8-bit A
C1/E655:	BD 3B 6A   	LDA $6A3B,X
C1/E658:	18         	CLC
C1/E659:	65 22      	ADC $22
C1/E65B:	10 01      	BPL $E65E
C1/E65D:	7B         	TDC
C1/E65E:	DD 3C 6A   	CMP $6A3C,X
C1/E661:	90 0F      	BCC $E672
C1/E663:	C2 20      	REP #$20
C1/E665:	A5 5B      	LDA $5B
C1/E667:	18         	CLC
C1/E668:	65 24      	ADC $24
C1/E66A:	85 5B      	STA $5B
C1/E66C:	7B         	TDC
C1/E66D:	E2 20      	SEP #$20           ; 8-bit A
C1/E66F:	BD 3C 6A   	LDA $6A3C,X
C1/E672:	9D 3B 6A   	STA $6A3B,X
C1/E675:	A5 10      	LDA $10
C1/E677:	D0 0A      	BNE $E683
C1/E679:	BD 3A 6A   	LDA $6A3A,X
C1/E67C:	38         	SEC
C1/E67D:	E5 23      	SBC $23
C1/E67F:	9D 3A 6A   	STA $6A3A,X
C1/E682:	60         	RTS

C1/E683:	BD 3A 6A   	LDA $6A3A,X
C1/E686:	18         	CLC
C1/E687:	65 23      	ADC $23
C1/E689:	9D 3A 6A   	STA $6A3A,X
C1/E68C:	60         	RTS

C1/E68D:	A7 5B      	LDA [$5B]
C1/E68F:	85 24      	STA $24
C1/E691:	AE F6 7A   	LDX $7AF6
C1/E694:	BD D8 74   	LDA $74D8,X
C1/E697:	20 68 D8   	JSR $D868
C1/E69A:	C2 20      	REP #$20
C1/E69C:	AE F6 7A   	LDX $7AF6
C1/E69F:	A5 22      	LDA $22
C1/E6A1:	9D CE 74   	STA $74CE,X
C1/E6A4:	7B         	TDC
C1/E6A5:	E2 20      	SEP #$20           ; 8-bit A
C1/E6A7:	BD D9 74   	LDA $74D9,X
C1/E6AA:	20 68 D8   	JSR $D868
C1/E6AD:	C2 20      	REP #$20
C1/E6AF:	AE F6 7A   	LDX $7AF6
C1/E6B2:	A5 22      	LDA $22
C1/E6B4:	9D D0 74   	STA $74D0,X
C1/E6B7:	7B         	TDC
C1/E6B8:	E2 20      	SEP #$20           ; 8-bit A
C1/E6BA:	BD D8 74   	LDA $74D8,X
C1/E6BD:	18         	CLC
C1/E6BE:	69 04      	ADC #$04
C1/E6C0:	9D D8 74   	STA $74D8,X
C1/E6C3:	BD D9 74   	LDA $74D9,X
C1/E6C6:	18         	CLC
C1/E6C7:	69 06      	ADC #$06
C1/E6C9:	9D D9 74   	STA $74D9,X
C1/E6CC:	60         	RTS

C1/E6CD:	AE F6 7A   	LDX $7AF6
C1/E6D0:	7B         	TDC
C1/E6D1:	A8         	TAY
C1/E6D2:	A7 5B      	LDA [$5B]
C1/E6D4:	85 10      	STA $10
C1/E6D6:	C8         	INY
C1/E6D7:	B7 5B      	LDA [$5B],Y
C1/E6D9:	85 12      	STA $12
C1/E6DB:	BD 87 6F   	LDA $6F87,X
C1/E6DE:	F0 07      	BEQ $E6E7
C1/E6E0:	A5 10      	LDA $10
C1/E6E2:	49 FF      	EOR #$FF
C1/E6E4:	1A         	INC A
C1/E6E5:	85 10      	STA $10
C1/E6E7:	C2 20      	REP #$20
C1/E6E9:	7B         	TDC
C1/E6EA:	A8         	TAY
C1/E6EB:	A5 10      	LDA $10
C1/E6ED:	99 30 63   	STA $6330,Y
C1/E6F0:	A5 12      	LDA $12
C1/E6F2:	99 32 63   	STA $6332,Y
C1/E6F5:	C8         	INY
C1/E6F6:	C8         	INY
C1/E6F7:	C8         	INY
C1/E6F8:	C8         	INY
C1/E6F9:	C0 80 00   	CPY #$0080
C1/E6FC:	D0 ED      	BNE $E6EB
C1/E6FE:	E6 5B      	INC $5B
C1/E700:	7B         	TDC
C1/E701:	E2 20      	SEP #$20           ; 8-bit A
C1/E703:	AE F6 7A   	LDX $7AF6
C1/E706:	60         	RTS

C1/E707:	AE F6 7A   	LDX $7AF6
C1/E70A:	BD 39 6A   	LDA $6A39,X
C1/E70D:	10 12      	BPL $E721
C1/E70F:	29 0F      	AND #$0F
C1/E711:	38         	SEC
C1/E712:	E9 04      	SBC #$04
C1/E714:	0A         	ASL A
C1/E715:	A8         	TAY
C1/E716:	B9 F3 80   	LDA $80F3,Y
C1/E719:	47 5B      	EOR [$5B]
C1/E71B:	59 7E 61   	EOR $617E,Y
C1/E71E:	99 F3 80   	STA $80F3,Y
C1/E721:	60         	RTS

C1/E722:	A0 01 00   	LDY #$0001
C1/E725:	A7 5B      	LDA [$5B]
C1/E727:	85 10      	STA $10
C1/E729:	B7 5B      	LDA [$5B],Y
C1/E72B:	85 11      	STA $11
C1/E72D:	C8         	INY
C1/E72E:	B7 5B      	LDA [$5B],Y
C1/E730:	20 3C C2   	JSR $C23C          ; fill subscreen window mask
C1/E733:	AE F6 7A   	LDX $7AF6
C1/E736:	A4 5B      	LDY $5B
C1/E738:	C8         	INY
C1/E739:	C8         	INY
C1/E73A:	84 5B      	STY $5B
C1/E73C:	60         	RTS

C1/E73D:	A7 5B      	LDA [$5B]
C1/E73F:	8D D2 62   	STA $62D2
C1/E742:	AE F6 7A   	LDX $7AF6
C1/E745:	60         	RTS

C1/E746:	A7 5B      	LDA [$5B]
C1/E748:	8D BD 61   	STA $61BD
C1/E74B:	8D DD 61   	STA $61DD
C1/E74E:	8D FD 61   	STA $61FD
C1/E751:	8D 1D 62   	STA $621D
C1/E754:	7B         	TDC
C1/E755:	A8         	TAY
C1/E756:	A7 5B      	LDA [$5B]
C1/E758:	09 01      	ORA #$01
C1/E75A:	99 DC 80   	STA $80DC,Y
C1/E75D:	C8         	INY
C1/E75E:	C8         	INY
C1/E75F:	C0 0C 00   	CPY #$000C
C1/E762:	D0 F6      	BNE $E75A
C1/E764:	AE F6 7A   	LDX $7AF6
C1/E767:	60         	RTS

C1/E768:	7B         	TDC
C1/E769:	A8         	TAY
C1/E76A:	C2 20      	REP #$20
C1/E76C:	99 D6 62   	STA $62D6,Y
C1/E76F:	C8         	INY
C1/E770:	C8         	INY
C1/E771:	C0 40 00   	CPY #$0040
C1/E774:	D0 F6      	BNE $E76C
C1/E776:	E2 20      	SEP #$20           ; 8-bit A
C1/E778:	60         	RTS

C1/E779:	AE F6 7A   	LDX $7AF6
C1/E77C:	BD 38 6A   	LDA $6A38,X
C1/E77F:	30 16      	BMI $E797
C1/E781:	8D D3 62   	STA $62D3
C1/E784:	A7 5B      	LDA [$5B]
C1/E786:	29 7F      	AND #$7F
C1/E788:	8D D5 62   	STA $62D5
C1/E78B:	A7 5B      	LDA [$5B]
C1/E78D:	29 80      	AND #$80
C1/E78F:	8D D4 62   	STA $62D4
C1/E792:	D0 03      	BNE $E797
C1/E794:	20 68 E7   	JSR $E768
C1/E797:	60         	RTS

C1/E798:	20 A1 E7   	JSR $E7A1          ; get attacker data offset in Y
C1/E79B:	A7 5B      	LDA [$5B]
C1/E79D:	99 D0 61   	STA $61D0,Y
C1/E7A0:	60         	RTS

C1/E7A1:	AE F6 7A   	LDX $7AF6        ; animation thread offset
C1/E7A4:	BD 38 6A   	LDA $6A38,X      ; attacker index
C1/E7A7:	0A         	ASL A
C1/E7A8:	0A         	ASL A
C1/E7A9:	0A         	ASL A
C1/E7AA:	0A         	ASL A
C1/E7AB:	0A         	ASL A            ; x32
C1/E7AC:	A8         	TAY              ; index it
C1/E7AD:	8C F8 7A   	STY $7AF8        ; pointer to attacker data [?]
C1/E7B0:	60         	RTS

C1/E7B1:	20 A1 E7   	JSR $E7A1          ; get attacker data offset in Y
C1/E7B4:	A7 5B      	LDA [$5B]
C1/E7B6:	99 C0 61   	STA $61C0,Y
C1/E7B9:	60         	RTS

C1/E7BA:	A5 85      	LDA $85
C1/E7BC:	38         	SEC
C1/E7BD:	FD DB 74   	SBC $74DB,X
C1/E7C0:	30 0A      	BMI $E7CC
C1/E7C2:	CD AF 60   	CMP $60AF
C1/E7C5:	90 0A      	BCC $E7D1
C1/E7C7:	AD AF 60   	LDA $60AF
C1/E7CA:	80 05      	BRA $E7D1

C1/E7CC:	49 FF      	EOR #$FF
C1/E7CE:	1A         	INC A
C1/E7CF:	80 F1      	BRA $E7C2
C1/E7D1:	85 22      	STA $22
C1/E7D3:	AD AF 60   	LDA $60AF
C1/E7D6:	C9 10      	CMP #$10
C1/E7D8:	B0 0D      	BCS $E7E7
C1/E7DA:	EE B0 60   	INC $60B0
C1/E7DD:	AD B0 60   	LDA $60B0
C1/E7E0:	25 24      	AND $24
C1/E7E2:	D0 03      	BNE $E7E7
C1/E7E4:	EE AF 60   	INC $60AF
C1/E7E7:	60         	RTS

C1/E7E8:	20 A1 E7   	JSR $E7A1          ; get attacker data offset in Y
C1/E7EB:	C2 20      	REP #$20
C1/E7ED:	B9 B7 61   	LDA $61B7,Y
C1/E7F0:	18         	CLC
C1/E7F1:	79 C5 61   	ADC $61C5,Y
C1/E7F4:	18         	CLC
C1/E7F5:	79 D4 61   	ADC $61D4,Y
C1/E7F8:	85 22      	STA $22
C1/E7FA:	B9 B9 61   	LDA $61B9,Y
C1/E7FD:	18         	CLC
C1/E7FE:	79 C7 61   	ADC $61C7,Y
C1/E801:	85 24      	STA $24
C1/E803:	7B         	TDC
C1/E804:	E2 20      	SEP #$20           ; 8-bit A
C1/E806:	A5 23      	LDA $23
C1/E808:	29 01      	AND #$01
C1/E80A:	F0 04      	BEQ $E810
C1/E80C:	A9 FF      	LDA #$FF
C1/E80E:	80 02      	BRA $E812
C1/E810:	A5 22      	LDA $22
C1/E812:	85 7D      	STA $7D
C1/E814:	A5 25      	LDA $25
C1/E816:	29 01      	AND #$01
C1/E818:	F0 04      	BEQ $E81E
C1/E81A:	A9 FF      	LDA #$FF
C1/E81C:	80 02      	BRA $E820
C1/E81E:	A5 24      	LDA $24
C1/E820:	85 7E      	STA $7E
C1/E822:	BD 82 6F   	LDA $6F82,X
C1/E825:	85 7F      	STA $7F
C1/E827:	BD 84 6F   	LDA $6F84,X
C1/E82A:	85 80      	STA $80
C1/E82C:	20 91 6C   	JSR $6C91
C1/E82F:	60         	RTS

C1/E830:	20 E8 E7   	JSR $E7E8
C1/E833:	AE F6 7A   	LDX $7AF6
C1/E836:	A9 03      	LDA #$03
C1/E838:	85 24      	STA $24
C1/E83A:	20 BA E7   	JSR $E7BA
C1/E83D:	A5 85      	LDA $85
C1/E83F:	38         	SEC
C1/E840:	FD DB 74   	SBC $74DB,X
C1/E843:	30 0B      	BMI $E850
C1/E845:	BD DB 74   	LDA $74DB,X
C1/E848:	18         	CLC
C1/E849:	65 22      	ADC $22
C1/E84B:	9D DB 74   	STA $74DB,X
C1/E84E:	80 09      	BRA $E859
C1/E850:	BD DB 74   	LDA $74DB,X
C1/E853:	38         	SEC
C1/E854:	E5 22      	SBC $22
C1/E856:	9D DB 74   	STA $74DB,X
C1/E859:	A7 5B      	LDA [$5B]
C1/E85B:	18         	CLC
C1/E85C:	69 04      	ADC #$04
C1/E85E:	85 24      	STA $24
C1/E860:	AE F6 7A   	LDX $7AF6
C1/E863:	A5 86      	LDA $86
C1/E865:	C5 24      	CMP $24
C1/E867:	B0 06      	BCS $E86F
C1/E869:	A4 5B      	LDY $5B
C1/E86B:	C8         	INY
C1/E86C:	84 5B      	STY $5B
C1/E86E:	60         	RTS

C1/E86F:	A7 5B      	LDA [$5B]
C1/E871:	A8         	TAY
C1/E872:	84 24      	STY $24
C1/E874:	BD DB 74   	LDA $74DB,X
C1/E877:	18         	CLC
C1/E878:	69 40      	ADC #$40
C1/E87A:	20 67 6C   	JSR $6C67
C1/E87D:	AE F8 7A   	LDX $7AF8
C1/E880:	C2 20      	REP #$20
C1/E882:	BD C5 61   	LDA $61C5,X
C1/E885:	18         	CLC
C1/E886:	65 28      	ADC $28
C1/E888:	9D C5 61   	STA $61C5,X
C1/E88B:	18         	CLC
C1/E88C:	7D B7 61   	ADC $61B7,X
C1/E88F:	18         	CLC
C1/E890:	7D D4 61   	ADC $61D4,X
C1/E893:	29 FF 01   	AND #$01FF
C1/E896:	AA         	TAX
C1/E897:	7B         	TDC
C1/E898:	E2 20      	SEP #$20           ; 8-bit A
C1/E89A:	E0 10 00   	CPX #$0010
C1/E89D:	90 05      	BCC $E8A4
C1/E89F:	E0 F0 00   	CPX #$00F0
C1/E8A2:	90 05      	BCC $E8A9
C1/E8A4:	A9 FF      	LDA #$FF
C1/E8A6:	8D AF 60   	STA $60AF
C1/E8A9:	AE F6 7A   	LDX $7AF6
C1/E8AC:	A7 5B      	LDA [$5B]
C1/E8AE:	A8         	TAY
C1/E8AF:	84 24      	STY $24
C1/E8B1:	BD DB 74   	LDA $74DB,X
C1/E8B4:	20 67 6C   	JSR $6C67
C1/E8B7:	AE F8 7A   	LDX $7AF8
C1/E8BA:	C2 20      	REP #$20
C1/E8BC:	BD C7 61   	LDA $61C7,X
C1/E8BF:	18         	CLC
C1/E8C0:	65 28      	ADC $28
C1/E8C2:	9D C7 61   	STA $61C7,X
C1/E8C5:	18         	CLC
C1/E8C6:	7D B9 61   	ADC $61B9,X
C1/E8C9:	29 FF 01   	AND #$01FF
C1/E8CC:	85 28      	STA $28
C1/E8CE:	AA         	TAX
C1/E8CF:	7B         	TDC
C1/E8D0:	E2 20      	SEP #$20           ; 8-bit A
C1/E8D2:	E0 10 00   	CPX #$0010
C1/E8D5:	90 05      	BCC $E8DC
C1/E8D7:	E0 F0 00   	CPX #$00F0
C1/E8DA:	90 05      	BCC $E8E1
C1/E8DC:	A9 FF      	LDA #$FF
C1/E8DE:	8D AF 60   	STA $60AF
C1/E8E1:	C2 20      	REP #$20
C1/E8E3:	A0 01 00   	LDY #$0001
C1/E8E6:	B7 5B      	LDA [$5B],Y
C1/E8E8:	29 FF 00   	AND #$00FF
C1/E8EB:	85 22      	STA $22
C1/E8ED:	A5 5B      	LDA $5B
C1/E8EF:	38         	SEC
C1/E8F0:	E5 22      	SBC $22
C1/E8F2:	85 5B      	STA $5B
C1/E8F4:	7B         	TDC
C1/E8F5:	E2 20      	SEP #$20           ; 8-bit A
C1/E8F7:	AE F6 7A   	LDX $7AF6
C1/E8FA:	60         	RTS

; Animation Script Op $45 ($C5)
; Some sort of branching handling
; Used for Bushido multihit animations
; Chains existing animations, one per command execution

C1/E8FB:	AE F6 7A   	LDX $7AF6          ; animation thread data (why?)
C1/E8FE:	AD AE 60   	LDA $60AE          ; animation stage/step
C1/E901:	C2 20      	REP #$20           ; 16-bit A
C1/E903:	0A         	ASL A              ; x2
C1/E904:	85 22      	STA $22            ; save it
C1/E906:	A5 5B      	LDA $5B            ; animation script offset (next arg)
C1/E908:	18         	CLC
C1/E909:	65 22      	ADC $22            ; add animation step offset
C1/E90B:	85 5B      	STA $5B            ; update animation script offset
C1/E90D:	A7 5B      	LDA [$5B]          ; load arg for this animation stage
C1/E90F:	3A         	DEC A              ; -1 (prep for automatic $5B increment)
C1/E910:	85 5B      	STA $5B            ; set as new script offset
C1/E912:	7B         	TDC                ; zero A/B
C1/E913:	E2 20      	SEP #$20           ; 8-bit A
C1/E915:	EE AE 60   	INC $60AE          ; increment animation stage/step
C1/E918:	60         	RTS

C1/E919:	BD D9 74   	LDA $74D9,X
C1/E91C:	85 24      	STA $24
C1/E91E:	BD DA 74   	LDA $74DA,X
C1/E921:	85 25      	STA $25
C1/E923:	BD DB 74   	LDA $74DB,X
C1/E926:	18         	CLC
C1/E927:	69 40      	ADC #$40
C1/E929:	20 67 6C   	JSR $6C67
C1/E92C:	20 A1 E7   	JSR $E7A1          ; get attacker data offset in Y
C1/E92F:	C2 20      	REP #$20
C1/E931:	A5 28      	LDA $28
C1/E933:	99 C5 61   	STA $61C5,Y
C1/E936:	9D CE 74   	STA $74CE,X
C1/E939:	7B         	TDC
C1/E93A:	E2 20      	SEP #$20           ; 8-bit A
C1/E93C:	BD DB 74   	LDA $74DB,X
C1/E93F:	20 67 6C   	JSR $6C67
C1/E942:	AE F6 7A   	LDX $7AF6
C1/E945:	A9 FF      	LDA #$FF
C1/E947:	8F 04 42 00	STA $004204
C1/E94B:	8F 05 42 00	STA $004205
C1/E94F:	BD DD 74   	LDA $74DD,X
C1/E952:	F0 04      	BEQ $E958
C1/E954:	A9 FF      	LDA #$FF
C1/E956:	80 03      	BRA $E95B
C1/E958:	BD DC 74   	LDA $74DC,X
C1/E95B:	8F 06 42 00	STA $004206
C1/E95F:	AC F8 7A   	LDY $7AF8
C1/E962:	BD D9 74   	LDA $74D9,X
C1/E965:	C2 20      	REP #$20
C1/E967:	85 22      	STA $22
C1/E969:	A5 28      	LDA $28
C1/E96B:	99 C7 61   	STA $61C7,Y
C1/E96E:	9D D0 74   	STA $74D0,X
C1/E971:	AF 14 42 00	LDA $004214
C1/E975:	85 24      	STA $24
C1/E977:	20 F4 18   	JSR $18F4
C1/E97A:	7B         	TDC
C1/E97B:	E2 20      	SEP #$20           ; 8-bit A
C1/E97D:	A2 20 00   	LDX #$0020
C1/E980:	86 24      	STX $24
C1/E982:	A5 27      	LDA $27
C1/E984:	4A         	LSR A
C1/E985:	18         	CLC
C1/E986:	69 80      	ADC #$80
C1/E988:	20 67 6C   	JSR $6C67
C1/E98B:	AC F8 7A   	LDY $7AF8
C1/E98E:	AE F6 7A   	LDX $7AF6
C1/E991:	C2 20      	REP #$20
C1/E993:	A5 28      	LDA $28
C1/E995:	99 D2 61   	STA $61D2,Y
C1/E998:	7B         	TDC
C1/E999:	E2 20      	SEP #$20           ; 8-bit A
C1/E99B:	AE F6 7A   	LDX $7AF6
C1/E99E:	60         	RTS

C1/E99F:	AE F6 7A   	LDX $7AF6
C1/E9A2:	A7 5B      	LDA [$5B]
C1/E9A4:	10 1F      	BPL $E9C5
C1/E9A6:	C2 20      	REP #$20
C1/E9A8:	BD 3A 6A   	LDA $6A3A,X
C1/E9AB:	18         	CLC
C1/E9AC:	7D CE 74   	ADC $74CE,X
C1/E9AF:	8D 1D 7B   	STA $7B1D
C1/E9B2:	8D 16 7B   	STA $7B16
C1/E9B5:	BD 3C 6A   	LDA $6A3C,X
C1/E9B8:	18         	CLC
C1/E9B9:	7D D0 74   	ADC $74D0,X
C1/E9BC:	8D 1F 7B   	STA $7B1F
C1/E9BF:	8D 18 7B   	STA $7B18
C1/E9C2:	7B         	TDC
C1/E9C3:	E2 20      	SEP #$20           ; 8-bit A
C1/E9C5:	A7 5B      	LDA [$5B]
C1/E9C7:	29 40      	AND #$40
C1/E9C9:	F0 1F      	BEQ $E9EA
C1/E9CB:	C2 20      	REP #$20
C1/E9CD:	BD 3A 6A   	LDA $6A3A,X
C1/E9D0:	18         	CLC
C1/E9D1:	7D CE 74   	ADC $74CE,X
C1/E9D4:	8D 29 7B   	STA $7B29
C1/E9D7:	8D 22 7B   	STA $7B22
C1/E9DA:	BD 3C 6A   	LDA $6A3C,X
C1/E9DD:	18         	CLC
C1/E9DE:	7D D0 74   	ADC $74D0,X
C1/E9E1:	8D 2B 7B   	STA $7B2B
C1/E9E4:	8D 24 7B   	STA $7B24
C1/E9E7:	7B         	TDC
C1/E9E8:	E2 20      	SEP #$20           ; 8-bit A
C1/E9EA:	60         	RTS

; Animation Script Op $42 ($C2)
; Unpause X animation thread types

C1/E9EB:	AE F6 7A   	LDX $7AF6          ; animation thread offset
C1/E9EE:	A7 5B      	LDA [$5B]          ; arg 1
C1/E9F0:	10 03      	BPL $E9F5          ; branch if bit7 unset [?]
C1/E9F2:	9C AC 60   	STZ $60AC          ; unpause BG1 animation threads

C1/E9F5:	29 40      	AND #$40           ; isolate bit6 flag [?]
C1/E9F7:	F0 03      	BEQ $E9FC          ; branch if unset ^
C1/E9F9:	9C AD 60   	STZ $60AD          ; unpause BG3 animation threads

C1/E9FC:	A7 5B      	LDA [$5B]          ; arg 1
C1/E9FE:	29 20      	AND #$20           ; isolate bit5 flag [?]
C1/EA00:	F0 02      	BEQ $EA04          ; branch if unset ^
C1/EA02:	64 99      	STZ $99            ; unpause sprite animation threads
C1/EA04:	60         	RTS

C1/EA05:	AE F6 7A   	LDX $7AF6
C1/EA08:	A7 5B      	LDA [$5B]
C1/EA0A:	9D D8 74   	STA $74D8,X
C1/EA0D:	20 09 FA   	JSR $FA09
C1/EA10:	C2 20      	REP #$20
C1/EA12:	BD D8 74   	LDA $74D8,X
C1/EA15:	29 FF 00   	AND #$00FF
C1/EA18:	85 22      	STA $22
C1/EA1A:	BD D9 74   	LDA $74D9,X
C1/EA1D:	18         	CLC
C1/EA1E:	65 22      	ADC $22
C1/EA20:	9D D9 74   	STA $74D9,X
C1/EA23:	C9 F0 00   	CMP #$00F0
C1/EA26:	B0 35      	BCS $EA5D
C1/EA28:	DD DC 74   	CMP $74DC,X
C1/EA2B:	90 34      	BCC $EA61
C1/EA2D:	A9 F0 00   	LDA #$00F0
C1/EA30:	9D DC 74   	STA $74DC,X
C1/EA33:	9E D9 74   	STZ $74D9,X
C1/EA36:	BD 3A 6A   	LDA $6A3A,X
C1/EA39:	18         	CLC
C1/EA3A:	7D CE 74   	ADC $74CE,X
C1/EA3D:	9D 3A 6A   	STA $6A3A,X
C1/EA40:	9E CE 74   	STZ $74CE,X
C1/EA43:	BD 3C 6A   	LDA $6A3C,X
C1/EA46:	18         	CLC
C1/EA47:	7D D0 74   	ADC $74D0,X
C1/EA4A:	9D 3C 6A   	STA $6A3C,X
C1/EA4D:	9E D0 74   	STZ $74D0,X
C1/EA50:	E2 20      	SEP #$20           ; 8-bit A
C1/EA52:	BD DB 74   	LDA $74DB,X
C1/EA55:	18         	CLC
C1/EA56:	69 18      	ADC #$18
C1/EA58:	9D DB 74   	STA $74DB,X
C1/EA5B:	C2 20      	REP #$20
C1/EA5D:	E6 5B      	INC $5B
C1/EA5F:	80 11      	BRA $EA72
C1/EA61:	A0 01 00   	LDY #$0001
C1/EA64:	B7 5B      	LDA [$5B],Y
C1/EA66:	29 FF 00   	AND #$00FF
C1/EA69:	85 22      	STA $22
C1/EA6B:	A5 5B      	LDA $5B
C1/EA6D:	38         	SEC
C1/EA6E:	E5 22      	SBC $22
C1/EA70:	85 5B      	STA $5B
C1/EA72:	7B         	TDC
C1/EA73:	E2 20      	SEP #$20           ; 8-bit A
C1/EA75:	60         	RTS

C1/EA76:	AE F6 7A   	LDX $7AF6
C1/EA79:	C2 20      	REP #$20
C1/EA7B:	BD EC 64   	LDA $64EC,X
C1/EA7E:	1A         	INC A
C1/EA7F:	85 5B      	STA $5B
C1/EA81:	7B         	TDC
C1/EA82:	E2 20      	SEP #$20           ; 8-bit A
C1/EA84:	60         	RTS

C1/EA85:	AE F6 7A   	LDX $7AF6
C1/EA88:	C2 20      	REP #$20
C1/EA8A:	A5 5B      	LDA $5B
C1/EA8C:	9D EC 64   	STA $64EC,X
C1/EA8F:	A7 5B      	LDA [$5B]
C1/EA91:	3A         	DEC A
C1/EA92:	85 5B      	STA $5B
C1/EA94:	7B         	TDC
C1/EA95:	E2 20      	SEP #$20           ; 8-bit A
C1/EA97:	60         	RTS

C1/EA98:	A7 5B      	LDA [$5B]
C1/EA9A:	8D 70 89   	STA $8970
C1/EA9D:	AE F6 7A   	LDX $7AF6
C1/EAA0:	60         	RTS

C1/EAA1:	A7 5B      	LDA [$5B]
C1/EAA3:	10 05      	BPL $EAAA
C1/EAA5:	29 20      	AND #$20
C1/EAA7:	8D A7 60   	STA $60A7
C1/EAAA:	A7 5B      	LDA [$5B]
C1/EAAC:	29 40      	AND #$40
C1/EAAE:	F0 07      	BEQ $EAB7
C1/EAB0:	A7 5B      	LDA [$5B]
C1/EAB2:	29 10      	AND #$10
C1/EAB4:	8D A8 60   	STA $60A8
C1/EAB7:	AE F6 7A   	LDX $7AF6
C1/EABA:	60         	RTS

C1/EABB:	86 1A      	STX $1A
C1/EABD:	7B         	TDC
C1/EABE:	A8         	TAY
C1/EABF:	A7 5B      	LDA [$5B]
C1/EAC1:	0A         	ASL A
C1/EAC2:	B0 06      	BCS $EACA
C1/EAC4:	C8         	INY
C1/EAC5:	C0 03 00   	CPY #$0003
C1/EAC8:	D0 F7      	BNE $EAC1
C1/EACA:	B1 1A      	LDA ($1A),Y
C1/EACC:	29 1F      	AND #$1F
C1/EACE:	85 10      	STA $10
C1/EAD0:	A7 5B      	LDA [$5B]
C1/EAD2:	29 10      	AND #$10
C1/EAD4:	F0 15      	BEQ $EAEB
C1/EAD6:	A7 5B      	LDA [$5B]
C1/EAD8:	29 0F      	AND #$0F
C1/EADA:	85 22      	STA $22
C1/EADC:	A5 10      	LDA $10
C1/EADE:	38         	SEC
C1/EADF:	E5 22      	SBC $22
C1/EAE1:	85 10      	STA $10
C1/EAE3:	29 E0      	AND #$E0
C1/EAE5:	F0 15      	BEQ $EAFC
C1/EAE7:	64 10      	STZ $10
C1/EAE9:	80 11      	BRA $EAFC
C1/EAEB:	A7 5B      	LDA [$5B]
C1/EAED:	29 0F      	AND #$0F
C1/EAEF:	18         	CLC
C1/EAF0:	65 10      	ADC $10
C1/EAF2:	85 10      	STA $10
C1/EAF4:	29 E0      	AND #$E0
C1/EAF6:	F0 04      	BEQ $EAFC
C1/EAF8:	A9 1F      	LDA #$1F
C1/EAFA:	85 10      	STA $10
C1/EAFC:	A7 5B      	LDA [$5B]
C1/EAFE:	29 E0      	AND #$E0
C1/EB00:	85 12      	STA $12
C1/EB02:	A7 5B      	LDA [$5B]
C1/EB04:	30 04      	BMI $EB0A
C1/EB06:	B2 1A      	LDA ($1A)
C1/EB08:	80 04      	BRA $EB0E
C1/EB0A:	A5 10      	LDA $10
C1/EB0C:	92 1A      	STA ($1A)
C1/EB0E:	85 14      	STA $14
C1/EB10:	A0 01 00   	LDY #$0001
C1/EB13:	A7 5B      	LDA [$5B]
C1/EB15:	29 40      	AND #$40
C1/EB17:	D0 04      	BNE $EB1D
C1/EB19:	B1 1A      	LDA ($1A),Y
C1/EB1B:	80 04      	BRA $EB21
C1/EB1D:	A5 10      	LDA $10
C1/EB1F:	91 1A      	STA ($1A),Y
C1/EB21:	85 16      	STA $16
C1/EB23:	C8         	INY
C1/EB24:	A7 5B      	LDA [$5B]
C1/EB26:	29 20      	AND #$20
C1/EB28:	D0 04      	BNE $EB2E
C1/EB2A:	B1 1A      	LDA ($1A),Y
C1/EB2C:	80 04      	BRA $EB32
C1/EB2E:	A5 10      	LDA $10
C1/EB30:	91 1A      	STA ($1A),Y
C1/EB32:	85 18      	STA $18
C1/EB34:	60         	RTS

C1/EB35:	64 15      	STZ $15
C1/EB37:	64 13      	STZ $13
C1/EB39:	C2 20      	REP #$20
C1/EB3B:	A6 10      	LDX $10
C1/EB3D:	20 6E FC   	JSR $FC6E
C1/EB40:	BD 00 7C   	LDA $7C00,X
C1/EB43:	20 00 FD   	JSR $FD00
C1/EB46:	9D 00 7E   	STA $7E00,X
C1/EB49:	E8         	INX
C1/EB4A:	E8         	INX
C1/EB4B:	C6 12      	DEC $12
C1/EB4D:	D0 F1      	BNE $EB40
C1/EB4F:	7B         	TDC
C1/EB50:	E2 20      	SEP #$20           ; 8-bit A
C1/EB52:	60         	RTS

C1/EB53:	64 15      	STZ $15
C1/EB55:	64 13      	STZ $13
C1/EB57:	C2 20      	REP #$20
C1/EB59:	A6 10      	LDX $10
C1/EB5B:	20 6E FC   	JSR $FC6E
C1/EB5E:	BD 00 7C   	LDA $7C00,X
C1/EB61:	20 99 FC   	JSR $FC99
C1/EB64:	9D 00 7E   	STA $7E00,X
C1/EB67:	E8         	INX
C1/EB68:	E8         	INX
C1/EB69:	C6 12      	DEC $12
C1/EB6B:	D0 F1      	BNE $EB5E
C1/EB6D:	7B         	TDC
C1/EB6E:	E2 20      	SEP #$20           ; 8-bit A
C1/EB70:	60         	RTS

C1/EB71:	86 1A      	STX $1A
C1/EB73:	7B         	TDC
C1/EB74:	A8         	TAY
C1/EB75:	92 1A      	STA ($1A)
C1/EB77:	C8         	INY
C1/EB78:	91 1A      	STA ($1A),Y
C1/EB7A:	C8         	INY
C1/EB7B:	91 1A      	STA ($1A),Y
C1/EB7D:	64 14      	STZ $14
C1/EB7F:	64 16      	STZ $16
C1/EB81:	64 18      	STZ $18
C1/EB83:	A7 5B      	LDA [$5B]
C1/EB85:	29 1F      	AND #$1F
C1/EB87:	85 10      	STA $10
C1/EB89:	A7 5B      	LDA [$5B]
C1/EB8B:	10 06      	BPL $EB93
C1/EB8D:	A5 10      	LDA $10
C1/EB8F:	85 14      	STA $14
C1/EB91:	92 1A      	STA ($1A)
C1/EB93:	A7 5B      	LDA [$5B]
C1/EB95:	29 40      	AND #$40
C1/EB97:	F0 09      	BEQ $EBA2
C1/EB99:	A5 10      	LDA $10
C1/EB9B:	85 16      	STA $16
C1/EB9D:	A0 01 00   	LDY #$0001
C1/EBA0:	91 1A      	STA ($1A),Y
C1/EBA2:	A7 5B      	LDA [$5B]
C1/EBA4:	29 20      	AND #$20
C1/EBA6:	F0 09      	BEQ $EBB1
C1/EBA8:	A5 10      	LDA $10
C1/EBAA:	85 18      	STA $18
C1/EBAC:	A0 02 00   	LDY #$0002
C1/EBAF:	91 1A      	STA ($1A),Y
C1/EBB1:	60         	RTS

C1/EBB2:	A2 C2 88   	LDX #$88C2
C1/EBB5:	20 BB EA   	JSR $EABB
C1/EBB8:	4C CA EB   	JMP $EBCA

C1/EBBB:	A2 C2 88   	LDX #$88C2
C1/EBBE:	20 BB EA   	JSR $EABB
C1/EBC1:	4C E0 EB   	JMP $EBE0

C1/EBC4:	A2 C2 88   	LDX #$88C2
C1/EBC7:	20 71 EB   	JSR $EB71
C1/EBCA:	A2 A0 00   	LDX #$00A0
C1/EBCD:	86 10      	STX $10
C1/EBCF:	A9 30      	LDA #$30
C1/EBD1:	85 12      	STA $12
C1/EBD3:	20 35 EB   	JSR $EB35
C1/EBD6:	AE F6 7A   	LDX $7AF6
C1/EBD9:	60         	RTS

C1/EBDA:	A2 C2 88   	LDX #$88C2
C1/EBDD:	20 71 EB   	JSR $EB71
C1/EBE0:	A2 A0 00   	LDX #$00A0
C1/EBE3:	86 10      	STX $10
C1/EBE5:	A9 30      	LDA #$30
C1/EBE7:	85 12      	STA $12
C1/EBE9:	20 53 EB   	JSR $EB53
C1/EBEC:	AE F6 7A   	LDX $7AF6
C1/EBEF:	60         	RTS

C1/EBF0:	A2 C5 88   	LDX #$88C5
C1/EBF3:	20 BB EA   	JSR $EABB
C1/EBF6:	4C 08 EC   	JMP $EC08

C1/EBF9:	A2 C5 88   	LDX #$88C5
C1/EBFC:	20 BB EA   	JSR $EABB
C1/EBFF:	4C 2A EC   	JMP $EC2A

C1/EC02:	A2 C5 88   	LDX #$88C5
C1/EC05:	20 71 EB   	JSR $EB71
C1/EC08:	A2 60 00   	LDX #$0060
C1/EC0B:	86 10      	STX $10
C1/EC0D:	A9 10      	LDA #$10
C1/EC0F:	85 12      	STA $12
C1/EC11:	20 35 EB   	JSR $EB35
C1/EC14:	A2 80 00   	LDX #$0080
C1/EC17:	86 10      	STX $10
C1/EC19:	A9 08      	LDA #$08
C1/EC1B:	85 12      	STA $12
C1/EC1D:	20 35 EB   	JSR $EB35
C1/EC20:	AE F6 7A   	LDX $7AF6
C1/EC23:	60         	RTS

C1/EC24:	A2 C5 88   	LDX #$88C5
C1/EC27:	20 71 EB   	JSR $EB71
C1/EC2A:	A2 60 00   	LDX #$0060
C1/EC2D:	86 10      	STX $10
C1/EC2F:	A9 10      	LDA #$10
C1/EC31:	85 12      	STA $12
C1/EC33:	20 53 EB   	JSR $EB53
C1/EC36:	A2 80 00   	LDX #$0080
C1/EC39:	86 10      	STX $10
C1/EC3B:	A9 08      	LDA #$08
C1/EC3D:	85 12      	STA $12
C1/EC3F:	20 53 EB   	JSR $EB53
C1/EC42:	AE F6 7A   	LDX $7AF6
C1/EC45:	60         	RTS

C1/EC46:	A2 BF 88   	LDX #$88BF
C1/EC49:	20 BB EA   	JSR $EABB
C1/EC4C:	4C 74 EC   	JMP $EC74

C1/EC4F:	A2 BF 88   	LDX #$88BF
C1/EC52:	20 BB EA   	JSR $EABB
C1/EC55:	4C 5E EC   	JMP $EC5E

C1/EC58:	A2 BF 88   	LDX #$88BF
C1/EC5B:	20 71 EB   	JSR $EB71
C1/EC5E:	A2 20 00   	LDX #$0020
C1/EC61:	86 10      	STX $10
C1/EC63:	A9 04      	LDA #$04
C1/EC65:	85 12      	STA $12
C1/EC67:	20 35 EB   	JSR $EB35
C1/EC6A:	AE F6 7A   	LDX $7AF6
C1/EC6D:	60         	RTS

C1/EC6E:	A2 BF 88   	LDX #$88BF
C1/EC71:	20 71 EB   	JSR $EB71
C1/EC74:	A2 20 00   	LDX #$0020
C1/EC77:	86 10      	STX $10
C1/EC79:	A9 04      	LDA #$04
C1/EC7B:	85 12      	STA $12
C1/EC7D:	20 53 EB   	JSR $EB53
C1/EC80:	AE F6 7A   	LDX $7AF6
C1/EC83:	60         	RTS

C1/EC84:	A2 C8 88   	LDX #$88C8
C1/EC87:	20 BB EA   	JSR $EABB
C1/EC8A:	4C 9C EC   	JMP $EC9C

C1/EC8D:	A2 C8 88   	LDX #$88C8
C1/EC90:	20 BB EA   	JSR $EABB
C1/EC93:	4C B2 EC   	JMP $ECB2

C1/EC96:	A2 C8 88   	LDX #$88C8
C1/EC99:	20 71 EB   	JSR $EB71
C1/EC9C:	A2 60 01   	LDX #$0160
C1/EC9F:	86 10      	STX $10
C1/ECA1:	A9 10      	LDA #$10
C1/ECA3:	85 12      	STA $12
C1/ECA5:	20 35 EB   	JSR $EB35
C1/ECA8:	AE F6 7A   	LDX $7AF6
C1/ECAB:	60         	RTS

C1/ECAC:	A2 C8 88   	LDX #$88C8
C1/ECAF:	20 71 EB   	JSR $EB71
C1/ECB2:	A2 60 01   	LDX #$0160
C1/ECB5:	86 10      	STX $10
C1/ECB7:	A9 10      	LDA #$10
C1/ECB9:	85 12      	STA $12
C1/ECBB:	20 53 EB   	JSR $EB53
C1/ECBE:	AE F6 7A   	LDX $7AF6
C1/ECC1:	60         	RTS

C1/ECC2:	A2 CB 88   	LDX #$88CB
C1/ECC5:	20 BB EA   	JSR $EABB
C1/ECC8:	4C F0 EC   	JMP $ECF0

C1/ECCB:	A2 CB 88   	LDX #$88CB
C1/ECCE:	20 BB EA   	JSR $EABB
C1/ECD1:	4C DA EC   	JMP $ECDA

C1/ECD4:	A2 CB 88   	LDX #$88CB
C1/ECD7:	20 71 EB   	JSR $EB71
C1/ECDA:	A9 30      	LDA #$30
C1/ECDC:	85 12      	STA $12
C1/ECDE:	A2 00 01   	LDX #$0100
C1/ECE1:	86 10      	STX $10
C1/ECE3:	20 35 EB   	JSR $EB35
C1/ECE6:	AE F6 7A   	LDX $7AF6
C1/ECE9:	60         	RTS

C1/ECEA:	A2 CB 88   	LDX #$88CB
C1/ECED:	20 71 EB   	JSR $EB71
C1/ECF0:	A9 30      	LDA #$30
C1/ECF2:	85 12      	STA $12
C1/ECF4:	A2 00 01   	LDX #$0100
C1/ECF7:	86 10      	STX $10
C1/ECF9:	20 53 EB   	JSR $EB53
C1/ECFC:	AE F6 7A   	LDX $7AF6
C1/ECFF:	60         	RTS

C1/ED00:	A2 CE 88   	LDX #$88CE
C1/ED03:	20 BB EA   	JSR $EABB
C1/ED06:	4C 18 ED   	JMP $ED18

C1/ED09:	A2 CE 88   	LDX #$88CE
C1/ED0C:	20 BB EA   	JSR $EABB
C1/ED0F:	4C 52 ED   	JMP $ED52

C1/ED12:	A2 CE 88   	LDX #$88CE
C1/ED15:	20 71 EB   	JSR $EB71
C1/ED18:	A9 10      	LDA #$10
C1/ED1A:	85 12      	STA $12
C1/ED1C:	A2 80 01   	LDX #$0180
C1/ED1F:	86 10      	STX $10
C1/ED21:	20 35 EB   	JSR $EB35
C1/ED24:	A9 10      	LDA #$10
C1/ED26:	85 12      	STA $12
C1/ED28:	A2 A0 01   	LDX #$01A0
C1/ED2B:	86 10      	STX $10
C1/ED2D:	20 35 EB   	JSR $EB35
C1/ED30:	A9 10      	LDA #$10
C1/ED32:	85 12      	STA $12
C1/ED34:	A2 C0 01   	LDX #$01C0
C1/ED37:	86 10      	STX $10
C1/ED39:	20 35 EB   	JSR $EB35
C1/ED3C:	A9 10      	LDA #$10
C1/ED3E:	85 12      	STA $12
C1/ED40:	A2 E0 01   	LDX #$01E0
C1/ED43:	86 10      	STX $10
C1/ED45:	20 35 EB   	JSR $EB35
C1/ED48:	AE F6 7A   	LDX $7AF6
C1/ED4B:	60         	RTS

C1/ED4C:	A2 CE 88   	LDX #$88CE
C1/ED4F:	20 71 EB   	JSR $EB71
C1/ED52:	A9 0C      	LDA #$0C
C1/ED54:	85 12      	STA $12
C1/ED56:	A2 80 01   	LDX #$0180
C1/ED59:	86 10      	STX $10
C1/ED5B:	20 53 EB   	JSR $EB53
C1/ED5E:	A9 0C      	LDA #$0C
C1/ED60:	85 12      	STA $12
C1/ED62:	A2 A0 01   	LDX #$01A0
C1/ED65:	86 10      	STX $10
C1/ED67:	20 53 EB   	JSR $EB53
C1/ED6A:	A9 0C      	LDA #$0C
C1/ED6C:	85 12      	STA $12
C1/ED6E:	A2 C0 01   	LDX #$01C0
C1/ED71:	86 10      	STX $10
C1/ED73:	20 53 EB   	JSR $EB53
C1/ED76:	A9 0C      	LDA #$0C
C1/ED78:	85 12      	STA $12
C1/ED7A:	A2 E0 01   	LDX #$01E0
C1/ED7D:	86 10      	STX $10
C1/ED7F:	20 53 EB   	JSR $EB53
C1/ED82:	AE F6 7A   	LDX $7AF6
C1/ED85:	60         	RTS

C1/ED86:	A7 5B      	LDA [$5B]
C1/ED88:	29 04      	AND #$04
C1/ED8A:	F0 4C      	BEQ $EDD8
C1/ED8C:	A7 5B      	LDA [$5B]
C1/ED8E:	10 21      	BPL $EDB1
C1/ED90:	AD 96 60   	LDA $6096
C1/ED93:	85 24      	STA $24
C1/ED95:	AD 9A 60   	LDA $609A
C1/ED98:	85 14      	STA $14
C1/ED9A:	AD 98 60   	LDA $6098
C1/ED9D:	85 16      	STA $16
C1/ED9F:	A2 B2 63   	LDX #$63B2
C1/EDA2:	86 10      	STX $10
C1/EDA4:	20 34 EF   	JSR $EF34
C1/EDA7:	AD 98 60   	LDA $6098
C1/EDAA:	18         	CLC
C1/EDAB:	6D 9A 60   	ADC $609A
C1/EDAE:	8D 98 60   	STA $6098
C1/EDB1:	A7 5B      	LDA [$5B]
C1/EDB3:	29 40      	AND #$40
C1/EDB5:	F0 21      	BEQ $EDD8
C1/EDB7:	AD 95 60   	LDA $6095
C1/EDBA:	85 24      	STA $24
C1/EDBC:	AD 99 60   	LDA $6099
C1/EDBF:	85 14      	STA $14
C1/EDC1:	AD 97 60   	LDA $6097
C1/EDC4:	85 16      	STA $16
C1/EDC6:	A2 B0 63   	LDX #$63B0
C1/EDC9:	86 10      	STX $10
C1/EDCB:	20 34 EF   	JSR $EF34
C1/EDCE:	AD 97 60   	LDA $6097
C1/EDD1:	18         	CLC
C1/EDD2:	6D 99 60   	ADC $6099
C1/EDD5:	8D 97 60   	STA $6097
C1/EDD8:	A7 5B      	LDA [$5B]
C1/EDDA:	29 02      	AND #$02
C1/EDDC:	F0 4C      	BEQ $EE2A
C1/EDDE:	A7 5B      	LDA [$5B]
C1/EDE0:	10 21      	BPL $EE03
C1/EDE2:	AD 9C 60   	LDA $609C
C1/EDE5:	85 24      	STA $24
C1/EDE7:	AD A0 60   	LDA $60A0
C1/EDEA:	85 14      	STA $14
C1/EDEC:	AD 9E 60   	LDA $609E
C1/EDEF:	85 16      	STA $16
C1/EDF1:	A2 32 63   	LDX #$6332
C1/EDF4:	86 10      	STX $10
C1/EDF6:	20 34 EF   	JSR $EF34
C1/EDF9:	AD 9E 60   	LDA $609E
C1/EDFC:	18         	CLC
C1/EDFD:	6D A0 60   	ADC $60A0
C1/EE00:	8D 9E 60   	STA $609E
C1/EE03:	A7 5B      	LDA [$5B]
C1/EE05:	29 40      	AND #$40
C1/EE07:	F0 21      	BEQ $EE2A
C1/EE09:	AD 9B 60   	LDA $609B
C1/EE0C:	85 24      	STA $24
C1/EE0E:	AD 9F 60   	LDA $609F
C1/EE11:	85 14      	STA $14
C1/EE13:	AD 9D 60   	LDA $609D
C1/EE16:	85 16      	STA $16
C1/EE18:	A2 30 63   	LDX #$6330
C1/EE1B:	86 10      	STX $10
C1/EE1D:	20 34 EF   	JSR $EF34
C1/EE20:	AD 9D 60   	LDA $609D
C1/EE23:	18         	CLC
C1/EE24:	6D 9F 60   	ADC $609F
C1/EE27:	8D 9D 60   	STA $609D
C1/EE2A:	A7 5B      	LDA [$5B]
C1/EE2C:	29 01      	AND #$01
C1/EE2E:	F0 68      	BEQ $EE98
C1/EE30:	A7 5B      	LDA [$5B]
C1/EE32:	10 2F      	BPL $EE63
C1/EE34:	AD A2 60   	LDA $60A2
C1/EE37:	85 24      	STA $24
C1/EE39:	AD A6 60   	LDA $60A6
C1/EE3C:	85 14      	STA $14
C1/EE3E:	AD A4 60   	LDA $60A4
C1/EE41:	85 16      	STA $16
C1/EE43:	A2 F7 4A   	LDX #$4AF7
C1/EE46:	86 10      	STX $10
C1/EE48:	C2 20      	REP #$20
C1/EE4A:	AD 24 7B   	LDA $7B24
C1/EE4D:	38         	SEC
C1/EE4E:	ED 2B 7B   	SBC $7B2B
C1/EE51:	85 18      	STA $18
C1/EE53:	7B         	TDC
C1/EE54:	E2 20      	SEP #$20           ; 8-bit A
C1/EE56:	20 6A EF   	JSR $EF6A
C1/EE59:	AD A4 60   	LDA $60A4
C1/EE5C:	18         	CLC
C1/EE5D:	6D A6 60   	ADC $60A6
C1/EE60:	8D A4 60   	STA $60A4
C1/EE63:	A7 5B      	LDA [$5B]
C1/EE65:	29 40      	AND #$40
C1/EE67:	F0 2F      	BEQ $EE98
C1/EE69:	AD A1 60   	LDA $60A1
C1/EE6C:	85 24      	STA $24
C1/EE6E:	AD A5 60   	LDA $60A5
C1/EE71:	85 14      	STA $14
C1/EE73:	AD A3 60   	LDA $60A3
C1/EE76:	85 16      	STA $16
C1/EE78:	A2 F5 4A   	LDX #$4AF5
C1/EE7B:	86 10      	STX $10
C1/EE7D:	C2 20      	REP #$20
C1/EE7F:	AD 22 7B   	LDA $7B22
C1/EE82:	38         	SEC
C1/EE83:	ED 29 7B   	SBC $7B29
C1/EE86:	85 18      	STA $18
C1/EE88:	7B         	TDC
C1/EE89:	E2 20      	SEP #$20           ; 8-bit A
C1/EE8B:	20 6A EF   	JSR $EF6A
C1/EE8E:	AD A3 60   	LDA $60A3
C1/EE91:	18         	CLC
C1/EE92:	6D A5 60   	ADC $60A5
C1/EE95:	8D A3 60   	STA $60A3
C1/EE98:	AE F6 7A   	LDX $7AF6
C1/EE9B:	60         	RTS

C1/EE9C:	A0 01 00   	LDY #$0001
C1/EE9F:	A7 5B      	LDA [$5B]
C1/EEA1:	10 24      	BPL $EEC7
C1/EEA3:	B7 5B      	LDA [$5B],Y
C1/EEA5:	10 0C      	BPL $EEB3
C1/EEA7:	29 3F      	AND #$3F
C1/EEA9:	8D 96 60   	STA $6096
C1/EEAC:	A7 5B      	LDA [$5B]
C1/EEAE:	29 1F      	AND #$1F
C1/EEB0:	8D 9A 60   	STA $609A
C1/EEB3:	B7 5B      	LDA [$5B],Y
C1/EEB5:	29 40      	AND #$40
C1/EEB7:	F0 0E      	BEQ $EEC7
C1/EEB9:	B7 5B      	LDA [$5B],Y
C1/EEBB:	29 3F      	AND #$3F
C1/EEBD:	8D 95 60   	STA $6095
C1/EEC0:	A7 5B      	LDA [$5B]
C1/EEC2:	29 1F      	AND #$1F
C1/EEC4:	8D 99 60   	STA $6099
C1/EEC7:	A7 5B      	LDA [$5B]
C1/EEC9:	29 40      	AND #$40
C1/EECB:	F0 24      	BEQ $EEF1
C1/EECD:	B7 5B      	LDA [$5B],Y
C1/EECF:	10 0C      	BPL $EEDD
C1/EED1:	29 3F      	AND #$3F
C1/EED3:	8D 9C 60   	STA $609C
C1/EED6:	A7 5B      	LDA [$5B]
C1/EED8:	29 1F      	AND #$1F
C1/EEDA:	8D A0 60   	STA $60A0
C1/EEDD:	B7 5B      	LDA [$5B],Y
C1/EEDF:	29 40      	AND #$40
C1/EEE1:	F0 0E      	BEQ $EEF1
C1/EEE3:	B7 5B      	LDA [$5B],Y
C1/EEE5:	29 3F      	AND #$3F
C1/EEE7:	8D 9B 60   	STA $609B
C1/EEEA:	A7 5B      	LDA [$5B]
C1/EEEC:	29 1F      	AND #$1F
C1/EEEE:	8D 9F 60   	STA $609F
C1/EEF1:	A7 5B      	LDA [$5B]
C1/EEF3:	29 20      	AND #$20
C1/EEF5:	F0 24      	BEQ $EF1B
C1/EEF7:	B7 5B      	LDA [$5B],Y
C1/EEF9:	10 0C      	BPL $EF07
C1/EEFB:	29 3F      	AND #$3F
C1/EEFD:	8D A2 60   	STA $60A2
C1/EF00:	A7 5B      	LDA [$5B]
C1/EF02:	29 1F      	AND #$1F
C1/EF04:	8D A6 60   	STA $60A6
C1/EF07:	B7 5B      	LDA [$5B],Y
C1/EF09:	29 40      	AND #$40
C1/EF0B:	F0 0E      	BEQ $EF1B
C1/EF0D:	B7 5B      	LDA [$5B],Y
C1/EF0F:	29 3F      	AND #$3F
C1/EF11:	8D A1 60   	STA $60A1
C1/EF14:	A7 5B      	LDA [$5B]
C1/EF16:	29 1F      	AND #$1F
C1/EF18:	8D A5 60   	STA $60A5
C1/EF1B:	A4 5B      	LDY $5B
C1/EF1D:	C8         	INY
C1/EF1E:	84 5B      	STY $5B
C1/EF20:	AE F6 7A   	LDX $7AF6
C1/EF23:	60         	RTS

C1/EF24:	BFE7
C1/EF26:	FFE7
C1/EF28:	3FE8
C1/EF2A:	7FE8
C1/EF2C:	BFE8
C1/EF2E:	FFE8
C1/EF30:	3FE9
C1/EF32:	7FE9

C1/EF34:	A5 24      	LDA $24
C1/EF36:	29 0E      	AND #$0E
C1/EF38:	AA         	TAX
C1/EF39:	C2 20      	REP #$20
C1/EF3B:	BF 24 EF C1	LDA $C1EF24,X    ; Data
C1/EF3F:	85 22      	STA $22
C1/EF41:	A5 16      	LDA $16
C1/EF43:	29 FF 00   	AND #$00FF
C1/EF46:	0A         	ASL A
C1/EF47:	29 3F 00   	AND #$003F
C1/EF4A:	A8         	TAY
C1/EF4B:	A9 20 00   	LDA #$0020
C1/EF4E:	85 12      	STA $12
C1/EF50:	A6 10      	LDX $10
C1/EF52:	B1 22      	LDA ($22),Y
C1/EF54:	9D 00 00   	STA $0000,X
C1/EF57:	E8         	INX
C1/EF58:	E8         	INX
C1/EF59:	E8         	INX
C1/EF5A:	E8         	INX
C1/EF5B:	C8         	INY
C1/EF5C:	C8         	INY
C1/EF5D:	98         	TYA
C1/EF5E:	29 3F 00   	AND #$003F
C1/EF61:	A8         	TAY
C1/EF62:	C6 12      	DEC $12
C1/EF64:	D0 EC      	BNE $EF52
C1/EF66:	7B         	TDC
C1/EF67:	E2 20      	SEP #$20           ; 8-bit A
C1/EF69:	60         	RTS

C1/EF6A:	A5 24      	LDA $24
C1/EF6C:	29 0E      	AND #$0E
C1/EF6E:	AA         	TAX
C1/EF6F:	C2 20      	REP #$20
C1/EF71:	BF 24 EF C1	LDA $C1EF24,X    ; Data
C1/EF75:	85 22      	STA $22
C1/EF77:	A5 16      	LDA $16
C1/EF79:	29 FF 00   	AND #$00FF
C1/EF7C:	0A         	ASL A
C1/EF7D:	29 3F 00   	AND #$003F
C1/EF80:	A8         	TAY
C1/EF81:	A9 20 00   	LDA #$0020
C1/EF84:	85 12      	STA $12
C1/EF86:	A6 10      	LDX $10
C1/EF88:	B1 22      	LDA ($22),Y
C1/EF8A:	18         	CLC
C1/EF8B:	65 18      	ADC $18
C1/EF8D:	9D 00 00   	STA $0000,X
C1/EF90:	E8         	INX
C1/EF91:	E8         	INX
C1/EF92:	E8         	INX
C1/EF93:	E8         	INX
C1/EF94:	C8         	INY
C1/EF95:	C8         	INY
C1/EF96:	98         	TYA
C1/EF97:	29 3F 00   	AND #$003F
C1/EF9A:	A8         	TAY
C1/EF9B:	C6 12      	DEC $12
C1/EF9D:	D0 E9      	BNE $EF88
C1/EF9F:	7B         	TDC
C1/EFA0:	E2 20      	SEP #$20           ; 8-bit A
C1/EFA2:	60         	RTS

C1/EFA3:	AE F6 7A   	LDX $7AF6
C1/EFA6:	A7 5B      	LDA [$5B]
C1/EFA8:	29 C0      	AND #$C0
C1/EFAA:	D0 08      	BNE $EFB4
C1/EFAC:	A7 5B      	LDA [$5B]
C1/EFAE:	29 3F      	AND #$3F
C1/EFB0:	8D 0C 80   	STA $800C
C1/EFB3:	60         	RTS

C1/EFB4:	C9 40      	CMP #$40
C1/EFB6:	D0 08      	BNE $EFC0
C1/EFB8:	A7 5B      	LDA [$5B]
C1/EFBA:	29 3F      	AND #$3F
C1/EFBC:	8D 0D 80   	STA $800D
C1/EFBF:	60         	RTS

C1/EFC0:	A7 5B      	LDA [$5B]
C1/EFC2:	29 3F      	AND #$3F
C1/EFC4:	8D 0E 80   	STA $800E
C1/EFC7:	60         	RTS

C1/EFC8:	AE F6 7A   	LDX $7AF6
C1/EFCB:	A7 5B      	LDA [$5B]
C1/EFCD:	85 22      	STA $22
C1/EFCF:	A0 01 00   	LDY #$0001
C1/EFD2:	B7 5B      	LDA [$5B],Y
C1/EFD4:	85 24      	STA $24
C1/EFD6:	BD 38 6A   	LDA $6A38,X
C1/EFD9:	30 42      	BMI $F01D
C1/EFDB:	A8         	TAY
C1/EFDC:	B9 10 7B   	LDA $7B10,Y
C1/EFDF:	29 01      	AND #$01
C1/EFE1:	F0 07      	BEQ $EFEA
C1/EFE3:	A5 22      	LDA $22
C1/EFE5:	49 FF      	EOR #$FF
C1/EFE7:	1A         	INC A
C1/EFE8:	85 22      	STA $22
C1/EFEA:	A5 22      	LDA $22
C1/EFEC:	10 07      	BPL $EFF5
C1/EFEE:	AD 14 96   	LDA $9614
C1/EFF1:	C9 21      	CMP #$21
C1/EFF3:	90 0E      	BCC $F003
C1/EFF5:	AD 14 96   	LDA $9614
C1/EFF8:	18         	CLC
C1/EFF9:	65 22      	ADC $22
C1/EFFB:	CD 17 96   	CMP $9617
C1/EFFE:	90 03      	BCC $F003
C1/F000:	AD 17 96   	LDA $9617
C1/F003:	8D 14 96   	STA $9614
C1/F006:	AD 15 96   	LDA $9615
C1/F009:	18         	CLC
C1/F00A:	65 24      	ADC $24
C1/F00C:	CD 18 96   	CMP $9618
C1/F00F:	90 03      	BCC $F014
C1/F011:	AD 18 96   	LDA $9618
C1/F014:	8D 15 96   	STA $9615
C1/F017:	A4 5B      	LDY $5B
C1/F019:	C8         	INY
C1/F01A:	84 5B      	STY $5B
C1/F01C:	60         	RTS

C1/F01D:	29 7F      	AND #$7F
C1/F01F:	38         	SEC
C1/F020:	E9 04      	SBC #$04
C1/F022:	0A         	ASL A
C1/F023:	A8         	TAY
C1/F024:	B9 F3 80   	LDA $80F3,Y
C1/F027:	59 7E 61   	EOR $617E,Y
C1/F02A:	49 01      	EOR #$01
C1/F02C:	4C DF EF   	JMP $EFDF

C1/F02F:	AE F6 7A   	LDX $7AF6
C1/F032:	BD 82 6F   	LDA $6F82,X
C1/F035:	8D 14 96   	STA $9614
C1/F038:	BD 84 6F   	LDA $6F84,X
C1/F03B:	8D 15 96   	STA $9615
C1/F03E:	A4 5B      	LDY $5B
C1/F040:	88         	DEY
C1/F041:	84 5B      	STY $5B
C1/F043:	60         	RTS

C1/F044:	20 A1 E7   	JSR $E7A1          ; get attacker data offset in Y
C1/F047:	C2 20      	REP #$20
C1/F049:	B9 B7 61   	LDA $61B7,Y
C1/F04C:	18         	CLC
C1/F04D:	79 C5 61   	ADC $61C5,Y
C1/F050:	18         	CLC
C1/F051:	79 D4 61   	ADC $61D4,Y
C1/F054:	18         	CLC
C1/F055:	69 08 00   	ADC #$0008
C1/F058:	85 22      	STA $22
C1/F05A:	B9 B9 61   	LDA $61B9,Y
C1/F05D:	18         	CLC
C1/F05E:	79 C7 61   	ADC $61C7,Y
C1/F061:	85 24      	STA $24
C1/F063:	C6 5B      	DEC $5B
C1/F065:	7B         	TDC
C1/F066:	E2 20      	SEP #$20           ; 8-bit A
C1/F068:	A5 22      	LDA $22
C1/F06A:	8D 14 96   	STA $9614
C1/F06D:	A5 24      	LDA $24
C1/F06F:	8D 15 96   	STA $9615
C1/F072:	60         	RTS

C1/F073:	AE F6 7A   	LDX $7AF6
C1/F076:	BD 7E 6F   	LDA $6F7E,X
C1/F079:	8D 14 96   	STA $9614
C1/F07C:	BD 80 6F   	LDA $6F80,X
C1/F07F:	8D 15 96   	STA $9615
C1/F082:	A4 5B      	LDY $5B
C1/F084:	88         	DEY
C1/F085:	84 5B      	STY $5B
C1/F087:	60         	RTS

C1/F088:	20 C7 1B   	JSR $1BC7
C1/F08B:	A4 5B      	LDY $5B
C1/F08D:	88         	DEY
C1/F08E:	84 5B      	STY $5B
C1/F090:	AE F6 7A   	LDX $7AF6
C1/F093:	60         	RTS

C1/F094:	A7 5B      	LDA [$5B]
C1/F096:	85 22      	STA $22
C1/F098:	A0 01 00   	LDY #$0001
C1/F09B:	B7 5B      	LDA [$5B],Y
C1/F09D:	85 24      	STA $24
C1/F09F:	C8         	INY
C1/F0A0:	B7 5B      	LDA [$5B],Y
C1/F0A2:	85 26      	STA $26
C1/F0A4:	A4 5B      	LDY $5B
C1/F0A6:	C8         	INY
C1/F0A7:	C8         	INY
C1/F0A8:	84 5B      	STY $5B
C1/F0AA:	A5 22      	LDA $22
C1/F0AC:	10 07      	BPL $F0B5
C1/F0AE:	AD 14 96   	LDA $9614
C1/F0B1:	C9 21      	CMP #$21
C1/F0B3:	90 0E      	BCC $F0C3
C1/F0B5:	AD 14 96   	LDA $9614
C1/F0B8:	18         	CLC
C1/F0B9:	65 22      	ADC $22
C1/F0BB:	CD 17 96   	CMP $9617
C1/F0BE:	90 03      	BCC $F0C3
C1/F0C0:	AD 17 96   	LDA $9617
C1/F0C3:	8D 14 96   	STA $9614
C1/F0C6:	AD 15 96   	LDA $9615
C1/F0C9:	18         	CLC
C1/F0CA:	65 24      	ADC $24
C1/F0CC:	CD 18 96   	CMP $9618
C1/F0CF:	90 03      	BCC $F0D4
C1/F0D1:	AD 18 96   	LDA $9618
C1/F0D4:	8D 15 96   	STA $9615
C1/F0D7:	AD 13 96   	LDA $9613
C1/F0DA:	18         	CLC
C1/F0DB:	65 26      	ADC $26
C1/F0DD:	CD 16 96   	CMP $9616
C1/F0E0:	90 03      	BCC $F0E5
C1/F0E2:	AD 16 96   	LDA $9616
C1/F0E5:	8D 13 96   	STA $9613
C1/F0E8:	AE F6 7A   	LDX $7AF6
C1/F0EB:	60         	RTS

C1/F0EC:	A7 5B      	LDA [$5B]
C1/F0EE:	8D 14 96   	STA $9614
C1/F0F1:	A0 01 00   	LDY #$0001
C1/F0F4:	B7 5B      	LDA [$5B],Y
C1/F0F6:	8D 15 96   	STA $9615
C1/F0F9:	C8         	INY
C1/F0FA:	B7 5B      	LDA [$5B],Y
C1/F0FC:	8D 13 96   	STA $9613
C1/F0FF:	C8         	INY
C1/F100:	B7 5B      	LDA [$5B],Y
C1/F102:	8D 17 96   	STA $9617
C1/F105:	C8         	INY
C1/F106:	B7 5B      	LDA [$5B],Y
C1/F108:	8D 18 96   	STA $9618
C1/F10B:	C8         	INY
C1/F10C:	B7 5B      	LDA [$5B],Y
C1/F10E:	8D 16 96   	STA $9616
C1/F111:	C8         	INY
C1/F112:	B7 5B      	LDA [$5B],Y
C1/F114:	8D 19 96   	STA $9619
C1/F117:	AE F6 7A   	LDX $7AF6
C1/F11A:	BD 38 6A   	LDA $6A38,X
C1/F11D:	10 11      	BPL $F130
C1/F11F:	29 7F      	AND #$7F
C1/F121:	38         	SEC
C1/F122:	E9 04      	SBC #$04
C1/F124:	0A         	ASL A
C1/F125:	A8         	TAY
C1/F126:	B9 F3 80   	LDA $80F3,Y
C1/F129:	59 7E 61   	EOR $617E,Y
C1/F12C:	49 01      	EOR #$01
C1/F12E:	80 04      	BRA $F134
C1/F130:	A8         	TAY
C1/F131:	B9 10 7B   	LDA $7B10,Y
C1/F134:	29 01      	AND #$01
C1/F136:	F0 04      	BEQ $F13C
C1/F138:	A9 C0      	LDA #$C0
C1/F13A:	80 02      	BRA $F13E
C1/F13C:	A9 40      	LDA #$40
C1/F13E:	8D 1A 96   	STA $961A
C1/F141:	C2 20      	REP #$20
C1/F143:	A5 5B      	LDA $5B
C1/F145:	18         	CLC
C1/F146:	69 06 00   	ADC #$0006
C1/F149:	85 5B      	STA $5B
C1/F14B:	7B         	TDC
C1/F14C:	E2 20      	SEP #$20           ; 8-bit A
C1/F14E:	AE F6 7A   	LDX $7AF6
C1/F151:	60         	RTS

C1/F152:	DA         	PHX
C1/F153:	06 22      	ASL $22
C1/F155:	64 23      	STZ $23
C1/F157:	A5 22      	LDA $22
C1/F159:	AA         	TAX
C1/F15A:	64 25      	STZ $25
C1/F15C:	C2 20      	REP #$20
C1/F15E:	A5 28      	LDA $28
C1/F160:	29 F0 00   	AND #$00F0
C1/F163:	0A         	ASL A
C1/F164:	85 28      	STA $28
C1/F166:	8A         	TXA
C1/F167:	18         	CLC
C1/F168:	65 28      	ADC $28
C1/F16A:	AA         	TAX
C1/F16B:	C6 24      	DEC $24
C1/F16D:	BD 00 7E   	LDA $7E00,X
C1/F170:	48         	PHA
C1/F171:	BD 00 7C   	LDA $7C00,X
C1/F174:	48         	PHA
C1/F175:	BD 02 7E   	LDA $7E02,X
C1/F178:	9D 00 7E   	STA $7E00,X
C1/F17B:	BD 02 7C   	LDA $7C02,X
C1/F17E:	9D 00 7C   	STA $7C00,X
C1/F181:	E8         	INX
C1/F182:	E8         	INX
C1/F183:	C6 24      	DEC $24
C1/F185:	D0 EE      	BNE $F175
C1/F187:	68         	PLA
C1/F188:	9D 00 7C   	STA $7C00,X
C1/F18B:	68         	PLA
C1/F18C:	9D 00 7E   	STA $7E00,X
C1/F18F:	7B         	TDC
C1/F190:	E2 20      	SEP #$20           ; 8-bit A
C1/F192:	FA         	PLX
C1/F193:	60         	RTS

C1/F194:	DA         	PHX
C1/F195:	06 22      	ASL $22
C1/F197:	64 23      	STZ $23
C1/F199:	C6 24      	DEC $24
C1/F19B:	A5 24      	LDA $24
C1/F19D:	0A         	ASL A
C1/F19E:	18         	CLC
C1/F19F:	65 22      	ADC $22
C1/F1A1:	AA         	TAX
C1/F1A2:	64 25      	STZ $25
C1/F1A4:	C2 20      	REP #$20
C1/F1A6:	A5 28      	LDA $28
C1/F1A8:	29 F0 00   	AND #$00F0
C1/F1AB:	0A         	ASL A
C1/F1AC:	85 28      	STA $28
C1/F1AE:	8A         	TXA
C1/F1AF:	18         	CLC
C1/F1B0:	65 28      	ADC $28
C1/F1B2:	AA         	TAX
C1/F1B3:	BD 00 7E   	LDA $7E00,X
C1/F1B6:	48         	PHA
C1/F1B7:	BD 00 7C   	LDA $7C00,X
C1/F1BA:	48         	PHA
C1/F1BB:	BD FE 7D   	LDA $7DFE,X
C1/F1BE:	9D 00 7E   	STA $7E00,X
C1/F1C1:	BD FE 7B   	LDA $7BFE,X
C1/F1C4:	9D 00 7C   	STA $7C00,X
C1/F1C7:	CA         	DEX
C1/F1C8:	CA         	DEX
C1/F1C9:	C6 24      	DEC $24
C1/F1CB:	D0 EE      	BNE $F1BB
C1/F1CD:	68         	PLA
C1/F1CE:	9D 00 7C   	STA $7C00,X
C1/F1D1:	68         	PLA
C1/F1D2:	9D 00 7E   	STA $7E00,X
C1/F1D5:	7B         	TDC
C1/F1D6:	E2 20      	SEP #$20           ; 8-bit A
C1/F1D8:	FA         	PLX
C1/F1D9:	60         	RTS

C1/F1DA:	A0 01 00   	LDY #$0001
C1/F1DD:	B7 5B      	LDA [$5B],Y
C1/F1DF:	4A         	LSR A
C1/F1E0:	4A         	LSR A
C1/F1E1:	4A         	LSR A
C1/F1E2:	4A         	LSR A
C1/F1E3:	AA         	TAX
C1/F1E4:	60         	RTS

C1/F1E5:	20 DA F1   	JSR $F1DA
C1/F1E8:	BD 85 60   	LDA $6085,X
C1/F1EB:	D0 24      	BNE $F211
C1/F1ED:	A7 5B      	LDA [$5B]
C1/F1EF:	29 F0      	AND #$F0
C1/F1F1:	4A         	LSR A
C1/F1F2:	4A         	LSR A
C1/F1F3:	4A         	LSR A
C1/F1F4:	4A         	LSR A
C1/F1F5:	85 22      	STA $22
C1/F1F7:	A7 5B      	LDA [$5B]
C1/F1F9:	29 0F      	AND #$0F
C1/F1FB:	85 24      	STA $24
C1/F1FD:	A0 01 00   	LDY #$0001
C1/F200:	B7 5B      	LDA [$5B],Y
C1/F202:	85 28      	STA $28
C1/F204:	20 94 F1   	JSR $F194
C1/F207:	A0 01 00   	LDY #$0001
C1/F20A:	B7 5B      	LDA [$5B],Y
C1/F20C:	29 0F      	AND #$0F
C1/F20E:	9D 85 60   	STA $6085,X

C1/F211:	DE 85 60   	DEC $6085,X
C1/F214:	A4 5B      	LDY $5B
C1/F216:	C8         	INY
C1/F217:	84 5B      	STY $5B
C1/F219:	AE F6 7A   	LDX $7AF6
C1/F21C:	60         	RTS

C1/F21D:	20 DA F1   	JSR $F1DA
C1/F220:	BD 85 60   	LDA $6085,X
C1/F223:	D0 24      	BNE $F249
C1/F225:	A7 5B      	LDA [$5B]
C1/F227:	29 F0      	AND #$F0
C1/F229:	4A         	LSR A
C1/F22A:	4A         	LSR A
C1/F22B:	4A         	LSR A
C1/F22C:	4A         	LSR A
C1/F22D:	85 22      	STA $22
C1/F22F:	A7 5B      	LDA [$5B]
C1/F231:	29 0F      	AND #$0F
C1/F233:	85 24      	STA $24
C1/F235:	A0 01 00   	LDY #$0001
C1/F238:	B7 5B      	LDA [$5B],Y
C1/F23A:	85 28      	STA $28
C1/F23C:	20 52 F1   	JSR $F152
C1/F23F:	A0 01 00   	LDY #$0001
C1/F242:	B7 5B      	LDA [$5B],Y
C1/F244:	29 0F      	AND #$0F
C1/F246:	9D 85 60   	STA $6085,X

C1/F249:	DE 85 60   	DEC $6085,X
C1/F24C:	A4 5B      	LDY $5B
C1/F24E:	C8         	INY
C1/F24F:	84 5B      	STY $5B
C1/F251:	AE F6 7A   	LDX $7AF6
C1/F254:	60         	RTS

C1/F255:	AE F6 7A   	LDX $7AF6
C1/F258:	BD 86 6F   	LDA $6F86,X
C1/F25B:	29 CF      	AND #$CF
C1/F25D:	07 5B      	ORA [$5B]
C1/F25F:	9D 86 6F   	STA $6F86,X
C1/F262:	60         	RTS

C1/F263:	AE F6 7A   	LDX $7AF6
C1/F266:	BD 38 6A   	LDA $6A38,X
C1/F269:	30 0E      	BMI $F279
C1/F26B:	A8         	TAY
C1/F26C:	B9 10 7B   	LDA $7B10,Y
C1/F26F:	5D 88 6F   	EOR $6F88,X
C1/F272:	29 01      	AND #$01
C1/F274:	D0 03      	BNE $F279
C1/F276:	4C 77 F3   	JMP $F377

C1/F279:	60         	RTS

C1/F27A:	AE F6 7A   	LDX $7AF6
C1/F27D:	BD 38 6A   	LDA $6A38,X
C1/F280:	30 1F      	BMI $F2A1
C1/F282:	A8         	TAY
C1/F283:	A7 5B      	LDA [$5B]
C1/F285:	29 01      	AND #$01
C1/F287:	85 10      	STA $10
C1/F289:	A7 5B      	LDA [$5B]
C1/F28B:	30 11      	BMI $F29E
C1/F28D:	29 40      	AND #$40
C1/F28F:	F0 03      	BEQ $F294
C1/F291:	7B         	TDC
C1/F292:	80 0A      	BRA $F29E
C1/F294:	B9 10 7B   	LDA $7B10,Y
C1/F297:	5D 88 6F   	EOR $6F88,X
C1/F29A:	29 01      	AND #$01
C1/F29C:	45 10      	EOR $10
C1/F29E:	9D E7 64   	STA $64E7,X
C1/F2A1:	60         	RTS

C1/F2A2:	AE F6 7A   	LDX $7AF6
C1/F2A5:	BD 39 6A   	LDA $6A39,X
C1/F2A8:	30 0B      	BMI $F2B5
C1/F2AA:	A8         	TAY
C1/F2AB:	B9 10 7B   	LDA $7B10,Y
C1/F2AE:	29 01      	AND #$01
C1/F2B0:	D0 03      	BNE $F2B5
C1/F2B2:	4C 77 F3   	JMP $F377

C1/F2B5:	60         	RTS

C1/F2B6:	AE F6 7A   	LDX $7AF6
C1/F2B9:	BD 39 6A   	LDA $6A39,X
C1/F2BC:	30 1D      	BMI $F2DB
C1/F2BE:	A8         	TAY
C1/F2BF:	B9 10 7B   	LDA $7B10,Y
C1/F2C2:	29 01      	AND #$01
C1/F2C4:	D0 06      	BNE $F2CC
C1/F2C6:	A7 5B      	LDA [$5B]
C1/F2C8:	85 10      	STA $10
C1/F2CA:	80 07      	BRA $F2D3
C1/F2CC:	A0 01 00   	LDY #$0001
C1/F2CF:	B7 5B      	LDA [$5B],Y
C1/F2D1:	85 10      	STA $10
C1/F2D3:	BD 87 6F   	LDA $6F87,X
C1/F2D6:	45 10      	EOR $10
C1/F2D8:	9D 87 6F   	STA $6F87,X
C1/F2DB:	A4 5B      	LDY $5B
C1/F2DD:	C8         	INY
C1/F2DE:	84 5B      	STY $5B
C1/F2E0:	60         	RTS

C1/F2E1:	AE F6 7A   	LDX $7AF6
C1/F2E4:	A7 5B      	LDA [$5B]
C1/F2E6:	85 10      	STA $10
C1/F2E8:	BD 87 6F   	LDA $6F87,X
C1/F2EB:	45 10      	EOR $10
C1/F2ED:	9D 87 6F   	STA $6F87,X
C1/F2F0:	60         	RTS

C1/F2F1:	AE F6 7A   	LDX $7AF6
C1/F2F4:	BD 39 6A   	LDA $6A39,X
C1/F2F7:	30 15      	BMI $F30E
C1/F2F9:	A8         	TAY
C1/F2FA:	B9 10 7B   	LDA $7B10,Y
C1/F2FD:	29 01      	AND #$01
C1/F2FF:	D0 06      	BNE $F307
C1/F301:	A7 5B      	LDA [$5B]
C1/F303:	85 9B      	STA $9B
C1/F305:	80 07      	BRA $F30E
C1/F307:	A0 01 00   	LDY #$0001
C1/F30A:	B7 5B      	LDA [$5B],Y
C1/F30C:	85 9B      	STA $9B
C1/F30E:	60         	RTS

C1/F30F:	AE F6 7A   	LDX $7AF6
C1/F312:	A7 5B      	LDA [$5B]
C1/F314:	29 01      	AND #$01
C1/F316:	9D E7 64   	STA $64E7,X
C1/F319:	60         	RTS

C1/F31A:	AE F6 7A   	LDX $7AF6
C1/F31D:	BD 39 6A   	LDA $6A39,X
C1/F320:	30 1C      	BMI $F33E
C1/F322:	A8         	TAY
C1/F323:	A7 5B      	LDA [$5B]
C1/F325:	29 01      	AND #$01
C1/F327:	85 10      	STA $10
C1/F329:	A7 5B      	LDA [$5B]
C1/F32B:	30 0E      	BMI $F33B
C1/F32D:	29 40      	AND #$40
C1/F32F:	F0 03      	BEQ $F334
C1/F331:	7B         	TDC
C1/F332:	80 07      	BRA $F33B
C1/F334:	B9 10 7B   	LDA $7B10,Y
C1/F337:	29 01      	AND #$01
C1/F339:	45 10      	EOR $10
C1/F33B:	9D E7 64   	STA $64E7,X
C1/F33E:	60         	RTS

; Animation Script Op $02 ($82)
; Update character target sprite to X or Y, based on facing direction

C1/F33F:	AE F6 7A   	LDX $7AF6         ; animation thread offset
C1/F342:	BD 39 6A   	LDA $6A39,X       ; target index
C1/F345:	80 06      	BRA $F34D         ; branch

; Animation Script Op $01 ($81)
; Update character attacker sprite to X or Y, based on facing direction

C1/F347:	AE F6 7A   	LDX $7AF6         ; animation thread offset
C1/F34A:	BD 38 6A   	LDA $6A38,X       ; attacker index

C1/F34D:	30 22      	BMI $F371         ; branch if monster
C1/F34F:	85 10      	STA $10           ; save character index
C1/F351:	A8         	TAY               ; index it
C1/F352:	B9 10 7B   	LDA $7B10,Y       ; character is facing right
C1/F355:	5D 88 6F   	EOR $6F88,X       ; toggle w/ "left-handed" animation
C1/F358:	29 01      	AND #$01          ; isolate which hand
C1/F35A:	A8         	TAY               ; index it
C1/F35B:	B7 5B      	LDA [$5B],Y       ; arg 1: left hand, arg 2: right hand
C1/F35D:	85 12      	STA $12           ; save sprite id
C1/F35F:	A5 10      	LDA $10           ; character index
C1/F361:	29 03      	AND #$03          ; ensure 0-3 index
C1/F363:	8D AD 7B   	STA $7BAD         ; mark character needs graphical update
C1/F366:	0A         	ASL A
C1/F367:	0A         	ASL A
C1/F368:	0A         	ASL A
C1/F369:	0A         	ASL A
C1/F36A:	0A         	ASL A             ; x32
C1/F36B:	A8         	TAY               ; index it
C1/F36C:	A5 12      	LDA $12           ; get which sprite (based on hand)
C1/F36E:	99 C1 61   	STA $61C1,Y       ; set character sprite

C1/F371:	A4 5B      	LDY $5B          ; animation script index
C1/F373:	C8         	INY              ; increment
C1/F374:	84 5B      	STY $5B          ; update script index
C1/F376:	60         	RTS

; Animation Script Op $03 ($83)
; Execute direction-based subcommand

C1/F377:	A7 5B      	LDA [$5B]        ; arg 1
C1/F379:	85 12      	STA $12          ; store ^
C1/F37B:	29 1F      	AND #$1F         ; isolate subcommand arg
C1/F37D:	1A         	INC A            ; +1
C1/F37E:	85 10      	STA $10          ; arg for subcommand
C1/F380:	64 11      	STZ $11          ; zero
C1/F382:	AE F6 7A   	LDX $7AF6        ; animation thread offset
C1/F385:	BD 87 6F   	LDA $6F87,X      ; animation facing right flag
C1/F388:	F0 0C      	BEQ $F396        ; branch if not ^
C1/F38A:	A5 12      	LDA $12          ; arg 1
C1/F38C:	29 E0      	AND #$E0         ; isolate subcommand ID
C1/F38E:	4A         	LSR A
C1/F38F:	4A         	LSR A
C1/F390:	4A         	LSR A
C1/F391:	4A         	LSR A            ; >> 4
C1/F392:	AA         	TAX              ; index to subcommand
C1/F393:	7C B2 F3   	JMP ($F3B2,X)    ; execute subcommand (facing left)

C1/F396:	A5 12      	LDA $12          ; arg 1
C1/F398:	29 E0      	AND #$E0         ; isolate subcommand ID
C1/F39A:	4A         	LSR A
C1/F39B:	4A         	LSR A
C1/F39C:	4A         	LSR A
C1/F39D:	4A         	LSR A            ; >> 4
C1/F39E:	AA         	TAX              ; index to subcommand
C1/F39F:	7C A2 F3   	JMP ($F3A2,X)    ; execute subcommand (facing right)

; Animation Script Directional Subcommands (Right)
C1/F3A2:	C2F3 - $00 [$0x] ($F3C2)
C1/F3A4:	DDF3 - $01 [$2x] ($F3DD) - Move thread down (X) pixels
C1/F3A6:	EFF3
C1/F3A8:	0AF4 - $03 [$6x] ($F40A) - Move thread to the left (X) pixels
C1/F3AA:	1CF4
C1/F3AC:	2EF4
C1/F3AE:	49F4
C1/F3B0:	5BF4

; Animation Script Directional Subcommands (Left)
C1/F3B2:	EFF3
C1/F3B4:	DDF3 - $01 [$2x] ($F3DD) - Move thread down (X) pixels
C1/F3B6:	C2F3
C1/F3B8:	1CF4 - $03 [$6x] ($F41C) - Move thread to the right (X) pixels
C1/F3BA:	0AF4
C1/F3BC:	5BF4
C1/F3BE:	49F4
C1/F3C0:	2EF4

C1/F3C2:	AE F6 7A   	LDX $7AF6
C1/F3C5:	C2 20      	REP #$20
C1/F3C7:	BD 3A 6A   	LDA $6A3A,X
C1/F3CA:	38         	SEC
C1/F3CB:	E5 10      	SBC $10
C1/F3CD:	9D 3A 6A   	STA $6A3A,X
C1/F3D0:	BD 3C 6A   	LDA $6A3C,X
C1/F3D3:	18         	CLC
C1/F3D4:	65 10      	ADC $10
C1/F3D6:	9D 3C 6A   	STA $6A3C,X
C1/F3D9:	7B         	TDC
C1/F3DA:	E2 20      	SEP #$20           ; 8-bit A
C1/F3DC:	60         	RTS

; Animation Script Directional Subcommand (Left/Right) $01 ($2x)
C1/F3DD:	AE F6 7A   	LDX $7AF6          ; animation thread offset
C1/F3E0:	C2 20      	REP #$20           ; 16-bit A
C1/F3E2:	BD 3C 6A   	LDA $6A3C,X        ; thread Y position
C1/F3E5:	18         	CLC                ; clear carry
C1/F3E6:	65 10      	ADC $10            ; add arg 1 value
C1/F3E8:	9D 3C 6A   	STA $6A3C,X        ; update thread Y position
C1/F3EB:	7B         	TDC                ; zero A/B
C1/F3EC:	E2 20      	SEP #$20           ; 8-bit A
C1/F3EE:	60         	RTS

C1/F3EF:	AE F6 7A   	LDX $7AF6
C1/F3F2:	C2 20      	REP #$20
C1/F3F4:	BD 3A 6A   	LDA $6A3A,X
C1/F3F7:	18         	CLC
C1/F3F8:	65 10      	ADC $10
C1/F3FA:	9D 3A 6A   	STA $6A3A,X
C1/F3FD:	BD 3C 6A   	LDA $6A3C,X
C1/F400:	18         	CLC
C1/F401:	65 10      	ADC $10
C1/F403:	9D 3C 6A   	STA $6A3C,X
C1/F406:	7B         	TDC
C1/F407:	E2 20      	SEP #$20           ; 8-bit A
C1/F409:	60         	RTS

; Animation Script Directional-Right Subcommand $03 ($6x)
; Move thread to the left (X) pixels

C1/F40A:	AE F6 7A   	LDX $7AF6          ; animation thread offset
C1/F40D:	C2 20      	REP #$20           ; 16-bit A
C1/F40F:	BD 3A 6A   	LDA $6A3A,X        ; thread X position
C1/F412:	38         	SEC                ; set carry
C1/F413:	E5 10      	SBC $10            ; minus arg 1
C1/F415:	9D 3A 6A   	STA $6A3A,X        ; update thread X position
C1/F418:	7B         	TDC                ; zero A/B
C1/F419:	E2 20      	SEP #$20           ; 8-bit A
C1/F41B:	60         	RTS

; Animation Script Directional-Left Subcommand $03 ($6x)
; Move thread to the right (X) pixels

C1/F41C:	AE F6 7A   	LDX $7AF6
C1/F41F:	C2 20      	REP #$20
C1/F421:	BD 3A 6A   	LDA $6A3A,X
C1/F424:	18         	CLC
C1/F425:	65 10      	ADC $10
C1/F427:	9D 3A 6A   	STA $6A3A,X
C1/F42A:	7B         	TDC
C1/F42B:	E2 20      	SEP #$20           ; 8-bit A
C1/F42D:	60         	RTS

C1/F42E:	AE F6 7A   	LDX $7AF6
C1/F431:	C2 20      	REP #$20
C1/F433:	BD 3A 6A   	LDA $6A3A,X
C1/F436:	38         	SEC
C1/F437:	E5 10      	SBC $10
C1/F439:	9D 3A 6A   	STA $6A3A,X
C1/F43C:	BD 3C 6A   	LDA $6A3C,X
C1/F43F:	38         	SEC
C1/F440:	E5 10      	SBC $10
C1/F442:	9D 3C 6A   	STA $6A3C,X
C1/F445:	7B         	TDC
C1/F446:	E2 20      	SEP #$20           ; 8-bit A
C1/F448:	60         	RTS

C1/F449:	AE F6 7A   	LDX $7AF6
C1/F44C:	C2 20      	REP #$20
C1/F44E:	BD 3C 6A   	LDA $6A3C,X
C1/F451:	38         	SEC
C1/F452:	E5 10      	SBC $10
C1/F454:	9D 3C 6A   	STA $6A3C,X
C1/F457:	7B         	TDC
C1/F458:	E2 20      	SEP #$20           ; 8-bit A
C1/F45A:	60         	RTS

C1/F45B:	AE F6 7A   	LDX $7AF6
C1/F45E:	C2 20      	REP #$20
C1/F460:	BD 3A 6A   	LDA $6A3A,X
C1/F463:	18         	CLC
C1/F464:	65 10      	ADC $10
C1/F466:	9D 3A 6A   	STA $6A3A,X
C1/F469:	BD 3C 6A   	LDA $6A3C,X
C1/F46C:	38         	SEC
C1/F46D:	E5 10      	SBC $10
C1/F46F:	9D 3C 6A   	STA $6A3C,X
C1/F472:	7B         	TDC
C1/F473:	E2 20      	SEP #$20           ; 8-bit A
C1/F475:	60         	RTS

C1/F476:	A7 5B      	LDA [$5B]
C1/F478:	85 12      	STA $12
C1/F47A:	29 1F      	AND #$1F
C1/F47C:	1A         	INC A
C1/F47D:	85 10      	STA $10
C1/F47F:	64 11      	STZ $11
C1/F481:	A9 04      	LDA #$04
C1/F483:	8D DC 64   	STA $64DC
C1/F486:	9C DD 64   	STZ $64DD
C1/F489:	AE F6 7A   	LDX $7AF6
C1/F48C:	BD 39 6A   	LDA $6A39,X
C1/F48F:	80 17      	BRA $F4A8
C1/F491:	A7 5B      	LDA [$5B]
C1/F493:	85 12      	STA $12
C1/F495:	29 1F      	AND #$1F
C1/F497:	1A         	INC A
C1/F498:	85 10      	STA $10
C1/F49A:	64 11      	STZ $11
C1/F49C:	9C DC 64   	STZ $64DC
C1/F49F:	9C DD 64   	STZ $64DD
C1/F4A2:	AE F6 7A   	LDX $7AF6
C1/F4A5:	BD 38 6A   	LDA $6A38,X

C1/F4A8:	30 2B      	BMI $F4D5
C1/F4AA:	0A         	ASL A
C1/F4AB:	0A         	ASL A
C1/F4AC:	0A         	ASL A
C1/F4AD:	0A         	ASL A
C1/F4AE:	0A         	ASL A
C1/F4AF:	A8         	TAY
C1/F4B0:	BD 87 6F   	LDA $6F87,X
C1/F4B3:	F0 10      	BEQ $F4C5
C1/F4B5:	A5 12      	LDA $12
C1/F4B7:	29 E0      	AND #$E0
C1/F4B9:	4A         	LSR A
C1/F4BA:	4A         	LSR A
C1/F4BB:	4A         	LSR A
C1/F4BC:	4A         	LSR A
C1/F4BD:	AA         	TAX
C1/F4BE:	FC 11 F5   	JSR ($F511,X)  ; Pointer table
C1/F4C1:	AE F6 7A   	LDX $7AF6
C1/F4C4:	60         	RTS

C1/F4C5:	A5 12      	LDA $12
C1/F4C7:	29 E0      	AND #$E0
C1/F4C9:	4A         	LSR A
C1/F4CA:	4A         	LSR A
C1/F4CB:	4A         	LSR A
C1/F4CC:	4A         	LSR A
C1/F4CD:	AA         	TAX
C1/F4CE:	FC 01 F5   	JSR ($F501,X)  ; Pointer table
C1/F4D1:	AE F6 7A   	LDX $7AF6
C1/F4D4:	60         	RTS

C1/F4D5:	29 7F      	AND #$7F
C1/F4D7:	38         	SEC
C1/F4D8:	E9 04      	SBC #$04
C1/F4DA:	0A         	ASL A
C1/F4DB:	A8         	TAY
C1/F4DC:	BD 87 6F   	LDA $6F87,X
C1/F4DF:	F0 10      	BEQ $F4F1
C1/F4E1:	A5 12      	LDA $12
C1/F4E3:	29 E0      	AND #$E0
C1/F4E5:	4A         	LSR A
C1/F4E6:	4A         	LSR A
C1/F4E7:	4A         	LSR A
C1/F4E8:	4A         	LSR A
C1/F4E9:	AA         	TAX
C1/F4EA:	FC 31 F5   	JSR ($F531,X)  ; Pointer table
C1/F4ED:	AE F6 7A   	LDX $7AF6
C1/F4F0:	60         	RTS

C1/F4F1:	A5 12      	LDA $12
C1/F4F3:	29 E0      	AND #$E0
C1/F4F5:	4A         	LSR A
C1/F4F6:	4A         	LSR A
C1/F4F7:	4A         	LSR A
C1/F4F8:	4A         	LSR A
C1/F4F9:	AA         	TAX
C1/F4FA:	FC 21 F5   	JSR ($F521,X)  ; Pointer table
C1/F4FD:	AE F6 7A   	LDX $7AF6
C1/F500:	60         	RTS

C1/F501:	89F6
C1/F503:	A0F6
C1/F505:	AEF6
C1/F507:	C5F6
C1/F509:	D3F6
C1/F50B:	E1F6
C1/F50D:	F8F6
C1/F50F:	06F7

C1/F511:	AEF6
C1/F513:	A0F6
C1/F515:	89F6
C1/F517:	D3F6
C1/F519:	C5F6
C1/F51B:	06F7
C1/F51D:	F8F6
C1/F51F:	E1F6

C1/F521:	41F5
C1/F523:	73F5
C1/F525:	93F5
C1/F527:	C5F5
C1/F529:	E5F5
C1/F52B:	05F6
C1/F52D:	37F6
C1/F52F:	57F6

C1/F531:	93F5
C1/F533:	73F5
C1/F535:	41F5
C1/F537:	E5F5
C1/F539:	C5F5
C1/F53B:	57F6
C1/F53D:	37F6
C1/F53F:	05F6

C1/F541:	C2 20       REP #$20
C1/F543:	B9 C3 80    LDA $80C3,Y
C1/F546:	38          SEC
C1/F547:	E5 10       SBC $10
C1/F549:	99 C3 80    STA $80C3,Y
C1/F54C:	B9 CF 80    LDA $80CF,Y
C1/F54F:	18          CLC
C1/F550:	65 10       ADC $10
C1/F552:	99 CF 80    STA $80CF,Y
C1/F555:	AD F6 7A    LDA $7AF6
C1/F558:	18          CLC
C1/F559:	6D DC 64    ADC $64DC
C1/F55C:	A8          TAY
C1/F55D:	B9 7E 6F    LDA $6F7E,Y
C1/F560:	38          SEC
C1/F561:	E5 10       SBC $10
C1/F563:	99 7E 6F    STA $6F7E,Y
C1/F566:	B9 80 6F    LDA $6F80,Y
C1/F569:	18          CLC
C1/F56A:	65 10       ADC $10
C1/F56C:	99 80 6F    STA $6F80,Y
C1/F56F:	7B          TDC
C1/F570:	E2 20       SEP #$20           ; 8-bit A
C1/F572:	60          RTS

C1/F573:	C2 20      	REP #$20
C1/F575:	B9 CF 80   	LDA $80CF,Y
C1/F578:	18         	CLC
C1/F579:	65 10      	ADC $10
C1/F57B:	99 CF 80   	STA $80CF,Y
C1/F57E:	AD F6 7A   	LDA $7AF6
C1/F581:	18         	CLC
C1/F582:	6D DC 64   	ADC $64DC
C1/F585:	A8         	TAY
C1/F586:	B9 80 6F   	LDA $6F80,Y
C1/F589:	18         	CLC
C1/F58A:	65 10      	ADC $10
C1/F58C:	99 80 6F   	STA $6F80,Y
C1/F58F:	7B         	TDC
C1/F590:	E2 20      	SEP #$20           ; 8-bit A
C1/F592:	60         	RTS

C1/F593:	C2 20      	REP #$20
C1/F595:	B9 C3 80   	LDA $80C3,Y
C1/F598:	18         	CLC
C1/F599:	65 10      	ADC $10
C1/F59B:	99 C3 80   	STA $80C3,Y
C1/F59E:	B9 CF 80   	LDA $80CF,Y
C1/F5A1:	18         	CLC
C1/F5A2:	65 10      	ADC $10
C1/F5A4:	99 CF 80   	STA $80CF,Y
C1/F5A7:	AD F6 7A   	LDA $7AF6
C1/F5AA:	18         	CLC
C1/F5AB:	6D DC 64   	ADC $64DC
C1/F5AE:	A8         	TAY
C1/F5AF:	B9 7E 6F   	LDA $6F7E,Y
C1/F5B2:	18         	CLC
C1/F5B3:	65 10      	ADC $10
C1/F5B5:	99 7E 6F   	STA $6F7E,Y
C1/F5B8:	B9 80 6F   	LDA $6F80,Y
C1/F5BB:	18         	CLC
C1/F5BC:	65 10      	ADC $10
C1/F5BE:	99 80 6F   	STA $6F80,Y
C1/F5C1:	7B         	TDC
C1/F5C2:	E2 20      	SEP #$20           ; 8-bit A
C1/F5C4:	60         	RTS

C1/F5C5:	C2 20      	REP #$20
C1/F5C7:	B9 C3 80   	LDA $80C3,Y
C1/F5CA:	38         	SEC
C1/F5CB:	E5 10      	SBC $10
C1/F5CD:	99 C3 80   	STA $80C3,Y
C1/F5D0:	AD F6 7A   	LDA $7AF6
C1/F5D3:	18         	CLC
C1/F5D4:	6D DC 64   	ADC $64DC
C1/F5D7:	A8         	TAY
C1/F5D8:	B9 7E 6F   	LDA $6F7E,Y
C1/F5DB:	38         	SEC
C1/F5DC:	E5 10      	SBC $10
C1/F5DE:	99 7E 6F   	STA $6F7E,Y
C1/F5E1:	7B         	TDC
C1/F5E2:	E2 20      	SEP #$20           ; 8-bit A
C1/F5E4:	60         	RTS

C1/F5E5:	C2 20      	REP #$20
C1/F5E7:	B9 C3 80   	LDA $80C3,Y
C1/F5EA:	18         	CLC
C1/F5EB:	65 10      	ADC $10
C1/F5ED:	99 C3 80   	STA $80C3,Y
C1/F5F0:	AD F6 7A   	LDA $7AF6
C1/F5F3:	18         	CLC
C1/F5F4:	6D DC 64   	ADC $64DC
C1/F5F7:	A8         	TAY
C1/F5F8:	B9 7E 6F   	LDA $6F7E,Y
C1/F5FB:	18         	CLC
C1/F5FC:	65 10      	ADC $10
C1/F5FE:	99 7E 6F   	STA $6F7E,Y
C1/F601:	7B         	TDC
C1/F602:	E2 20      	SEP #$20           ; 8-bit A
C1/F604:	60         	RTS

C1/F605:	C2 20      	REP #$20
C1/F607:	B9 C3 80   	LDA $80C3,Y
C1/F60A:	38         	SEC
C1/F60B:	E5 10      	SBC $10
C1/F60D:	99 C3 80   	STA $80C3,Y
C1/F610:	B9 CF 80   	LDA $80CF,Y
C1/F613:	38         	SEC
C1/F614:	E5 10      	SBC $10
C1/F616:	99 CF 80   	STA $80CF,Y
C1/F619:	AD F6 7A   	LDA $7AF6
C1/F61C:	18         	CLC
C1/F61D:	6D DC 64   	ADC $64DC
C1/F620:	A8         	TAY
C1/F621:	B9 7E 6F   	LDA $6F7E,Y
C1/F624:	38         	SEC
C1/F625:	E5 10      	SBC $10
C1/F627:	99 7E 6F   	STA $6F7E,Y
C1/F62A:	B9 80 6F   	LDA $6F80,Y
C1/F62D:	38         	SEC
C1/F62E:	E5 10      	SBC $10
C1/F630:	99 80 6F   	STA $6F80,Y
C1/F633:	7B         	TDC
C1/F634:	E2 20      	SEP #$20           ; 8-bit A
C1/F636:	60         	RTS

C1/F637:	C2 20      	REP #$20
C1/F639:	B9 CF 80   	LDA $80CF,Y
C1/F63C:	38         	SEC
C1/F63D:	E5 10      	SBC $10
C1/F63F:	99 CF 80   	STA $80CF,Y
C1/F642:	AD F6 7A   	LDA $7AF6
C1/F645:	18         	CLC
C1/F646:	6D DC 64   	ADC $64DC
C1/F649:	A8         	TAY
C1/F64A:	B9 80 6F   	LDA $6F80,Y
C1/F64D:	38         	SEC
C1/F64E:	E5 10      	SBC $10
C1/F650:	99 80 6F   	STA $6F80,Y
C1/F653:	7B         	TDC
C1/F654:	E2 20      	SEP #$20           ; 8-bit A
C1/F656:	60         	RTS

C1/F657:	C2 20      	REP #$20
C1/F659:	B9 C3 80   	LDA $80C3,Y
C1/F65C:	18         	CLC
C1/F65D:	65 10      	ADC $10
C1/F65F:	99 C3 80   	STA $80C3,Y
C1/F662:	B9 CF 80   	LDA $80CF,Y
C1/F665:	38         	SEC
C1/F666:	E5 10      	SBC $10
C1/F668:	99 CF 80   	STA $80CF,Y
C1/F66B:	AD F6 7A   	LDA $7AF6
C1/F66E:	18         	CLC
C1/F66F:	6D DC 64   	ADC $64DC
C1/F672:	A8         	TAY
C1/F673:	B9 7E 6F   	LDA $6F7E,Y
C1/F676:	18         	CLC
C1/F677:	65 10      	ADC $10
C1/F679:	99 7E 6F   	STA $6F7E,Y
C1/F67C:	B9 80 6F   	LDA $6F80,Y
C1/F67F:	18         	CLC
C1/F680:	65 10      	ADC $10
C1/F682:	99 80 6F   	STA $6F80,Y
C1/F685:	7B         	TDC
C1/F686:	E2 20      	SEP #$20           ; 8-bit A
C1/F688:	60         	RTS

C1/F689:	C2 20      	REP #$20
C1/F68B:	B9 D4 61   	LDA $61D4,Y
C1/F68E:	38         	SEC
C1/F68F:	E5 10      	SBC $10
C1/F691:	99 D4 61   	STA $61D4,Y
C1/F694:	B9 C7 61   	LDA $61C7,Y
C1/F697:	18         	CLC
C1/F698:	65 10      	ADC $10
C1/F69A:	99 C7 61   	STA $61C7,Y
C1/F69D:	4C 55 F5   	JMP $F555

C1/F6A0:	C2 20      	REP #$20
C1/F6A2:	B9 C7 61   	LDA $61C7,Y
C1/F6A5:	18         	CLC
C1/F6A6:	65 10      	ADC $10
C1/F6A8:	99 C7 61   	STA $61C7,Y
C1/F6AB:	4C 7E F5   	JMP $F57E

C1/F6AE:	C2 20      	REP #$20
C1/F6B0:	B9 D4 61   	LDA $61D4,Y
C1/F6B3:	18         	CLC
C1/F6B4:	65 10      	ADC $10
C1/F6B6:	99 D4 61   	STA $61D4,Y
C1/F6B9:	B9 C7 61   	LDA $61C7,Y
C1/F6BC:	18         	CLC
C1/F6BD:	65 10      	ADC $10
C1/F6BF:	99 C7 61   	STA $61C7,Y
C1/F6C2:	4C A7 F5   	JMP $F5A7

C1/F6C5:	C2 20      	REP #$20
C1/F6C7:	B9 D4 61   	LDA $61D4,Y
C1/F6CA:	38         	SEC
C1/F6CB:	E5 10      	SBC $10
C1/F6CD:	99 D4 61   	STA $61D4,Y
C1/F6D0:	4C D0 F5   	JMP $F5D0

C1/F6D3:	C2 20      	REP #$20
C1/F6D5:	B9 D4 61   	LDA $61D4,Y
C1/F6D8:	18         	CLC
C1/F6D9:	65 10      	ADC $10
C1/F6DB:	99 D4 61   	STA $61D4,Y
C1/F6DE:	4C F0 F5   	JMP $F5F0

C1/F6E1:	C2 20      	REP #$20
C1/F6E3:	B9 D4 61   	LDA $61D4,Y
C1/F6E6:	38         	SEC
C1/F6E7:	E5 10      	SBC $10
C1/F6E9:	99 D4 61   	STA $61D4,Y
C1/F6EC:	B9 C7 61   	LDA $61C7,Y
C1/F6EF:	38         	SEC
C1/F6F0:	E5 10      	SBC $10
C1/F6F2:	99 C7 61   	STA $61C7,Y
C1/F6F5:	4C 19 F6   	JMP $F619

C1/F6F8:	C2 20      	REP #$20
C1/F6FA:	B9 C7 61   	LDA $61C7,Y
C1/F6FD:	38         	SEC
C1/F6FE:	E5 10      	SBC $10
C1/F700:	99 C7 61   	STA $61C7,Y
C1/F703:	4C 42 F6   	JMP $F642

C1/F706:	C2 20      	REP #$20
C1/F708:	B9 D4 61   	LDA $61D4,Y
C1/F70B:	18         	CLC
C1/F70C:	65 10      	ADC $10
C1/F70E:	99 D4 61   	STA $61D4,Y
C1/F711:	B9 C7 61   	LDA $61C7,Y
C1/F714:	38         	SEC
C1/F715:	E5 10      	SBC $10
C1/F717:	99 C7 61   	STA $61C7,Y
C1/F71A:	4C 6B F6   	JMP $F66B

C1/F71D:	AE F6 7A   	LDX $7AF6
C1/F720:	BD 38 6A   	LDA $6A38,X
C1/F723:	30 0B      	BMI $F730
C1/F725:	A8         	TAY
C1/F726:	B9 AE 61   	LDA $61AE,Y
C1/F729:	C9 01      	CMP #$01
C1/F72B:	F0 04      	BEQ $F731
C1/F72D:	AE F6 7A   	LDX $7AF6
C1/F730:	60         	RTS

C1/F731:	AD F6 7A   	LDA $7AF6
C1/F734:	29 70      	AND #$70
C1/F736:	F0 31      	BEQ $F769

C1/F738:	AD BA 64    LDA $64BA
C1/F73B:	F0 0C       BEQ $F749
C1/F73D:	A0 01 00    LDY #$0001
C1/F740:	84 10       STY $10
C1/F742:	A9 60       LDA #$60
C1/F744:	85 12       STA $12
C1/F746:	4C 82 F3    JMP $F382
C1/F749:	A7 5B       LDA [$5B]
C1/F74B:	AA          TAX
C1/F74C:	BF A3 F7 C1 LDA $C1F7A3,X    ; Data
C1/F750:	85 10       STA $10
C1/F752:	64 11       STZ $11
C1/F754:	BF AB F7 C1 LDA $C1F7AB,X    ; Data
C1/F758:	85 12       STA $12
C1/F75A:	20 82 F3    JSR $F382
C1/F75D:	A0 03 00    LDY #$0003
C1/F760:	84 10       STY $10
C1/F762:	A9 60       LDA #$60
C1/F764:	85 12       STA $12
C1/F766:	4C 82 F3    JMP $F382

C1/F769:	AD BA 64   	LDA $64BA
C1/F76C:	F0 0F      	BEQ $F77D
C1/F76E:	A0 01 00   	LDY #$0001
C1/F771:	84 10      	STY $10
C1/F773:	A9 60      	LDA #$60
C1/F775:	85 12      	STA $12
C1/F777:	20 9C F4   	JSR $F49C
C1/F77A:	4C 82 F3   	JMP $F382

C1/F77D:	A7 5B       LDA [$5B]
C1/F77F:	AA          TAX
C1/F780:	BF A3 F7 C1 LDA $C1F7A3,X
C1/F784:	85 10       STA $10
C1/F786:	64 11       STZ $11
C1/F788:	BF AB F7 C1 LDA $C1F7AB,X
C1/F78C:	85 12       STA $12
C1/F78E:	20 9C F4    JSR $F49C
C1/F791:	20 82 F3    JSR $F382
C1/F794:	A0 03 00    LDY #$0003
C1/F797:	84 10       STY $10
C1/F799:	A9 60       LDA #$60
C1/F79B:	85 12       STA $12
C1/F79D:	20 9C F4    JSR $F49C
C1/F7A0:	4C 82 F3    JMP $F382

C1/F7A3:	03
C1/F7A4:	03
C1/F7A5:	02
C1/F7A6:	01
C1/F7A7:	00
C1/F7A8:	02
C1/F7A9:	03
C1/F7AA:	04

C1/F7AB:	C0
C1/F7AC:	C0
C1/F7AD:	C0
C1/F7AE:	C0
C1/F7AF:	C0
C1/F7B0:	20
C1/F7B1:	20
C1/F7B2:	20

C1/F7B3:	AE F6 7A   	LDX $7AF6
C1/F7B6:	A7 5B      	LDA [$5B]
C1/F7B8:	9D 34 6A   	STA $6A34,X
C1/F7BB:	60         	RTS

; Animation Script Op $89 ($09)
; Mark beginning of loop, with X iterations

C1/F7BC:	AE F6 7A   	LDX $7AF6          ; animation thread offset
C1/F7BF:	C2 20      	REP #$20           ; 16-bit A
C1/F7C1:	A5 5B      	LDA $5B            ; pointer to arg 1
C1/F7C3:	9D 89 6F   	STA $6F89,X        ; starting point for animation loop
C1/F7C6:	7B         	TDC                ; zero A/B
C1/F7C7:	E2 20      	SEP #$20           ; 8-bit A
C1/F7C9:	A7 5B      	LDA [$5B]          ; arg 1
C1/F7CB:	9D 8B 6F   	STA $6F8B,X        ; how many loops
C1/F7CE:	60         	RTS

C1/F7CF:	AE F6 7A   	LDX $7AF6
C1/F7D2:	C2 20      	REP #$20
C1/F7D4:	A5 5B      	LDA $5B
C1/F7D6:	9D 89 6F   	STA $6F89,X
C1/F7D9:	7B         	TDC
C1/F7DA:	E2 20      	SEP #$20           ; 8-bit A
C1/F7DC:	AD 84 60   	LDA $6084
C1/F7DF:	9D 8B 6F   	STA $6F8B,X
C1/F7E2:	9E 8C 6F   	STZ $6F8C,X
C1/F7E5:	60         	RTS

C1/F7E6:	AE F6 7A   	LDX $7AF6
C1/F7E9:	C2 20      	REP #$20
C1/F7EB:	A5 5B      	LDA $5B
C1/F7ED:	9D 89 6F   	STA $6F89,X
C1/F7F0:	7B         	TDC
C1/F7F1:	E2 20      	SEP #$20           ; 8-bit A
C1/F7F3:	A7 5B      	LDA [$5B]
C1/F7F5:	9D 8B 6F   	STA $6F8B,X
C1/F7F8:	9E 8C 6F   	STZ $6F8C,X
C1/F7FB:	60         	RTS

C1/F7FC:	7B         	TDC
C1/F7FD:	AA         	TAX
C1/F7FE:	64 22      	STZ $22
C1/F800:	A5 22      	LDA $22
C1/F802:	1D 2E 6A   	ORA $6A2E,X
C1/F805:	85 22      	STA $22
C1/F807:	C2 20      	REP #$20
C1/F809:	8A         	TXA
C1/F80A:	18         	CLC
C1/F80B:	69 10 00   	ADC #$0010
C1/F80E:	AA         	TAX
C1/F80F:	7B         	TDC
C1/F810:	E2 20      	SEP #$20           ; 8-bit A
C1/F812:	E0 10 05   	CPX #$0510
C1/F815:	D0 E9      	BNE $F800
C1/F817:	AE F6 7A   	LDX $7AF6
C1/F81A:	A5 22      	LDA $22
C1/F81C:	F0 0B      	BEQ $F829
C1/F81E:	C2 20      	REP #$20
C1/F820:	BD 89 6F   	LDA $6F89,X
C1/F823:	85 5B      	STA $5B
C1/F825:	7B         	TDC
C1/F826:	E2 20      	SEP #$20           ; 8-bit A
C1/F828:	60         	RTS

C1/F829:	A4 5B      	LDY $5B
C1/F82B:	88         	DEY
C1/F82C:	84 5B      	STY $5B
C1/F82E:	60         	RTS

; Animation Script Op $8A ($0A)
; Loop back to start of loop until iterator is zero

C1/F82F:	AE F6 7A   	LDX $7AF6          ; animation thread offset
C1/F832:	BD 8B 6F   	LDA $6F8B,X        ; animation loop iterator
C1/F835:	F0 0E      	BEQ $F845          ; branch if zero
C1/F837:	C2 20      	REP #$20           ; 16-bit A
C1/F839:	BD 89 6F   	LDA $6F89,X        ; loop start address
C1/F83C:	85 5B      	STA $5B            ; go back to start of loop
C1/F83E:	7B         	TDC                ; zero A/B
C1/F83F:	E2 20      	SEP #$20           ; 8-bit A
C1/F841:	DE 8B 6F   	DEC $6F8B,X        ; decrement loop iterator
C1/F844:	60         	RTS

C1/F845:	A4 5B      	LDY $5B            ; script index
C1/F847:	88         	DEY                ; go back one (no args)
C1/F848:	84 5B      	STY $5B            ; update script index
C1/F84A:	60         	RTS

C1/F84B:	AE F6 7A   	LDX $7AF6
C1/F84E:	BD 8B 6F   	LDA $6F8B,X
C1/F851:	F0 11      	BEQ $F864
C1/F853:	C2 20      	REP #$20
C1/F855:	BD 89 6F   	LDA $6F89,X
C1/F858:	85 5B      	STA $5B
C1/F85A:	7B         	TDC
C1/F85B:	E2 20      	SEP #$20           ; 8-bit A
C1/F85D:	DE 8B 6F   	DEC $6F8B,X
C1/F860:	FE 8C 6F   	INC $6F8C,X
C1/F863:	60         	RTS

C1/F864:	A4 5B      	LDY $5B
C1/F866:	88         	DEY
C1/F867:	84 5B      	STY $5B
C1/F869:	9E 8C 6F   	STZ $6F8C,X
C1/F86C:	60         	RTS

C1/F86D:	C2 20      	REP #$20
C1/F86F:	AE F6 7A   	LDX $7AF6
C1/F872:	BD 87 6F   	LDA $6F87,X
C1/F875:	29 FF 00   	AND #$00FF
C1/F878:	D0 0A      	BNE $F884
C1/F87A:	A7 5B      	LDA [$5B]
C1/F87C:	29 FF 00   	AND #$00FF
C1/F87F:	9D 82 6F   	STA $6F82,X
C1/F882:	80 0B      	BRA $F88F
C1/F884:	A7 5B      	LDA [$5B]
C1/F886:	29 FF 00   	AND #$00FF
C1/F889:	49 FF 00   	EOR #$00FF
C1/F88C:	9D 82 6F   	STA $6F82,X
C1/F88F:	E6 5B      	INC $5B
C1/F891:	A7 5B      	LDA [$5B]
C1/F893:	29 FF 00   	AND #$00FF
C1/F896:	9D 84 6F   	STA $6F84,X
C1/F899:	7B         	TDC
C1/F89A:	E2 20      	SEP #$20           ; 8-bit A
C1/F89C:	60         	RTS

C1/F89D:	C2 20      	REP #$20
C1/F89F:	AE F6 7A   	LDX $7AF6
C1/F8A2:	BD 7E 6F   	LDA $6F7E,X
C1/F8A5:	9D 3A 6A   	STA $6A3A,X
C1/F8A8:	BD 80 6F   	LDA $6F80,X
C1/F8AB:	9D 3C 6A   	STA $6A3C,X
C1/F8AE:	C6 5B      	DEC $5B
C1/F8B0:	7B         	TDC
C1/F8B1:	E2 20      	SEP #$20           ; 8-bit A
C1/F8B3:	60         	RTS

C1/F8B4:	AE F6 7A   	LDX $7AF6
C1/F8B7:	BD 38 6A   	LDA $6A38,X
C1/F8BA:	29 7F      	AND #$7F
C1/F8BC:	0A         	ASL A
C1/F8BD:	AA         	TAX
C1/F8BE:	C2 20      	REP #$20
C1/F8C0:	BF 8B CE C2	LDA $C2CE8B,X   ; increment of 128 bytes
C1/F8C4:	A8         	TAY
C1/F8C5:	AE F6 7A   	LDX $7AF6
C1/F8C8:	B9 7E 6F   	LDA $6F7E,Y
C1/F8CB:	9D 7E 6F   	STA $6F7E,X
C1/F8CE:	9D 3A 6A   	STA $6A3A,X
C1/F8D1:	B9 80 6F   	LDA $6F80,Y
C1/F8D4:	9D 80 6F   	STA $6F80,X
C1/F8D7:	9D 3C 6A   	STA $6A3C,X
C1/F8DA:	C6 5B      	DEC $5B
C1/F8DC:	7B         	TDC
C1/F8DD:	E2 20      	SEP #$20           ; 8-bit A
C1/F8DF:	60         	RTS

C1/F8E0:	AE F6 7A   	LDX $7AF6
C1/F8E3:	BD 7E 6F   	LDA $6F7E,X
C1/F8E6:	85 7D      	STA $7D
C1/F8E8:	BD 80 6F   	LDA $6F80,X
C1/F8EB:	85 7E      	STA $7E
C1/F8ED:	20 5B 18   	JSR $185B     ; random number
C1/F8F0:	EB         	XBA
C1/F8F1:	BD D2 74   	LDA $74D2,X
C1/F8F4:	4A         	LSR A
C1/F8F5:	0A         	ASL A
C1/F8F6:	0A         	ASL A
C1/F8F7:	85 10      	STA $10
C1/F8F9:	0A         	ASL A
C1/F8FA:	20 CA 18   	JSR $18CA
C1/F8FD:	AF 17 42 00	LDA $004217
C1/F901:	38         	SEC
C1/F902:	E5 10      	SBC $10
C1/F904:	85 10      	STA $10
C1/F906:	BD 82 6F   	LDA $6F82,X
C1/F909:	85 12      	STA $12
C1/F90B:	20 4E F9   	JSR $F94E
C1/F90E:	85 7F      	STA $7F
C1/F910:	20 5B 18   	JSR $185B     ; random number
C1/F913:	EB         	XBA
C1/F914:	BD D3 74   	LDA $74D3,X
C1/F917:	4A         	LSR A
C1/F918:	0A         	ASL A
C1/F919:	0A         	ASL A
C1/F91A:	85 10      	STA $10
C1/F91C:	0A         	ASL A
C1/F91D:	20 CA 18   	JSR $18CA
C1/F920:	AF 17 42 00	LDA $004217
C1/F924:	38         	SEC
C1/F925:	E5 10      	SBC $10
C1/F927:	85 10      	STA $10
C1/F929:	BD 84 6F   	LDA $6F84,X
C1/F92C:	85 12      	STA $12
C1/F92E:	20 4E F9   	JSR $F94E
C1/F931:	85 80      	STA $80
C1/F933:	20 91 6C   	JSR $6C91
C1/F936:	AE F6 7A   	LDX $7AF6
C1/F939:	A5 85      	LDA $85
C1/F93B:	9D DB 74   	STA $74DB,X
C1/F93E:	C2 20      	REP #$20
C1/F940:	A5 86      	LDA $86
C1/F942:	9D DC 74   	STA $74DC,X
C1/F945:	C6 5B      	DEC $5B
C1/F947:	9E D9 74   	STZ $74D9,X
C1/F94A:	7B         	TDC
C1/F94B:	E2 20      	SEP #$20           ; 8-bit A
C1/F94D:	60         	RTS

C1/F94E:	A5 10      	LDA $10
C1/F950:	10 0D      	BPL $F95F
C1/F952:	A5 12      	LDA $12
C1/F954:	18         	CLC
C1/F955:	65 10      	ADC $10
C1/F957:	85 14      	STA $14
C1/F959:	A9 00      	LDA #$00
C1/F95B:	69 01      	ADC #$01
C1/F95D:	80 0B      	BRA $F96A
C1/F95F:	A5 12      	LDA $12
C1/F961:	18         	CLC
C1/F962:	65 10      	ADC $10
C1/F964:	85 14      	STA $14
C1/F966:	A9 00      	LDA #$00
C1/F968:	69 00      	ADC #$00
C1/F96A:	29 01      	AND #$01
C1/F96C:	F0 09      	BEQ $F977
C1/F96E:	A5 14      	LDA $14
C1/F970:	C9 F8      	CMP #$F8
C1/F972:	B0 0B      	BCS $F97F
C1/F974:	4C 7D F9   	JMP $F97D

C1/F977:	A5 14      	LDA $14
C1/F979:	C9 F8      	CMP #$F8
C1/F97B:	90 02      	BCC $F97F
C1/F97D:	A9 F8      	LDA #$F8
C1/F97F:	60         	RTS

C1/F980:	AE F6 7A   	LDX $7AF6
C1/F983:	BD 7E 6F   	LDA $6F7E,X
C1/F986:	85 7F      	STA $7F
C1/F988:	BD 80 6F   	LDA $6F80,X
C1/F98B:	85 80      	STA $80
C1/F98D:	BD 82 6F   	LDA $6F82,X
C1/F990:	85 7D      	STA $7D
C1/F992:	BD 84 6F   	LDA $6F84,X
C1/F995:	85 7E      	STA $7E
C1/F997:	80 50      	BRA $F9E9
C1/F999:	20 A2 F9   	JSR $F9A2
C1/F99C:	20 91 6C   	JSR $6C91
C1/F99F:	A5 85      	LDA $85
C1/F9A1:	6B         	RTL

C1/F9A2:	AE F6 7A   	LDX $7AF6
C1/F9A5:	BD 7E 6F   	LDA $6F7E,X
C1/F9A8:	85 7D      	STA $7D
C1/F9AA:	BD 7F 6F   	LDA $6F7F,X
C1/F9AD:	29 01      	AND #$01
C1/F9AF:	F0 04      	BEQ $F9B5
C1/F9B1:	A9 FF      	LDA #$FF
C1/F9B3:	85 7D      	STA $7D
C1/F9B5:	BD 80 6F   	LDA $6F80,X
C1/F9B8:	85 7E      	STA $7E
C1/F9BA:	BD 81 6F   	LDA $6F81,X
C1/F9BD:	29 01      	AND #$01
C1/F9BF:	F0 04      	BEQ $F9C5
C1/F9C1:	A9 FF      	LDA #$FF
C1/F9C3:	85 7E      	STA $7E
C1/F9C5:	BD 82 6F   	LDA $6F82,X
C1/F9C8:	85 7F      	STA $7F
C1/F9CA:	BD 83 6F   	LDA $6F83,X
C1/F9CD:	29 01      	AND #$01
C1/F9CF:	F0 04      	BEQ $F9D5
C1/F9D1:	A9 FF      	LDA #$FF
C1/F9D3:	85 7F      	STA $7F
C1/F9D5:	BD 84 6F   	LDA $6F84,X
C1/F9D8:	85 80      	STA $80
C1/F9DA:	BD 85 6F   	LDA $6F85,X
C1/F9DD:	29 01      	AND #$01
C1/F9DF:	F0 04      	BEQ $F9E5
C1/F9E1:	A9 FF      	LDA #$FF
C1/F9E3:	85 80      	STA $80
C1/F9E5:	60         	RTS

C1/F9E6:	20 A2 F9   	JSR $F9A2
C1/F9E9:	20 91 6C   	JSR $6C91
C1/F9EC:	AE F6 7A   	LDX $7AF6
C1/F9EF:	A5 88      	LDA $88
C1/F9F1:	9D D7 74   	STA $74D7,X
C1/F9F4:	A5 85      	LDA $85
C1/F9F6:	9D DB 74   	STA $74DB,X
C1/F9F9:	C2 20      	REP #$20
C1/F9FB:	A5 86      	LDA $86
C1/F9FD:	9D DC 74   	STA $74DC,X
C1/FA00:	C6 5B      	DEC $5B
C1/FA02:	9E D9 74   	STZ $74D9,X
C1/FA05:	7B         	TDC
C1/FA06:	E2 20      	SEP #$20           ; 8-bit A
C1/FA08:	60         	RTS

C1/FA09:	BD D9 74   	LDA $74D9,X
C1/FA0C:	85 24      	STA $24
C1/FA0E:	BD DA 74   	LDA $74DA,X
C1/FA11:	85 25      	STA $25
C1/FA13:	BD DB 74   	LDA $74DB,X
C1/FA16:	18         	CLC
C1/FA17:	69 40      	ADC #$40
C1/FA19:	20 67 6C   	JSR $6C67
C1/FA1C:	AE F6 7A   	LDX $7AF6
C1/FA1F:	C2 20      	REP #$20
C1/FA21:	A5 28      	LDA $28
C1/FA23:	9D CE 74   	STA $74CE,X
C1/FA26:	7B         	TDC
C1/FA27:	E2 20      	SEP #$20           ; 8-bit A
C1/FA29:	BD DB 74   	LDA $74DB,X
C1/FA2C:	20 67 6C   	JSR $6C67
C1/FA2F:	AE F6 7A   	LDX $7AF6
C1/FA32:	C2 20      	REP #$20
C1/FA34:	A5 28      	LDA $28
C1/FA36:	9D D0 74   	STA $74D0,X
C1/FA39:	7B         	TDC
C1/FA3A:	E2 20      	SEP #$20           ; 8-bit A
C1/FA3C:	60         	RTS

C1/FA3D:	AE F6 7A   	LDX $7AF6
C1/FA40:	A7 5B      	LDA [$5B]
C1/FA42:	9D D9 74   	STA $74D9,X
C1/FA45:	9E DA 74   	STZ $74DA,X
C1/FA48:	4C 09 FA   	JMP $FA09

C1/FA4B:	AE F6 7A   	LDX $7AF6
C1/FA4E:	20 19 E9   	JSR $E919
C1/FA51:	A7 5B      	LDA [$5B]
C1/FA53:	85 22      	STA $22
C1/FA55:	64 23      	STZ $23
C1/FA57:	C2 20      	REP #$20
C1/FA59:	BD D9 74   	LDA $74D9,X
C1/FA5C:	DD DC 74   	CMP $74DC,X
C1/FA5F:	90 08      	BCC $FA69
C1/FA61:	E6 5B      	INC $5B
C1/FA63:	7B         	TDC
C1/FA64:	99 D2 61   	STA $61D2,Y
C1/FA67:	80 20      	BRA $FA89

C1/FA69:	18         	CLC
C1/FA6A:	65 22      	ADC $22
C1/FA6C:	9D D9 74   	STA $74D9,X
C1/FA6F:	BD D0 74   	LDA $74D0,X
C1/FA72:	18         	CLC
C1/FA73:	65 28      	ADC $28
C1/FA75:	9D D0 74   	STA $74D0,X
C1/FA78:	A0 01 00   	LDY #$0001
C1/FA7B:	B7 5B      	LDA [$5B],Y
C1/FA7D:	29 FF 00   	AND #$00FF
C1/FA80:	85 22      	STA $22
C1/FA82:	A5 5B      	LDA $5B
C1/FA84:	38         	SEC
C1/FA85:	E5 22      	SBC $22
C1/FA87:	85 5B      	STA $5B
C1/FA89:	7B         	TDC
C1/FA8A:	E2 20      	SEP #$20           ; 8-bit A
C1/FA8C:	AE F6 7A   	LDX $7AF6
C1/FA8F:	60         	RTS

C1/FA90:	AE F6 7A   	LDX $7AF6
C1/FA93:	20 19 E9   	JSR $E919
C1/FA96:	A7 5B      	LDA [$5B]
C1/FA98:	85 22      	STA $22
C1/FA9A:	64 23      	STZ $23
C1/FA9C:	C2 20      	REP #$20
C1/FA9E:	BD D9 74   	LDA $74D9,X
C1/FAA1:	38         	SEC
C1/FAA2:	E5 22      	SBC $22
C1/FAA4:	9D D9 74   	STA $74D9,X
C1/FAA7:	10 11      	BPL $FABA
C1/FAA9:	E6 5B      	INC $5B
C1/FAAB:	AC F8 7A   	LDY $7AF8
C1/FAAE:	7B         	TDC
C1/FAAF:	99 C5 61   	STA $61C5,Y
C1/FAB2:	99 C7 61   	STA $61C7,Y
C1/FAB5:	99 D2 61   	STA $61D2,Y
C1/FAB8:	80 1A      	BRA $FAD4
C1/FABA:	BD D0 74   	LDA $74D0,X
C1/FABD:	18         	CLC
C1/FABE:	65 28      	ADC $28
C1/FAC0:	9D D0 74   	STA $74D0,X
C1/FAC3:	A0 01 00   	LDY #$0001
C1/FAC6:	B7 5B      	LDA [$5B],Y
C1/FAC8:	29 FF 00   	AND #$00FF
C1/FACB:	85 22      	STA $22
C1/FACD:	A5 5B      	LDA $5B
C1/FACF:	38         	SEC
C1/FAD0:	E5 22      	SBC $22
C1/FAD2:	85 5B      	STA $5B
C1/FAD4:	7B         	TDC
C1/FAD5:	E2 20      	SEP #$20           ; 8-bit A
C1/FAD7:	AE F6 7A   	LDX $7AF6
C1/FADA:	60         	RTS

C1/FADB:	AE F6 7A   	LDX $7AF6
C1/FADE:	A7 5B      	LDA [$5B]
C1/FAE0:	9D D8 74   	STA $74D8,X
C1/FAE3:	20 09 FA   	JSR $FA09
C1/FAE6:	C2 20      	REP #$20
C1/FAE8:	BD D8 74   	LDA $74D8,X
C1/FAEB:	29 FF 00   	AND #$00FF
C1/FAEE:	85 22      	STA $22
C1/FAF0:	BD D9 74   	LDA $74D9,X
C1/FAF3:	18         	CLC
C1/FAF4:	65 22      	ADC $22
C1/FAF6:	9D D9 74   	STA $74D9,X
C1/FAF9:	DD DC 74   	CMP $74DC,X
C1/FAFC:	90 04      	BCC $FB02
C1/FAFE:	E6 5B      	INC $5B
C1/FB00:	80 17      	BRA $FB19
C1/FB02:	A0 01 00   	LDY #$0001
C1/FB05:	B7 5B      	LDA [$5B],Y
C1/FB07:	29 FF 00   	AND #$00FF
C1/FB0A:	85 22      	STA $22
C1/FB0C:	D0 04      	BNE $FB12
C1/FB0E:	E6 5B      	INC $5B
C1/FB10:	80 07      	BRA $FB19
C1/FB12:	A5 5B      	LDA $5B
C1/FB14:	38         	SEC
C1/FB15:	E5 22      	SBC $22
C1/FB17:	85 5B      	STA $5B
C1/FB19:	7B         	TDC
C1/FB1A:	E2 20      	SEP #$20           ; 8-bit A
C1/FB1C:	60         	RTS

C1/FB1D:	AE F6 7A   	LDX $7AF6
C1/FB20:	C2 20      	REP #$20
C1/FB22:	BD DC 74   	LDA $74DC,X
C1/FB25:	85 24      	STA $24
C1/FB27:	7B         	TDC
C1/FB28:	E2 20      	SEP #$20           ; 8-bit A
C1/FB2A:	BD D8 74   	LDA $74D8,X
C1/FB2D:	20 67 6C   	JSR $6C67
C1/FB30:	AE F6 7A   	LDX $7AF6
C1/FB33:	C2 20      	REP #$20
C1/FB35:	A5 28      	LDA $28
C1/FB37:	9D D9 74   	STA $74D9,X
C1/FB3A:	E2 20      	SEP #$20           ; 8-bit A
C1/FB3C:	20 09 FA   	JSR $FA09
C1/FB3F:	A0 18 00   	LDY #$0018
C1/FB42:	84 24      	STY $24
C1/FB44:	BD D8 74   	LDA $74D8,X
C1/FB47:	18         	CLC
C1/FB48:	69 40      	ADC #$40
C1/FB4A:	0A         	ASL A
C1/FB4B:	18         	CLC
C1/FB4C:	69 90      	ADC #$90
C1/FB4E:	20 67 6C   	JSR $6C67
C1/FB51:	AE F6 7A   	LDX $7AF6
C1/FB54:	C2 20      	REP #$20
C1/FB56:	BD D0 74   	LDA $74D0,X
C1/FB59:	18         	CLC
C1/FB5A:	65 28      	ADC $28
C1/FB5C:	9D D0 74   	STA $74D0,X
C1/FB5F:	7B         	TDC
C1/FB60:	E2 20      	SEP #$20           ; 8-bit A
C1/FB62:	60         	RTS

C1/FB63:	20 1D FB   	JSR $FB1D
C1/FB66:	BD D7 74   	LDA $74D7,X
C1/FB69:	4A         	LSR A
C1/FB6A:	4A         	LSR A
C1/FB6B:	4A         	LSR A
C1/FB6C:	4A         	LSR A
C1/FB6D:	4A         	LSR A
C1/FB6E:	4A         	LSR A
C1/FB6F:	4A         	LSR A
C1/FB70:	85 22      	STA $22
C1/FB72:	A9 03      	LDA #$03
C1/FB74:	38         	SEC
C1/FB75:	E5 22      	SBC $22
C1/FB77:	18         	CLC
C1/FB78:	7D D8 74   	ADC $74D8,X
C1/FB7B:	9D D8 74   	STA $74D8,X
C1/FB7E:	C9 80      	CMP #$80
C1/FB80:	90 06      	BCC $FB88
C1/FB82:	C2 20      	REP #$20
C1/FB84:	E6 5B      	INC $5B
C1/FB86:	80 1C      	BRA $FBA4
C1/FB88:	C9 40 90   	CMP #$9040
C1/FB8B:	05 A9      	ORA $A9
C1/FB8D:	01 9D      	ORA ($9D,X)
C1/FB8F:	E7 64      	SBC [$64]
C1/FB91:	C2 20      	REP #$20
C1/FB93:	A0 01 00   	LDY #$0001
C1/FB96:	B7 5B      	LDA [$5B],Y
C1/FB98:	29 FF 00   	AND #$00FF
C1/FB9B:	85 22      	STA $22
C1/FB9D:	A5 5B      	LDA $5B
C1/FB9F:	38         	SEC
C1/FBA0:	E5 22      	SBC $22
C1/FBA2:	85 5B      	STA $5B
C1/FBA4:	7B         	TDC
C1/FBA5:	E2 20      	SEP #$20           ; 8-bit A
C1/FBA7:	60         	RTS

C1/FBA8:	AE F6 7A   	LDX $7AF6
C1/FBAB:	DE 8D 6F   	DEC $6F8D,X
C1/FBAE:	D0 21      	BNE $FBD1
C1/FBB0:	A7 5B      	LDA [$5B]
C1/FBB2:	9D 8D 6F   	STA $6F8D,X
C1/FBB5:	A0 01 00   	LDY #$0001
C1/FBB8:	B7 5B      	LDA [$5B],Y
C1/FBBA:	29 0F      	AND #$0F
C1/FBBC:	85 22      	STA $22
C1/FBBE:	FE 8C 6F   	INC $6F8C,X
C1/FBC1:	BD 8C 6F   	LDA $6F8C,X
C1/FBC4:	C5 22      	CMP $22
C1/FBC6:	D0 09      	BNE $FBD1
C1/FBC8:	B7 5B      	LDA [$5B],Y
C1/FBCA:	4A         	LSR A
C1/FBCB:	4A         	LSR A
C1/FBCC:	4A         	LSR A
C1/FBCD:	4A         	LSR A
C1/FBCE:	9D 8C 6F   	STA $6F8C,X
C1/FBD1:	A4 5B      	LDY $5B
C1/FBD3:	C8         	INY
C1/FBD4:	84 5B      	STY $5B
C1/FBD6:	60         	RTS

C1/FBD7:	AE F6 7A   	LDX $7AF6
C1/FBDA:	BD D2 74   	LDA $74D2,X
C1/FBDD:	0A         	ASL A
C1/FBDE:	0A         	ASL A
C1/FBDF:	85 22      	STA $22
C1/FBE1:	BD 7E 6F   	LDA $6F7E,X
C1/FBE4:	85 7D      	STA $7D
C1/FBE6:	BD 80 6F   	LDA $6F80,X
C1/FBE9:	85 7E      	STA $7E
C1/FBEB:	BD 82 6F   	LDA $6F82,X
C1/FBEE:	85 7F      	STA $7F
C1/FBF0:	BD 84 6F   	LDA $6F84,X
C1/FBF3:	85 80      	STA $80
C1/FBF5:	A5 7F      	LDA $7F
C1/FBF7:	C5 7D      	CMP $7D
C1/FBF9:	90 0F      	BCC $FC0A
C1/FBFB:	A5 7F      	LDA $7F
C1/FBFD:	18         	CLC
C1/FBFE:	65 22      	ADC $22
C1/FC00:	85 7F      	STA $7F
C1/FC02:	90 0D      	BCC $FC11
C1/FC04:	A9 F8      	LDA #$F8
C1/FC06:	85 7F      	STA $7F
C1/FC08:	80 07      	BRA $FC11
C1/FC0A:	A5 7F      	LDA $7F
C1/FC0C:	38         	SEC
C1/FC0D:	E5 22      	SBC $22
C1/FC0F:	85 7F      	STA $7F
C1/FC11:	20 91 6C   	JSR $6C91
C1/FC14:	AE F6 7A   	LDX $7AF6
C1/FC17:	A5 88      	LDA $88
C1/FC19:	9D D7 74   	STA $74D7,X
C1/FC1C:	A5 85      	LDA $85
C1/FC1E:	9D DB 74   	STA $74DB,X
C1/FC21:	C2 20      	REP #$20
C1/FC23:	A5 86      	LDA $86
C1/FC25:	9D DC 74   	STA $74DC,X
C1/FC28:	9E D9 74   	STZ $74D9,X
C1/FC2B:	7B         	TDC
C1/FC2C:	E2 20      	SEP #$20           ; 8-bit A
C1/FC2E:	A7 5B      	LDA [$5B]
C1/FC30:	9D D8 74   	STA $74D8,X
C1/FC33:	20 1D FB   	JSR $FB1D
C1/FC36:	60         	RTS

C1/FC37:	AE F6 7A   	LDX $7AF6
C1/FC3A:	A7 5B      	LDA [$5B]
C1/FC3C:	9D D5 74   	STA $74D5,X
C1/FC3F:	60         	RTS

; Animation Script Op $9A ($1A)
; Set "Is Facing Right" flag for animation thread

C1/FC40:	AE F6 7A   	LDX $7AF6         ; animation thread offset
C1/FC43:	BD 39 6A   	LDA $6A39,X       ; target index
C1/FC46:	10 11      	BPL $FC59         ; branch if character
C1/FC48:	29 0F      	AND #$0F          ; remove "monster" bit
C1/FC4A:	38         	SEC               ; set carry
C1/FC4B:	E9 04      	SBC #$04          ; reduce to 0-5 monster ID
C1/FC4D:	0A         	ASL A             ; x2
C1/FC4E:	A8         	TAY               ; monster index
C1/FC4F:	B9 F3 80   	LDA $80F3,Y       ; flipped currently
C1/FC52:	59 7E 61   	EOR $617E,Y       ; toggle with flipped permanently
C1/FC55:	49 01      	EOR #$01          ; toggle horizontal facing direction
C1/FC57:	80 04      	BRA $FC5D         ; branch

C1/FC59:	A8         	TAY               ; character index
C1/FC5A:	B9 10 7B   	LDA $7B10,Y       ; character sprite flipped flags

C1/FC5D:	0A         	ASL A
C1/FC5E:	0A         	ASL A
C1/FC5F:	0A         	ASL A
C1/FC60:	0A         	ASL A
C1/FC61:	0A         	ASL A
C1/FC62:	0A         	ASL A             ; shift up to top 2 bits
C1/FC63:	29 40      	AND #$40          ; keep only "horizontal" flip bit
C1/FC65:	9D 87 6F   	STA $6F87,X       ; "is facing right"
C1/FC68:	A4 5B      	LDY $5B           ; script index
C1/FC6A:	88         	DEY               ; -1
C1/FC6B:	84 5B      	STY $5B           ; no command args
C1/FC6D:	60         	RTS

C1/FC6E:	64 22      	STZ $22           ; zero scratch RAM
C1/FC70:	64 24      	STZ $24           ; zero scratch RAM
C1/FC72:	64 26      	STZ $26           ; zero scratch RAM
C1/FC74:	A5 14      	LDA $14           ; input arg 1
C1/FC76:	29 1F 00   	AND #$001F        ; modulo 32
C1/FC79:	85 22      	STA $22           ; save ^
C1/FC7B:	A5 16      	LDA $16           ; input arg 2
C1/FC7D:	29 1F 00   	AND #$001F        ; modulo 32
C1/FC80:	0A         	ASL A
C1/FC81:	0A         	ASL A
C1/FC82:	0A         	ASL A
C1/FC83:	0A         	ASL A
C1/FC84:	0A         	ASL A             ; x32
C1/FC85:	85 24      	STA $24           ; (save {arg1} % 32) * 32
C1/FC87:	A5 18      	LDA $18           ; input arg 3
C1/FC89:	29 1F 00   	AND #$001F        ; modulo 32
C1/FC8C:	0A         	ASL A
C1/FC8D:	0A         	ASL A
C1/FC8E:	0A         	ASL A
C1/FC8F:	0A         	ASL A
C1/FC90:	0A         	ASL A
C1/FC91:	0A         	ASL A
C1/FC92:	0A         	ASL A
C1/FC93:	0A         	ASL A
C1/FC94:	0A         	ASL A
C1/FC95:	0A         	ASL A             ; x1024
C1/FC96:	85 26      	STA $26           ; save ^
C1/FC98:	60         	RTS

C1/FC99:	29 FF 7F   	AND #$7FFF
C1/FC9C:	85 2A      	STA $2A
C1/FC9E:	29 1F 00   	AND #$001F
C1/FCA1:	38         	SEC
C1/FCA2:	E5 22      	SBC $22
C1/FCA4:	85 28      	STA $28
C1/FCA6:	29 E0 7F   	AND #$7FE0
C1/FCA9:	D0 0B      	BNE $FCB6
C1/FCAB:	A5 2A      	LDA $2A
C1/FCAD:	29 E0 7F   	AND #$7FE0
C1/FCB0:	05 28      	ORA $28
C1/FCB2:	85 2A      	STA $2A
C1/FCB4:	80 07      	BRA $FCBD
C1/FCB6:	A5 2A      	LDA $2A
C1/FCB8:	29 E0 7F   	AND #$7FE0
C1/FCBB:	85 2A      	STA $2A
C1/FCBD:	A5 2A      	LDA $2A
C1/FCBF:	29 E0 03   	AND #$03E0
C1/FCC2:	38         	SEC
C1/FCC3:	E5 24      	SBC $24
C1/FCC5:	85 28      	STA $28
C1/FCC7:	29 1F 7C   	AND #$7C1F
C1/FCCA:	D0 0B      	BNE $FCD7
C1/FCCC:	A5 2A      	LDA $2A
C1/FCCE:	29 1F 7C   	AND #$7C1F
C1/FCD1:	05 28      	ORA $28
C1/FCD3:	85 2A      	STA $2A
C1/FCD5:	80 07      	BRA $FCDE
C1/FCD7:	A5 2A      	LDA $2A
C1/FCD9:	29 1F 7C   	AND #$7C1F
C1/FCDC:	85 2A      	STA $2A
C1/FCDE:	A5 2A      	LDA $2A
C1/FCE0:	29 00 7C   	AND #$7C00
C1/FCE3:	38         	SEC
C1/FCE4:	E5 26      	SBC $26
C1/FCE6:	85 28      	STA $28
C1/FCE8:	29 FF 83   	AND #$83FF
C1/FCEB:	D0 0B      	BNE $FCF8
C1/FCED:	A5 2A      	LDA $2A
C1/FCEF:	29 FF 03   	AND #$03FF
C1/FCF2:	05 28      	ORA $28
C1/FCF4:	85 2A      	STA $2A
C1/FCF6:	80 07      	BRA $FCFF
C1/FCF8:	A5 2A      	LDA $2A
C1/FCFA:	29 FF 03   	AND #$03FF
C1/FCFD:	85 2A      	STA $2A
C1/FCFF:	60         	RTS

C1/FD00:	29 FF 7F   	AND #$7FFF
C1/FD03:	85 2A      	STA $2A
C1/FD05:	29 1F 00   	AND #$001F
C1/FD08:	18         	CLC
C1/FD09:	65 22      	ADC $22
C1/FD0B:	85 28      	STA $28
C1/FD0D:	29 E0 7F   	AND #$7FE0
C1/FD10:	D0 0B      	BNE $FD1D
C1/FD12:	A5 2A      	LDA $2A
C1/FD14:	29 E0 7F   	AND #$7FE0
C1/FD17:	05 28      	ORA $28
C1/FD19:	85 2A      	STA $2A
C1/FD1B:	80 07      	BRA $FD24
C1/FD1D:	A5 2A      	LDA $2A
C1/FD1F:	09 1F 00   	ORA #$001F
C1/FD22:	85 2A      	STA $2A
C1/FD24:	A5 2A      	LDA $2A
C1/FD26:	29 E0 03   	AND #$03E0
C1/FD29:	18         	CLC
C1/FD2A:	65 24      	ADC $24
C1/FD2C:	85 28      	STA $28
C1/FD2E:	29 1F 7C   	AND #$7C1F
C1/FD31:	D0 0B      	BNE $FD3E
C1/FD33:	A5 2A      	LDA $2A
C1/FD35:	29 1F 7C   	AND #$7C1F
C1/FD38:	05 28      	ORA $28
C1/FD3A:	85 2A      	STA $2A
C1/FD3C:	80 07      	BRA $FD45
C1/FD3E:	A5 2A      	LDA $2A
C1/FD40:	09 E0 03   	ORA #$03E0
C1/FD43:	85 2A      	STA $2A
C1/FD45:	A5 2A      	LDA $2A
C1/FD47:	29 00 7C   	AND #$7C00
C1/FD4A:	18         	CLC
C1/FD4B:	65 26      	ADC $26
C1/FD4D:	85 28      	STA $28
C1/FD4F:	29 FF 83   	AND #$83FF
C1/FD52:	D0 0B      	BNE $FD5F
C1/FD54:	A5 2A      	LDA $2A
C1/FD56:	29 FF 03   	AND #$03FF
C1/FD59:	05 28      	ORA $28
C1/FD5B:	85 2A      	STA $2A
C1/FD5D:	80 07      	BRA $FD66
C1/FD5F:	A5 2A      	LDA $2A
C1/FD61:	09 00 7C   	ORA #$7C00
C1/FD64:	85 2A      	STA $2A
C1/FD66:	60         	RTS

C1/FD67:	A0 01 00   	LDY #$0001
C1/FD6A:	B1 76      	LDA ($76),Y
C1/FD6C:	C9 1B      	CMP #$1B
C1/FD6E:	F0 07      	BEQ $FD77
C1/FD70:	C9 1F      	CMP #$1F
C1/FD72:	F0 03      	BEQ $FD77
C1/FD74:	EE EF E9   	INC $E9EF
C1/FD77:	AD 8C 62   	LDA $628C
C1/FD7A:	D0 13      	BNE $FD8F
C1/FD7C:	20 F3 0D   	JSR $0DF3
C1/FD7F:	22 FB 01 C1	JSL $C101FB
C1/FD83:	22 FB 01 C1	JSL $C101FB
C1/FD87:	22 FB 01 C1	JSL $C101FB
C1/FD8B:	22 FB 01 C1	JSL $C101FB
C1/FD8F:	EE EF E9   	INC $E9EF
C1/FD92:	A0 01 00   	LDY #$0001
C1/FD95:	B1 76      	LDA ($76),Y
C1/FD97:	C2 20      	REP #$20
C1/FD99:	0A         	ASL A
C1/FD9A:	AA         	TAX
C1/FD9B:	BF 00 98 D0	LDA $D09800,X
C1/FD9F:	85 8F      	STA $8F
C1/FDA1:	7B         	TDC
C1/FDA2:	E2 20      	SEP #$20           ; 8-bit A
C1/FDA4:	A9 D0      	LDA #$D0
C1/FDA6:	85 91      	STA $91
C1/FDA8:	A7 8F      	LDA [$8F]
C1/FDAA:	C9 FF      	CMP #$FF
C1/FDAC:	F0 0C      	BEQ $FDBA
C1/FDAE:	0A         	ASL A
C1/FDAF:	AA         	TAX
C1/FDB0:	FC BE FD   	JSR ($FDBE,X)  ; Pointer table
C1/FDB3:	A4 8F      	LDY $8F
C1/FDB5:	C8         	INY
C1/FDB6:	84 8F      	STY $8F
C1/FDB8:	80 EE      	BRA $FDA8
C1/FDBA:	9C EF E9   	STZ $E9EF
C1/FDBD:	60         	RTS

C1/FDBE:	0C97
C1/FDC0:	C196
C1/FDC2:	E3FF
C1/FDC4:	78FF
C1/FDC6:	78FF
C1/FDC8:	78FF
C1/FDCA:	78FF
C1/FDCC:	60FF
C1/FDCE:	60FF
C1/FDD0:	60FF
C1/FDD2:	60FF
C1/FDD4:	60FF
C1/FDD6:	60FF
C1/FDD8:	2DFE
C1/FDDA:	47FF
C1/FDDC:	55FF
C1/FDDE:	AD96
C1/FDE0:	AA96
C1/FDE2:	B9FE
C1/FDE4:	E8FD
C1/FDE6:	EDFD

C1/FDE8:	22 E2 BA C2 JSL $C2BAE2
C1/FDEC:	60          RTS

C1/FDED:	22 4B BA C2 JSL $C2BA4B
C1/FDF1:	20 8F 4A    JSR $4A8F
C1/FDF4:	22 87 01 C1 JSL $C10187
C1/FDF8:	60          RTS

C1/FDF9:	0E0E
C1/FDFB:	1C0E
C1/FDFD:	2A0E
C1/FDFF:	380E
C1/FE01:	460E
C1/FE03:	540E
C1/FE05:	620E
C1/FE07:	700E
C1/FE09:	7E0E
C1/FE0B:	8C0E
C1/FE0D:	9A0E
C1/FE0F:	A80E
C1/FE11:	B60E
C1/FE13:	C40E
C1/FE15:	D20E
C1/FE17:	1410
C1/FE19:	0015
C1/FE1B:	0E15
C1/FE1D:	EE0E
C1/FE1F:	EE0E

; Clear Current Battle Script Data

C1/FE21:	7B         	TDC               ; zero A/B
C1/FE22:	AA         	TAX               ; zero X
C1/FE23:	9D 6E 2C   	STA $2C6E,X       ; zero battle script data
C1/FE26:	E8         	INX               ; next byte
C1/FE27:	E0 10 00   	CPX #$0010        ; clear 16 bytes
C1/FE2A:	D0 F7      	BNE $FE23         ; loop till done
C1/FE2C:	6B         	RTL

C1/FE2D:	22 21 FE C1 JSL $C1FE21
C1/FE31:	A0 01 00    LDY #$0001
C1/FE34:	B7 8F       LDA [$8F],Y
C1/FE36:	C2 20       REP #$20
C1/FE38:	0A          ASL A
C1/FE39:	AA          TAX
C1/FE3A:	BF F9 FD C1 LDA $C1FDF9,X
C1/FE3E:	85 1E       STA $1E
C1/FE40:	7B          TDC
C1/FE41:	E2 20       SEP #$20           ; 8-bit A
C1/FE43:	C8          INY
C1/FE44:	B7 8F       LDA [$8F],Y
C1/FE46:	20 99 FE    JSR $FE99
C1/FE49:	8D 6F 2C    STA $2C6F
C1/FE4C:	C8          INY
C1/FE4D:	B7 8F       LDA [$8F],Y
C1/FE4F:	10 29       BPL $FE7A
C1/FE51:	AD 6F 2C    LDA $2C6F
C1/FE54:	20 09 1A    JSR $1A09
C1/FE57:	8D 70 2C    STA $2C70
C1/FE5A:	8D 72 2C    STA $2C72
C1/FE5D:	8D 3D 61    STA $613D
C1/FE60:	9C 3E 61    STZ $613E
C1/FE63:	A9 00       LDA #$00
C1/FE65:	8D 6E 2C    STA $2C6E
C1/FE68:	B7 8F       LDA [$8F],Y
C1/FE6A:	C9 FF       CMP #$FF
C1/FE6C:	D0 1D       BNE $FE8B
C1/FE6E:	A9 80       LDA #$80
C1/FE70:	8D 6E 2C    STA $2C6E
C1/FE73:	A9 04       LDA #$04
C1/FE75:	8D 6F 2C    STA $2C6F
C1/FE78:	80 11       BRA $FE8B
C1/FE7A:	8D 71 2C    STA $2C71
C1/FE7D:	8D 73 2C    STA $2C73
C1/FE80:	8D 3E 61    STA $613E
C1/FE83:	9C 3D 61    STZ $613D
C1/FE86:	A9 40       LDA #$40
C1/FE88:	8D 6E 2C    STA $2C6E
C1/FE8B:	C2 20       REP #$20
C1/FE8D:	E6 8F       INC $8F
C1/FE8F:	E6 8F       INC $8F
C1/FE91:	E6 8F       INC $8F
C1/FE93:	7B          TDC
C1/FE94:	E2 20       SEP #$20           ; 8-bit A
C1/FE96:	4C 84 B8    JMP $B884

C1/FE99:	85 10       STA $10
C1/FE9B:	7B          TDC
C1/FE9C:	AA          TAX
C1/FE9D:	64 12       STZ $12
C1/FE9F:	A5 10       LDA $10
C1/FEA1:	DD C6 2E    CMP $2EC6,X
C1/FEA4:	F0 0E       BEQ $FEB4
C1/FEA6:	E6 12       INC $12
C1/FEA8:	8A          TXA
C1/FEA9:	18          CLC
C1/FEAA:	69 20       ADC #$20
C1/FEAC:	AA          TAX
C1/FEAD:	E0 80 00    CPX #$0080
C1/FEB0:	D0 ED       BNE $FE9F
C1/FEB2:	7B          TDC
C1/FEB3:	60          RTS
C1/FEB4:	A5 12       LDA $12
C1/FEB6:	29 03       AND #$03
C1/FEB8:	60          RTS

C1/FEB9:	7B         	TDC
C1/FEBA:	AA         	TAX
C1/FEBB:	A8         	TAY
C1/FEBC:	AD 92 61   	LDA $6192
C1/FEBF:	3F 01 1A C1	AND $C11A01,X
C1/FEC3:	F0 3D      	BEQ $FF02
C1/FEC5:	B9 AE 2E   	LDA $2EAE,Y
C1/FEC8:	C9 FF      	CMP #$FF
C1/FECA:	F0 36      	BEQ $FF02
C1/FECC:	AD 8D 62   	LDA $628D
C1/FECF:	D0 09      	BNE $FEDA
C1/FED1:	AD BA 64   	LDA $64BA
C1/FED4:	F0 04      	BEQ $FEDA
C1/FED6:	A9 16      	LDA #$16
C1/FED8:	80 15      	BRA $FEEF
C1/FEDA:	B9 C7 2E   	LDA $2EC7,Y
C1/FEDD:	D0 07      	BNE $FEE6
C1/FEDF:	B9 BD 2E   	LDA $2EBD,Y
C1/FEE2:	29 C0      	AND #$C0
C1/FEE4:	F0 04      	BEQ $FEEA
C1/FEE6:	A9 17      	LDA #$17
C1/FEE8:	80 05      	BRA $FEEF
C1/FEEA:	B9 AE 2E   	LDA $2EAE,Y
C1/FEED:	29 1F      	AND #$1F

C1/FEEF:	0A         	ASL A
C1/FEF0:	1A         	INC A
C1/FEF1:	5A         	PHY
C1/FEF2:	A8         	TAY
C1/FEF3:	C2 20      	REP #$20
C1/FEF5:	B7 8F      	LDA [$8F],Y
C1/FEF7:	85 24      	STA $24
C1/FEF9:	7B         	TDC
C1/FEFA:	E2 20      	SEP #$20           ; 8-bit A
C1/FEFC:	DA         	PHX
C1/FEFD:	20 1B FF   	JSR $FF1B
C1/FF00:	FA         	PLX
C1/FF01:	7A         	PLY
C1/FF02:	E8         	INX
C1/FF03:	98         	TYA
C1/FF04:	18         	CLC
C1/FF05:	69 20      	ADC #$20
C1/FF07:	A8         	TAY
C1/FF08:	C0 80 00   	CPY #$0080
C1/FF0B:	D0 AF      	BNE $FEBC
C1/FF0D:	C2 20      	REP #$20
C1/FF0F:	A5 8F      	LDA $8F
C1/FF11:	18         	CLC
C1/FF12:	69 30 00   	ADC #$0030
C1/FF15:	85 8F      	STA $8F
C1/FF17:	7B         	TDC
C1/FF18:	E2 20      	SEP #$20           ; 8-bit A
C1/FF1A:	60         	RTS

C1/FF1B:	8A         	TXA
C1/FF1C:	85 10      	STA $10
C1/FF1E:	8D 3F 61   	STA $613F
C1/FF21:	C2 20      	REP #$20
C1/FF23:	0A         	ASL A
C1/FF24:	0A         	ASL A
C1/FF25:	0A         	ASL A
C1/FF26:	0A         	ASL A
C1/FF27:	0A         	ASL A
C1/FF28:	0A         	ASL A
C1/FF29:	0A         	ASL A
C1/FF2A:	AA         	TAX
C1/FF2B:	A9 01 01   	LDA #$0101
C1/FF2E:	85 22      	STA $22
C1/FF30:	7B         	TDC
C1/FF31:	E2 20      	SEP #$20           ; 8-bit A
C1/FF33:	A5 10      	LDA $10
C1/FF35:	8D 6F 2C   	STA $2C6F
C1/FF38:	9C 6E 2C   	STZ $2C6E
C1/FF3B:	A9 D0      	LDA #$D0
C1/FF3D:	85 26      	STA $26
C1/FF3F:	20 C4 B1   	JSR $B1C4
C1/FF42:	60         	RTS

; Long access from bank $C2 enemy script animation execution
C1/FF43:	20 47 FF   	JSR $FF47
C1/FF46:	6B         	RTL

; Presumably, this clears animation data to have blank slate for new one
C1/FF47:	22 24 91 C1	JSL $C19124
C1/FF4B:	20 33 A0   	JSR $A033        ; clear all sprite animation frame data
C1/FF4E:	4C 9E 9C   	JMP $9C9E        ; clear all animation thread data

C1/FF51:	20 55 FF   	JSR $FF55
C1/FF54:	6B         	RTL

; Execute pre-setup animation

C1/FF55:	20 53 C6   	JSR $C653        ; run animation [?]
C1/FF58:	9C 7D 62   	STZ $627D        ; clear animation init data function [?]
C1/FF5B:	22 37 91 C1	JSL $C19137
C1/FF5F:	60         	RTS

C1/FF60:	A7 8F       LDA [$8F]
C1/FF62:	38          SEC
C1/FF63:	E9 03       SBC #$03
C1/FF65:	48          PHA
C1/FF66:	A0 01 00    LDY #$0001
C1/FF69:	B7 8F       LDA [$8F],Y
C1/FF6B:	18          CLC
C1/FF6C:	69 04       ADC #$04
C1/FF6E:	85 10       STA $10
C1/FF70:	09 80       ORA #$80
C1/FF72:	8D 3F 61    STA $613F
C1/FF75:	4C A9 FF    JMP $FFA9

C1/FF78:	A7 8F       LDA [$8F]
C1/FF7A:	38          SEC
C1/FF7B:	E9 03       SBC #$03
C1/FF7D:	48          PHA
C1/FF7E:	A0 01 00    LDY #$0001
C1/FF81:	B7 8F       LDA [$8F],Y
C1/FF83:	85 10       STA $10
C1/FF85:	7B          TDC
C1/FF86:	AA          TAX
C1/FF87:	A8          TAY
C1/FF88:	B9 C6 2E    LDA $2EC6,Y
C1/FF8B:	C5 10       CMP $10
C1/FF8D:	F0 14       BEQ $FFA3
C1/FF8F:	98          TYA
C1/FF90:	18          CLC
C1/FF91:	69 20       ADC #$20
C1/FF93:	A8          TAY
C1/FF94:	E8          INX
C1/FF95:	E0 04 00    CPX #$0004
C1/FF98:	D0 EE       BNE $FF88
C1/FF9A:	68          PLA
C1/FF9B:	A4 8F       LDY $8F
C1/FF9D:	C8          INY
C1/FF9E:	C8          INY
C1/FF9F:	C8          INY
C1/FFA0:	84 8F       STY $8F
C1/FFA2:	60          RTS

C1/FFA3:	8A         	TXA
C1/FFA4:	85 10      	STA $10
C1/FFA6:	8D 3F 61   	STA $613F
C1/FFA9:	68         	PLA
C1/FFAA:	C2 20      	REP #$20
C1/FFAC:	0A         	ASL A
C1/FFAD:	0A         	ASL A
C1/FFAE:	0A         	ASL A
C1/FFAF:	0A         	ASL A
C1/FFB0:	0A         	ASL A
C1/FFB1:	0A         	ASL A
C1/FFB2:	0A         	ASL A
C1/FFB3:	AA         	TAX
C1/FFB4:	A9 01 01   	LDA #$0101
C1/FFB7:	85 22      	STA $22
C1/FFB9:	E6 8F      	INC $8F
C1/FFBB:	E6 8F      	INC $8F
C1/FFBD:	A7 8F      	LDA [$8F]
C1/FFBF:	85 24      	STA $24
C1/FFC1:	E6 8F      	INC $8F
C1/FFC3:	7B         	TDC
C1/FFC4:	E2 20      	SEP #$20           ; 8-bit A
C1/FFC6:	A5 10      	LDA $10
C1/FFC8:	8D 6F 2C   	STA $2C6F
C1/FFCB:	C9 04      	CMP #$04
C1/FFCD:	90 08      	BCC $FFD7
C1/FFCF:	09 80      	ORA #$80
C1/FFD1:	85 10      	STA $10
C1/FFD3:	A9 C0      	LDA #$C0
C1/FFD5:	80 01      	BRA $FFD8
C1/FFD7:	7B         	TDC
C1/FFD8:	8D 6E 2C   	STA $2C6E
C1/FFDB:	A9 D0      	LDA #$D0
C1/FFDD:	85 26      	STA $26
C1/FFDF:	20 C4 B1   	JSR $B1C4
C1/FFE2:	60         	RTS

C1/FFE3:	60         	RTS

C1/FFE4:	60         	RTS

C1/FFE5:	FFFFFFFF
C1/FFE9:	FFFFFFFF
C1/FFED:	FFFFFFFF
C1/FFF1:	FFFFFFFF
C1/FFF5:	FFFFFFFF
C1/FFF9:	FFFFFFFF
C1/FFFD:	FFFFFF
